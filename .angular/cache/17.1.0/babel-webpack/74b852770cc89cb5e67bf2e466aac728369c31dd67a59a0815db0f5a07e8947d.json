{"ast":null,"code":"/**\n * @license Angular v17.1.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nconst _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' +\n// 1: \":not(\"\n'(([\\\\.\\\\#]?)[-\\\\w]+)|' +\n// 2: \"tag\"; 3: \".\"/\"#\";\n// \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n// 4: attribute; 5: attribute_string; 6: attribute_value\n'(?:\\\\[([-.\\\\w*\\\\\\\\$]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' +\n// \"[name]\", \"[name=value]\",\n// \"[name=\"value\"]\",\n// \"[name='value']\"\n'(\\\\))|' +\n// 7: \")\"\n'(\\\\s*,\\\\s*)',\n// 8: \",\"\n'g');\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nclass CssSelector {\n  constructor() {\n    this.element = null;\n    this.classNames = [];\n    /**\n     * The selectors are encoded in pairs where:\n     * - even locations are attribute names\n     * - odd locations are attribute values.\n     *\n     * Example:\n     * Selector: `[key1=value1][key2]` would parse to:\n     * ```\n     * ['key1', 'value1', 'key2', '']\n     * ```\n     */\n    this.attrs = [];\n    this.notSelectors = [];\n  }\n  static parse(selector) {\n    const results = [];\n    const _addResult = (res, cssSel) => {\n      if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {\n        cssSel.element = '*';\n      }\n      res.push(cssSel);\n    };\n    let cssSelector = new CssSelector();\n    let match;\n    let current = cssSelector;\n    let inNot = false;\n    _SELECTOR_REGEXP.lastIndex = 0;\n    while (match = _SELECTOR_REGEXP.exec(selector)) {\n      if (match[1 /* SelectorRegexp.NOT */]) {\n        if (inNot) {\n          throw new Error('Nesting :not in a selector is not allowed');\n        }\n        inNot = true;\n        current = new CssSelector();\n        cssSelector.notSelectors.push(current);\n      }\n      const tag = match[2 /* SelectorRegexp.TAG */];\n      if (tag) {\n        const prefix = match[3 /* SelectorRegexp.PREFIX */];\n        if (prefix === '#') {\n          // #hash\n          current.addAttribute('id', tag.slice(1));\n        } else if (prefix === '.') {\n          // Class\n          current.addClassName(tag.slice(1));\n        } else {\n          // Element\n          current.setElement(tag);\n        }\n      }\n      const attribute = match[4 /* SelectorRegexp.ATTRIBUTE */];\n      if (attribute) {\n        current.addAttribute(current.unescapeAttribute(attribute), match[6 /* SelectorRegexp.ATTRIBUTE_VALUE */]);\n      }\n      if (match[7 /* SelectorRegexp.NOT_END */]) {\n        inNot = false;\n        current = cssSelector;\n      }\n      if (match[8 /* SelectorRegexp.SEPARATOR */]) {\n        if (inNot) {\n          throw new Error('Multiple selectors in :not are not supported');\n        }\n        _addResult(results, cssSelector);\n        cssSelector = current = new CssSelector();\n      }\n    }\n    _addResult(results, cssSelector);\n    return results;\n  }\n  /**\n   * Unescape `\\$` sequences from the CSS attribute selector.\n   *\n   * This is needed because `$` can have a special meaning in CSS selectors,\n   * but we might want to match an attribute that contains `$`.\n   * [MDN web link for more\n   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n   * @param attr the attribute to unescape.\n   * @returns the unescaped string.\n   */\n  unescapeAttribute(attr) {\n    let result = '';\n    let escaping = false;\n    for (let i = 0; i < attr.length; i++) {\n      const char = attr.charAt(i);\n      if (char === '\\\\') {\n        escaping = true;\n        continue;\n      }\n      if (char === '$' && !escaping) {\n        throw new Error(`Error in attribute selector \"${attr}\". ` + `Unescaped \"$\" is not supported. Please escape with \"\\\\$\".`);\n      }\n      escaping = false;\n      result += char;\n    }\n    return result;\n  }\n  /**\n   * Escape `$` sequences from the CSS attribute selector.\n   *\n   * This is needed because `$` can have a special meaning in CSS selectors,\n   * with this method we are escaping `$` with `\\$'.\n   * [MDN web link for more\n   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n   * @param attr the attribute to escape.\n   * @returns the escaped string.\n   */\n  escapeAttribute(attr) {\n    return attr.replace(/\\\\/g, '\\\\\\\\').replace(/\\$/g, '\\\\$');\n  }\n  isElementSelector() {\n    return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;\n  }\n  hasElementSelector() {\n    return !!this.element;\n  }\n  setElement(element = null) {\n    this.element = element;\n  }\n  getAttrs() {\n    const result = [];\n    if (this.classNames.length > 0) {\n      result.push('class', this.classNames.join(' '));\n    }\n    return result.concat(this.attrs);\n  }\n  addAttribute(name, value = '') {\n    this.attrs.push(name, value && value.toLowerCase() || '');\n  }\n  addClassName(name) {\n    this.classNames.push(name.toLowerCase());\n  }\n  toString() {\n    let res = this.element || '';\n    if (this.classNames) {\n      this.classNames.forEach(klass => res += `.${klass}`);\n    }\n    if (this.attrs) {\n      for (let i = 0; i < this.attrs.length; i += 2) {\n        const name = this.escapeAttribute(this.attrs[i]);\n        const value = this.attrs[i + 1];\n        res += `[${name}${value ? '=' + value : ''}]`;\n      }\n    }\n    this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);\n    return res;\n  }\n}\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nclass SelectorMatcher {\n  constructor() {\n    this._elementMap = new Map();\n    this._elementPartialMap = new Map();\n    this._classMap = new Map();\n    this._classPartialMap = new Map();\n    this._attrValueMap = new Map();\n    this._attrValuePartialMap = new Map();\n    this._listContexts = [];\n  }\n  static createNotMatcher(notSelectors) {\n    const notMatcher = new SelectorMatcher();\n    notMatcher.addSelectables(notSelectors, null);\n    return notMatcher;\n  }\n  addSelectables(cssSelectors, callbackCtxt) {\n    let listContext = null;\n    if (cssSelectors.length > 1) {\n      listContext = new SelectorListContext(cssSelectors);\n      this._listContexts.push(listContext);\n    }\n    for (let i = 0; i < cssSelectors.length; i++) {\n      this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n    }\n  }\n  /**\n   * Add an object that can be found later on by calling `match`.\n   * @param cssSelector A css selector\n   * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n   */\n  _addSelectable(cssSelector, callbackCtxt, listContext) {\n    let matcher = this;\n    const element = cssSelector.element;\n    const classNames = cssSelector.classNames;\n    const attrs = cssSelector.attrs;\n    const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n    if (element) {\n      const isTerminal = attrs.length === 0 && classNames.length === 0;\n      if (isTerminal) {\n        this._addTerminal(matcher._elementMap, element, selectable);\n      } else {\n        matcher = this._addPartial(matcher._elementPartialMap, element);\n      }\n    }\n    if (classNames) {\n      for (let i = 0; i < classNames.length; i++) {\n        const isTerminal = attrs.length === 0 && i === classNames.length - 1;\n        const className = classNames[i];\n        if (isTerminal) {\n          this._addTerminal(matcher._classMap, className, selectable);\n        } else {\n          matcher = this._addPartial(matcher._classPartialMap, className);\n        }\n      }\n    }\n    if (attrs) {\n      for (let i = 0; i < attrs.length; i += 2) {\n        const isTerminal = i === attrs.length - 2;\n        const name = attrs[i];\n        const value = attrs[i + 1];\n        if (isTerminal) {\n          const terminalMap = matcher._attrValueMap;\n          let terminalValuesMap = terminalMap.get(name);\n          if (!terminalValuesMap) {\n            terminalValuesMap = new Map();\n            terminalMap.set(name, terminalValuesMap);\n          }\n          this._addTerminal(terminalValuesMap, value, selectable);\n        } else {\n          const partialMap = matcher._attrValuePartialMap;\n          let partialValuesMap = partialMap.get(name);\n          if (!partialValuesMap) {\n            partialValuesMap = new Map();\n            partialMap.set(name, partialValuesMap);\n          }\n          matcher = this._addPartial(partialValuesMap, value);\n        }\n      }\n    }\n  }\n  _addTerminal(map, name, selectable) {\n    let terminalList = map.get(name);\n    if (!terminalList) {\n      terminalList = [];\n      map.set(name, terminalList);\n    }\n    terminalList.push(selectable);\n  }\n  _addPartial(map, name) {\n    let matcher = map.get(name);\n    if (!matcher) {\n      matcher = new SelectorMatcher();\n      map.set(name, matcher);\n    }\n    return matcher;\n  }\n  /**\n   * Find the objects that have been added via `addSelectable`\n   * whose css selector is contained in the given css selector.\n   * @param cssSelector A css selector\n   * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n   * @return boolean true if a match was found\n   */\n  match(cssSelector, matchedCallback) {\n    let result = false;\n    const element = cssSelector.element;\n    const classNames = cssSelector.classNames;\n    const attrs = cssSelector.attrs;\n    for (let i = 0; i < this._listContexts.length; i++) {\n      this._listContexts[i].alreadyMatched = false;\n    }\n    result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n    result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;\n    if (classNames) {\n      for (let i = 0; i < classNames.length; i++) {\n        const className = classNames[i];\n        result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n        result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;\n      }\n    }\n    if (attrs) {\n      for (let i = 0; i < attrs.length; i += 2) {\n        const name = attrs[i];\n        const value = attrs[i + 1];\n        const terminalValuesMap = this._attrValueMap.get(name);\n        if (value) {\n          result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n        }\n        result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n        const partialValuesMap = this._attrValuePartialMap.get(name);\n        if (value) {\n          result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n        }\n        result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n      }\n    }\n    return result;\n  }\n  /** @internal */\n  _matchTerminal(map, name, cssSelector, matchedCallback) {\n    if (!map || typeof name !== 'string') {\n      return false;\n    }\n    let selectables = map.get(name) || [];\n    const starSelectables = map.get('*');\n    if (starSelectables) {\n      selectables = selectables.concat(starSelectables);\n    }\n    if (selectables.length === 0) {\n      return false;\n    }\n    let selectable;\n    let result = false;\n    for (let i = 0; i < selectables.length; i++) {\n      selectable = selectables[i];\n      result = selectable.finalize(cssSelector, matchedCallback) || result;\n    }\n    return result;\n  }\n  /** @internal */\n  _matchPartial(map, name, cssSelector, matchedCallback) {\n    if (!map || typeof name !== 'string') {\n      return false;\n    }\n    const nestedSelector = map.get(name);\n    if (!nestedSelector) {\n      return false;\n    }\n    // TODO(perf): get rid of recursion and measure again\n    // TODO(perf): don't pass the whole selector into the recursion,\n    // but only the not processed parts\n    return nestedSelector.match(cssSelector, matchedCallback);\n  }\n}\nclass SelectorListContext {\n  constructor(selectors) {\n    this.selectors = selectors;\n    this.alreadyMatched = false;\n  }\n}\n// Store context to pass back selector and context when a selector is matched\nclass SelectorContext {\n  constructor(selector, cbContext, listContext) {\n    this.selector = selector;\n    this.cbContext = cbContext;\n    this.listContext = listContext;\n    this.notSelectors = selector.notSelectors;\n  }\n  finalize(cssSelector, callback) {\n    let result = true;\n    if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n      const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n      result = !notMatcher.match(cssSelector, null);\n    }\n    if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n      if (this.listContext) {\n        this.listContext.alreadyMatched = true;\n      }\n      callback(this.selector, this.cbContext);\n    }\n    return result;\n  }\n}\n\n// Attention:\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nconst emitDistinctChangesOnlyDefaultValue = true;\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n/** Flags describing an input for a directive. */\nvar InputFlags;\n(function (InputFlags) {\n  InputFlags[InputFlags[\"None\"] = 0] = \"None\";\n  InputFlags[InputFlags[\"SignalBased\"] = 1] = \"SignalBased\";\n  InputFlags[InputFlags[\"HasDecoratorInputTransform\"] = 2] = \"HasDecoratorInputTransform\";\n})(InputFlags || (InputFlags = {}));\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\nconst Type$1 = Function;\nvar SecurityContext;\n(function (SecurityContext) {\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\nfunction parserSelectorToSimpleSelector(selector) {\n  const classes = selector.classNames && selector.classNames.length ? [8 /* SelectorFlags.CLASS */, ...selector.classNames] : [];\n  const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n  return [elementName, ...selector.attrs, ...classes];\n}\nfunction parserSelectorToNegativeSelector(selector) {\n  const classes = selector.classNames && selector.classNames.length ? [8 /* SelectorFlags.CLASS */, ...selector.classNames] : [];\n  if (selector.element) {\n    return [1 /* SelectorFlags.NOT */ | 4 /* SelectorFlags.ELEMENT */, selector.element, ...selector.attrs, ...classes];\n  } else if (selector.attrs.length) {\n    return [1 /* SelectorFlags.NOT */ | 2 /* SelectorFlags.ATTRIBUTE */, ...selector.attrs, ...classes];\n  } else {\n    return selector.classNames && selector.classNames.length ? [1 /* SelectorFlags.NOT */ | 8 /* SelectorFlags.CLASS */, ...selector.classNames] : [];\n  }\n}\nfunction parserSelectorToR3Selector(selector) {\n  const positive = parserSelectorToSimpleSelector(selector);\n  const negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) : [];\n  return positive.concat(...negative);\n}\nfunction parseSelectorToR3Selector(selector) {\n  return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];\n}\nvar core = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  emitDistinctChangesOnlyDefaultValue: emitDistinctChangesOnlyDefaultValue,\n  get ViewEncapsulation() {\n    return ViewEncapsulation;\n  },\n  get ChangeDetectionStrategy() {\n    return ChangeDetectionStrategy;\n  },\n  get InputFlags() {\n    return InputFlags;\n  },\n  CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,\n  NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,\n  Type: Type$1,\n  get SecurityContext() {\n    return SecurityContext;\n  },\n  get MissingTranslationStrategy() {\n    return MissingTranslationStrategy;\n  },\n  parseSelectorToR3Selector: parseSelectorToR3Selector\n});\n\n/**\n * A lazily created TextEncoder instance for converting strings into UTF-8 bytes\n */\nlet textEncoder;\n/**\n * Return the message id or compute it using the XLIFF1 digest.\n */\nfunction digest$1(message) {\n  return message.id || computeDigest(message);\n}\n/**\n * Compute the message id using the XLIFF1 digest.\n */\nfunction computeDigest(message) {\n  return sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n/**\n * Return the message id or compute it using the XLIFF2/XMB/$localize digest.\n */\nfunction decimalDigest(message) {\n  return message.id || computeDecimalDigest(message);\n}\n/**\n * Compute the message id using the XLIFF2/XMB/$localize digest.\n */\nfunction computeDecimalDigest(message) {\n  const visitor = new _SerializerIgnoreIcuExpVisitor();\n  const parts = message.nodes.map(a => a.visit(visitor, null));\n  return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\nclass _SerializerVisitor {\n  visitText(text, context) {\n    return text.value;\n  }\n  visitContainer(container, context) {\n    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n  }\n  visitIcu(icu, context) {\n    const strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n  }\n  visitTagPlaceholder(ph, context) {\n    return ph.isVoid ? `<ph tag name=\"${ph.startName}\"/>` : `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n  visitPlaceholder(ph, context) {\n    return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n  }\n  visitIcuPlaceholder(ph, context) {\n    return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n  }\n  visitBlockPlaceholder(ph, context) {\n    return `<ph block name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n}\nconst serializerVisitor$1 = new _SerializerVisitor();\nfunction serializeNodes(nodes) {\n  return nodes.map(a => a.visit(serializerVisitor$1, null));\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * @internal\n */\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n  visitIcu(icu, context) {\n    let strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n    // Do not take the expression into account\n    return `{${icu.type}, ${strCases.join(', ')}}`;\n  }\n}\n/**\n * Compute the SHA1 of the given string\n *\n * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n */\nfunction sha1(str) {\n  textEncoder ??= new TextEncoder();\n  const utf8 = [...textEncoder.encode(str)];\n  const words32 = bytesToWords32(utf8, Endian.Big);\n  const len = utf8.length * 8;\n  const w = new Uint32Array(80);\n  let a = 0x67452301,\n    b = 0xefcdab89,\n    c = 0x98badcfe,\n    d = 0x10325476,\n    e = 0xc3d2e1f0;\n  words32[len >> 5] |= 0x80 << 24 - len % 32;\n  words32[(len + 64 >> 9 << 4) + 15] = len;\n  for (let i = 0; i < words32.length; i += 16) {\n    const h0 = a,\n      h1 = b,\n      h2 = c,\n      h3 = d,\n      h4 = e;\n    for (let j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n      const fkVal = fk(j, b, c, d);\n      const f = fkVal[0];\n      const k = fkVal[1];\n      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      e = d;\n      d = c;\n      c = rol32(b, 30);\n      b = a;\n      a = temp;\n    }\n    a = add32(a, h0);\n    b = add32(b, h1);\n    c = add32(c, h2);\n    d = add32(d, h3);\n    e = add32(e, h4);\n  }\n  // Convert the output parts to a 160-bit hexadecimal string\n  return toHexU32(a) + toHexU32(b) + toHexU32(c) + toHexU32(d) + toHexU32(e);\n}\n/**\n * Convert and format a number as a string representing a 32-bit unsigned hexadecimal number.\n * @param value The value to format as a string.\n * @returns A hexadecimal string representing the value.\n */\nfunction toHexU32(value) {\n  // unsigned right shift of zero ensures an unsigned 32-bit number\n  return (value >>> 0).toString(16).padStart(8, '0');\n}\nfunction fk(index, b, c, d) {\n  if (index < 20) {\n    return [b & c | ~b & d, 0x5a827999];\n  }\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n  if (index < 60) {\n    return [b & c | b & d | c & d, 0x8f1bbcdc];\n  }\n  return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n */\nfunction fingerprint(str) {\n  textEncoder ??= new TextEncoder();\n  const utf8 = textEncoder.encode(str);\n  const view = new DataView(utf8.buffer, utf8.byteOffset, utf8.byteLength);\n  let hi = hash32(view, utf8.length, 0);\n  let lo = hash32(view, utf8.length, 102072);\n  if (hi == 0 && (lo == 0 || lo == 1)) {\n    hi = hi ^ 0x130f9bef;\n    lo = lo ^ -0x6b5f56d8;\n  }\n  return BigInt.asUintN(32, BigInt(hi)) << BigInt(32) | BigInt.asUintN(32, BigInt(lo));\n}\nfunction computeMsgId(msg, meaning = '') {\n  let msgFingerprint = fingerprint(msg);\n  if (meaning) {\n    // Rotate the 64-bit message fingerprint one bit to the left and then add the meaning\n    // fingerprint.\n    msgFingerprint = BigInt.asUintN(64, msgFingerprint << BigInt(1)) | msgFingerprint >> BigInt(63) & BigInt(1);\n    msgFingerprint += fingerprint(meaning);\n  }\n  return BigInt.asUintN(63, msgFingerprint).toString();\n}\nfunction hash32(view, length, c) {\n  let a = 0x9e3779b9,\n    b = 0x9e3779b9;\n  let index = 0;\n  const end = length - 12;\n  for (; index <= end; index += 12) {\n    a += view.getUint32(index, true);\n    b += view.getUint32(index + 4, true);\n    c += view.getUint32(index + 8, true);\n    const res = mix(a, b, c);\n    a = res[0], b = res[1], c = res[2];\n  }\n  const remainder = length - index;\n  // the first byte of c is reserved for the length\n  c += length;\n  if (remainder >= 4) {\n    a += view.getUint32(index, true);\n    index += 4;\n    if (remainder >= 8) {\n      b += view.getUint32(index, true);\n      index += 4;\n      // Partial 32-bit word for c\n      if (remainder >= 9) {\n        c += view.getUint8(index++) << 8;\n      }\n      if (remainder >= 10) {\n        c += view.getUint8(index++) << 16;\n      }\n      if (remainder === 11) {\n        c += view.getUint8(index++) << 24;\n      }\n    } else {\n      // Partial 32-bit word for b\n      if (remainder >= 5) {\n        b += view.getUint8(index++);\n      }\n      if (remainder >= 6) {\n        b += view.getUint8(index++) << 8;\n      }\n      if (remainder === 7) {\n        b += view.getUint8(index++) << 16;\n      }\n    }\n  } else {\n    // Partial 32-bit word for a\n    if (remainder >= 1) {\n      a += view.getUint8(index++);\n    }\n    if (remainder >= 2) {\n      a += view.getUint8(index++) << 8;\n    }\n    if (remainder === 3) {\n      a += view.getUint8(index++) << 16;\n    }\n  }\n  return mix(a, b, c)[2];\n}\n// clang-format off\nfunction mix(a, b, c) {\n  a -= b;\n  a -= c;\n  a ^= c >>> 13;\n  b -= c;\n  b -= a;\n  b ^= a << 8;\n  c -= a;\n  c -= b;\n  c ^= b >>> 13;\n  a -= b;\n  a -= c;\n  a ^= c >>> 12;\n  b -= c;\n  b -= a;\n  b ^= a << 16;\n  c -= a;\n  c -= b;\n  c ^= b >>> 5;\n  a -= b;\n  a -= c;\n  a ^= c >>> 3;\n  b -= c;\n  b -= a;\n  b ^= a << 10;\n  c -= a;\n  c -= b;\n  c ^= b >>> 15;\n  return [a, b, c];\n}\n// clang-format on\n// Utils\nvar Endian;\n(function (Endian) {\n  Endian[Endian[\"Little\"] = 0] = \"Little\";\n  Endian[Endian[\"Big\"] = 1] = \"Big\";\n})(Endian || (Endian = {}));\nfunction add32(a, b) {\n  return add32to64(a, b)[1];\n}\nfunction add32to64(a, b) {\n  const low = (a & 0xffff) + (b & 0xffff);\n  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, high << 16 | low & 0xffff];\n}\n// Rotate a 32b number left `count` position\nfunction rol32(a, count) {\n  return a << count | a >>> 32 - count;\n}\nfunction bytesToWords32(bytes, endian) {\n  const size = bytes.length + 3 >>> 2;\n  const words32 = [];\n  for (let i = 0; i < size; i++) {\n    words32[i] = wordAt(bytes, i * 4, endian);\n  }\n  return words32;\n}\nfunction byteAt(bytes, index) {\n  return index >= bytes.length ? 0 : bytes[index];\n}\nfunction wordAt(bytes, index, endian) {\n  let word = 0;\n  if (endian === Endian.Big) {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(bytes, index + i) << 24 - 8 * i;\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(bytes, index + i) << 8 * i;\n    }\n  }\n  return word;\n}\n\n//// Types\nvar TypeModifier;\n(function (TypeModifier) {\n  TypeModifier[TypeModifier[\"None\"] = 0] = \"None\";\n  TypeModifier[TypeModifier[\"Const\"] = 1] = \"Const\";\n})(TypeModifier || (TypeModifier = {}));\nclass Type {\n  constructor(modifiers = TypeModifier.None) {\n    this.modifiers = modifiers;\n  }\n  hasModifier(modifier) {\n    return (this.modifiers & modifier) !== 0;\n  }\n}\nvar BuiltinTypeName;\n(function (BuiltinTypeName) {\n  BuiltinTypeName[BuiltinTypeName[\"Dynamic\"] = 0] = \"Dynamic\";\n  BuiltinTypeName[BuiltinTypeName[\"Bool\"] = 1] = \"Bool\";\n  BuiltinTypeName[BuiltinTypeName[\"String\"] = 2] = \"String\";\n  BuiltinTypeName[BuiltinTypeName[\"Int\"] = 3] = \"Int\";\n  BuiltinTypeName[BuiltinTypeName[\"Number\"] = 4] = \"Number\";\n  BuiltinTypeName[BuiltinTypeName[\"Function\"] = 5] = \"Function\";\n  BuiltinTypeName[BuiltinTypeName[\"Inferred\"] = 6] = \"Inferred\";\n  BuiltinTypeName[BuiltinTypeName[\"None\"] = 7] = \"None\";\n})(BuiltinTypeName || (BuiltinTypeName = {}));\nclass BuiltinType extends Type {\n  constructor(name, modifiers) {\n    super(modifiers);\n    this.name = name;\n  }\n  visitType(visitor, context) {\n    return visitor.visitBuiltinType(this, context);\n  }\n}\nclass ExpressionType extends Type {\n  constructor(value, modifiers, typeParams = null) {\n    super(modifiers);\n    this.value = value;\n    this.typeParams = typeParams;\n  }\n  visitType(visitor, context) {\n    return visitor.visitExpressionType(this, context);\n  }\n}\nclass ArrayType extends Type {\n  constructor(of, modifiers) {\n    super(modifiers);\n    this.of = of;\n  }\n  visitType(visitor, context) {\n    return visitor.visitArrayType(this, context);\n  }\n}\nclass MapType extends Type {\n  constructor(valueType, modifiers) {\n    super(modifiers);\n    this.valueType = valueType || null;\n  }\n  visitType(visitor, context) {\n    return visitor.visitMapType(this, context);\n  }\n}\nclass TransplantedType extends Type {\n  constructor(type, modifiers) {\n    super(modifiers);\n    this.type = type;\n  }\n  visitType(visitor, context) {\n    return visitor.visitTransplantedType(this, context);\n  }\n}\nconst DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nconst INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\nconst BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nconst INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nconst NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nconst STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nconst FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\nconst NONE_TYPE = new BuiltinType(BuiltinTypeName.None);\n///// Expressions\nvar UnaryOperator;\n(function (UnaryOperator) {\n  UnaryOperator[UnaryOperator[\"Minus\"] = 0] = \"Minus\";\n  UnaryOperator[UnaryOperator[\"Plus\"] = 1] = \"Plus\";\n})(UnaryOperator || (UnaryOperator = {}));\nvar BinaryOperator;\n(function (BinaryOperator) {\n  BinaryOperator[BinaryOperator[\"Equals\"] = 0] = \"Equals\";\n  BinaryOperator[BinaryOperator[\"NotEquals\"] = 1] = \"NotEquals\";\n  BinaryOperator[BinaryOperator[\"Identical\"] = 2] = \"Identical\";\n  BinaryOperator[BinaryOperator[\"NotIdentical\"] = 3] = \"NotIdentical\";\n  BinaryOperator[BinaryOperator[\"Minus\"] = 4] = \"Minus\";\n  BinaryOperator[BinaryOperator[\"Plus\"] = 5] = \"Plus\";\n  BinaryOperator[BinaryOperator[\"Divide\"] = 6] = \"Divide\";\n  BinaryOperator[BinaryOperator[\"Multiply\"] = 7] = \"Multiply\";\n  BinaryOperator[BinaryOperator[\"Modulo\"] = 8] = \"Modulo\";\n  BinaryOperator[BinaryOperator[\"And\"] = 9] = \"And\";\n  BinaryOperator[BinaryOperator[\"Or\"] = 10] = \"Or\";\n  BinaryOperator[BinaryOperator[\"BitwiseOr\"] = 11] = \"BitwiseOr\";\n  BinaryOperator[BinaryOperator[\"BitwiseAnd\"] = 12] = \"BitwiseAnd\";\n  BinaryOperator[BinaryOperator[\"Lower\"] = 13] = \"Lower\";\n  BinaryOperator[BinaryOperator[\"LowerEquals\"] = 14] = \"LowerEquals\";\n  BinaryOperator[BinaryOperator[\"Bigger\"] = 15] = \"Bigger\";\n  BinaryOperator[BinaryOperator[\"BiggerEquals\"] = 16] = \"BiggerEquals\";\n  BinaryOperator[BinaryOperator[\"NullishCoalesce\"] = 17] = \"NullishCoalesce\";\n})(BinaryOperator || (BinaryOperator = {}));\nfunction nullSafeIsEquivalent(base, other) {\n  if (base == null || other == null) {\n    return base == other;\n  }\n  return base.isEquivalent(other);\n}\nfunction areAllEquivalentPredicate(base, other, equivalentPredicate) {\n  const len = base.length;\n  if (len !== other.length) {\n    return false;\n  }\n  for (let i = 0; i < len; i++) {\n    if (!equivalentPredicate(base[i], other[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction areAllEquivalent(base, other) {\n  return areAllEquivalentPredicate(base, other, (baseElement, otherElement) => baseElement.isEquivalent(otherElement));\n}\nclass Expression {\n  constructor(type, sourceSpan) {\n    this.type = type || null;\n    this.sourceSpan = sourceSpan || null;\n  }\n  prop(name, sourceSpan) {\n    return new ReadPropExpr(this, name, null, sourceSpan);\n  }\n  key(index, type, sourceSpan) {\n    return new ReadKeyExpr(this, index, type, sourceSpan);\n  }\n  callFn(params, sourceSpan, pure) {\n    return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);\n  }\n  instantiate(params, type, sourceSpan) {\n    return new InstantiateExpr(this, params, type, sourceSpan);\n  }\n  conditional(trueCase, falseCase = null, sourceSpan) {\n    return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n  }\n  equals(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n  }\n  notEquals(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n  }\n  identical(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n  }\n  notIdentical(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n  }\n  minus(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n  }\n  plus(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n  }\n  divide(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n  }\n  multiply(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n  }\n  modulo(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n  }\n  and(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n  }\n  bitwiseOr(rhs, sourceSpan, parens = true) {\n    return new BinaryOperatorExpr(BinaryOperator.BitwiseOr, this, rhs, null, sourceSpan, parens);\n  }\n  bitwiseAnd(rhs, sourceSpan, parens = true) {\n    return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n  }\n  or(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n  }\n  lower(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n  }\n  lowerEquals(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n  }\n  bigger(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n  }\n  biggerEquals(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n  }\n  isBlank(sourceSpan) {\n    // Note: We use equals by purpose here to compare to null and undefined in JS.\n    // We use the typed null to allow strictNullChecks to narrow types.\n    return this.equals(TYPED_NULL_EXPR, sourceSpan);\n  }\n  nullishCoalesce(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);\n  }\n  toStmt() {\n    return new ExpressionStatement(this, null);\n  }\n}\nclass ReadVarExpr extends Expression {\n  constructor(name, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.name = name;\n  }\n  isEquivalent(e) {\n    return e instanceof ReadVarExpr && this.name === e.name;\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitReadVarExpr(this, context);\n  }\n  clone() {\n    return new ReadVarExpr(this.name, this.type, this.sourceSpan);\n  }\n  set(value) {\n    return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n  }\n}\nclass TypeofExpr extends Expression {\n  constructor(expr, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.expr = expr;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitTypeofExpr(this, context);\n  }\n  isEquivalent(e) {\n    return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);\n  }\n  isConstant() {\n    return this.expr.isConstant();\n  }\n  clone() {\n    return new TypeofExpr(this.expr.clone());\n  }\n}\nclass WrappedNodeExpr extends Expression {\n  constructor(node, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.node = node;\n  }\n  isEquivalent(e) {\n    return e instanceof WrappedNodeExpr && this.node === e.node;\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitWrappedNodeExpr(this, context);\n  }\n  clone() {\n    return new WrappedNodeExpr(this.node, this.type, this.sourceSpan);\n  }\n}\nclass WriteVarExpr extends Expression {\n  constructor(name, value, type, sourceSpan) {\n    super(type || value.type, sourceSpan);\n    this.name = name;\n    this.value = value;\n  }\n  isEquivalent(e) {\n    return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitWriteVarExpr(this, context);\n  }\n  clone() {\n    return new WriteVarExpr(this.name, this.value.clone(), this.type, this.sourceSpan);\n  }\n  toDeclStmt(type, modifiers) {\n    return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n  }\n  toConstDecl() {\n    return this.toDeclStmt(INFERRED_TYPE, StmtModifier.Final);\n  }\n}\nclass WriteKeyExpr extends Expression {\n  constructor(receiver, index, value, type, sourceSpan) {\n    super(type || value.type, sourceSpan);\n    this.receiver = receiver;\n    this.index = index;\n    this.value = value;\n  }\n  isEquivalent(e) {\n    return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitWriteKeyExpr(this, context);\n  }\n  clone() {\n    return new WriteKeyExpr(this.receiver.clone(), this.index.clone(), this.value.clone(), this.type, this.sourceSpan);\n  }\n}\nclass WritePropExpr extends Expression {\n  constructor(receiver, name, value, type, sourceSpan) {\n    super(type || value.type, sourceSpan);\n    this.receiver = receiver;\n    this.name = name;\n    this.value = value;\n  }\n  isEquivalent(e) {\n    return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name && this.value.isEquivalent(e.value);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitWritePropExpr(this, context);\n  }\n  clone() {\n    return new WritePropExpr(this.receiver.clone(), this.name, this.value.clone(), this.type, this.sourceSpan);\n  }\n}\nclass InvokeFunctionExpr extends Expression {\n  constructor(fn, args, type, sourceSpan, pure = false) {\n    super(type, sourceSpan);\n    this.fn = fn;\n    this.args = args;\n    this.pure = pure;\n  }\n  // An alias for fn, which allows other logic to handle calls and property reads together.\n  get receiver() {\n    return this.fn;\n  }\n  isEquivalent(e) {\n    return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) && areAllEquivalent(this.args, e.args) && this.pure === e.pure;\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitInvokeFunctionExpr(this, context);\n  }\n  clone() {\n    return new InvokeFunctionExpr(this.fn.clone(), this.args.map(arg => arg.clone()), this.type, this.sourceSpan, this.pure);\n  }\n}\nclass TaggedTemplateExpr extends Expression {\n  constructor(tag, template, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.tag = tag;\n    this.template = template;\n  }\n  isEquivalent(e) {\n    return e instanceof TaggedTemplateExpr && this.tag.isEquivalent(e.tag) && areAllEquivalentPredicate(this.template.elements, e.template.elements, (a, b) => a.text === b.text) && areAllEquivalent(this.template.expressions, e.template.expressions);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitTaggedTemplateExpr(this, context);\n  }\n  clone() {\n    return new TaggedTemplateExpr(this.tag.clone(), this.template.clone(), this.type, this.sourceSpan);\n  }\n}\nclass InstantiateExpr extends Expression {\n  constructor(classExpr, args, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.classExpr = classExpr;\n    this.args = args;\n  }\n  isEquivalent(e) {\n    return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) && areAllEquivalent(this.args, e.args);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitInstantiateExpr(this, context);\n  }\n  clone() {\n    return new InstantiateExpr(this.classExpr.clone(), this.args.map(arg => arg.clone()), this.type, this.sourceSpan);\n  }\n}\nclass LiteralExpr extends Expression {\n  constructor(value, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.value = value;\n  }\n  isEquivalent(e) {\n    return e instanceof LiteralExpr && this.value === e.value;\n  }\n  isConstant() {\n    return true;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitLiteralExpr(this, context);\n  }\n  clone() {\n    return new LiteralExpr(this.value, this.type, this.sourceSpan);\n  }\n}\nclass TemplateLiteral {\n  constructor(elements, expressions) {\n    this.elements = elements;\n    this.expressions = expressions;\n  }\n  clone() {\n    return new TemplateLiteral(this.elements.map(el => el.clone()), this.expressions.map(expr => expr.clone()));\n  }\n}\nclass TemplateLiteralElement {\n  constructor(text, sourceSpan, rawText) {\n    this.text = text;\n    this.sourceSpan = sourceSpan;\n    // If `rawText` is not provided, try to extract the raw string from its\n    // associated `sourceSpan`. If that is also not available, \"fake\" the raw\n    // string instead by escaping the following control sequences:\n    // - \"\\\" would otherwise indicate that the next character is a control character.\n    // - \"`\" and \"${\" are template string control sequences that would otherwise prematurely\n    // indicate the end of the template literal element.\n    this.rawText = rawText ?? sourceSpan?.toString() ?? escapeForTemplateLiteral(escapeSlashes(text));\n  }\n  clone() {\n    return new TemplateLiteralElement(this.text, this.sourceSpan, this.rawText);\n  }\n}\nclass LiteralPiece {\n  constructor(text, sourceSpan) {\n    this.text = text;\n    this.sourceSpan = sourceSpan;\n  }\n}\nclass PlaceholderPiece {\n  /**\n   * Create a new instance of a `PlaceholderPiece`.\n   *\n   * @param text the name of this placeholder (e.g. `PH_1`).\n   * @param sourceSpan the location of this placeholder in its localized message the source code.\n   * @param associatedMessage reference to another message that this placeholder is associated with.\n   * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has\n   * been extracted out from the message containing the placeholder.\n   */\n  constructor(text, sourceSpan, associatedMessage) {\n    this.text = text;\n    this.sourceSpan = sourceSpan;\n    this.associatedMessage = associatedMessage;\n  }\n}\nconst MEANING_SEPARATOR$1 = '|';\nconst ID_SEPARATOR$1 = '@@';\nconst LEGACY_ID_INDICATOR = '␟';\nclass LocalizedString extends Expression {\n  constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {\n    super(STRING_TYPE, sourceSpan);\n    this.metaBlock = metaBlock;\n    this.messageParts = messageParts;\n    this.placeHolderNames = placeHolderNames;\n    this.expressions = expressions;\n  }\n  isEquivalent(e) {\n    // return e instanceof LocalizedString && this.message === e.message;\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitLocalizedString(this, context);\n  }\n  clone() {\n    return new LocalizedString(this.metaBlock, this.messageParts, this.placeHolderNames, this.expressions.map(expr => expr.clone()), this.sourceSpan);\n  }\n  /**\n   * Serialize the given `meta` and `messagePart` into \"cooked\" and \"raw\" strings that can be used\n   * in a `$localize` tagged string. The format of the metadata is the same as that parsed by\n   * `parseI18nMeta()`.\n   *\n   * @param meta The metadata to serialize\n   * @param messagePart The first part of the tagged string\n   */\n  serializeI18nHead() {\n    let metaBlock = this.metaBlock.description || '';\n    if (this.metaBlock.meaning) {\n      metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR$1}${metaBlock}`;\n    }\n    if (this.metaBlock.customId) {\n      metaBlock = `${metaBlock}${ID_SEPARATOR$1}${this.metaBlock.customId}`;\n    }\n    if (this.metaBlock.legacyIds) {\n      this.metaBlock.legacyIds.forEach(legacyId => {\n        metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;\n      });\n    }\n    return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));\n  }\n  getMessagePartSourceSpan(i) {\n    return this.messageParts[i]?.sourceSpan ?? this.sourceSpan;\n  }\n  getPlaceholderSourceSpan(i) {\n    return this.placeHolderNames[i]?.sourceSpan ?? this.expressions[i]?.sourceSpan ?? this.sourceSpan;\n  }\n  /**\n   * Serialize the given `placeholderName` and `messagePart` into \"cooked\" and \"raw\" strings that\n   * can be used in a `$localize` tagged string.\n   *\n   * The format is `:<placeholder-name>[@@<associated-id>]:`.\n   *\n   * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder\n   * refers.\n   *\n   * @param partIndex The index of the message part to serialize.\n   */\n  serializeI18nTemplatePart(partIndex) {\n    const placeholder = this.placeHolderNames[partIndex - 1];\n    const messagePart = this.messageParts[partIndex];\n    let metaBlock = placeholder.text;\n    if (placeholder.associatedMessage?.legacyIds.length === 0) {\n      metaBlock += `${ID_SEPARATOR$1}${computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning)}`;\n    }\n    return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));\n  }\n}\nconst escapeSlashes = str => str.replace(/\\\\/g, '\\\\\\\\');\nconst escapeStartingColon = str => str.replace(/^:/, '\\\\:');\nconst escapeColons = str => str.replace(/:/g, '\\\\:');\nconst escapeForTemplateLiteral = str => str.replace(/`/g, '\\\\`').replace(/\\${/g, '$\\\\{');\n/**\n * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.\n *\n * The `raw` text must have various character sequences escaped:\n * * \"\\\" would otherwise indicate that the next character is a control character.\n * * \"`\" and \"${\" are template string control sequences that would otherwise prematurely indicate\n *   the end of a message part.\n * * \":\" inside a metablock would prematurely indicate the end of the metablock.\n * * \":\" at the start of a messagePart with no metablock would erroneously indicate the start of a\n *   metablock.\n *\n * @param metaBlock Any metadata that should be prepended to the string\n * @param messagePart The message part of the string\n */\nfunction createCookedRawString(metaBlock, messagePart, range) {\n  if (metaBlock === '') {\n    return {\n      cooked: messagePart,\n      raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),\n      range\n    };\n  } else {\n    return {\n      cooked: `:${metaBlock}:${messagePart}`,\n      raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),\n      range\n    };\n  }\n}\nclass ExternalExpr extends Expression {\n  constructor(value, type, typeParams = null, sourceSpan) {\n    super(type, sourceSpan);\n    this.value = value;\n    this.typeParams = typeParams;\n  }\n  isEquivalent(e) {\n    return e instanceof ExternalExpr && this.value.name === e.value.name && this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitExternalExpr(this, context);\n  }\n  clone() {\n    return new ExternalExpr(this.value, this.type, this.typeParams, this.sourceSpan);\n  }\n}\nclass ExternalReference {\n  constructor(moduleName, name, runtime) {\n    this.moduleName = moduleName;\n    this.name = name;\n    this.runtime = runtime;\n  }\n}\nclass ConditionalExpr extends Expression {\n  constructor(condition, trueCase, falseCase = null, type, sourceSpan) {\n    super(type || trueCase.type, sourceSpan);\n    this.condition = condition;\n    this.falseCase = falseCase;\n    this.trueCase = trueCase;\n  }\n  isEquivalent(e) {\n    return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) && this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitConditionalExpr(this, context);\n  }\n  clone() {\n    return new ConditionalExpr(this.condition.clone(), this.trueCase.clone(), this.falseCase?.clone(), this.type, this.sourceSpan);\n  }\n}\nclass DynamicImportExpr extends Expression {\n  constructor(url, sourceSpan) {\n    super(null, sourceSpan);\n    this.url = url;\n  }\n  isEquivalent(e) {\n    return e instanceof DynamicImportExpr && this.url === e.url;\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitDynamicImportExpr(this, context);\n  }\n  clone() {\n    return new DynamicImportExpr(this.url, this.sourceSpan);\n  }\n}\nclass NotExpr extends Expression {\n  constructor(condition, sourceSpan) {\n    super(BOOL_TYPE, sourceSpan);\n    this.condition = condition;\n  }\n  isEquivalent(e) {\n    return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitNotExpr(this, context);\n  }\n  clone() {\n    return new NotExpr(this.condition.clone(), this.sourceSpan);\n  }\n}\nclass FnParam {\n  constructor(name, type = null) {\n    this.name = name;\n    this.type = type;\n  }\n  isEquivalent(param) {\n    return this.name === param.name;\n  }\n  clone() {\n    return new FnParam(this.name, this.type);\n  }\n}\nclass FunctionExpr extends Expression {\n  constructor(params, statements, type, sourceSpan, name) {\n    super(type, sourceSpan);\n    this.params = params;\n    this.statements = statements;\n    this.name = name;\n  }\n  isEquivalent(e) {\n    return (e instanceof FunctionExpr || e instanceof DeclareFunctionStmt) && areAllEquivalent(this.params, e.params) && areAllEquivalent(this.statements, e.statements);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitFunctionExpr(this, context);\n  }\n  toDeclStmt(name, modifiers) {\n    return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n  }\n  clone() {\n    // TODO: Should we deep clone statements?\n    return new FunctionExpr(this.params.map(p => p.clone()), this.statements, this.type, this.sourceSpan, this.name);\n  }\n}\nclass ArrowFunctionExpr extends Expression {\n  // Note that `body: Expression` represents `() => expr` whereas\n  // `body: Statement[]` represents `() => { expr }`.\n  constructor(params, body, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.params = params;\n    this.body = body;\n  }\n  isEquivalent(e) {\n    if (!(e instanceof ArrowFunctionExpr) || !areAllEquivalent(this.params, e.params)) {\n      return false;\n    }\n    if (this.body instanceof Expression && e.body instanceof Expression) {\n      return this.body.isEquivalent(e.body);\n    }\n    if (Array.isArray(this.body) && Array.isArray(e.body)) {\n      return areAllEquivalent(this.body, e.body);\n    }\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitArrowFunctionExpr(this, context);\n  }\n  clone() {\n    // TODO: Should we deep clone statements?\n    return new ArrowFunctionExpr(this.params.map(p => p.clone()), Array.isArray(this.body) ? this.body : this.body.clone(), this.type, this.sourceSpan);\n  }\n  toDeclStmt(name, modifiers) {\n    return new DeclareVarStmt(name, this, INFERRED_TYPE, modifiers, this.sourceSpan);\n  }\n}\nclass UnaryOperatorExpr extends Expression {\n  constructor(operator, expr, type, sourceSpan, parens = true) {\n    super(type || NUMBER_TYPE, sourceSpan);\n    this.operator = operator;\n    this.expr = expr;\n    this.parens = parens;\n  }\n  isEquivalent(e) {\n    return e instanceof UnaryOperatorExpr && this.operator === e.operator && this.expr.isEquivalent(e.expr);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitUnaryOperatorExpr(this, context);\n  }\n  clone() {\n    return new UnaryOperatorExpr(this.operator, this.expr.clone(), this.type, this.sourceSpan, this.parens);\n  }\n}\nclass BinaryOperatorExpr extends Expression {\n  constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {\n    super(type || lhs.type, sourceSpan);\n    this.operator = operator;\n    this.rhs = rhs;\n    this.parens = parens;\n    this.lhs = lhs;\n  }\n  isEquivalent(e) {\n    return e instanceof BinaryOperatorExpr && this.operator === e.operator && this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitBinaryOperatorExpr(this, context);\n  }\n  clone() {\n    return new BinaryOperatorExpr(this.operator, this.lhs.clone(), this.rhs.clone(), this.type, this.sourceSpan, this.parens);\n  }\n}\nclass ReadPropExpr extends Expression {\n  constructor(receiver, name, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.receiver = receiver;\n    this.name = name;\n  }\n  // An alias for name, which allows other logic to handle property reads and keyed reads together.\n  get index() {\n    return this.name;\n  }\n  isEquivalent(e) {\n    return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name;\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitReadPropExpr(this, context);\n  }\n  set(value) {\n    return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n  }\n  clone() {\n    return new ReadPropExpr(this.receiver.clone(), this.name, this.type, this.sourceSpan);\n  }\n}\nclass ReadKeyExpr extends Expression {\n  constructor(receiver, index, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.receiver = receiver;\n    this.index = index;\n  }\n  isEquivalent(e) {\n    return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitReadKeyExpr(this, context);\n  }\n  set(value) {\n    return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n  }\n  clone() {\n    return new ReadKeyExpr(this.receiver.clone(), this.index.clone(), this.type, this.sourceSpan);\n  }\n}\nclass LiteralArrayExpr extends Expression {\n  constructor(entries, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.entries = entries;\n  }\n  isConstant() {\n    return this.entries.every(e => e.isConstant());\n  }\n  isEquivalent(e) {\n    return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitLiteralArrayExpr(this, context);\n  }\n  clone() {\n    return new LiteralArrayExpr(this.entries.map(e => e.clone()), this.type, this.sourceSpan);\n  }\n}\nclass LiteralMapEntry {\n  constructor(key, value, quoted) {\n    this.key = key;\n    this.value = value;\n    this.quoted = quoted;\n  }\n  isEquivalent(e) {\n    return this.key === e.key && this.value.isEquivalent(e.value);\n  }\n  clone() {\n    return new LiteralMapEntry(this.key, this.value.clone(), this.quoted);\n  }\n}\nclass LiteralMapExpr extends Expression {\n  constructor(entries, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.entries = entries;\n    this.valueType = null;\n    if (type) {\n      this.valueType = type.valueType;\n    }\n  }\n  isEquivalent(e) {\n    return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n  }\n  isConstant() {\n    return this.entries.every(e => e.value.isConstant());\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitLiteralMapExpr(this, context);\n  }\n  clone() {\n    const entriesClone = this.entries.map(entry => entry.clone());\n    return new LiteralMapExpr(entriesClone, this.type, this.sourceSpan);\n  }\n}\nclass CommaExpr extends Expression {\n  constructor(parts, sourceSpan) {\n    super(parts[parts.length - 1].type, sourceSpan);\n    this.parts = parts;\n  }\n  isEquivalent(e) {\n    return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n  }\n  isConstant() {\n    return false;\n  }\n  visitExpression(visitor, context) {\n    return visitor.visitCommaExpr(this, context);\n  }\n  clone() {\n    return new CommaExpr(this.parts.map(p => p.clone()));\n  }\n}\nconst NULL_EXPR = new LiteralExpr(null, null, null);\nconst TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);\n//// Statements\nvar StmtModifier;\n(function (StmtModifier) {\n  StmtModifier[StmtModifier[\"None\"] = 0] = \"None\";\n  StmtModifier[StmtModifier[\"Final\"] = 1] = \"Final\";\n  StmtModifier[StmtModifier[\"Private\"] = 2] = \"Private\";\n  StmtModifier[StmtModifier[\"Exported\"] = 4] = \"Exported\";\n  StmtModifier[StmtModifier[\"Static\"] = 8] = \"Static\";\n})(StmtModifier || (StmtModifier = {}));\nclass LeadingComment {\n  constructor(text, multiline, trailingNewline) {\n    this.text = text;\n    this.multiline = multiline;\n    this.trailingNewline = trailingNewline;\n  }\n  toString() {\n    return this.multiline ? ` ${this.text} ` : this.text;\n  }\n}\nclass JSDocComment extends LeadingComment {\n  constructor(tags) {\n    super('', /* multiline */true, /* trailingNewline */true);\n    this.tags = tags;\n  }\n  toString() {\n    return serializeTags(this.tags);\n  }\n}\nclass Statement {\n  constructor(modifiers = StmtModifier.None, sourceSpan = null, leadingComments) {\n    this.modifiers = modifiers;\n    this.sourceSpan = sourceSpan;\n    this.leadingComments = leadingComments;\n  }\n  hasModifier(modifier) {\n    return (this.modifiers & modifier) !== 0;\n  }\n  addLeadingComment(leadingComment) {\n    this.leadingComments = this.leadingComments ?? [];\n    this.leadingComments.push(leadingComment);\n  }\n}\nclass DeclareVarStmt extends Statement {\n  constructor(name, value, type, modifiers, sourceSpan, leadingComments) {\n    super(modifiers, sourceSpan, leadingComments);\n    this.name = name;\n    this.value = value;\n    this.type = type || value && value.type || null;\n  }\n  isEquivalent(stmt) {\n    return stmt instanceof DeclareVarStmt && this.name === stmt.name && (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n  }\n  visitStatement(visitor, context) {\n    return visitor.visitDeclareVarStmt(this, context);\n  }\n}\nclass DeclareFunctionStmt extends Statement {\n  constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {\n    super(modifiers, sourceSpan, leadingComments);\n    this.name = name;\n    this.params = params;\n    this.statements = statements;\n    this.type = type || null;\n  }\n  isEquivalent(stmt) {\n    return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) && areAllEquivalent(this.statements, stmt.statements);\n  }\n  visitStatement(visitor, context) {\n    return visitor.visitDeclareFunctionStmt(this, context);\n  }\n}\nclass ExpressionStatement extends Statement {\n  constructor(expr, sourceSpan, leadingComments) {\n    super(StmtModifier.None, sourceSpan, leadingComments);\n    this.expr = expr;\n  }\n  isEquivalent(stmt) {\n    return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n  }\n  visitStatement(visitor, context) {\n    return visitor.visitExpressionStmt(this, context);\n  }\n}\nclass ReturnStatement extends Statement {\n  constructor(value, sourceSpan = null, leadingComments) {\n    super(StmtModifier.None, sourceSpan, leadingComments);\n    this.value = value;\n  }\n  isEquivalent(stmt) {\n    return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n  }\n  visitStatement(visitor, context) {\n    return visitor.visitReturnStmt(this, context);\n  }\n}\nclass IfStmt extends Statement {\n  constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {\n    super(StmtModifier.None, sourceSpan, leadingComments);\n    this.condition = condition;\n    this.trueCase = trueCase;\n    this.falseCase = falseCase;\n  }\n  isEquivalent(stmt) {\n    return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) && areAllEquivalent(this.trueCase, stmt.trueCase) && areAllEquivalent(this.falseCase, stmt.falseCase);\n  }\n  visitStatement(visitor, context) {\n    return visitor.visitIfStmt(this, context);\n  }\n}\nclass RecursiveAstVisitor$1 {\n  visitType(ast, context) {\n    return ast;\n  }\n  visitExpression(ast, context) {\n    if (ast.type) {\n      ast.type.visitType(this, context);\n    }\n    return ast;\n  }\n  visitBuiltinType(type, context) {\n    return this.visitType(type, context);\n  }\n  visitExpressionType(type, context) {\n    type.value.visitExpression(this, context);\n    if (type.typeParams !== null) {\n      type.typeParams.forEach(param => this.visitType(param, context));\n    }\n    return this.visitType(type, context);\n  }\n  visitArrayType(type, context) {\n    return this.visitType(type, context);\n  }\n  visitMapType(type, context) {\n    return this.visitType(type, context);\n  }\n  visitTransplantedType(type, context) {\n    return type;\n  }\n  visitWrappedNodeExpr(ast, context) {\n    return ast;\n  }\n  visitTypeofExpr(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n  visitReadVarExpr(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n  visitWriteVarExpr(ast, context) {\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitWriteKeyExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitWritePropExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitDynamicImportExpr(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n  visitInvokeFunctionExpr(ast, context) {\n    ast.fn.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return this.visitExpression(ast, context);\n  }\n  visitTaggedTemplateExpr(ast, context) {\n    ast.tag.visitExpression(this, context);\n    this.visitAllExpressions(ast.template.expressions, context);\n    return this.visitExpression(ast, context);\n  }\n  visitInstantiateExpr(ast, context) {\n    ast.classExpr.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return this.visitExpression(ast, context);\n  }\n  visitLiteralExpr(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n  visitLocalizedString(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n  visitExternalExpr(ast, context) {\n    if (ast.typeParams) {\n      ast.typeParams.forEach(type => type.visitType(this, context));\n    }\n    return this.visitExpression(ast, context);\n  }\n  visitConditionalExpr(ast, context) {\n    ast.condition.visitExpression(this, context);\n    ast.trueCase.visitExpression(this, context);\n    ast.falseCase.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitNotExpr(ast, context) {\n    ast.condition.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitFunctionExpr(ast, context) {\n    this.visitAllStatements(ast.statements, context);\n    return this.visitExpression(ast, context);\n  }\n  visitArrowFunctionExpr(ast, context) {\n    if (Array.isArray(ast.body)) {\n      this.visitAllStatements(ast.body, context);\n    } else {\n      this.visitExpression(ast.body, context);\n    }\n    return this.visitExpression(ast, context);\n  }\n  visitUnaryOperatorExpr(ast, context) {\n    ast.expr.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitBinaryOperatorExpr(ast, context) {\n    ast.lhs.visitExpression(this, context);\n    ast.rhs.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitReadPropExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitReadKeyExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n  visitLiteralArrayExpr(ast, context) {\n    this.visitAllExpressions(ast.entries, context);\n    return this.visitExpression(ast, context);\n  }\n  visitLiteralMapExpr(ast, context) {\n    ast.entries.forEach(entry => entry.value.visitExpression(this, context));\n    return this.visitExpression(ast, context);\n  }\n  visitCommaExpr(ast, context) {\n    this.visitAllExpressions(ast.parts, context);\n    return this.visitExpression(ast, context);\n  }\n  visitAllExpressions(exprs, context) {\n    exprs.forEach(expr => expr.visitExpression(this, context));\n  }\n  visitDeclareVarStmt(stmt, context) {\n    if (stmt.value) {\n      stmt.value.visitExpression(this, context);\n    }\n    if (stmt.type) {\n      stmt.type.visitType(this, context);\n    }\n    return stmt;\n  }\n  visitDeclareFunctionStmt(stmt, context) {\n    this.visitAllStatements(stmt.statements, context);\n    if (stmt.type) {\n      stmt.type.visitType(this, context);\n    }\n    return stmt;\n  }\n  visitExpressionStmt(stmt, context) {\n    stmt.expr.visitExpression(this, context);\n    return stmt;\n  }\n  visitReturnStmt(stmt, context) {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n  visitIfStmt(stmt, context) {\n    stmt.condition.visitExpression(this, context);\n    this.visitAllStatements(stmt.trueCase, context);\n    this.visitAllStatements(stmt.falseCase, context);\n    return stmt;\n  }\n  visitAllStatements(stmts, context) {\n    stmts.forEach(stmt => stmt.visitStatement(this, context));\n  }\n}\nfunction leadingComment(text, multiline = false, trailingNewline = true) {\n  return new LeadingComment(text, multiline, trailingNewline);\n}\nfunction jsDocComment(tags = []) {\n  return new JSDocComment(tags);\n}\nfunction variable(name, type, sourceSpan) {\n  return new ReadVarExpr(name, type, sourceSpan);\n}\nfunction importExpr(id, typeParams = null, sourceSpan) {\n  return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\nfunction importType(id, typeParams, typeModifiers) {\n  return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\nfunction expressionType(expr, typeModifiers, typeParams) {\n  return new ExpressionType(expr, typeModifiers, typeParams);\n}\nfunction transplantedType(type, typeModifiers) {\n  return new TransplantedType(type, typeModifiers);\n}\nfunction typeofExpr(expr) {\n  return new TypeofExpr(expr);\n}\nfunction literalArr(values, type, sourceSpan) {\n  return new LiteralArrayExpr(values, type, sourceSpan);\n}\nfunction literalMap(values, type = null) {\n  return new LiteralMapExpr(values.map(e => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);\n}\nfunction unary(operator, expr, type, sourceSpan) {\n  return new UnaryOperatorExpr(operator, expr, type, sourceSpan);\n}\nfunction not(expr, sourceSpan) {\n  return new NotExpr(expr, sourceSpan);\n}\nfunction fn(params, body, type, sourceSpan, name) {\n  return new FunctionExpr(params, body, type, sourceSpan, name);\n}\nfunction arrowFn(params, body, type, sourceSpan) {\n  return new ArrowFunctionExpr(params, body, type, sourceSpan);\n}\nfunction ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {\n  return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);\n}\nfunction taggedTemplate(tag, template, type, sourceSpan) {\n  return new TaggedTemplateExpr(tag, template, type, sourceSpan);\n}\nfunction literal(value, type, sourceSpan) {\n  return new LiteralExpr(value, type, sourceSpan);\n}\nfunction localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {\n  return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);\n}\nfunction isNull(exp) {\n  return exp instanceof LiteralExpr && exp.value === null;\n}\n/*\n * Serializes a `Tag` into a string.\n * Returns a string like \" @foo {bar} baz\" (note the leading whitespace before `@foo`).\n */\nfunction tagToString(tag) {\n  let out = '';\n  if (tag.tagName) {\n    out += ` @${tag.tagName}`;\n  }\n  if (tag.text) {\n    if (tag.text.match(/\\/\\*|\\*\\//)) {\n      throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n    }\n    out += ' ' + tag.text.replace(/@/g, '\\\\@');\n  }\n  return out;\n}\nfunction serializeTags(tags) {\n  if (tags.length === 0) return '';\n  if (tags.length === 1 && tags[0].tagName && !tags[0].text) {\n    // The JSDOC comment is a single simple tag: e.g `/** @tagname */`.\n    return `*${tagToString(tags[0])} `;\n  }\n  let out = '*\\n';\n  for (const tag of tags) {\n    out += ' *';\n    // If the tagToString is multi-line, insert \" * \" prefixes on lines.\n    out += tagToString(tag).replace(/\\n/g, '\\n * ');\n    out += '\\n';\n  }\n  out += ' ';\n  return out;\n}\nvar output_ast = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  get TypeModifier() {\n    return TypeModifier;\n  },\n  Type: Type,\n  get BuiltinTypeName() {\n    return BuiltinTypeName;\n  },\n  BuiltinType: BuiltinType,\n  ExpressionType: ExpressionType,\n  ArrayType: ArrayType,\n  MapType: MapType,\n  TransplantedType: TransplantedType,\n  DYNAMIC_TYPE: DYNAMIC_TYPE,\n  INFERRED_TYPE: INFERRED_TYPE,\n  BOOL_TYPE: BOOL_TYPE,\n  INT_TYPE: INT_TYPE,\n  NUMBER_TYPE: NUMBER_TYPE,\n  STRING_TYPE: STRING_TYPE,\n  FUNCTION_TYPE: FUNCTION_TYPE,\n  NONE_TYPE: NONE_TYPE,\n  get UnaryOperator() {\n    return UnaryOperator;\n  },\n  get BinaryOperator() {\n    return BinaryOperator;\n  },\n  nullSafeIsEquivalent: nullSafeIsEquivalent,\n  areAllEquivalent: areAllEquivalent,\n  Expression: Expression,\n  ReadVarExpr: ReadVarExpr,\n  TypeofExpr: TypeofExpr,\n  WrappedNodeExpr: WrappedNodeExpr,\n  WriteVarExpr: WriteVarExpr,\n  WriteKeyExpr: WriteKeyExpr,\n  WritePropExpr: WritePropExpr,\n  InvokeFunctionExpr: InvokeFunctionExpr,\n  TaggedTemplateExpr: TaggedTemplateExpr,\n  InstantiateExpr: InstantiateExpr,\n  LiteralExpr: LiteralExpr,\n  TemplateLiteral: TemplateLiteral,\n  TemplateLiteralElement: TemplateLiteralElement,\n  LiteralPiece: LiteralPiece,\n  PlaceholderPiece: PlaceholderPiece,\n  LocalizedString: LocalizedString,\n  ExternalExpr: ExternalExpr,\n  ExternalReference: ExternalReference,\n  ConditionalExpr: ConditionalExpr,\n  DynamicImportExpr: DynamicImportExpr,\n  NotExpr: NotExpr,\n  FnParam: FnParam,\n  FunctionExpr: FunctionExpr,\n  ArrowFunctionExpr: ArrowFunctionExpr,\n  UnaryOperatorExpr: UnaryOperatorExpr,\n  BinaryOperatorExpr: BinaryOperatorExpr,\n  ReadPropExpr: ReadPropExpr,\n  ReadKeyExpr: ReadKeyExpr,\n  LiteralArrayExpr: LiteralArrayExpr,\n  LiteralMapEntry: LiteralMapEntry,\n  LiteralMapExpr: LiteralMapExpr,\n  CommaExpr: CommaExpr,\n  NULL_EXPR: NULL_EXPR,\n  TYPED_NULL_EXPR: TYPED_NULL_EXPR,\n  get StmtModifier() {\n    return StmtModifier;\n  },\n  LeadingComment: LeadingComment,\n  JSDocComment: JSDocComment,\n  Statement: Statement,\n  DeclareVarStmt: DeclareVarStmt,\n  DeclareFunctionStmt: DeclareFunctionStmt,\n  ExpressionStatement: ExpressionStatement,\n  ReturnStatement: ReturnStatement,\n  IfStmt: IfStmt,\n  RecursiveAstVisitor: RecursiveAstVisitor$1,\n  leadingComment: leadingComment,\n  jsDocComment: jsDocComment,\n  variable: variable,\n  importExpr: importExpr,\n  importType: importType,\n  expressionType: expressionType,\n  transplantedType: transplantedType,\n  typeofExpr: typeofExpr,\n  literalArr: literalArr,\n  literalMap: literalMap,\n  unary: unary,\n  not: not,\n  fn: fn,\n  arrowFn: arrowFn,\n  ifStmt: ifStmt,\n  taggedTemplate: taggedTemplate,\n  literal: literal,\n  localizedString: localizedString,\n  isNull: isNull\n});\nconst CONSTANT_PREFIX = '_c';\n/**\n * `ConstantPool` tries to reuse literal factories when two or more literals are identical.\n * We determine whether literals are identical by creating a key out of their AST using the\n * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely\n * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what\n * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note\n * that we use a variable, rather than something like `null` in order to avoid collisions.\n */\nconst UNKNOWN_VALUE_KEY = variable('<unknown>');\n/**\n * Context to use when producing a key.\n *\n * This ensures we see the constant not the reference variable when producing\n * a key.\n */\nconst KEY_CONTEXT = {};\n/**\n * Generally all primitive values are excluded from the `ConstantPool`, but there is an exclusion\n * for strings that reach a certain length threshold. This constant defines the length threshold for\n * strings.\n */\nconst POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;\n/**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\nclass FixupExpression extends Expression {\n  constructor(resolved) {\n    super(resolved.type);\n    this.resolved = resolved;\n    this.shared = false;\n    this.original = resolved;\n  }\n  visitExpression(visitor, context) {\n    if (context === KEY_CONTEXT) {\n      // When producing a key we want to traverse the constant not the\n      // variable used to refer to it.\n      return this.original.visitExpression(visitor, context);\n    } else {\n      return this.resolved.visitExpression(visitor, context);\n    }\n  }\n  isEquivalent(e) {\n    return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);\n  }\n  isConstant() {\n    return true;\n  }\n  clone() {\n    throw new Error(`Not supported.`);\n  }\n  fixup(expression) {\n    this.resolved = expression;\n    this.shared = true;\n  }\n}\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nclass ConstantPool {\n  constructor(isClosureCompilerEnabled = false) {\n    this.isClosureCompilerEnabled = isClosureCompilerEnabled;\n    this.statements = [];\n    this.literals = new Map();\n    this.literalFactories = new Map();\n    this.sharedConstants = new Map();\n    this.nextNameIndex = 0;\n  }\n  getConstLiteral(literal, forceShared) {\n    if (literal instanceof LiteralExpr && !isLongStringLiteral(literal) || literal instanceof FixupExpression) {\n      // Do no put simple literals into the constant pool or try to produce a constant for a\n      // reference to a constant.\n      return literal;\n    }\n    const key = GenericKeyFn.INSTANCE.keyOf(literal);\n    let fixup = this.literals.get(key);\n    let newValue = false;\n    if (!fixup) {\n      fixup = new FixupExpression(literal);\n      this.literals.set(key, fixup);\n      newValue = true;\n    }\n    if (!newValue && !fixup.shared || newValue && forceShared) {\n      // Replace the expression with a variable\n      const name = this.freshName();\n      let definition;\n      let usage;\n      if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {\n        // For string literals, Closure will **always** inline the string at\n        // **all** usages, duplicating it each time. For large strings, this\n        // unnecessarily bloats bundle size. To work around this restriction, we\n        // wrap the string in a function, and call that function for each usage.\n        // This tricks Closure into using inline logic for functions instead of\n        // string literals. Function calls are only inlined if the body is small\n        // enough to be worth it. By doing this, very large strings will be\n        // shared across multiple usages, rather than duplicating the string at\n        // each usage site.\n        //\n        // const myStr = function() { return \"very very very long string\"; };\n        // const usage1 = myStr();\n        // const usage2 = myStr();\n        definition = variable(name).set(new FunctionExpr([],\n        // Params.\n        [\n        // Statements.\n        new ReturnStatement(literal)]));\n        usage = variable(name).callFn([]);\n      } else {\n        // Just declare and use the variable directly, without a function call\n        // indirection. This saves a few bytes and avoids an unnecessary call.\n        definition = variable(name).set(literal);\n        usage = variable(name);\n      }\n      this.statements.push(definition.toDeclStmt(INFERRED_TYPE, StmtModifier.Final));\n      fixup.fixup(usage);\n    }\n    return fixup;\n  }\n  getSharedConstant(def, expr) {\n    const key = def.keyOf(expr);\n    if (!this.sharedConstants.has(key)) {\n      const id = this.freshName();\n      this.sharedConstants.set(key, variable(id));\n      this.statements.push(def.toSharedConstantDeclaration(id, expr));\n    }\n    return this.sharedConstants.get(key);\n  }\n  getLiteralFactory(literal) {\n    // Create a pure function that builds an array of a mix of constant and variable expressions\n    if (literal instanceof LiteralArrayExpr) {\n      const argumentsForKey = literal.entries.map(e => e.isConstant() ? e : UNKNOWN_VALUE_KEY);\n      const key = GenericKeyFn.INSTANCE.keyOf(literalArr(argumentsForKey));\n      return this._getLiteralFactory(key, literal.entries, entries => literalArr(entries));\n    } else {\n      const expressionForKey = literalMap(literal.entries.map(e => ({\n        key: e.key,\n        value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,\n        quoted: e.quoted\n      })));\n      const key = GenericKeyFn.INSTANCE.keyOf(expressionForKey);\n      return this._getLiteralFactory(key, literal.entries.map(e => e.value), entries => literalMap(entries.map((value, index) => ({\n        key: literal.entries[index].key,\n        value,\n        quoted: literal.entries[index].quoted\n      }))));\n    }\n  }\n  // TODO: useUniqueName(false) is necessary for naming compatibility with\n  // TemplateDefinitionBuilder, but should be removed once Template Pipeline is the default.\n  getSharedFunctionReference(fn, prefix, useUniqueName = true) {\n    const isArrow = fn instanceof ArrowFunctionExpr;\n    for (const current of this.statements) {\n      // Arrow functions are saved as variables so we check if the\n      // value of the variable is the same as the arrow function.\n      if (isArrow && current instanceof DeclareVarStmt && current.value?.isEquivalent(fn)) {\n        return variable(current.name);\n      }\n      // Function declarations are saved as function statements\n      // so we compare them directly to the passed-in function.\n      if (!isArrow && current instanceof DeclareFunctionStmt && fn.isEquivalent(current)) {\n        return variable(current.name);\n      }\n    }\n    // Otherwise declare the function.\n    const name = useUniqueName ? this.uniqueName(prefix) : prefix;\n    this.statements.push(fn.toDeclStmt(name, StmtModifier.Final));\n    return variable(name);\n  }\n  _getLiteralFactory(key, values, resultMap) {\n    let literalFactory = this.literalFactories.get(key);\n    const literalFactoryArguments = values.filter(e => !e.isConstant());\n    if (!literalFactory) {\n      const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));\n      const parameters = resultExpressions.filter(isVariable).map(e => new FnParam(e.name, DYNAMIC_TYPE));\n      const pureFunctionDeclaration = arrowFn(parameters, resultMap(resultExpressions), INFERRED_TYPE);\n      const name = this.freshName();\n      this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, StmtModifier.Final));\n      literalFactory = variable(name);\n      this.literalFactories.set(key, literalFactory);\n    }\n    return {\n      literalFactory,\n      literalFactoryArguments\n    };\n  }\n  /**\n   * Produce a unique name.\n   *\n   * The name might be unique among different prefixes if any of the prefixes end in\n   * a digit so the prefix should be a constant string (not based on user input) and\n   * must not end in a digit.\n   */\n  uniqueName(prefix) {\n    return `${prefix}${this.nextNameIndex++}`;\n  }\n  freshName() {\n    return this.uniqueName(CONSTANT_PREFIX);\n  }\n}\nclass GenericKeyFn {\n  static #_ = this.INSTANCE = new GenericKeyFn();\n  keyOf(expr) {\n    if (expr instanceof LiteralExpr && typeof expr.value === 'string') {\n      return `\"${expr.value}\"`;\n    } else if (expr instanceof LiteralExpr) {\n      return String(expr.value);\n    } else if (expr instanceof LiteralArrayExpr) {\n      const entries = [];\n      for (const entry of expr.entries) {\n        entries.push(this.keyOf(entry));\n      }\n      return `[${entries.join(',')}]`;\n    } else if (expr instanceof LiteralMapExpr) {\n      const entries = [];\n      for (const entry of expr.entries) {\n        let key = entry.key;\n        if (entry.quoted) {\n          key = `\"${key}\"`;\n        }\n        entries.push(key + ':' + this.keyOf(entry.value));\n      }\n      return `{${entries.join(',')}}`;\n    } else if (expr instanceof ExternalExpr) {\n      return `import(\"${expr.value.moduleName}\", ${expr.value.name})`;\n    } else if (expr instanceof ReadVarExpr) {\n      return `read(${expr.name})`;\n    } else if (expr instanceof TypeofExpr) {\n      return `typeof(${this.keyOf(expr.expr)})`;\n    } else {\n      throw new Error(`${this.constructor.name} does not handle expressions of type ${expr.constructor.name}`);\n    }\n  }\n}\nfunction isVariable(e) {\n  return e instanceof ReadVarExpr;\n}\nfunction isLongStringLiteral(expr) {\n  return expr instanceof LiteralExpr && typeof expr.value === 'string' && expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;\n}\nconst CORE = '@angular/core';\nclass Identifiers {\n  /* Methods */\n  static #_ = this.NEW_METHOD = 'factory';\n  static #_2 = this.TRANSFORM_METHOD = 'transform';\n  static #_3 = this.PATCH_DEPS = 'patchedDeps';\n  static #_4 = this.core = {\n    name: null,\n    moduleName: CORE\n  };\n  /* Instructions */\n  static #_5 = this.namespaceHTML = {\n    name: 'ɵɵnamespaceHTML',\n    moduleName: CORE\n  };\n  static #_6 = this.namespaceMathML = {\n    name: 'ɵɵnamespaceMathML',\n    moduleName: CORE\n  };\n  static #_7 = this.namespaceSVG = {\n    name: 'ɵɵnamespaceSVG',\n    moduleName: CORE\n  };\n  static #_8 = this.element = {\n    name: 'ɵɵelement',\n    moduleName: CORE\n  };\n  static #_9 = this.elementStart = {\n    name: 'ɵɵelementStart',\n    moduleName: CORE\n  };\n  static #_10 = this.elementEnd = {\n    name: 'ɵɵelementEnd',\n    moduleName: CORE\n  };\n  static #_11 = this.advance = {\n    name: 'ɵɵadvance',\n    moduleName: CORE\n  };\n  static #_12 = this.syntheticHostProperty = {\n    name: 'ɵɵsyntheticHostProperty',\n    moduleName: CORE\n  };\n  static #_13 = this.syntheticHostListener = {\n    name: 'ɵɵsyntheticHostListener',\n    moduleName: CORE\n  };\n  static #_14 = this.attribute = {\n    name: 'ɵɵattribute',\n    moduleName: CORE\n  };\n  static #_15 = this.attributeInterpolate1 = {\n    name: 'ɵɵattributeInterpolate1',\n    moduleName: CORE\n  };\n  static #_16 = this.attributeInterpolate2 = {\n    name: 'ɵɵattributeInterpolate2',\n    moduleName: CORE\n  };\n  static #_17 = this.attributeInterpolate3 = {\n    name: 'ɵɵattributeInterpolate3',\n    moduleName: CORE\n  };\n  static #_18 = this.attributeInterpolate4 = {\n    name: 'ɵɵattributeInterpolate4',\n    moduleName: CORE\n  };\n  static #_19 = this.attributeInterpolate5 = {\n    name: 'ɵɵattributeInterpolate5',\n    moduleName: CORE\n  };\n  static #_20 = this.attributeInterpolate6 = {\n    name: 'ɵɵattributeInterpolate6',\n    moduleName: CORE\n  };\n  static #_21 = this.attributeInterpolate7 = {\n    name: 'ɵɵattributeInterpolate7',\n    moduleName: CORE\n  };\n  static #_22 = this.attributeInterpolate8 = {\n    name: 'ɵɵattributeInterpolate8',\n    moduleName: CORE\n  };\n  static #_23 = this.attributeInterpolateV = {\n    name: 'ɵɵattributeInterpolateV',\n    moduleName: CORE\n  };\n  static #_24 = this.classProp = {\n    name: 'ɵɵclassProp',\n    moduleName: CORE\n  };\n  static #_25 = this.elementContainerStart = {\n    name: 'ɵɵelementContainerStart',\n    moduleName: CORE\n  };\n  static #_26 = this.elementContainerEnd = {\n    name: 'ɵɵelementContainerEnd',\n    moduleName: CORE\n  };\n  static #_27 = this.elementContainer = {\n    name: 'ɵɵelementContainer',\n    moduleName: CORE\n  };\n  static #_28 = this.styleMap = {\n    name: 'ɵɵstyleMap',\n    moduleName: CORE\n  };\n  static #_29 = this.styleMapInterpolate1 = {\n    name: 'ɵɵstyleMapInterpolate1',\n    moduleName: CORE\n  };\n  static #_30 = this.styleMapInterpolate2 = {\n    name: 'ɵɵstyleMapInterpolate2',\n    moduleName: CORE\n  };\n  static #_31 = this.styleMapInterpolate3 = {\n    name: 'ɵɵstyleMapInterpolate3',\n    moduleName: CORE\n  };\n  static #_32 = this.styleMapInterpolate4 = {\n    name: 'ɵɵstyleMapInterpolate4',\n    moduleName: CORE\n  };\n  static #_33 = this.styleMapInterpolate5 = {\n    name: 'ɵɵstyleMapInterpolate5',\n    moduleName: CORE\n  };\n  static #_34 = this.styleMapInterpolate6 = {\n    name: 'ɵɵstyleMapInterpolate6',\n    moduleName: CORE\n  };\n  static #_35 = this.styleMapInterpolate7 = {\n    name: 'ɵɵstyleMapInterpolate7',\n    moduleName: CORE\n  };\n  static #_36 = this.styleMapInterpolate8 = {\n    name: 'ɵɵstyleMapInterpolate8',\n    moduleName: CORE\n  };\n  static #_37 = this.styleMapInterpolateV = {\n    name: 'ɵɵstyleMapInterpolateV',\n    moduleName: CORE\n  };\n  static #_38 = this.classMap = {\n    name: 'ɵɵclassMap',\n    moduleName: CORE\n  };\n  static #_39 = this.classMapInterpolate1 = {\n    name: 'ɵɵclassMapInterpolate1',\n    moduleName: CORE\n  };\n  static #_40 = this.classMapInterpolate2 = {\n    name: 'ɵɵclassMapInterpolate2',\n    moduleName: CORE\n  };\n  static #_41 = this.classMapInterpolate3 = {\n    name: 'ɵɵclassMapInterpolate3',\n    moduleName: CORE\n  };\n  static #_42 = this.classMapInterpolate4 = {\n    name: 'ɵɵclassMapInterpolate4',\n    moduleName: CORE\n  };\n  static #_43 = this.classMapInterpolate5 = {\n    name: 'ɵɵclassMapInterpolate5',\n    moduleName: CORE\n  };\n  static #_44 = this.classMapInterpolate6 = {\n    name: 'ɵɵclassMapInterpolate6',\n    moduleName: CORE\n  };\n  static #_45 = this.classMapInterpolate7 = {\n    name: 'ɵɵclassMapInterpolate7',\n    moduleName: CORE\n  };\n  static #_46 = this.classMapInterpolate8 = {\n    name: 'ɵɵclassMapInterpolate8',\n    moduleName: CORE\n  };\n  static #_47 = this.classMapInterpolateV = {\n    name: 'ɵɵclassMapInterpolateV',\n    moduleName: CORE\n  };\n  static #_48 = this.styleProp = {\n    name: 'ɵɵstyleProp',\n    moduleName: CORE\n  };\n  static #_49 = this.stylePropInterpolate1 = {\n    name: 'ɵɵstylePropInterpolate1',\n    moduleName: CORE\n  };\n  static #_50 = this.stylePropInterpolate2 = {\n    name: 'ɵɵstylePropInterpolate2',\n    moduleName: CORE\n  };\n  static #_51 = this.stylePropInterpolate3 = {\n    name: 'ɵɵstylePropInterpolate3',\n    moduleName: CORE\n  };\n  static #_52 = this.stylePropInterpolate4 = {\n    name: 'ɵɵstylePropInterpolate4',\n    moduleName: CORE\n  };\n  static #_53 = this.stylePropInterpolate5 = {\n    name: 'ɵɵstylePropInterpolate5',\n    moduleName: CORE\n  };\n  static #_54 = this.stylePropInterpolate6 = {\n    name: 'ɵɵstylePropInterpolate6',\n    moduleName: CORE\n  };\n  static #_55 = this.stylePropInterpolate7 = {\n    name: 'ɵɵstylePropInterpolate7',\n    moduleName: CORE\n  };\n  static #_56 = this.stylePropInterpolate8 = {\n    name: 'ɵɵstylePropInterpolate8',\n    moduleName: CORE\n  };\n  static #_57 = this.stylePropInterpolateV = {\n    name: 'ɵɵstylePropInterpolateV',\n    moduleName: CORE\n  };\n  static #_58 = this.nextContext = {\n    name: 'ɵɵnextContext',\n    moduleName: CORE\n  };\n  static #_59 = this.resetView = {\n    name: 'ɵɵresetView',\n    moduleName: CORE\n  };\n  static #_60 = this.templateCreate = {\n    name: 'ɵɵtemplate',\n    moduleName: CORE\n  };\n  static #_61 = this.defer = {\n    name: 'ɵɵdefer',\n    moduleName: CORE\n  };\n  static #_62 = this.deferWhen = {\n    name: 'ɵɵdeferWhen',\n    moduleName: CORE\n  };\n  static #_63 = this.deferOnIdle = {\n    name: 'ɵɵdeferOnIdle',\n    moduleName: CORE\n  };\n  static #_64 = this.deferOnImmediate = {\n    name: 'ɵɵdeferOnImmediate',\n    moduleName: CORE\n  };\n  static #_65 = this.deferOnTimer = {\n    name: 'ɵɵdeferOnTimer',\n    moduleName: CORE\n  };\n  static #_66 = this.deferOnHover = {\n    name: 'ɵɵdeferOnHover',\n    moduleName: CORE\n  };\n  static #_67 = this.deferOnInteraction = {\n    name: 'ɵɵdeferOnInteraction',\n    moduleName: CORE\n  };\n  static #_68 = this.deferOnViewport = {\n    name: 'ɵɵdeferOnViewport',\n    moduleName: CORE\n  };\n  static #_69 = this.deferPrefetchWhen = {\n    name: 'ɵɵdeferPrefetchWhen',\n    moduleName: CORE\n  };\n  static #_70 = this.deferPrefetchOnIdle = {\n    name: 'ɵɵdeferPrefetchOnIdle',\n    moduleName: CORE\n  };\n  static #_71 = this.deferPrefetchOnImmediate = {\n    name: 'ɵɵdeferPrefetchOnImmediate',\n    moduleName: CORE\n  };\n  static #_72 = this.deferPrefetchOnTimer = {\n    name: 'ɵɵdeferPrefetchOnTimer',\n    moduleName: CORE\n  };\n  static #_73 = this.deferPrefetchOnHover = {\n    name: 'ɵɵdeferPrefetchOnHover',\n    moduleName: CORE\n  };\n  static #_74 = this.deferPrefetchOnInteraction = {\n    name: 'ɵɵdeferPrefetchOnInteraction',\n    moduleName: CORE\n  };\n  static #_75 = this.deferPrefetchOnViewport = {\n    name: 'ɵɵdeferPrefetchOnViewport',\n    moduleName: CORE\n  };\n  static #_76 = this.deferEnableTimerScheduling = {\n    name: 'ɵɵdeferEnableTimerScheduling',\n    moduleName: CORE\n  };\n  static #_77 = this.conditional = {\n    name: 'ɵɵconditional',\n    moduleName: CORE\n  };\n  static #_78 = this.repeater = {\n    name: 'ɵɵrepeater',\n    moduleName: CORE\n  };\n  static #_79 = this.repeaterCreate = {\n    name: 'ɵɵrepeaterCreate',\n    moduleName: CORE\n  };\n  static #_80 = this.repeaterTrackByIndex = {\n    name: 'ɵɵrepeaterTrackByIndex',\n    moduleName: CORE\n  };\n  static #_81 = this.repeaterTrackByIdentity = {\n    name: 'ɵɵrepeaterTrackByIdentity',\n    moduleName: CORE\n  };\n  static #_82 = this.componentInstance = {\n    name: 'ɵɵcomponentInstance',\n    moduleName: CORE\n  };\n  static #_83 = this.text = {\n    name: 'ɵɵtext',\n    moduleName: CORE\n  };\n  static #_84 = this.enableBindings = {\n    name: 'ɵɵenableBindings',\n    moduleName: CORE\n  };\n  static #_85 = this.disableBindings = {\n    name: 'ɵɵdisableBindings',\n    moduleName: CORE\n  };\n  static #_86 = this.getCurrentView = {\n    name: 'ɵɵgetCurrentView',\n    moduleName: CORE\n  };\n  static #_87 = this.textInterpolate = {\n    name: 'ɵɵtextInterpolate',\n    moduleName: CORE\n  };\n  static #_88 = this.textInterpolate1 = {\n    name: 'ɵɵtextInterpolate1',\n    moduleName: CORE\n  };\n  static #_89 = this.textInterpolate2 = {\n    name: 'ɵɵtextInterpolate2',\n    moduleName: CORE\n  };\n  static #_90 = this.textInterpolate3 = {\n    name: 'ɵɵtextInterpolate3',\n    moduleName: CORE\n  };\n  static #_91 = this.textInterpolate4 = {\n    name: 'ɵɵtextInterpolate4',\n    moduleName: CORE\n  };\n  static #_92 = this.textInterpolate5 = {\n    name: 'ɵɵtextInterpolate5',\n    moduleName: CORE\n  };\n  static #_93 = this.textInterpolate6 = {\n    name: 'ɵɵtextInterpolate6',\n    moduleName: CORE\n  };\n  static #_94 = this.textInterpolate7 = {\n    name: 'ɵɵtextInterpolate7',\n    moduleName: CORE\n  };\n  static #_95 = this.textInterpolate8 = {\n    name: 'ɵɵtextInterpolate8',\n    moduleName: CORE\n  };\n  static #_96 = this.textInterpolateV = {\n    name: 'ɵɵtextInterpolateV',\n    moduleName: CORE\n  };\n  static #_97 = this.restoreView = {\n    name: 'ɵɵrestoreView',\n    moduleName: CORE\n  };\n  static #_98 = this.pureFunction0 = {\n    name: 'ɵɵpureFunction0',\n    moduleName: CORE\n  };\n  static #_99 = this.pureFunction1 = {\n    name: 'ɵɵpureFunction1',\n    moduleName: CORE\n  };\n  static #_100 = this.pureFunction2 = {\n    name: 'ɵɵpureFunction2',\n    moduleName: CORE\n  };\n  static #_101 = this.pureFunction3 = {\n    name: 'ɵɵpureFunction3',\n    moduleName: CORE\n  };\n  static #_102 = this.pureFunction4 = {\n    name: 'ɵɵpureFunction4',\n    moduleName: CORE\n  };\n  static #_103 = this.pureFunction5 = {\n    name: 'ɵɵpureFunction5',\n    moduleName: CORE\n  };\n  static #_104 = this.pureFunction6 = {\n    name: 'ɵɵpureFunction6',\n    moduleName: CORE\n  };\n  static #_105 = this.pureFunction7 = {\n    name: 'ɵɵpureFunction7',\n    moduleName: CORE\n  };\n  static #_106 = this.pureFunction8 = {\n    name: 'ɵɵpureFunction8',\n    moduleName: CORE\n  };\n  static #_107 = this.pureFunctionV = {\n    name: 'ɵɵpureFunctionV',\n    moduleName: CORE\n  };\n  static #_108 = this.pipeBind1 = {\n    name: 'ɵɵpipeBind1',\n    moduleName: CORE\n  };\n  static #_109 = this.pipeBind2 = {\n    name: 'ɵɵpipeBind2',\n    moduleName: CORE\n  };\n  static #_110 = this.pipeBind3 = {\n    name: 'ɵɵpipeBind3',\n    moduleName: CORE\n  };\n  static #_111 = this.pipeBind4 = {\n    name: 'ɵɵpipeBind4',\n    moduleName: CORE\n  };\n  static #_112 = this.pipeBindV = {\n    name: 'ɵɵpipeBindV',\n    moduleName: CORE\n  };\n  static #_113 = this.hostProperty = {\n    name: 'ɵɵhostProperty',\n    moduleName: CORE\n  };\n  static #_114 = this.property = {\n    name: 'ɵɵproperty',\n    moduleName: CORE\n  };\n  static #_115 = this.propertyInterpolate = {\n    name: 'ɵɵpropertyInterpolate',\n    moduleName: CORE\n  };\n  static #_116 = this.propertyInterpolate1 = {\n    name: 'ɵɵpropertyInterpolate1',\n    moduleName: CORE\n  };\n  static #_117 = this.propertyInterpolate2 = {\n    name: 'ɵɵpropertyInterpolate2',\n    moduleName: CORE\n  };\n  static #_118 = this.propertyInterpolate3 = {\n    name: 'ɵɵpropertyInterpolate3',\n    moduleName: CORE\n  };\n  static #_119 = this.propertyInterpolate4 = {\n    name: 'ɵɵpropertyInterpolate4',\n    moduleName: CORE\n  };\n  static #_120 = this.propertyInterpolate5 = {\n    name: 'ɵɵpropertyInterpolate5',\n    moduleName: CORE\n  };\n  static #_121 = this.propertyInterpolate6 = {\n    name: 'ɵɵpropertyInterpolate6',\n    moduleName: CORE\n  };\n  static #_122 = this.propertyInterpolate7 = {\n    name: 'ɵɵpropertyInterpolate7',\n    moduleName: CORE\n  };\n  static #_123 = this.propertyInterpolate8 = {\n    name: 'ɵɵpropertyInterpolate8',\n    moduleName: CORE\n  };\n  static #_124 = this.propertyInterpolateV = {\n    name: 'ɵɵpropertyInterpolateV',\n    moduleName: CORE\n  };\n  static #_125 = this.i18n = {\n    name: 'ɵɵi18n',\n    moduleName: CORE\n  };\n  static #_126 = this.i18nAttributes = {\n    name: 'ɵɵi18nAttributes',\n    moduleName: CORE\n  };\n  static #_127 = this.i18nExp = {\n    name: 'ɵɵi18nExp',\n    moduleName: CORE\n  };\n  static #_128 = this.i18nStart = {\n    name: 'ɵɵi18nStart',\n    moduleName: CORE\n  };\n  static #_129 = this.i18nEnd = {\n    name: 'ɵɵi18nEnd',\n    moduleName: CORE\n  };\n  static #_130 = this.i18nApply = {\n    name: 'ɵɵi18nApply',\n    moduleName: CORE\n  };\n  static #_131 = this.i18nPostprocess = {\n    name: 'ɵɵi18nPostprocess',\n    moduleName: CORE\n  };\n  static #_132 = this.pipe = {\n    name: 'ɵɵpipe',\n    moduleName: CORE\n  };\n  static #_133 = this.projection = {\n    name: 'ɵɵprojection',\n    moduleName: CORE\n  };\n  static #_134 = this.projectionDef = {\n    name: 'ɵɵprojectionDef',\n    moduleName: CORE\n  };\n  static #_135 = this.reference = {\n    name: 'ɵɵreference',\n    moduleName: CORE\n  };\n  static #_136 = this.inject = {\n    name: 'ɵɵinject',\n    moduleName: CORE\n  };\n  static #_137 = this.injectAttribute = {\n    name: 'ɵɵinjectAttribute',\n    moduleName: CORE\n  };\n  static #_138 = this.directiveInject = {\n    name: 'ɵɵdirectiveInject',\n    moduleName: CORE\n  };\n  static #_139 = this.invalidFactory = {\n    name: 'ɵɵinvalidFactory',\n    moduleName: CORE\n  };\n  static #_140 = this.invalidFactoryDep = {\n    name: 'ɵɵinvalidFactoryDep',\n    moduleName: CORE\n  };\n  static #_141 = this.templateRefExtractor = {\n    name: 'ɵɵtemplateRefExtractor',\n    moduleName: CORE\n  };\n  static #_142 = this.forwardRef = {\n    name: 'forwardRef',\n    moduleName: CORE\n  };\n  static #_143 = this.resolveForwardRef = {\n    name: 'resolveForwardRef',\n    moduleName: CORE\n  };\n  static #_144 = this.ɵɵdefineInjectable = {\n    name: 'ɵɵdefineInjectable',\n    moduleName: CORE\n  };\n  static #_145 = this.declareInjectable = {\n    name: 'ɵɵngDeclareInjectable',\n    moduleName: CORE\n  };\n  static #_146 = this.InjectableDeclaration = {\n    name: 'ɵɵInjectableDeclaration',\n    moduleName: CORE\n  };\n  static #_147 = this.resolveWindow = {\n    name: 'ɵɵresolveWindow',\n    moduleName: CORE\n  };\n  static #_148 = this.resolveDocument = {\n    name: 'ɵɵresolveDocument',\n    moduleName: CORE\n  };\n  static #_149 = this.resolveBody = {\n    name: 'ɵɵresolveBody',\n    moduleName: CORE\n  };\n  static #_150 = this.getComponentDepsFactory = {\n    name: 'ɵɵgetComponentDepsFactory',\n    moduleName: CORE\n  };\n  static #_151 = this.defineComponent = {\n    name: 'ɵɵdefineComponent',\n    moduleName: CORE\n  };\n  static #_152 = this.declareComponent = {\n    name: 'ɵɵngDeclareComponent',\n    moduleName: CORE\n  };\n  static #_153 = this.setComponentScope = {\n    name: 'ɵɵsetComponentScope',\n    moduleName: CORE\n  };\n  static #_154 = this.ChangeDetectionStrategy = {\n    name: 'ChangeDetectionStrategy',\n    moduleName: CORE\n  };\n  static #_155 = this.ViewEncapsulation = {\n    name: 'ViewEncapsulation',\n    moduleName: CORE\n  };\n  static #_156 = this.ComponentDeclaration = {\n    name: 'ɵɵComponentDeclaration',\n    moduleName: CORE\n  };\n  static #_157 = this.FactoryDeclaration = {\n    name: 'ɵɵFactoryDeclaration',\n    moduleName: CORE\n  };\n  static #_158 = this.declareFactory = {\n    name: 'ɵɵngDeclareFactory',\n    moduleName: CORE\n  };\n  static #_159 = this.FactoryTarget = {\n    name: 'ɵɵFactoryTarget',\n    moduleName: CORE\n  };\n  static #_160 = this.defineDirective = {\n    name: 'ɵɵdefineDirective',\n    moduleName: CORE\n  };\n  static #_161 = this.declareDirective = {\n    name: 'ɵɵngDeclareDirective',\n    moduleName: CORE\n  };\n  static #_162 = this.DirectiveDeclaration = {\n    name: 'ɵɵDirectiveDeclaration',\n    moduleName: CORE\n  };\n  static #_163 = this.InjectorDef = {\n    name: 'ɵɵInjectorDef',\n    moduleName: CORE\n  };\n  static #_164 = this.InjectorDeclaration = {\n    name: 'ɵɵInjectorDeclaration',\n    moduleName: CORE\n  };\n  static #_165 = this.defineInjector = {\n    name: 'ɵɵdefineInjector',\n    moduleName: CORE\n  };\n  static #_166 = this.declareInjector = {\n    name: 'ɵɵngDeclareInjector',\n    moduleName: CORE\n  };\n  static #_167 = this.NgModuleDeclaration = {\n    name: 'ɵɵNgModuleDeclaration',\n    moduleName: CORE\n  };\n  static #_168 = this.ModuleWithProviders = {\n    name: 'ModuleWithProviders',\n    moduleName: CORE\n  };\n  static #_169 = this.defineNgModule = {\n    name: 'ɵɵdefineNgModule',\n    moduleName: CORE\n  };\n  static #_170 = this.declareNgModule = {\n    name: 'ɵɵngDeclareNgModule',\n    moduleName: CORE\n  };\n  static #_171 = this.setNgModuleScope = {\n    name: 'ɵɵsetNgModuleScope',\n    moduleName: CORE\n  };\n  static #_172 = this.registerNgModuleType = {\n    name: 'ɵɵregisterNgModuleType',\n    moduleName: CORE\n  };\n  static #_173 = this.PipeDeclaration = {\n    name: 'ɵɵPipeDeclaration',\n    moduleName: CORE\n  };\n  static #_174 = this.definePipe = {\n    name: 'ɵɵdefinePipe',\n    moduleName: CORE\n  };\n  static #_175 = this.declarePipe = {\n    name: 'ɵɵngDeclarePipe',\n    moduleName: CORE\n  };\n  static #_176 = this.declareClassMetadata = {\n    name: 'ɵɵngDeclareClassMetadata',\n    moduleName: CORE\n  };\n  static #_177 = this.setClassMetadata = {\n    name: 'ɵsetClassMetadata',\n    moduleName: CORE\n  };\n  static #_178 = this.setClassMetadataAsync = {\n    name: 'ɵsetClassMetadataAsync',\n    moduleName: CORE\n  };\n  static #_179 = this.setClassDebugInfo = {\n    name: 'ɵsetClassDebugInfo',\n    moduleName: CORE\n  };\n  static #_180 = this.queryRefresh = {\n    name: 'ɵɵqueryRefresh',\n    moduleName: CORE\n  };\n  static #_181 = this.viewQuery = {\n    name: 'ɵɵviewQuery',\n    moduleName: CORE\n  };\n  static #_182 = this.loadQuery = {\n    name: 'ɵɵloadQuery',\n    moduleName: CORE\n  };\n  static #_183 = this.contentQuery = {\n    name: 'ɵɵcontentQuery',\n    moduleName: CORE\n  };\n  static #_184 = this.NgOnChangesFeature = {\n    name: 'ɵɵNgOnChangesFeature',\n    moduleName: CORE\n  };\n  static #_185 = this.InheritDefinitionFeature = {\n    name: 'ɵɵInheritDefinitionFeature',\n    moduleName: CORE\n  };\n  static #_186 = this.CopyDefinitionFeature = {\n    name: 'ɵɵCopyDefinitionFeature',\n    moduleName: CORE\n  };\n  static #_187 = this.StandaloneFeature = {\n    name: 'ɵɵStandaloneFeature',\n    moduleName: CORE\n  };\n  static #_188 = this.ProvidersFeature = {\n    name: 'ɵɵProvidersFeature',\n    moduleName: CORE\n  };\n  static #_189 = this.HostDirectivesFeature = {\n    name: 'ɵɵHostDirectivesFeature',\n    moduleName: CORE\n  };\n  static #_190 = this.InputTransformsFeatureFeature = {\n    name: 'ɵɵInputTransformsFeature',\n    moduleName: CORE\n  };\n  static #_191 = this.listener = {\n    name: 'ɵɵlistener',\n    moduleName: CORE\n  };\n  static #_192 = this.getInheritedFactory = {\n    name: 'ɵɵgetInheritedFactory',\n    moduleName: CORE\n  };\n  static #_193 = this.InputFlags = {\n    name: 'ɵɵInputFlags',\n    moduleName: CORE\n  }; // sanitization-related functions\n  static #_194 = this.sanitizeHtml = {\n    name: 'ɵɵsanitizeHtml',\n    moduleName: CORE\n  };\n  static #_195 = this.sanitizeStyle = {\n    name: 'ɵɵsanitizeStyle',\n    moduleName: CORE\n  };\n  static #_196 = this.sanitizeResourceUrl = {\n    name: 'ɵɵsanitizeResourceUrl',\n    moduleName: CORE\n  };\n  static #_197 = this.sanitizeScript = {\n    name: 'ɵɵsanitizeScript',\n    moduleName: CORE\n  };\n  static #_198 = this.sanitizeUrl = {\n    name: 'ɵɵsanitizeUrl',\n    moduleName: CORE\n  };\n  static #_199 = this.sanitizeUrlOrResourceUrl = {\n    name: 'ɵɵsanitizeUrlOrResourceUrl',\n    moduleName: CORE\n  };\n  static #_200 = this.trustConstantHtml = {\n    name: 'ɵɵtrustConstantHtml',\n    moduleName: CORE\n  };\n  static #_201 = this.trustConstantResourceUrl = {\n    name: 'ɵɵtrustConstantResourceUrl',\n    moduleName: CORE\n  };\n  static #_202 = this.validateIframeAttribute = {\n    name: 'ɵɵvalidateIframeAttribute',\n    moduleName: CORE\n  }; // type-checking\n  static #_203 = this.InputSignalBrandWriteType = {\n    name: 'ɵINPUT_SIGNAL_BRAND_WRITE_TYPE',\n    moduleName: CORE\n  };\n  static #_204 = this.UnwrapDirectiveSignalInputs = {\n    name: 'ɵUnwrapDirectiveSignalInputs',\n    moduleName: CORE\n  };\n}\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\nfunction dashCaseToCamelCase(input) {\n  return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\n}\nfunction splitAtColon(input, defaultValues) {\n  return _splitAt(input, ':', defaultValues);\n}\nfunction splitAtPeriod(input, defaultValues) {\n  return _splitAt(input, '.', defaultValues);\n}\nfunction _splitAt(input, character, defaultValues) {\n  const characterIndex = input.indexOf(character);\n  if (characterIndex == -1) return defaultValues;\n  return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\nfunction noUndefined(val) {\n  return val === undefined ? null : val;\n}\nfunction error(msg) {\n  throw new Error(`Internal Error: ${msg}`);\n}\n// Escape characters that have a special meaning in Regular Expressions\nfunction escapeRegExp(s) {\n  return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\nfunction utf8Encode(str) {\n  let encoded = [];\n  for (let index = 0; index < str.length; index++) {\n    let codePoint = str.charCodeAt(index);\n    // decode surrogate\n    // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n    if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > index + 1) {\n      const low = str.charCodeAt(index + 1);\n      if (low >= 0xdc00 && low <= 0xdfff) {\n        index++;\n        codePoint = (codePoint - 0xd800 << 10) + low - 0xdc00 + 0x10000;\n      }\n    }\n    if (codePoint <= 0x7f) {\n      encoded.push(codePoint);\n    } else if (codePoint <= 0x7ff) {\n      encoded.push(codePoint >> 6 & 0x1F | 0xc0, codePoint & 0x3f | 0x80);\n    } else if (codePoint <= 0xffff) {\n      encoded.push(codePoint >> 12 | 0xe0, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n    } else if (codePoint <= 0x1fffff) {\n      encoded.push(codePoint >> 18 & 0x07 | 0xf0, codePoint >> 12 & 0x3f | 0x80, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n    }\n  }\n  return encoded;\n}\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n  if (token == null) {\n    return '' + token;\n  }\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n  if (token.name) {\n    return `${token.name}`;\n  }\n  if (!token.toString) {\n    return 'object';\n  }\n  // WARNING: do not try to `JSON.stringify(token)` here\n  // see https://github.com/angular/angular/issues/23440\n  const res = token.toString();\n  if (res == null) {\n    return '' + res;\n  }\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\nclass Version {\n  constructor(full) {\n    this.full = full;\n    const splits = full.split('.');\n    this.major = splits[0];\n    this.minor = splits[1];\n    this.patch = splits.slice(2).join('.');\n  }\n}\nconst _global = globalThis;\nfunction newArray(size, value) {\n  const list = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value);\n  }\n  return list;\n}\n/**\n * Partitions a given array into 2 arrays, based on a boolean value returned by the condition\n * function.\n *\n * @param arr Input array that should be partitioned\n * @param conditionFn Condition function that is called for each item in a given array and returns a\n * boolean value.\n */\nfunction partitionArray(arr, conditionFn) {\n  const truthy = [];\n  const falsy = [];\n  for (const item of arr) {\n    (conditionFn(item) ? truthy : falsy).push(item);\n  }\n  return [truthy, falsy];\n}\n\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\nconst VERSION$1 = 3;\nconst JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\nclass SourceMapGenerator {\n  constructor(file = null) {\n    this.file = file;\n    this.sourcesContent = new Map();\n    this.lines = [];\n    this.lastCol0 = 0;\n    this.hasMappings = false;\n  }\n  // The content is `null` when the content is expected to be loaded using the URL\n  addSource(url, content = null) {\n    if (!this.sourcesContent.has(url)) {\n      this.sourcesContent.set(url, content);\n    }\n    return this;\n  }\n  addLine() {\n    this.lines.push([]);\n    this.lastCol0 = 0;\n    return this;\n  }\n  addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {\n    if (!this.currentLine) {\n      throw new Error(`A line must be added before mappings can be added`);\n    }\n    if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n      throw new Error(`Unknown source file \"${sourceUrl}\"`);\n    }\n    if (col0 == null) {\n      throw new Error(`The column in the generated code must be provided`);\n    }\n    if (col0 < this.lastCol0) {\n      throw new Error(`Mapping should be added in output order`);\n    }\n    if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n      throw new Error(`The source location must be provided when a source url is provided`);\n    }\n    this.hasMappings = true;\n    this.lastCol0 = col0;\n    this.currentLine.push({\n      col0,\n      sourceUrl,\n      sourceLine0,\n      sourceCol0\n    });\n    return this;\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  get currentLine() {\n    return this.lines.slice(-1)[0];\n  }\n  toJSON() {\n    if (!this.hasMappings) {\n      return null;\n    }\n    const sourcesIndex = new Map();\n    const sources = [];\n    const sourcesContent = [];\n    Array.from(this.sourcesContent.keys()).forEach((url, i) => {\n      sourcesIndex.set(url, i);\n      sources.push(url);\n      sourcesContent.push(this.sourcesContent.get(url) || null);\n    });\n    let mappings = '';\n    let lastCol0 = 0;\n    let lastSourceIndex = 0;\n    let lastSourceLine0 = 0;\n    let lastSourceCol0 = 0;\n    this.lines.forEach(segments => {\n      lastCol0 = 0;\n      mappings += segments.map(segment => {\n        // zero-based starting column of the line in the generated code\n        let segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n        lastCol0 = segment.col0;\n        if (segment.sourceUrl != null) {\n          // zero-based index into the “sources” list\n          segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);\n          lastSourceIndex = sourcesIndex.get(segment.sourceUrl);\n          // the zero-based starting line in the original source\n          segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);\n          lastSourceLine0 = segment.sourceLine0;\n          // the zero-based starting column in the original source\n          segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);\n          lastSourceCol0 = segment.sourceCol0;\n        }\n        return segAsStr;\n      }).join(',');\n      mappings += ';';\n    });\n    mappings = mappings.slice(0, -1);\n    return {\n      'file': this.file || '',\n      'version': VERSION$1,\n      'sourceRoot': '',\n      'sources': sources,\n      'sourcesContent': sourcesContent,\n      'mappings': mappings\n    };\n  }\n  toJsComment() {\n    return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : '';\n  }\n}\nfunction toBase64String(value) {\n  let b64 = '';\n  const encoded = utf8Encode(value);\n  for (let i = 0; i < encoded.length;) {\n    const i1 = encoded[i++];\n    const i2 = i < encoded.length ? encoded[i++] : null;\n    const i3 = i < encoded.length ? encoded[i++] : null;\n    b64 += toBase64Digit(i1 >> 2);\n    b64 += toBase64Digit((i1 & 3) << 4 | (i2 === null ? 0 : i2 >> 4));\n    b64 += i2 === null ? '=' : toBase64Digit((i2 & 15) << 2 | (i3 === null ? 0 : i3 >> 6));\n    b64 += i2 === null || i3 === null ? '=' : toBase64Digit(i3 & 63);\n  }\n  return b64;\n}\nfunction toBase64VLQ(value) {\n  value = value < 0 ? (-value << 1) + 1 : value << 1;\n  let out = '';\n  do {\n    let digit = value & 31;\n    value = value >> 5;\n    if (value > 0) {\n      digit = digit | 32;\n    }\n    out += toBase64Digit(digit);\n  } while (value > 0);\n  return out;\n}\nconst B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfunction toBase64Digit(value) {\n  if (value < 0 || value >= 64) {\n    throw new Error(`Can only encode value in the range [0, 63]`);\n  }\n  return B64_DIGITS[value];\n}\nconst _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nconst _INDENT_WITH = '  ';\nclass _EmittedLine {\n  constructor(indent) {\n    this.indent = indent;\n    this.partsLength = 0;\n    this.parts = [];\n    this.srcSpans = [];\n  }\n}\nclass EmitterVisitorContext {\n  static createRoot() {\n    return new EmitterVisitorContext(0);\n  }\n  constructor(_indent) {\n    this._indent = _indent;\n    this._lines = [new _EmittedLine(_indent)];\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  get _currentLine() {\n    return this._lines[this._lines.length - 1];\n  }\n  println(from, lastPart = '') {\n    this.print(from || null, lastPart, true);\n  }\n  lineIsEmpty() {\n    return this._currentLine.parts.length === 0;\n  }\n  lineLength() {\n    return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n  }\n  print(from, part, newLine = false) {\n    if (part.length > 0) {\n      this._currentLine.parts.push(part);\n      this._currentLine.partsLength += part.length;\n      this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n    }\n    if (newLine) {\n      this._lines.push(new _EmittedLine(this._indent));\n    }\n  }\n  removeEmptyLastLine() {\n    if (this.lineIsEmpty()) {\n      this._lines.pop();\n    }\n  }\n  incIndent() {\n    this._indent++;\n    if (this.lineIsEmpty()) {\n      this._currentLine.indent = this._indent;\n    }\n  }\n  decIndent() {\n    this._indent--;\n    if (this.lineIsEmpty()) {\n      this._currentLine.indent = this._indent;\n    }\n  }\n  toSource() {\n    return this.sourceLines.map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '').join('\\n');\n  }\n  toSourceMapGenerator(genFilePath, startsAtLine = 0) {\n    const map = new SourceMapGenerator(genFilePath);\n    let firstOffsetMapped = false;\n    const mapFirstOffsetIfNeeded = () => {\n      if (!firstOffsetMapped) {\n        // Add a single space so that tools won't try to load the file from disk.\n        // Note: We are using virtual urls like `ng:///`, so we have to\n        // provide a content here.\n        map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\n        firstOffsetMapped = true;\n      }\n    };\n    for (let i = 0; i < startsAtLine; i++) {\n      map.addLine();\n      mapFirstOffsetIfNeeded();\n    }\n    this.sourceLines.forEach((line, lineIdx) => {\n      map.addLine();\n      const spans = line.srcSpans;\n      const parts = line.parts;\n      let col0 = line.indent * _INDENT_WITH.length;\n      let spanIdx = 0;\n      // skip leading parts without source spans\n      while (spanIdx < spans.length && !spans[spanIdx]) {\n        col0 += parts[spanIdx].length;\n        spanIdx++;\n      }\n      if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n        firstOffsetMapped = true;\n      } else {\n        mapFirstOffsetIfNeeded();\n      }\n      while (spanIdx < spans.length) {\n        const span = spans[spanIdx];\n        const source = span.start.file;\n        const sourceLine = span.start.line;\n        const sourceCol = span.start.col;\n        map.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);\n        col0 += parts[spanIdx].length;\n        spanIdx++;\n        // assign parts without span or the same span to the previous segment\n        while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n          col0 += parts[spanIdx].length;\n          spanIdx++;\n        }\n      }\n    });\n    return map;\n  }\n  spanOf(line, column) {\n    const emittedLine = this._lines[line];\n    if (emittedLine) {\n      let columnsLeft = column - _createIndent(emittedLine.indent).length;\n      for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n        const part = emittedLine.parts[partIndex];\n        if (part.length > columnsLeft) {\n          return emittedLine.srcSpans[partIndex];\n        }\n        columnsLeft -= part.length;\n      }\n    }\n    return null;\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  get sourceLines() {\n    if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n      return this._lines.slice(0, -1);\n    }\n    return this._lines;\n  }\n}\nclass AbstractEmitterVisitor {\n  constructor(_escapeDollarInStrings) {\n    this._escapeDollarInStrings = _escapeDollarInStrings;\n  }\n  printLeadingComments(stmt, ctx) {\n    if (stmt.leadingComments === undefined) {\n      return;\n    }\n    for (const comment of stmt.leadingComments) {\n      if (comment instanceof JSDocComment) {\n        ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);\n      } else {\n        if (comment.multiline) {\n          ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);\n        } else {\n          comment.text.split('\\n').forEach(line => {\n            ctx.println(stmt, `// ${line}`);\n          });\n        }\n      }\n    }\n  }\n  visitExpressionStmt(stmt, ctx) {\n    this.printLeadingComments(stmt, ctx);\n    stmt.expr.visitExpression(this, ctx);\n    ctx.println(stmt, ';');\n    return null;\n  }\n  visitReturnStmt(stmt, ctx) {\n    this.printLeadingComments(stmt, ctx);\n    ctx.print(stmt, `return `);\n    stmt.value.visitExpression(this, ctx);\n    ctx.println(stmt, ';');\n    return null;\n  }\n  visitIfStmt(stmt, ctx) {\n    this.printLeadingComments(stmt, ctx);\n    ctx.print(stmt, `if (`);\n    stmt.condition.visitExpression(this, ctx);\n    ctx.print(stmt, `) {`);\n    const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n    if (stmt.trueCase.length <= 1 && !hasElseCase) {\n      ctx.print(stmt, ` `);\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.removeEmptyLastLine();\n      ctx.print(stmt, ` `);\n    } else {\n      ctx.println();\n      ctx.incIndent();\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.decIndent();\n      if (hasElseCase) {\n        ctx.println(stmt, `} else {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.falseCase, ctx);\n        ctx.decIndent();\n      }\n    }\n    ctx.println(stmt, `}`);\n    return null;\n  }\n  visitWriteVarExpr(expr, ctx) {\n    const lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    ctx.print(expr, `${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n  visitWriteKeyExpr(expr, ctx) {\n    const lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(expr, `[`);\n    expr.index.visitExpression(this, ctx);\n    ctx.print(expr, `] = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n  visitWritePropExpr(expr, ctx) {\n    const lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(expr, `.${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n  visitInvokeFunctionExpr(expr, ctx) {\n    const shouldParenthesize = expr.fn instanceof ArrowFunctionExpr;\n    if (shouldParenthesize) {\n      ctx.print(expr.fn, '(');\n    }\n    expr.fn.visitExpression(this, ctx);\n    if (shouldParenthesize) {\n      ctx.print(expr.fn, ')');\n    }\n    ctx.print(expr, `(`);\n    this.visitAllExpressions(expr.args, ctx, ',');\n    ctx.print(expr, `)`);\n    return null;\n  }\n  visitTaggedTemplateExpr(expr, ctx) {\n    expr.tag.visitExpression(this, ctx);\n    ctx.print(expr, '`' + expr.template.elements[0].rawText);\n    for (let i = 1; i < expr.template.elements.length; i++) {\n      ctx.print(expr, '${');\n      expr.template.expressions[i - 1].visitExpression(this, ctx);\n      ctx.print(expr, `}${expr.template.elements[i].rawText}`);\n    }\n    ctx.print(expr, '`');\n    return null;\n  }\n  visitWrappedNodeExpr(ast, ctx) {\n    throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');\n  }\n  visitTypeofExpr(expr, ctx) {\n    ctx.print(expr, 'typeof ');\n    expr.expr.visitExpression(this, ctx);\n  }\n  visitReadVarExpr(ast, ctx) {\n    ctx.print(ast, ast.name);\n    return null;\n  }\n  visitInstantiateExpr(ast, ctx) {\n    ctx.print(ast, `new `);\n    ast.classExpr.visitExpression(this, ctx);\n    ctx.print(ast, `(`);\n    this.visitAllExpressions(ast.args, ctx, ',');\n    ctx.print(ast, `)`);\n    return null;\n  }\n  visitLiteralExpr(ast, ctx) {\n    const value = ast.value;\n    if (typeof value === 'string') {\n      ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n    } else {\n      ctx.print(ast, `${value}`);\n    }\n    return null;\n  }\n  visitLocalizedString(ast, ctx) {\n    const head = ast.serializeI18nHead();\n    ctx.print(ast, '$localize `' + head.raw);\n    for (let i = 1; i < ast.messageParts.length; i++) {\n      ctx.print(ast, '${');\n      ast.expressions[i - 1].visitExpression(this, ctx);\n      ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);\n    }\n    ctx.print(ast, '`');\n    return null;\n  }\n  visitConditionalExpr(ast, ctx) {\n    ctx.print(ast, `(`);\n    ast.condition.visitExpression(this, ctx);\n    ctx.print(ast, '? ');\n    ast.trueCase.visitExpression(this, ctx);\n    ctx.print(ast, ': ');\n    ast.falseCase.visitExpression(this, ctx);\n    ctx.print(ast, `)`);\n    return null;\n  }\n  visitDynamicImportExpr(ast, ctx) {\n    ctx.print(ast, `import(${ast.url})`);\n  }\n  visitNotExpr(ast, ctx) {\n    ctx.print(ast, '!');\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n  visitUnaryOperatorExpr(ast, ctx) {\n    let opStr;\n    switch (ast.operator) {\n      case UnaryOperator.Plus:\n        opStr = '+';\n        break;\n      case UnaryOperator.Minus:\n        opStr = '-';\n        break;\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n    if (ast.parens) ctx.print(ast, `(`);\n    ctx.print(ast, opStr);\n    ast.expr.visitExpression(this, ctx);\n    if (ast.parens) ctx.print(ast, `)`);\n    return null;\n  }\n  visitBinaryOperatorExpr(ast, ctx) {\n    let opStr;\n    switch (ast.operator) {\n      case BinaryOperator.Equals:\n        opStr = '==';\n        break;\n      case BinaryOperator.Identical:\n        opStr = '===';\n        break;\n      case BinaryOperator.NotEquals:\n        opStr = '!=';\n        break;\n      case BinaryOperator.NotIdentical:\n        opStr = '!==';\n        break;\n      case BinaryOperator.And:\n        opStr = '&&';\n        break;\n      case BinaryOperator.BitwiseOr:\n        opStr = '|';\n        break;\n      case BinaryOperator.BitwiseAnd:\n        opStr = '&';\n        break;\n      case BinaryOperator.Or:\n        opStr = '||';\n        break;\n      case BinaryOperator.Plus:\n        opStr = '+';\n        break;\n      case BinaryOperator.Minus:\n        opStr = '-';\n        break;\n      case BinaryOperator.Divide:\n        opStr = '/';\n        break;\n      case BinaryOperator.Multiply:\n        opStr = '*';\n        break;\n      case BinaryOperator.Modulo:\n        opStr = '%';\n        break;\n      case BinaryOperator.Lower:\n        opStr = '<';\n        break;\n      case BinaryOperator.LowerEquals:\n        opStr = '<=';\n        break;\n      case BinaryOperator.Bigger:\n        opStr = '>';\n        break;\n      case BinaryOperator.BiggerEquals:\n        opStr = '>=';\n        break;\n      case BinaryOperator.NullishCoalesce:\n        opStr = '??';\n        break;\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n    if (ast.parens) ctx.print(ast, `(`);\n    ast.lhs.visitExpression(this, ctx);\n    ctx.print(ast, ` ${opStr} `);\n    ast.rhs.visitExpression(this, ctx);\n    if (ast.parens) ctx.print(ast, `)`);\n    return null;\n  }\n  visitReadPropExpr(ast, ctx) {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(ast, `.`);\n    ctx.print(ast, ast.name);\n    return null;\n  }\n  visitReadKeyExpr(ast, ctx) {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(ast, `[`);\n    ast.index.visitExpression(this, ctx);\n    ctx.print(ast, `]`);\n    return null;\n  }\n  visitLiteralArrayExpr(ast, ctx) {\n    ctx.print(ast, `[`);\n    this.visitAllExpressions(ast.entries, ctx, ',');\n    ctx.print(ast, `]`);\n    return null;\n  }\n  visitLiteralMapExpr(ast, ctx) {\n    ctx.print(ast, `{`);\n    this.visitAllObjects(entry => {\n      ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);\n      entry.value.visitExpression(this, ctx);\n    }, ast.entries, ctx, ',');\n    ctx.print(ast, `}`);\n    return null;\n  }\n  visitCommaExpr(ast, ctx) {\n    ctx.print(ast, '(');\n    this.visitAllExpressions(ast.parts, ctx, ',');\n    ctx.print(ast, ')');\n    return null;\n  }\n  visitAllExpressions(expressions, ctx, separator) {\n    this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator);\n  }\n  visitAllObjects(handler, expressions, ctx, separator) {\n    let incrementedIndent = false;\n    for (let i = 0; i < expressions.length; i++) {\n      if (i > 0) {\n        if (ctx.lineLength() > 80) {\n          ctx.print(null, separator, true);\n          if (!incrementedIndent) {\n            // continuation are marked with double indent.\n            ctx.incIndent();\n            ctx.incIndent();\n            incrementedIndent = true;\n          }\n        } else {\n          ctx.print(null, separator, false);\n        }\n      }\n      handler(expressions[i]);\n    }\n    if (incrementedIndent) {\n      // continuation are marked with double indent.\n      ctx.decIndent();\n      ctx.decIndent();\n    }\n  }\n  visitAllStatements(statements, ctx) {\n    statements.forEach(stmt => stmt.visitStatement(this, ctx));\n  }\n}\nfunction escapeIdentifier(input, escapeDollar, alwaysQuote = true) {\n  if (input == null) {\n    return null;\n  }\n  const body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {\n    if (match[0] == '$') {\n      return escapeDollar ? '\\\\$' : '$';\n    } else if (match[0] == '\\n') {\n      return '\\\\n';\n    } else if (match[0] == '\\r') {\n      return '\\\\r';\n    } else {\n      return `\\\\${match[0]}`;\n    }\n  });\n  const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n  return requiresQuotes ? `'${body}'` : body;\n}\nfunction _createIndent(count) {\n  let res = '';\n  for (let i = 0; i < count; i++) {\n    res += _INDENT_WITH;\n  }\n  return res;\n}\nfunction typeWithParameters(type, numParams) {\n  if (numParams === 0) {\n    return expressionType(type);\n  }\n  const params = [];\n  for (let i = 0; i < numParams; i++) {\n    params.push(DYNAMIC_TYPE);\n  }\n  return expressionType(type, undefined, params);\n}\nconst ANIMATE_SYMBOL_PREFIX = '@';\nfunction prepareSyntheticPropertyName(name) {\n  return `${ANIMATE_SYMBOL_PREFIX}${name}`;\n}\nfunction prepareSyntheticListenerName(name, phase) {\n  return `${ANIMATE_SYMBOL_PREFIX}${name}.${phase}`;\n}\nfunction getSafePropertyAccessString(accessor, name) {\n  const escapedName = escapeIdentifier(name, false, false);\n  return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;\n}\nfunction prepareSyntheticListenerFunctionName(name, phase) {\n  return `animation_${name}_${phase}`;\n}\nfunction jitOnlyGuardedExpression(expr) {\n  return guardedExpression('ngJitMode', expr);\n}\nfunction devOnlyGuardedExpression(expr) {\n  return guardedExpression('ngDevMode', expr);\n}\nfunction guardedExpression(guard, expr) {\n  const guardExpr = new ExternalExpr({\n    name: guard,\n    moduleName: null\n  });\n  const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal('undefined'));\n  const guardUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, guardNotDefined, guardExpr, /* type */undefined, /* sourceSpan */undefined, true);\n  return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);\n}\nfunction wrapReference(value) {\n  const wrapped = new WrappedNodeExpr(value);\n  return {\n    value: wrapped,\n    type: wrapped\n  };\n}\nfunction refsToArray(refs, shouldForwardDeclare) {\n  const values = literalArr(refs.map(ref => ref.value));\n  return shouldForwardDeclare ? arrowFn([], values) : values;\n}\nfunction createMayBeForwardRefExpression(expression, forwardRef) {\n  return {\n    expression,\n    forwardRef\n  };\n}\n/**\n * Convert a `MaybeForwardRefExpression` to an `Expression`, possibly wrapping its expression in a\n * `forwardRef()` call.\n *\n * If `MaybeForwardRefExpression.forwardRef` is `ForwardRefHandling.Unwrapped` then the expression\n * was originally wrapped in a `forwardRef()` call to prevent the value from being eagerly evaluated\n * in the code.\n *\n * See `packages/compiler-cli/src/ngtsc/annotations/src/injectable.ts` and\n * `packages/compiler/src/jit_compiler_facade.ts` for more information.\n */\nfunction convertFromMaybeForwardRefExpression({\n  expression,\n  forwardRef\n}) {\n  switch (forwardRef) {\n    case 0 /* ForwardRefHandling.None */:\n    case 1 /* ForwardRefHandling.Wrapped */:\n      return expression;\n    case 2 /* ForwardRefHandling.Unwrapped */:\n      return generateForwardRef(expression);\n  }\n}\n/**\n * Generate an expression that has the given `expr` wrapped in the following form:\n *\n * ```\n * forwardRef(() => expr)\n * ```\n */\nfunction generateForwardRef(expr) {\n  return importExpr(Identifiers.forwardRef).callFn([arrowFn([], expr)]);\n}\nvar R3FactoryDelegateType;\n(function (R3FactoryDelegateType) {\n  R3FactoryDelegateType[R3FactoryDelegateType[\"Class\"] = 0] = \"Class\";\n  R3FactoryDelegateType[R3FactoryDelegateType[\"Function\"] = 1] = \"Function\";\n})(R3FactoryDelegateType || (R3FactoryDelegateType = {}));\nvar FactoryTarget$1;\n(function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget$1 || (FactoryTarget$1 = {}));\n/**\n * Construct a factory function expression for the given `R3FactoryMetadata`.\n */\nfunction compileFactoryFunction(meta) {\n  const t = variable('t');\n  let baseFactoryVar = null;\n  // The type to instantiate via constructor invocation. If there is no delegated factory, meaning\n  // this type is always created by constructor invocation, then this is the type-to-create\n  // parameter provided by the user (t) if specified, or the current type if not. If there is a\n  // delegated factory (which is used to create the current type) then this is only the type-to-\n  // create parameter (t).\n  const typeForCtor = !isDelegatedFactoryMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.type.value) : t;\n  let ctorExpr = null;\n  if (meta.deps !== null) {\n    // There is a constructor (either explicitly or implicitly defined).\n    if (meta.deps !== 'invalid') {\n      ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));\n    }\n  } else {\n    // There is no constructor, use the base class' factory to construct typeForCtor.\n    baseFactoryVar = variable(`ɵ${meta.name}_BaseFactory`);\n    ctorExpr = baseFactoryVar.callFn([typeForCtor]);\n  }\n  const body = [];\n  let retExpr = null;\n  function makeConditionalFactory(nonCtorExpr) {\n    const r = variable('r');\n    body.push(r.set(NULL_EXPR).toDeclStmt());\n    const ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() : importExpr(Identifiers.invalidFactory).callFn([]).toStmt();\n    body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));\n    return r;\n  }\n  if (isDelegatedFactoryMetadata(meta)) {\n    // This type is created with a delegated factory. If a type parameter is not specified, call\n    // the factory instead.\n    const delegateArgs = injectDependencies(meta.delegateDeps, meta.target);\n    // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.\n    const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);\n    retExpr = makeConditionalFactory(factoryExpr);\n  } else if (isExpressionFactoryMetadata(meta)) {\n    // TODO(alxhub): decide whether to lower the value here or in the caller\n    retExpr = makeConditionalFactory(meta.expression);\n  } else {\n    retExpr = ctorExpr;\n  }\n  if (retExpr === null) {\n    // The expression cannot be formed so render an `ɵɵinvalidFactory()` call.\n    body.push(importExpr(Identifiers.invalidFactory).callFn([]).toStmt());\n  } else if (baseFactoryVar !== null) {\n    // This factory uses a base factory, so call `ɵɵgetInheritedFactory()` to compute it.\n    const getInheritedFactoryCall = importExpr(Identifiers.getInheritedFactory).callFn([meta.type.value]);\n    // Memoize the base factoryFn: `baseFactory || (baseFactory = ɵɵgetInheritedFactory(...))`\n    const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));\n    body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));\n  } else {\n    // This is straightforward factory, just return it.\n    body.push(new ReturnStatement(retExpr));\n  }\n  let factoryFn = fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, `${meta.name}_Factory`);\n  if (baseFactoryVar !== null) {\n    // There is a base factory variable so wrap its declaration along with the factory function into\n    // an IIFE.\n    factoryFn = arrowFn([], [new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)]).callFn([], /* sourceSpan */undefined, /* pure */true);\n  }\n  return {\n    expression: factoryFn,\n    statements: [],\n    type: createFactoryType(meta)\n  };\n}\nfunction createFactoryType(meta) {\n  const ctorDepsType = meta.deps !== null && meta.deps !== 'invalid' ? createCtorDepsType(meta.deps) : NONE_TYPE;\n  return expressionType(importExpr(Identifiers.FactoryDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]));\n}\nfunction injectDependencies(deps, target) {\n  return deps.map((dep, index) => compileInjectDependency(dep, target, index));\n}\nfunction compileInjectDependency(dep, target, index) {\n  // Interpret the dependency according to its resolved type.\n  if (dep.token === null) {\n    return importExpr(Identifiers.invalidFactoryDep).callFn([literal(index)]);\n  } else if (dep.attributeNameType === null) {\n    // Build up the injection flags according to the metadata.\n    const flags = 0 /* InjectFlags.Default */ | (dep.self ? 2 /* InjectFlags.Self */ : 0) | (dep.skipSelf ? 4 /* InjectFlags.SkipSelf */ : 0) | (dep.host ? 1 /* InjectFlags.Host */ : 0) | (dep.optional ? 8 /* InjectFlags.Optional */ : 0) | (target === FactoryTarget$1.Pipe ? 16 /* InjectFlags.ForPipe */ : 0);\n    // If this dependency is optional or otherwise has non-default flags, then additional\n    // parameters describing how to inject the dependency must be passed to the inject function\n    // that's being used.\n    let flagsParam = flags !== 0 /* InjectFlags.Default */ || dep.optional ? literal(flags) : null;\n    // Build up the arguments to the injectFn call.\n    const injectArgs = [dep.token];\n    if (flagsParam) {\n      injectArgs.push(flagsParam);\n    }\n    const injectFn = getInjectFn(target);\n    return importExpr(injectFn).callFn(injectArgs);\n  } else {\n    // The `dep.attributeTypeName` value is defined, which indicates that this is an `@Attribute()`\n    // type dependency. For the generated JS we still want to use the `dep.token` value in case the\n    // name given for the attribute is not a string literal. For example given `@Attribute(foo())`,\n    // we want to generate `ɵɵinjectAttribute(foo())`.\n    //\n    // The `dep.attributeTypeName` is only actually used (in `createCtorDepType()`) to generate\n    // typings.\n    return importExpr(Identifiers.injectAttribute).callFn([dep.token]);\n  }\n}\nfunction createCtorDepsType(deps) {\n  let hasTypes = false;\n  const attributeTypes = deps.map(dep => {\n    const type = createCtorDepType(dep);\n    if (type !== null) {\n      hasTypes = true;\n      return type;\n    } else {\n      return literal(null);\n    }\n  });\n  if (hasTypes) {\n    return expressionType(literalArr(attributeTypes));\n  } else {\n    return NONE_TYPE;\n  }\n}\nfunction createCtorDepType(dep) {\n  const entries = [];\n  if (dep.attributeNameType !== null) {\n    entries.push({\n      key: 'attribute',\n      value: dep.attributeNameType,\n      quoted: false\n    });\n  }\n  if (dep.optional) {\n    entries.push({\n      key: 'optional',\n      value: literal(true),\n      quoted: false\n    });\n  }\n  if (dep.host) {\n    entries.push({\n      key: 'host',\n      value: literal(true),\n      quoted: false\n    });\n  }\n  if (dep.self) {\n    entries.push({\n      key: 'self',\n      value: literal(true),\n      quoted: false\n    });\n  }\n  if (dep.skipSelf) {\n    entries.push({\n      key: 'skipSelf',\n      value: literal(true),\n      quoted: false\n    });\n  }\n  return entries.length > 0 ? literalMap(entries) : null;\n}\nfunction isDelegatedFactoryMetadata(meta) {\n  return meta.delegateType !== undefined;\n}\nfunction isExpressionFactoryMetadata(meta) {\n  return meta.expression !== undefined;\n}\nfunction getInjectFn(target) {\n  switch (target) {\n    case FactoryTarget$1.Component:\n    case FactoryTarget$1.Directive:\n    case FactoryTarget$1.Pipe:\n      return Identifiers.directiveInject;\n    case FactoryTarget$1.NgModule:\n    case FactoryTarget$1.Injectable:\n    default:\n      return Identifiers.inject;\n  }\n}\nvar TagContentType;\n(function (TagContentType) {\n  TagContentType[TagContentType[\"RAW_TEXT\"] = 0] = \"RAW_TEXT\";\n  TagContentType[TagContentType[\"ESCAPABLE_RAW_TEXT\"] = 1] = \"ESCAPABLE_RAW_TEXT\";\n  TagContentType[TagContentType[\"PARSABLE_DATA\"] = 2] = \"PARSABLE_DATA\";\n})(TagContentType || (TagContentType = {}));\nfunction splitNsName(elementName, fatal = true) {\n  if (elementName[0] != ':') {\n    return [null, elementName];\n  }\n  const colonIndex = elementName.indexOf(':', 1);\n  if (colonIndex === -1) {\n    if (fatal) {\n      throw new Error(`Unsupported format \"${elementName}\" expecting \":namespace:name\"`);\n    } else {\n      return [null, elementName];\n    }\n  }\n  return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n// `<ng-container>` tags work the same regardless the namespace\nfunction isNgContainer(tagName) {\n  return splitNsName(tagName)[1] === 'ng-container';\n}\n// `<ng-content>` tags work the same regardless the namespace\nfunction isNgContent(tagName) {\n  return splitNsName(tagName)[1] === 'ng-content';\n}\n// `<ng-template>` tags work the same regardless the namespace\nfunction isNgTemplate(tagName) {\n  return splitNsName(tagName)[1] === 'ng-template';\n}\nfunction getNsPrefix(fullName) {\n  return fullName === null ? null : splitNsName(fullName)[0];\n}\nfunction mergeNsAndName(prefix, localName) {\n  return prefix ? `:${prefix}:${localName}` : localName;\n}\n\n/**\n * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently\n * require the implementation of a visitor for Comments as they are only collected at\n * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`\n * is true.\n */\nclass Comment$1 {\n  constructor(value, sourceSpan) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n  visit(_visitor) {\n    throw new Error('visit() not implemented for Comment');\n  }\n}\nclass Text$3 {\n  constructor(value, sourceSpan) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n  visit(visitor) {\n    return visitor.visitText(this);\n  }\n}\nclass BoundText {\n  constructor(value, sourceSpan, i18n) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitBoundText(this);\n  }\n}\n/**\n * Represents a text attribute in the template.\n *\n * `valueSpan` may not be present in cases where there is no value `<div a></div>`.\n * `keySpan` may also not be present for synthetic attributes from ICU expansions.\n */\nclass TextAttribute {\n  constructor(name, value, sourceSpan, keySpan, valueSpan, i18n) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitTextAttribute(this);\n  }\n}\nclass BoundAttribute {\n  constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {\n    this.name = name;\n    this.type = type;\n    this.securityContext = securityContext;\n    this.value = value;\n    this.unit = unit;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.i18n = i18n;\n  }\n  static fromBoundElementProperty(prop, i18n) {\n    if (prop.keySpan === undefined) {\n      throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);\n    }\n    return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);\n  }\n  visit(visitor) {\n    return visitor.visitBoundAttribute(this);\n  }\n}\nclass BoundEvent {\n  constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {\n    this.name = name;\n    this.type = type;\n    this.handler = handler;\n    this.target = target;\n    this.phase = phase;\n    this.sourceSpan = sourceSpan;\n    this.handlerSpan = handlerSpan;\n    this.keySpan = keySpan;\n  }\n  static fromParsedEvent(event) {\n    const target = event.type === 0 /* ParsedEventType.Regular */ ? event.targetOrPhase : null;\n    const phase = event.type === 1 /* ParsedEventType.Animation */ ? event.targetOrPhase : null;\n    if (event.keySpan === undefined) {\n      throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);\n    }\n    return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);\n  }\n  visit(visitor) {\n    return visitor.visitBoundEvent(this);\n  }\n}\nclass Element$1 {\n  constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    this.name = name;\n    this.attributes = attributes;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.children = children;\n    this.references = references;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitElement(this);\n  }\n}\nclass DeferredTrigger {\n  constructor(nameSpan, sourceSpan, prefetchSpan, whenOrOnSourceSpan) {\n    this.nameSpan = nameSpan;\n    this.sourceSpan = sourceSpan;\n    this.prefetchSpan = prefetchSpan;\n    this.whenOrOnSourceSpan = whenOrOnSourceSpan;\n  }\n  visit(visitor) {\n    return visitor.visitDeferredTrigger(this);\n  }\n}\nclass BoundDeferredTrigger extends DeferredTrigger {\n  constructor(value, sourceSpan, prefetchSpan, whenSourceSpan) {\n    // BoundDeferredTrigger is for 'when' triggers. These aren't really \"triggers\" and don't have a\n    // nameSpan. Trigger names are the built in event triggers like hover, interaction, etc.\n    super( /** nameSpan */null, sourceSpan, prefetchSpan, whenSourceSpan);\n    this.value = value;\n  }\n}\nclass IdleDeferredTrigger extends DeferredTrigger {}\nclass ImmediateDeferredTrigger extends DeferredTrigger {}\nclass HoverDeferredTrigger extends DeferredTrigger {\n  constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n    super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n    this.reference = reference;\n  }\n}\nclass TimerDeferredTrigger extends DeferredTrigger {\n  constructor(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n    super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n    this.delay = delay;\n  }\n}\nclass InteractionDeferredTrigger extends DeferredTrigger {\n  constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n    super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n    this.reference = reference;\n  }\n}\nclass ViewportDeferredTrigger extends DeferredTrigger {\n  constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n    super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n    this.reference = reference;\n  }\n}\nclass BlockNode {\n  constructor(nameSpan, sourceSpan, startSourceSpan, endSourceSpan) {\n    this.nameSpan = nameSpan;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n}\nclass DeferredBlockPlaceholder extends BlockNode {\n  constructor(children, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.children = children;\n    this.minimumTime = minimumTime;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitDeferredBlockPlaceholder(this);\n  }\n}\nclass DeferredBlockLoading extends BlockNode {\n  constructor(children, afterTime, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.children = children;\n    this.afterTime = afterTime;\n    this.minimumTime = minimumTime;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitDeferredBlockLoading(this);\n  }\n}\nclass DeferredBlockError extends BlockNode {\n  constructor(children, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.children = children;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitDeferredBlockError(this);\n  }\n}\nclass DeferredBlock extends BlockNode {\n  constructor(children, triggers, prefetchTriggers, placeholder, loading, error, nameSpan, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, i18n) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.children = children;\n    this.placeholder = placeholder;\n    this.loading = loading;\n    this.error = error;\n    this.mainBlockSpan = mainBlockSpan;\n    this.i18n = i18n;\n    this.triggers = triggers;\n    this.prefetchTriggers = prefetchTriggers;\n    // We cache the keys since we know that they won't change and we\n    // don't want to enumarate them every time we're traversing the AST.\n    this.definedTriggers = Object.keys(triggers);\n    this.definedPrefetchTriggers = Object.keys(prefetchTriggers);\n  }\n  visit(visitor) {\n    return visitor.visitDeferredBlock(this);\n  }\n  visitAll(visitor) {\n    this.visitTriggers(this.definedTriggers, this.triggers, visitor);\n    this.visitTriggers(this.definedPrefetchTriggers, this.prefetchTriggers, visitor);\n    visitAll$1(visitor, this.children);\n    const remainingBlocks = [this.placeholder, this.loading, this.error].filter(x => x !== null);\n    visitAll$1(visitor, remainingBlocks);\n  }\n  visitTriggers(keys, triggers, visitor) {\n    visitAll$1(visitor, keys.map(k => triggers[k]));\n  }\n}\nclass SwitchBlock extends BlockNode {\n  constructor(expression, cases,\n  /**\n   * These blocks are only captured to allow for autocompletion in the language service. They\n   * aren't meant to be processed in any other way.\n   */\n  unknownBlocks, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.expression = expression;\n    this.cases = cases;\n    this.unknownBlocks = unknownBlocks;\n  }\n  visit(visitor) {\n    return visitor.visitSwitchBlock(this);\n  }\n}\nclass SwitchBlockCase extends BlockNode {\n  constructor(expression, children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.expression = expression;\n    this.children = children;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitSwitchBlockCase(this);\n  }\n}\nclass ForLoopBlock extends BlockNode {\n  constructor(item, expression, trackBy, trackKeywordSpan, contextVariables, children, empty, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.item = item;\n    this.expression = expression;\n    this.trackBy = trackBy;\n    this.trackKeywordSpan = trackKeywordSpan;\n    this.contextVariables = contextVariables;\n    this.children = children;\n    this.empty = empty;\n    this.mainBlockSpan = mainBlockSpan;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitForLoopBlock(this);\n  }\n}\nclass ForLoopBlockEmpty extends BlockNode {\n  constructor(children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.children = children;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitForLoopBlockEmpty(this);\n  }\n}\nclass IfBlock extends BlockNode {\n  constructor(branches, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.branches = branches;\n  }\n  visit(visitor) {\n    return visitor.visitIfBlock(this);\n  }\n}\nclass IfBlockBranch extends BlockNode {\n  constructor(expression, children, expressionAlias, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {\n    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n    this.expression = expression;\n    this.children = children;\n    this.expressionAlias = expressionAlias;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitIfBlockBranch(this);\n  }\n}\nclass UnknownBlock {\n  constructor(name, sourceSpan, nameSpan) {\n    this.name = name;\n    this.sourceSpan = sourceSpan;\n    this.nameSpan = nameSpan;\n  }\n  visit(visitor) {\n    return visitor.visitUnknownBlock(this);\n  }\n}\nclass Template {\n  constructor(\n  // tagName is the name of the container element, if applicable.\n  // `null` is a special case for when there is a structural directive on an `ng-template` so\n  // the renderer can differentiate between the synthetic template and the one written in the\n  // file.\n  tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    this.tagName = tagName;\n    this.attributes = attributes;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.templateAttrs = templateAttrs;\n    this.children = children;\n    this.references = references;\n    this.variables = variables;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitTemplate(this);\n  }\n}\nclass Content {\n  constructor(selector, attributes, sourceSpan, i18n) {\n    this.selector = selector;\n    this.attributes = attributes;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n    this.name = 'ng-content';\n  }\n  visit(visitor) {\n    return visitor.visitContent(this);\n  }\n}\nclass Variable {\n  constructor(name, value, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n  visit(visitor) {\n    return visitor.visitVariable(this);\n  }\n}\nclass Reference {\n  constructor(name, value, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n  visit(visitor) {\n    return visitor.visitReference(this);\n  }\n}\nclass Icu$1 {\n  constructor(vars, placeholders, sourceSpan, i18n) {\n    this.vars = vars;\n    this.placeholders = placeholders;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n  }\n  visit(visitor) {\n    return visitor.visitIcu(this);\n  }\n}\nclass RecursiveVisitor$1 {\n  visitElement(element) {\n    visitAll$1(this, element.attributes);\n    visitAll$1(this, element.inputs);\n    visitAll$1(this, element.outputs);\n    visitAll$1(this, element.children);\n    visitAll$1(this, element.references);\n  }\n  visitTemplate(template) {\n    visitAll$1(this, template.attributes);\n    visitAll$1(this, template.inputs);\n    visitAll$1(this, template.outputs);\n    visitAll$1(this, template.children);\n    visitAll$1(this, template.references);\n    visitAll$1(this, template.variables);\n  }\n  visitDeferredBlock(deferred) {\n    deferred.visitAll(this);\n  }\n  visitDeferredBlockPlaceholder(block) {\n    visitAll$1(this, block.children);\n  }\n  visitDeferredBlockError(block) {\n    visitAll$1(this, block.children);\n  }\n  visitDeferredBlockLoading(block) {\n    visitAll$1(this, block.children);\n  }\n  visitSwitchBlock(block) {\n    visitAll$1(this, block.cases);\n  }\n  visitSwitchBlockCase(block) {\n    visitAll$1(this, block.children);\n  }\n  visitForLoopBlock(block) {\n    const blockItems = [block.item, ...Object.values(block.contextVariables), ...block.children];\n    block.empty && blockItems.push(block.empty);\n    visitAll$1(this, blockItems);\n  }\n  visitForLoopBlockEmpty(block) {\n    visitAll$1(this, block.children);\n  }\n  visitIfBlock(block) {\n    visitAll$1(this, block.branches);\n  }\n  visitIfBlockBranch(block) {\n    const blockItems = block.children;\n    block.expressionAlias && blockItems.push(block.expressionAlias);\n    visitAll$1(this, blockItems);\n  }\n  visitContent(content) {}\n  visitVariable(variable) {}\n  visitReference(reference) {}\n  visitTextAttribute(attribute) {}\n  visitBoundAttribute(attribute) {}\n  visitBoundEvent(attribute) {}\n  visitText(text) {}\n  visitBoundText(text) {}\n  visitIcu(icu) {}\n  visitDeferredTrigger(trigger) {}\n  visitUnknownBlock(block) {}\n}\nfunction visitAll$1(visitor, nodes) {\n  const result = [];\n  if (visitor.visit) {\n    for (const node of nodes) {\n      visitor.visit(node) || node.visit(visitor);\n    }\n  } else {\n    for (const node of nodes) {\n      const newNode = node.visit(visitor);\n      if (newNode) {\n        result.push(newNode);\n      }\n    }\n  }\n  return result;\n}\nclass Message {\n  /**\n   * @param nodes message AST\n   * @param placeholders maps placeholder names to static content and their source spans\n   * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n   * @param meaning\n   * @param description\n   * @param customId\n   */\n  constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {\n    this.nodes = nodes;\n    this.placeholders = placeholders;\n    this.placeholderToMessage = placeholderToMessage;\n    this.meaning = meaning;\n    this.description = description;\n    this.customId = customId;\n    /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */\n    this.legacyIds = [];\n    this.id = this.customId;\n    this.messageString = serializeMessage(this.nodes);\n    if (nodes.length) {\n      this.sources = [{\n        filePath: nodes[0].sourceSpan.start.file.url,\n        startLine: nodes[0].sourceSpan.start.line + 1,\n        startCol: nodes[0].sourceSpan.start.col + 1,\n        endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n        endCol: nodes[0].sourceSpan.start.col + 1\n      }];\n    } else {\n      this.sources = [];\n    }\n  }\n}\nclass Text$2 {\n  constructor(value, sourceSpan) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitText(this, context);\n  }\n}\n// TODO(vicb): do we really need this node (vs an array) ?\nclass Container {\n  constructor(children, sourceSpan) {\n    this.children = children;\n    this.sourceSpan = sourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitContainer(this, context);\n  }\n}\nclass Icu {\n  constructor(expression, type, cases, sourceSpan, expressionPlaceholder) {\n    this.expression = expression;\n    this.type = type;\n    this.cases = cases;\n    this.sourceSpan = sourceSpan;\n    this.expressionPlaceholder = expressionPlaceholder;\n  }\n  visit(visitor, context) {\n    return visitor.visitIcu(this, context);\n  }\n}\nclass TagPlaceholder {\n  constructor(tag, attrs, startName, closeName, children, isVoid,\n  // TODO sourceSpan should cover all (we need a startSourceSpan and endSourceSpan)\n  sourceSpan, startSourceSpan, endSourceSpan) {\n    this.tag = tag;\n    this.attrs = attrs;\n    this.startName = startName;\n    this.closeName = closeName;\n    this.children = children;\n    this.isVoid = isVoid;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitTagPlaceholder(this, context);\n  }\n}\nclass Placeholder {\n  constructor(value, name, sourceSpan) {\n    this.value = value;\n    this.name = name;\n    this.sourceSpan = sourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitPlaceholder(this, context);\n  }\n}\nclass IcuPlaceholder {\n  constructor(value, name, sourceSpan) {\n    this.value = value;\n    this.name = name;\n    this.sourceSpan = sourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitIcuPlaceholder(this, context);\n  }\n}\nclass BlockPlaceholder {\n  constructor(name, parameters, startName, closeName, children, sourceSpan, startSourceSpan, endSourceSpan) {\n    this.name = name;\n    this.parameters = parameters;\n    this.startName = startName;\n    this.closeName = closeName;\n    this.children = children;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitBlockPlaceholder(this, context);\n  }\n}\n// Clone the AST\nclass CloneVisitor {\n  visitText(text, context) {\n    return new Text$2(text.value, text.sourceSpan);\n  }\n  visitContainer(container, context) {\n    const children = container.children.map(n => n.visit(this, context));\n    return new Container(children, container.sourceSpan);\n  }\n  visitIcu(icu, context) {\n    const cases = {};\n    Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));\n    const msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan, icu.expressionPlaceholder);\n    return msg;\n  }\n  visitTagPlaceholder(ph, context) {\n    const children = ph.children.map(n => n.visit(this, context));\n    return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n  }\n  visitPlaceholder(ph, context) {\n    return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n  }\n  visitIcuPlaceholder(ph, context) {\n    return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n  }\n  visitBlockPlaceholder(ph, context) {\n    const children = ph.children.map(n => n.visit(this, context));\n    return new BlockPlaceholder(ph.name, ph.parameters, ph.startName, ph.closeName, children, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n  }\n}\n// Visit all the nodes recursively\nclass RecurseVisitor {\n  visitText(text, context) {}\n  visitContainer(container, context) {\n    container.children.forEach(child => child.visit(this));\n  }\n  visitIcu(icu, context) {\n    Object.keys(icu.cases).forEach(k => {\n      icu.cases[k].visit(this);\n    });\n  }\n  visitTagPlaceholder(ph, context) {\n    ph.children.forEach(child => child.visit(this));\n  }\n  visitPlaceholder(ph, context) {}\n  visitIcuPlaceholder(ph, context) {}\n  visitBlockPlaceholder(ph, context) {\n    ph.children.forEach(child => child.visit(this));\n  }\n}\n/**\n * Serialize the message to the Localize backtick string format that would appear in compiled code.\n */\nfunction serializeMessage(messageNodes) {\n  const visitor = new LocalizeMessageStringVisitor();\n  const str = messageNodes.map(n => n.visit(visitor)).join('');\n  return str;\n}\nclass LocalizeMessageStringVisitor {\n  visitText(text) {\n    return text.value;\n  }\n  visitContainer(container) {\n    return container.children.map(child => child.visit(this)).join('');\n  }\n  visitIcu(icu) {\n    const strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n  }\n  visitTagPlaceholder(ph) {\n    const children = ph.children.map(child => child.visit(this)).join('');\n    return `{$${ph.startName}}${children}{$${ph.closeName}}`;\n  }\n  visitPlaceholder(ph) {\n    return `{$${ph.name}}`;\n  }\n  visitIcuPlaceholder(ph) {\n    return `{$${ph.name}}`;\n  }\n  visitBlockPlaceholder(ph) {\n    const children = ph.children.map(child => child.visit(this)).join('');\n    return `{$${ph.startName}}${children}{$${ph.closeName}}`;\n  }\n}\nclass Serializer {\n  // Creates a name mapper, see `PlaceholderMapper`\n  // Returning `null` means that no name mapping is used.\n  createNameMapper(message) {\n    return null;\n  }\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nclass SimplePlaceholderMapper extends RecurseVisitor {\n  // create a mapping from the message\n  constructor(message, mapName) {\n    super();\n    this.mapName = mapName;\n    this.internalToPublic = {};\n    this.publicToNextId = {};\n    this.publicToInternal = {};\n    message.nodes.forEach(node => node.visit(this));\n  }\n  toPublicName(internalName) {\n    return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;\n  }\n  toInternalName(publicName) {\n    return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;\n  }\n  visitText(text, context) {\n    return null;\n  }\n  visitTagPlaceholder(ph, context) {\n    this.visitPlaceholderName(ph.startName);\n    super.visitTagPlaceholder(ph, context);\n    this.visitPlaceholderName(ph.closeName);\n  }\n  visitPlaceholder(ph, context) {\n    this.visitPlaceholderName(ph.name);\n  }\n  visitBlockPlaceholder(ph, context) {\n    this.visitPlaceholderName(ph.startName);\n    super.visitBlockPlaceholder(ph, context);\n    this.visitPlaceholderName(ph.closeName);\n  }\n  visitIcuPlaceholder(ph, context) {\n    this.visitPlaceholderName(ph.name);\n  }\n  // XMB placeholders could only contains A-Z, 0-9 and _\n  visitPlaceholderName(internalName) {\n    if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n      return;\n    }\n    let publicName = this.mapName(internalName);\n    if (this.publicToInternal.hasOwnProperty(publicName)) {\n      // Create a new XMB when it has already been used\n      const nextId = this.publicToNextId[publicName];\n      this.publicToNextId[publicName] = nextId + 1;\n      publicName = `${publicName}_${nextId}`;\n    } else {\n      this.publicToNextId[publicName] = 1;\n    }\n    this.internalToPublic[internalName] = publicName;\n    this.publicToInternal[publicName] = internalName;\n  }\n}\nclass _Visitor$2 {\n  visitTag(tag) {\n    const strAttrs = this._serializeAttributes(tag.attrs);\n    if (tag.children.length == 0) {\n      return `<${tag.name}${strAttrs}/>`;\n    }\n    const strChildren = tag.children.map(node => node.visit(this));\n    return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\n  }\n  visitText(text) {\n    return text.value;\n  }\n  visitDeclaration(decl) {\n    return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n  }\n  _serializeAttributes(attrs) {\n    const strAttrs = Object.keys(attrs).map(name => `${name}=\"${attrs[name]}\"`).join(' ');\n    return strAttrs.length > 0 ? ' ' + strAttrs : '';\n  }\n  visitDoctype(doctype) {\n    return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n  }\n}\nconst _visitor = new _Visitor$2();\nfunction serialize(nodes) {\n  return nodes.map(node => node.visit(_visitor)).join('');\n}\nclass Declaration {\n  constructor(unescapedAttrs) {\n    this.attrs = {};\n    Object.keys(unescapedAttrs).forEach(k => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n  visit(visitor) {\n    return visitor.visitDeclaration(this);\n  }\n}\nclass Doctype {\n  constructor(rootTag, dtd) {\n    this.rootTag = rootTag;\n    this.dtd = dtd;\n  }\n  visit(visitor) {\n    return visitor.visitDoctype(this);\n  }\n}\nclass Tag {\n  constructor(name, unescapedAttrs = {}, children = []) {\n    this.name = name;\n    this.children = children;\n    this.attrs = {};\n    Object.keys(unescapedAttrs).forEach(k => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n  visit(visitor) {\n    return visitor.visitTag(this);\n  }\n}\nclass Text$1 {\n  constructor(unescapedValue) {\n    this.value = escapeXml(unescapedValue);\n  }\n  visit(visitor) {\n    return visitor.visitText(this);\n  }\n}\nclass CR extends Text$1 {\n  constructor(ws = 0) {\n    super(`\\n${new Array(ws + 1).join(' ')}`);\n  }\n}\nconst _ESCAPED_CHARS = [[/&/g, '&amp;'], [/\"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];\n// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\nfunction escapeXml(text) {\n  return _ESCAPED_CHARS.reduce((text, entry) => text.replace(entry[0], entry[1]), text);\n}\nconst _MESSAGES_TAG = 'messagebundle';\nconst _MESSAGE_TAG = 'msg';\nconst _PLACEHOLDER_TAG$3 = 'ph';\nconst _EXAMPLE_TAG = 'ex';\nconst _SOURCE_TAG$2 = 'source';\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\nclass Xmb extends Serializer {\n  write(messages, locale) {\n    const exampleVisitor = new ExampleVisitor();\n    const visitor = new _Visitor$1();\n    let rootNode = new Tag(_MESSAGES_TAG);\n    messages.forEach(message => {\n      const attrs = {\n        id: message.id\n      };\n      if (message.description) {\n        attrs['desc'] = message.description;\n      }\n      if (message.meaning) {\n        attrs['meaning'] = message.meaning;\n      }\n      let sourceTags = [];\n      message.sources.forEach(source => {\n        sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [new Text$1(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));\n      });\n      rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));\n    });\n    rootNode.children.push(new CR());\n    return serialize([new Declaration({\n      version: '1.0',\n      encoding: 'UTF-8'\n    }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR()]);\n  }\n  load(content, url) {\n    throw new Error('Unsupported');\n  }\n  digest(message) {\n    return digest(message);\n  }\n  createNameMapper(message) {\n    return new SimplePlaceholderMapper(message, toPublicName);\n  }\n}\nclass _Visitor$1 {\n  visitText(text, context) {\n    return [new Text$1(text.value)];\n  }\n  visitContainer(container, context) {\n    const nodes = [];\n    container.children.forEach(node => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n  visitIcu(icu, context) {\n    const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n    Object.keys(icu.cases).forEach(c => {\n      nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n    });\n    nodes.push(new Text$1(`}`));\n    return nodes;\n  }\n  visitTagPlaceholder(ph, context) {\n    const startTagAsText = new Text$1(`<${ph.tag}>`);\n    const startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]);\n    // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    const startTagPh = new Tag(_PLACEHOLDER_TAG$3, {\n      name: ph.startName\n    }, [startEx, startTagAsText]);\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [startTagPh];\n    }\n    const closeTagAsText = new Text$1(`</${ph.tag}>`);\n    const closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]);\n    // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    const closeTagPh = new Tag(_PLACEHOLDER_TAG$3, {\n      name: ph.closeName\n    }, [closeEx, closeTagAsText]);\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n  visitPlaceholder(ph, context) {\n    const interpolationAsText = new Text$1(`{{${ph.value}}}`);\n    // Example tag needs to be not-empty for TC.\n    const exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);\n    return [\n    // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    new Tag(_PLACEHOLDER_TAG$3, {\n      name: ph.name\n    }, [exTag, interpolationAsText])];\n  }\n  visitBlockPlaceholder(ph, context) {\n    const startAsText = new Text$1(`@${ph.name}`);\n    const startEx = new Tag(_EXAMPLE_TAG, {}, [startAsText]);\n    // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    const startTagPh = new Tag(_PLACEHOLDER_TAG$3, {\n      name: ph.startName\n    }, [startEx, startAsText]);\n    const closeAsText = new Text$1(`}`);\n    const closeEx = new Tag(_EXAMPLE_TAG, {}, [closeAsText]);\n    // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    const closeTagPh = new Tag(_PLACEHOLDER_TAG$3, {\n      name: ph.closeName\n    }, [closeEx, closeAsText]);\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n  visitIcuPlaceholder(ph, context) {\n    const icuExpression = ph.value.expression;\n    const icuType = ph.value.type;\n    const icuCases = Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ');\n    const icuAsText = new Text$1(`{${icuExpression}, ${icuType}, ${icuCases}}`);\n    const exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);\n    return [\n    // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    new Tag(_PLACEHOLDER_TAG$3, {\n      name: ph.name\n    }, [exTag, icuAsText])];\n  }\n  serialize(nodes) {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n}\nfunction digest(message) {\n  return decimalDigest(message);\n}\n// TC requires at least one non-empty example on placeholders\nclass ExampleVisitor {\n  addDefaultExamples(node) {\n    node.visit(this);\n    return node;\n  }\n  visitTag(tag) {\n    if (tag.name === _PLACEHOLDER_TAG$3) {\n      if (!tag.children || tag.children.length == 0) {\n        const exText = new Text$1(tag.attrs['name'] || '...');\n        tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];\n      }\n    } else if (tag.children) {\n      tag.children.forEach(node => node.visit(this));\n    }\n  }\n  visitText(text) {}\n  visitDeclaration(decl) {}\n  visitDoctype(doctype) {}\n}\n// XMB/XTB placeholders can only contain A-Z, 0-9 and _\nfunction toPublicName(internalName) {\n  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n\n/* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */\nconst CLOSURE_TRANSLATION_VAR_PREFIX = 'MSG_';\n/**\n * Prefix for non-`goog.getMsg` i18n-related vars.\n * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that\n * considers variables like `I18N_0` as constants and throws an error when their value changes.\n */\nconst TRANSLATION_VAR_PREFIX$1 = 'i18n_';\n/** Name of the i18n attributes **/\nconst I18N_ATTR = 'i18n';\nconst I18N_ATTR_PREFIX = 'i18n-';\n/** Prefix of var expressions used in ICUs */\nconst I18N_ICU_VAR_PREFIX = 'VAR_';\n/** Prefix of ICU expressions for post processing */\nconst I18N_ICU_MAPPING_PREFIX$1 = 'I18N_EXP_';\n/** Placeholder wrapper for i18n expressions **/\nconst I18N_PLACEHOLDER_SYMBOL = '�';\nfunction isI18nAttribute(name) {\n  return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);\n}\nfunction isI18nRootNode(meta) {\n  return meta instanceof Message;\n}\nfunction isSingleI18nIcu(meta) {\n  return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu;\n}\nfunction hasI18nMeta(node) {\n  return !!node.i18n;\n}\nfunction hasI18nAttrs(element) {\n  return element.attrs.some(attr => isI18nAttribute(attr.name));\n}\nfunction icuFromI18nMessage(message) {\n  return message.nodes[0];\n}\nfunction wrapI18nPlaceholder(content, contextId = 0) {\n  const blockId = contextId > 0 ? `:${contextId}` : '';\n  return `${I18N_PLACEHOLDER_SYMBOL}${content}${blockId}${I18N_PLACEHOLDER_SYMBOL}`;\n}\nfunction assembleI18nBoundString(strings, bindingStartIndex = 0, contextId = 0) {\n  if (!strings.length) return '';\n  let acc = '';\n  const lastIdx = strings.length - 1;\n  for (let i = 0; i < lastIdx; i++) {\n    acc += `${strings[i]}${wrapI18nPlaceholder(bindingStartIndex + i, contextId)}`;\n  }\n  acc += strings[lastIdx];\n  return acc;\n}\nfunction getSeqNumberGenerator(startsAt = 0) {\n  let current = startsAt;\n  return () => current++;\n}\nfunction placeholdersToParams(placeholders) {\n  const params = {};\n  placeholders.forEach((values, key) => {\n    params[key] = literal(values.length > 1 ? `[${values.join('|')}]` : values[0]);\n  });\n  return params;\n}\nfunction updatePlaceholderMap(map, name, ...values) {\n  const current = map.get(name) || [];\n  current.push(...values);\n  map.set(name, current);\n}\nfunction assembleBoundTextPlaceholders(meta, bindingStartIndex = 0, contextId = 0) {\n  const startIdx = bindingStartIndex;\n  const placeholders = new Map();\n  const node = meta instanceof Message ? meta.nodes.find(node => node instanceof Container) : meta;\n  if (node) {\n    node.children.filter(child => child instanceof Placeholder).forEach((child, idx) => {\n      const content = wrapI18nPlaceholder(startIdx + idx, contextId);\n      updatePlaceholderMap(placeholders, child.name, content);\n    });\n  }\n  return placeholders;\n}\n/**\n * Format the placeholder names in a map of placeholders to expressions.\n *\n * The placeholder names are converted from \"internal\" format (e.g. `START_TAG_DIV_1`) to \"external\"\n * format (e.g. `startTagDiv_1`).\n *\n * @param params A map of placeholder names to expressions.\n * @param useCamelCase whether to camelCase the placeholder name when formatting.\n * @returns A new map of formatted placeholder names to expressions.\n */\nfunction formatI18nPlaceholderNamesInMap(params = {}, useCamelCase) {\n  const _params = {};\n  if (params && Object.keys(params).length) {\n    Object.keys(params).forEach(key => _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]);\n  }\n  return _params;\n}\n/**\n * Converts internal placeholder names to public-facing format\n * (for example to use in goog.getMsg call).\n * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.\n *\n * @param name The placeholder name that should be formatted\n * @returns Formatted placeholder name\n */\nfunction formatI18nPlaceholderName(name, useCamelCase = true) {\n  const publicName = toPublicName(name);\n  if (!useCamelCase) {\n    return publicName;\n  }\n  const chunks = publicName.split('_');\n  if (chunks.length === 1) {\n    // if no \"_\" found - just lowercase the value\n    return name.toLowerCase();\n  }\n  let postfix;\n  // eject last element if it's a number\n  if (/^\\d+$/.test(chunks[chunks.length - 1])) {\n    postfix = chunks.pop();\n  }\n  let raw = chunks.shift().toLowerCase();\n  if (chunks.length) {\n    raw += chunks.map(c => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join('');\n  }\n  return postfix ? `${raw}_${postfix}` : raw;\n}\n/**\n * Generates a prefix for translation const name.\n *\n * @param extra Additional local prefix that should be injected into translation var name\n * @returns Complete translation const prefix\n */\nfunction getTranslationConstPrefix(extra) {\n  return `${CLOSURE_TRANSLATION_VAR_PREFIX}${extra}`.toUpperCase();\n}\n/**\n * Generate AST to declare a variable. E.g. `var I18N_1;`.\n * @param variable the name of the variable to declare.\n */\nfunction declareI18nVariable(variable) {\n  return new DeclareVarStmt(variable.name, undefined, INFERRED_TYPE, undefined, variable.sourceSpan);\n}\n\n/**\n * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in\n * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may\n * not work in some cases when object keys are mangled by a minifier.\n *\n * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with\n * inputs that contain potentially unsafe chars.\n */\nconst UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;\n/** Name of the temporary to use during data binding */\nconst TEMPORARY_NAME = '_t';\n/** Name of the context parameter passed into a template function */\nconst CONTEXT_NAME = 'ctx';\n/** Name of the RenderFlag passed into a template function */\nconst RENDER_FLAGS = 'rf';\n/** The prefix reference variables */\nconst REFERENCE_PREFIX = '_r';\n/** The name of the implicit context reference */\nconst IMPLICIT_REFERENCE = '$implicit';\n/** Non bindable attribute name **/\nconst NON_BINDABLE_ATTR = 'ngNonBindable';\n/** Name for the variable keeping track of the context returned by `ɵɵrestoreView`. */\nconst RESTORED_VIEW_CONTEXT_NAME = 'restoredCtx';\n/** Special value representing a direct access to a template's context. */\nconst DIRECT_CONTEXT_REFERENCE = '#context';\n/**\n * Maximum length of a single instruction chain. Because our output AST uses recursion, we're\n * limited in how many expressions we can nest before we reach the call stack limit. This\n * length is set very conservatively in order to reduce the chance of problems.\n */\nconst MAX_CHAIN_LENGTH = 500;\n/** Instructions that support chaining. */\nconst CHAINABLE_INSTRUCTIONS = new Set([Identifiers.element, Identifiers.elementStart, Identifiers.elementEnd, Identifiers.elementContainer, Identifiers.elementContainerStart, Identifiers.elementContainerEnd, Identifiers.i18nExp, Identifiers.listener, Identifiers.classProp, Identifiers.syntheticHostListener, Identifiers.hostProperty, Identifiers.syntheticHostProperty, Identifiers.property, Identifiers.propertyInterpolate1, Identifiers.propertyInterpolate2, Identifiers.propertyInterpolate3, Identifiers.propertyInterpolate4, Identifiers.propertyInterpolate5, Identifiers.propertyInterpolate6, Identifiers.propertyInterpolate7, Identifiers.propertyInterpolate8, Identifiers.propertyInterpolateV, Identifiers.attribute, Identifiers.attributeInterpolate1, Identifiers.attributeInterpolate2, Identifiers.attributeInterpolate3, Identifiers.attributeInterpolate4, Identifiers.attributeInterpolate5, Identifiers.attributeInterpolate6, Identifiers.attributeInterpolate7, Identifiers.attributeInterpolate8, Identifiers.attributeInterpolateV, Identifiers.styleProp, Identifiers.stylePropInterpolate1, Identifiers.stylePropInterpolate2, Identifiers.stylePropInterpolate3, Identifiers.stylePropInterpolate4, Identifiers.stylePropInterpolate5, Identifiers.stylePropInterpolate6, Identifiers.stylePropInterpolate7, Identifiers.stylePropInterpolate8, Identifiers.stylePropInterpolateV, Identifiers.textInterpolate, Identifiers.textInterpolate1, Identifiers.textInterpolate2, Identifiers.textInterpolate3, Identifiers.textInterpolate4, Identifiers.textInterpolate5, Identifiers.textInterpolate6, Identifiers.textInterpolate7, Identifiers.textInterpolate8, Identifiers.textInterpolateV, Identifiers.templateCreate]);\n/** Generates a call to a single instruction. */\nfunction invokeInstruction(span, reference, params) {\n  return importExpr(reference, null, span).callFn(params, span);\n}\n/**\n * Creates an allocator for a temporary variable.\n *\n * A variable declaration is added to the statements the first time the allocator is invoked.\n */\nfunction temporaryAllocator(statements, name) {\n  let temp = null;\n  return () => {\n    if (!temp) {\n      statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));\n      temp = variable(name);\n    }\n    return temp;\n  };\n}\nfunction invalid(arg) {\n  throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);\n}\nfunction asLiteral(value) {\n  if (Array.isArray(value)) {\n    return literalArr(value.map(asLiteral));\n  }\n  return literal(value, INFERRED_TYPE);\n}\n/**\n * Serializes inputs and outputs for `defineDirective` and `defineComponent`.\n *\n * This will attempt to generate optimized data structures to minimize memory or\n * file size of fully compiled applications.\n */\nfunction conditionallyCreateDirectiveBindingLiteral(map, forInputs) {\n  const keys = Object.getOwnPropertyNames(map);\n  if (keys.length === 0) {\n    return null;\n  }\n  return literalMap(keys.map(key => {\n    const value = map[key];\n    let declaredName;\n    let publicName;\n    let minifiedName;\n    let expressionValue;\n    if (typeof value === 'string') {\n      // canonical syntax: `dirProp: publicProp`\n      declaredName = key;\n      minifiedName = key;\n      publicName = value;\n      expressionValue = asLiteral(publicName);\n    } else {\n      minifiedName = key;\n      declaredName = value.classPropertyName;\n      publicName = value.bindingPropertyName;\n      const differentDeclaringName = publicName !== declaredName;\n      const hasDecoratorInputTransform = value.transformFunction !== null;\n      // Build up input flags\n      let flags = null;\n      if (value.isSignal) {\n        flags = bitwiseOrInputFlagsExpr(InputFlags.SignalBased, flags);\n      }\n      if (hasDecoratorInputTransform) {\n        flags = bitwiseOrInputFlagsExpr(InputFlags.HasDecoratorInputTransform, flags);\n      }\n      // Inputs, compared to outputs, will track their declared name (for `ngOnChanges`), support\n      // decorator input transform functions, or store flag information if there is any.\n      if (forInputs && (differentDeclaringName || hasDecoratorInputTransform || flags !== null)) {\n        const flagsExpr = flags ?? importExpr(Identifiers.InputFlags).prop(InputFlags[InputFlags.None]);\n        const result = [flagsExpr, asLiteral(publicName)];\n        if (differentDeclaringName || hasDecoratorInputTransform) {\n          result.push(asLiteral(declaredName));\n          if (hasDecoratorInputTransform) {\n            result.push(value.transformFunction);\n          }\n        }\n        expressionValue = literalArr(result);\n      } else {\n        expressionValue = asLiteral(publicName);\n      }\n    }\n    return {\n      key: minifiedName,\n      // put quotes around keys that contain potentially unsafe characters\n      quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),\n      value: expressionValue\n    };\n  }));\n}\n/** Gets an output AST expression referencing the given flag. */\nfunction getInputFlagExpr(flag) {\n  return importExpr(Identifiers.InputFlags).prop(InputFlags[flag]);\n}\n/** Combines a given input flag with an existing flag expression, if present. */\nfunction bitwiseOrInputFlagsExpr(flag, expr) {\n  if (expr === null) {\n    return getInputFlagExpr(flag);\n  }\n  return getInputFlagExpr(flag).bitwiseOr(expr);\n}\n/**\n *  Remove trailing null nodes as they are implied.\n */\nfunction trimTrailingNulls(parameters) {\n  while (isNull(parameters[parameters.length - 1])) {\n    parameters.pop();\n  }\n  return parameters;\n}\nfunction getQueryPredicate(query, constantPool) {\n  if (Array.isArray(query.predicate)) {\n    let predicate = [];\n    query.predicate.forEach(selector => {\n      // Each item in predicates array may contain strings with comma-separated refs\n      // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them\n      // as separate array entities\n      const selectors = selector.split(',').map(token => literal(token.trim()));\n      predicate.push(...selectors);\n    });\n    return constantPool.getConstLiteral(literalArr(predicate), true);\n  } else {\n    // The original predicate may have been wrapped in a `forwardRef()` call.\n    switch (query.predicate.forwardRef) {\n      case 0 /* ForwardRefHandling.None */:\n      case 2 /* ForwardRefHandling.Unwrapped */:\n        return query.predicate.expression;\n      case 1 /* ForwardRefHandling.Wrapped */:\n        return importExpr(Identifiers.resolveForwardRef).callFn([query.predicate.expression]);\n    }\n  }\n}\n/**\n * A representation for an object literal used during codegen of definition objects. The generic\n * type `T` allows to reference a documented type of the generated structure, such that the\n * property names that are set can be resolved to their documented declaration.\n */\nclass DefinitionMap {\n  constructor() {\n    this.values = [];\n  }\n  set(key, value) {\n    if (value) {\n      const existing = this.values.find(value => value.key === key);\n      if (existing) {\n        existing.value = value;\n      } else {\n        this.values.push({\n          key: key,\n          value,\n          quoted: false\n        });\n      }\n    }\n  }\n  toLiteralMap() {\n    return literalMap(this.values);\n  }\n}\n/**\n * Creates a `CssSelector` from an AST node.\n */\nfunction createCssSelectorFromNode(node) {\n  const elementName = node instanceof Element$1 ? node.name : 'ng-template';\n  const attributes = getAttrsForDirectiveMatching(node);\n  const cssSelector = new CssSelector();\n  const elementNameNoNs = splitNsName(elementName)[1];\n  cssSelector.setElement(elementNameNoNs);\n  Object.getOwnPropertyNames(attributes).forEach(name => {\n    const nameNoNs = splitNsName(name)[1];\n    const value = attributes[name];\n    cssSelector.addAttribute(nameNoNs, value);\n    if (name.toLowerCase() === 'class') {\n      const classes = value.trim().split(/\\s+/);\n      classes.forEach(className => cssSelector.addClassName(className));\n    }\n  });\n  return cssSelector;\n}\n/**\n * Extract a map of properties to values for a given element or template node, which can be used\n * by the directive matching machinery.\n *\n * @param elOrTpl the element or template in question\n * @return an object set up for directive matching. For attributes on the element/template, this\n * object maps a property name to its (static) value. For any bindings, this map simply maps the\n * property name to an empty string.\n */\nfunction getAttrsForDirectiveMatching(elOrTpl) {\n  const attributesMap = {};\n  if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {\n    elOrTpl.templateAttrs.forEach(a => attributesMap[a.name] = '');\n  } else {\n    elOrTpl.attributes.forEach(a => {\n      if (!isI18nAttribute(a.name)) {\n        attributesMap[a.name] = a.value;\n      }\n    });\n    elOrTpl.inputs.forEach(i => {\n      if (i.type === 0 /* BindingType.Property */) {\n        attributesMap[i.name] = '';\n      }\n    });\n    elOrTpl.outputs.forEach(o => {\n      attributesMap[o.name] = '';\n    });\n  }\n  return attributesMap;\n}\n/**\n * Gets the number of arguments expected to be passed to a generated instruction in the case of\n * interpolation instructions.\n * @param interpolation An interpolation ast\n */\nfunction getInterpolationArgsLength(interpolation) {\n  const {\n    expressions,\n    strings\n  } = interpolation;\n  if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {\n    // If the interpolation has one interpolated value, but the prefix and suffix are both empty\n    // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or\n    // `textInterpolate`.\n    return 1;\n  } else {\n    return expressions.length + strings.length;\n  }\n}\n/**\n * Generates the final instruction call statements based on the passed in configuration.\n * Will try to chain instructions as much as possible, if chaining is supported.\n */\nfunction getInstructionStatements(instructions) {\n  const statements = [];\n  let pendingExpression = null;\n  let pendingExpressionType = null;\n  let chainLength = 0;\n  for (const current of instructions) {\n    const resolvedParams = (typeof current.paramsOrFn === 'function' ? current.paramsOrFn() : current.paramsOrFn) ?? [];\n    const params = Array.isArray(resolvedParams) ? resolvedParams : [resolvedParams];\n    // If the current instruction is the same as the previous one\n    // and it can be chained, add another call to the chain.\n    if (chainLength < MAX_CHAIN_LENGTH && pendingExpressionType === current.reference && CHAINABLE_INSTRUCTIONS.has(pendingExpressionType)) {\n      // We'll always have a pending expression when there's a pending expression type.\n      pendingExpression = pendingExpression.callFn(params, pendingExpression.sourceSpan);\n      chainLength++;\n    } else {\n      if (pendingExpression !== null) {\n        statements.push(pendingExpression.toStmt());\n      }\n      pendingExpression = invokeInstruction(current.span, current.reference, params);\n      pendingExpressionType = current.reference;\n      chainLength = 0;\n    }\n  }\n  // Since the current instruction adds the previous one to the statements,\n  // we may be left with the final one at the end that is still pending.\n  if (pendingExpression !== null) {\n    statements.push(pendingExpression.toStmt());\n  }\n  return statements;\n}\nfunction compileInjectable(meta, resolveForwardRefs) {\n  let result = null;\n  const factoryMeta = {\n    name: meta.name,\n    type: meta.type,\n    typeArgumentCount: meta.typeArgumentCount,\n    deps: [],\n    target: FactoryTarget$1.Injectable\n  };\n  if (meta.useClass !== undefined) {\n    // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is\n    // used to instantiate the class with dependencies injected, or deps are not specified and\n    // the factory of the class is used to instantiate it.\n    //\n    // A special case exists for useClass: Type where Type is the injectable type itself and no\n    // deps are specified, in which case 'useClass' is effectively ignored.\n    const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.type.value);\n    let deps = undefined;\n    if (meta.deps !== undefined) {\n      deps = meta.deps;\n    }\n    if (deps !== undefined) {\n      // factory: () => new meta.useClass(...deps)\n      result = compileFactoryFunction({\n        ...factoryMeta,\n        delegate: meta.useClass.expression,\n        delegateDeps: deps,\n        delegateType: R3FactoryDelegateType.Class\n      });\n    } else if (useClassOnSelf) {\n      result = compileFactoryFunction(factoryMeta);\n    } else {\n      result = {\n        statements: [],\n        expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)\n      };\n    }\n  } else if (meta.useFactory !== undefined) {\n    if (meta.deps !== undefined) {\n      result = compileFactoryFunction({\n        ...factoryMeta,\n        delegate: meta.useFactory,\n        delegateDeps: meta.deps || [],\n        delegateType: R3FactoryDelegateType.Function\n      });\n    } else {\n      result = {\n        statements: [],\n        expression: arrowFn([], meta.useFactory.callFn([]))\n      };\n    }\n  } else if (meta.useValue !== undefined) {\n    // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for\n    // client code because meta.useValue is an Expression which will be defined even if the actual\n    // value is undefined.\n    result = compileFactoryFunction({\n      ...factoryMeta,\n      expression: meta.useValue.expression\n    });\n  } else if (meta.useExisting !== undefined) {\n    // useExisting is an `inject` call on the existing token.\n    result = compileFactoryFunction({\n      ...factoryMeta,\n      expression: importExpr(Identifiers.inject).callFn([meta.useExisting.expression])\n    });\n  } else {\n    result = {\n      statements: [],\n      expression: delegateToFactory(meta.type.value, meta.type.value, resolveForwardRefs)\n    };\n  }\n  const token = meta.type.value;\n  const injectableProps = new DefinitionMap();\n  injectableProps.set('token', token);\n  injectableProps.set('factory', result.expression);\n  // Only generate providedIn property if it has a non-null value\n  if (meta.providedIn.expression.value !== null) {\n    injectableProps.set('providedIn', convertFromMaybeForwardRefExpression(meta.providedIn));\n  }\n  const expression = importExpr(Identifiers.ɵɵdefineInjectable).callFn([injectableProps.toLiteralMap()], undefined, true);\n  return {\n    expression,\n    type: createInjectableType(meta),\n    statements: result.statements\n  };\n}\nfunction createInjectableType(meta) {\n  return new ExpressionType(importExpr(Identifiers.InjectableDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));\n}\nfunction delegateToFactory(type, useType, unwrapForwardRefs) {\n  if (type.node === useType.node) {\n    // The types are the same, so we can simply delegate directly to the type's factory.\n    // ```\n    // factory: type.ɵfac\n    // ```\n    return useType.prop('ɵfac');\n  }\n  if (!unwrapForwardRefs) {\n    // The type is not wrapped in a `forwardRef()`, so we create a simple factory function that\n    // accepts a sub-type as an argument.\n    // ```\n    // factory: function(t) { return useType.ɵfac(t); }\n    // ```\n    return createFactoryFunction(useType);\n  }\n  // The useType is actually wrapped in a `forwardRef()` so we need to resolve that before\n  // calling its factory.\n  // ```\n  // factory: function(t) { return core.resolveForwardRef(type).ɵfac(t); }\n  // ```\n  const unwrappedType = importExpr(Identifiers.resolveForwardRef).callFn([useType]);\n  return createFactoryFunction(unwrappedType);\n}\nfunction createFactoryFunction(type) {\n  return arrowFn([new FnParam('t', DYNAMIC_TYPE)], type.prop('ɵfac').callFn([variable('t')]));\n}\nconst UNUSABLE_INTERPOLATION_REGEXPS = [/^\\s*$/,\n// empty\n/[<>]/,\n// html tag\n/^[{}]$/,\n// i18n expansion\n/&(#|[a-z])/i,\n// character reference,\n/^\\/\\// // comment\n];\nfunction assertInterpolationSymbols(identifier, value) {\n  if (value != null && !(Array.isArray(value) && value.length == 2)) {\n    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n  } else if (value != null) {\n    const start = value[0];\n    const end = value[1];\n    // Check for unusable interpolation symbols\n    UNUSABLE_INTERPOLATION_REGEXPS.forEach(regexp => {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n      }\n    });\n  }\n}\nclass InterpolationConfig {\n  static fromArray(markers) {\n    if (!markers) {\n      return DEFAULT_INTERPOLATION_CONFIG;\n    }\n    assertInterpolationSymbols('interpolation', markers);\n    return new InterpolationConfig(markers[0], markers[1]);\n  }\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n}\nconst DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\nconst DEFAULT_CONTAINER_BLOCKS = new Set(['switch']);\nconst $EOF = 0;\nconst $BSPACE = 8;\nconst $TAB = 9;\nconst $LF = 10;\nconst $VTAB = 11;\nconst $FF = 12;\nconst $CR = 13;\nconst $SPACE = 32;\nconst $BANG = 33;\nconst $DQ = 34;\nconst $HASH = 35;\nconst $$ = 36;\nconst $PERCENT = 37;\nconst $AMPERSAND = 38;\nconst $SQ = 39;\nconst $LPAREN = 40;\nconst $RPAREN = 41;\nconst $STAR = 42;\nconst $PLUS = 43;\nconst $COMMA = 44;\nconst $MINUS = 45;\nconst $PERIOD = 46;\nconst $SLASH = 47;\nconst $COLON = 58;\nconst $SEMICOLON = 59;\nconst $LT = 60;\nconst $EQ = 61;\nconst $GT = 62;\nconst $QUESTION = 63;\nconst $0 = 48;\nconst $7 = 55;\nconst $9 = 57;\nconst $A = 65;\nconst $E = 69;\nconst $F = 70;\nconst $X = 88;\nconst $Z = 90;\nconst $LBRACKET = 91;\nconst $BACKSLASH = 92;\nconst $RBRACKET = 93;\nconst $CARET = 94;\nconst $_ = 95;\nconst $a = 97;\nconst $b = 98;\nconst $e = 101;\nconst $f = 102;\nconst $n = 110;\nconst $r = 114;\nconst $t = 116;\nconst $u = 117;\nconst $v = 118;\nconst $x = 120;\nconst $z = 122;\nconst $LBRACE = 123;\nconst $BAR = 124;\nconst $RBRACE = 125;\nconst $NBSP = 160;\nconst $PIPE = 124;\nconst $TILDA = 126;\nconst $AT = 64;\nconst $BT = 96;\nfunction isWhitespace(code) {\n  return code >= $TAB && code <= $SPACE || code == $NBSP;\n}\nfunction isDigit(code) {\n  return $0 <= code && code <= $9;\n}\nfunction isAsciiLetter(code) {\n  return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\nfunction isAsciiHexDigit(code) {\n  return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}\nfunction isNewLine(code) {\n  return code === $LF || code === $CR;\n}\nfunction isOctalDigit(code) {\n  return $0 <= code && code <= $7;\n}\nfunction isQuote(code) {\n  return code === $SQ || code === $DQ || code === $BT;\n}\nclass ParseLocation {\n  constructor(file, offset, line, col) {\n    this.file = file;\n    this.offset = offset;\n    this.line = line;\n    this.col = col;\n  }\n  toString() {\n    return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;\n  }\n  moveBy(delta) {\n    const source = this.file.content;\n    const len = source.length;\n    let offset = this.offset;\n    let line = this.line;\n    let col = this.col;\n    while (offset > 0 && delta < 0) {\n      offset--;\n      delta++;\n      const ch = source.charCodeAt(offset);\n      if (ch == $LF) {\n        line--;\n        const priorLine = source.substring(0, offset - 1).lastIndexOf(String.fromCharCode($LF));\n        col = priorLine > 0 ? offset - priorLine : offset;\n      } else {\n        col--;\n      }\n    }\n    while (offset < len && delta > 0) {\n      const ch = source.charCodeAt(offset);\n      offset++;\n      delta--;\n      if (ch == $LF) {\n        line++;\n        col = 0;\n      } else {\n        col++;\n      }\n    }\n    return new ParseLocation(this.file, offset, line, col);\n  }\n  // Return the source around the location\n  // Up to `maxChars` or `maxLines` on each side of the location\n  getContext(maxChars, maxLines) {\n    const content = this.file.content;\n    let startOffset = this.offset;\n    if (startOffset != null) {\n      if (startOffset > content.length - 1) {\n        startOffset = content.length - 1;\n      }\n      let endOffset = startOffset;\n      let ctxChars = 0;\n      let ctxLines = 0;\n      while (ctxChars < maxChars && startOffset > 0) {\n        startOffset--;\n        ctxChars++;\n        if (content[startOffset] == '\\n') {\n          if (++ctxLines == maxLines) {\n            break;\n          }\n        }\n      }\n      ctxChars = 0;\n      ctxLines = 0;\n      while (ctxChars < maxChars && endOffset < content.length - 1) {\n        endOffset++;\n        ctxChars++;\n        if (content[endOffset] == '\\n') {\n          if (++ctxLines == maxLines) {\n            break;\n          }\n        }\n      }\n      return {\n        before: content.substring(startOffset, this.offset),\n        after: content.substring(this.offset, endOffset + 1)\n      };\n    }\n    return null;\n  }\n}\nclass ParseSourceFile {\n  constructor(content, url) {\n    this.content = content;\n    this.url = url;\n  }\n}\nclass ParseSourceSpan {\n  /**\n   * Create an object that holds information about spans of tokens/nodes captured during\n   * lexing/parsing of text.\n   *\n   * @param start\n   * The location of the start of the span (having skipped leading trivia).\n   * Skipping leading trivia makes source-spans more \"user friendly\", since things like HTML\n   * elements will appear to begin at the start of the opening tag, rather than at the start of any\n   * leading trivia, which could include newlines.\n   *\n   * @param end\n   * The location of the end of the span.\n   *\n   * @param fullStart\n   * The start of the token without skipping the leading trivia.\n   * This is used by tooling that splits tokens further, such as extracting Angular interpolations\n   * from text tokens. Such tooling creates new source-spans relative to the original token's\n   * source-span. If leading trivia characters have been skipped then the new source-spans may be\n   * incorrectly offset.\n   *\n   * @param details\n   * Additional information (such as identifier names) that should be associated with the span.\n   */\n  constructor(start, end, fullStart = start, details = null) {\n    this.start = start;\n    this.end = end;\n    this.fullStart = fullStart;\n    this.details = details;\n  }\n  toString() {\n    return this.start.file.content.substring(this.start.offset, this.end.offset);\n  }\n}\nvar ParseErrorLevel;\n(function (ParseErrorLevel) {\n  ParseErrorLevel[ParseErrorLevel[\"WARNING\"] = 0] = \"WARNING\";\n  ParseErrorLevel[ParseErrorLevel[\"ERROR\"] = 1] = \"ERROR\";\n})(ParseErrorLevel || (ParseErrorLevel = {}));\nclass ParseError {\n  constructor(span, msg, level = ParseErrorLevel.ERROR) {\n    this.span = span;\n    this.msg = msg;\n    this.level = level;\n  }\n  contextualMessage() {\n    const ctx = this.span.start.getContext(100, 3);\n    return ctx ? `${this.msg} (\"${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}\")` : this.msg;\n  }\n  toString() {\n    const details = this.span.details ? `, ${this.span.details}` : '';\n    return `${this.contextualMessage()}: ${this.span.start}${details}`;\n  }\n}\n/**\n * Generates Source Span object for a given R3 Type for JIT mode.\n *\n * @param kind Component or Directive.\n * @param typeName name of the Component or Directive.\n * @param sourceUrl reference to Component or Directive source.\n * @returns instance of ParseSourceSpan that represent a given Component or Directive.\n */\nfunction r3JitTypeSourceSpan(kind, typeName, sourceUrl) {\n  const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;\n  const sourceFile = new ParseSourceFile('', sourceFileName);\n  return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\nlet _anonymousTypeIndex = 0;\nfunction identifierName(compileIdentifier) {\n  if (!compileIdentifier || !compileIdentifier.reference) {\n    return null;\n  }\n  const ref = compileIdentifier.reference;\n  if (ref['__anonymousType']) {\n    return ref['__anonymousType'];\n  }\n  if (ref['__forward_ref__']) {\n    // We do not want to try to stringify a `forwardRef()` function because that would cause the\n    // inner function to be evaluated too early, defeating the whole point of the `forwardRef`.\n    return '__forward_ref__';\n  }\n  let identifier = stringify(ref);\n  if (identifier.indexOf('(') >= 0) {\n    // case: anonymous functions!\n    identifier = `anonymous_${_anonymousTypeIndex++}`;\n    ref['__anonymousType'] = identifier;\n  } else {\n    identifier = sanitizeIdentifier(identifier);\n  }\n  return identifier;\n}\nfunction sanitizeIdentifier(name) {\n  return name.replace(/\\W/g, '_');\n}\n\n/**\n * In TypeScript, tagged template functions expect a \"template object\", which is an array of\n * \"cooked\" strings plus a `raw` property that contains an array of \"raw\" strings. This is\n * typically constructed with a function called `__makeTemplateObject(cooked, raw)`, but it may not\n * be available in all environments.\n *\n * This is a JavaScript polyfill that uses __makeTemplateObject when it's available, but otherwise\n * creates an inline helper with the same functionality.\n *\n * In the inline function, if `Object.defineProperty` is available we use that to attach the `raw`\n * array.\n */\nconst makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,\"raw\",{value:t}):e.raw=t,e})';\nclass AbstractJsEmitterVisitor extends AbstractEmitterVisitor {\n  constructor() {\n    super(false);\n  }\n  visitWrappedNodeExpr(ast, ctx) {\n    throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');\n  }\n  visitDeclareVarStmt(stmt, ctx) {\n    ctx.print(stmt, `var ${stmt.name}`);\n    if (stmt.value) {\n      ctx.print(stmt, ' = ');\n      stmt.value.visitExpression(this, ctx);\n    }\n    ctx.println(stmt, `;`);\n    return null;\n  }\n  visitTaggedTemplateExpr(ast, ctx) {\n    // The following convoluted piece of code is effectively the downlevelled equivalent of\n    // ```\n    // tag`...`\n    // ```\n    // which is effectively like:\n    // ```\n    // tag(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n    // ```\n    const elements = ast.template.elements;\n    ast.tag.visitExpression(this, ctx);\n    ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);\n    ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.text, false)).join(', ')}], `);\n    ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.rawText, false)).join(', ')}])`);\n    ast.template.expressions.forEach(expression => {\n      ctx.print(ast, ', ');\n      expression.visitExpression(this, ctx);\n    });\n    ctx.print(ast, ')');\n    return null;\n  }\n  visitFunctionExpr(ast, ctx) {\n    ctx.print(ast, `function${ast.name ? ' ' + ast.name : ''}(`);\n    this._visitParams(ast.params, ctx);\n    ctx.println(ast, `) {`);\n    ctx.incIndent();\n    this.visitAllStatements(ast.statements, ctx);\n    ctx.decIndent();\n    ctx.print(ast, `}`);\n    return null;\n  }\n  visitArrowFunctionExpr(ast, ctx) {\n    ctx.print(ast, '(');\n    this._visitParams(ast.params, ctx);\n    ctx.print(ast, ') =>');\n    if (Array.isArray(ast.body)) {\n      ctx.println(ast, `{`);\n      ctx.incIndent();\n      this.visitAllStatements(ast.body, ctx);\n      ctx.decIndent();\n      ctx.print(ast, `}`);\n    } else {\n      const isObjectLiteral = ast.body instanceof LiteralMapExpr;\n      if (isObjectLiteral) {\n        ctx.print(ast, '(');\n      }\n      ast.body.visitExpression(this, ctx);\n      if (isObjectLiteral) {\n        ctx.print(ast, ')');\n      }\n    }\n    return null;\n  }\n  visitDeclareFunctionStmt(stmt, ctx) {\n    ctx.print(stmt, `function ${stmt.name}(`);\n    this._visitParams(stmt.params, ctx);\n    ctx.println(stmt, `) {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.statements, ctx);\n    ctx.decIndent();\n    ctx.println(stmt, `}`);\n    return null;\n  }\n  visitLocalizedString(ast, ctx) {\n    // The following convoluted piece of code is effectively the downlevelled equivalent of\n    // ```\n    // $localize `...`\n    // ```\n    // which is effectively like:\n    // ```\n    // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n    // ```\n    ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);\n    const parts = [ast.serializeI18nHead()];\n    for (let i = 1; i < ast.messageParts.length; i++) {\n      parts.push(ast.serializeI18nTemplatePart(i));\n    }\n    ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.cooked, false)).join(', ')}], `);\n    ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.raw, false)).join(', ')}])`);\n    ast.expressions.forEach(expression => {\n      ctx.print(ast, ', ');\n      expression.visitExpression(this, ctx);\n    });\n    ctx.print(ast, ')');\n    return null;\n  }\n  _visitParams(params, ctx) {\n    this.visitAllObjects(param => ctx.print(null, param.name), params, ctx, ',');\n  }\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy within the JIT\n * compiler. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n  if (policy === undefined) {\n    const trustedTypes = _global['trustedTypes'];\n    policy = null;\n    if (trustedTypes) {\n      try {\n        policy = trustedTypes.createPolicy('angular#unsafe-jit', {\n          createScript: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n  return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from the JIT compiler, as use in other code can lead to XSS\n * vulnerabilities.\n */\nfunction newTrustedFunctionForJIT(...args) {\n  if (!_global['trustedTypes']) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  }\n  // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n  // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n  const fn = _global['eval'](trustedScriptFromString(body));\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  }\n  // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n  fn.toString = () => body;\n  // 2. When calling the resulting function, `this` should refer to `global`\n  return fn.bind(_global);\n  // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * A helper class to manage the evaluation of JIT generated code.\n */\nclass JitEvaluator {\n  /**\n   *\n   * @param sourceUrl The URL of the generated code.\n   * @param statements An array of Angular statement AST nodes to be evaluated.\n   * @param refResolver Resolves `o.ExternalReference`s into values.\n   * @param createSourceMaps If true then create a source-map for the generated code and include it\n   * inline as a source-map comment.\n   * @returns A map of all the variables in the generated code.\n   */\n  evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {\n    const converter = new JitEmitterVisitor(refResolver);\n    const ctx = EmitterVisitorContext.createRoot();\n    // Ensure generated code is in strict mode\n    if (statements.length > 0 && !isUseStrictStatement(statements[0])) {\n      statements = [literal('use strict').toStmt(), ...statements];\n    }\n    converter.visitAllStatements(statements, ctx);\n    converter.createReturnStmt(ctx);\n    return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n  }\n  /**\n   * Evaluate a piece of JIT generated code.\n   * @param sourceUrl The URL of this generated code.\n   * @param ctx A context object that contains an AST of the code to be evaluated.\n   * @param vars A map containing the names and values of variables that the evaluated code might\n   * reference.\n   * @param createSourceMap If true then create a source-map for the generated code and include it\n   * inline as a source-map comment.\n   * @returns The result of evaluating the code.\n   */\n  evaluateCode(sourceUrl, ctx, vars, createSourceMap) {\n    let fnBody = `\"use strict\";${ctx.toSource()}\\n//# sourceURL=${sourceUrl}`;\n    const fnArgNames = [];\n    const fnArgValues = [];\n    for (const argName in vars) {\n      fnArgValues.push(vars[argName]);\n      fnArgNames.push(argName);\n    }\n    if (createSourceMap) {\n      // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n      // E.g. ```\n      // function anonymous(a,b,c\n      // /**/) { ... }```\n      // We don't want to hard code this fact, so we auto detect it via an empty function first.\n      const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat('return null;')).toString();\n      const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n      fnBody += `\\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;\n    }\n    const fn = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));\n    return this.executeFunction(fn, fnArgValues);\n  }\n  /**\n   * Execute a JIT generated function by calling it.\n   *\n   * This method can be overridden in tests to capture the functions that are generated\n   * by this `JitEvaluator` class.\n   *\n   * @param fn A function to execute.\n   * @param args The arguments to pass to the function being executed.\n   * @returns The return value of the executed function.\n   */\n  executeFunction(fn, args) {\n    return fn(...args);\n  }\n}\n/**\n * An Angular AST visitor that converts AST nodes into executable JavaScript code.\n */\nclass JitEmitterVisitor extends AbstractJsEmitterVisitor {\n  constructor(refResolver) {\n    super();\n    this.refResolver = refResolver;\n    this._evalArgNames = [];\n    this._evalArgValues = [];\n    this._evalExportedVars = [];\n  }\n  createReturnStmt(ctx) {\n    const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(resultVar => new LiteralMapEntry(resultVar, variable(resultVar), false))));\n    stmt.visitStatement(this, ctx);\n  }\n  getArgs() {\n    const result = {};\n    for (let i = 0; i < this._evalArgNames.length; i++) {\n      result[this._evalArgNames[i]] = this._evalArgValues[i];\n    }\n    return result;\n  }\n  visitExternalExpr(ast, ctx) {\n    this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);\n    return null;\n  }\n  visitWrappedNodeExpr(ast, ctx) {\n    this._emitReferenceToExternal(ast, ast.node, ctx);\n    return null;\n  }\n  visitDeclareVarStmt(stmt, ctx) {\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n    return super.visitDeclareVarStmt(stmt, ctx);\n  }\n  visitDeclareFunctionStmt(stmt, ctx) {\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n    return super.visitDeclareFunctionStmt(stmt, ctx);\n  }\n  _emitReferenceToExternal(ast, value, ctx) {\n    let id = this._evalArgValues.indexOf(value);\n    if (id === -1) {\n      id = this._evalArgValues.length;\n      this._evalArgValues.push(value);\n      const name = identifierName({\n        reference: value\n      }) || 'val';\n      this._evalArgNames.push(`jit_${name}_${id}`);\n    }\n    ctx.print(ast, this._evalArgNames[id]);\n  }\n}\nfunction isUseStrictStatement(statement) {\n  return statement.isEquivalent(literal('use strict').toStmt());\n}\nfunction compileInjector(meta) {\n  const definitionMap = new DefinitionMap();\n  if (meta.providers !== null) {\n    definitionMap.set('providers', meta.providers);\n  }\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', literalArr(meta.imports));\n  }\n  const expression = importExpr(Identifiers.defineInjector).callFn([definitionMap.toLiteralMap()], undefined, true);\n  const type = createInjectorType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\nfunction createInjectorType(meta) {\n  return new ExpressionType(importExpr(Identifiers.InjectorDeclaration, [new ExpressionType(meta.type.type)]));\n}\n\n/**\n * Implementation of `CompileReflector` which resolves references to @angular/core\n * symbols at runtime, according to a consumer-provided mapping.\n *\n * Only supports `resolveExternalReference`, all other methods throw.\n */\nclass R3JitReflector {\n  constructor(context) {\n    this.context = context;\n  }\n  resolveExternalReference(ref) {\n    // This reflector only handles @angular/core imports.\n    if (ref.moduleName !== '@angular/core') {\n      throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);\n    }\n    if (!this.context.hasOwnProperty(ref.name)) {\n      throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);\n    }\n    return this.context[ref.name];\n  }\n}\n\n/**\n * How the selector scope of an NgModule (its declarations, imports, and exports) should be emitted\n * as a part of the NgModule definition.\n */\nvar R3SelectorScopeMode;\n(function (R3SelectorScopeMode) {\n  /**\n   * Emit the declarations inline into the module definition.\n   *\n   * This option is useful in certain contexts where it's known that JIT support is required. The\n   * tradeoff here is that this emit style prevents directives and pipes from being tree-shaken if\n   * they are unused, but the NgModule is used.\n   */\n  R3SelectorScopeMode[R3SelectorScopeMode[\"Inline\"] = 0] = \"Inline\";\n  /**\n   * Emit the declarations using a side effectful function call, `ɵɵsetNgModuleScope`, that is\n   * guarded with the `ngJitMode` flag.\n   *\n   * This form of emit supports JIT and can be optimized away if the `ngJitMode` flag is set to\n   * false, which allows unused directives and pipes to be tree-shaken.\n   */\n  R3SelectorScopeMode[R3SelectorScopeMode[\"SideEffect\"] = 1] = \"SideEffect\";\n  /**\n   * Don't generate selector scopes at all.\n   *\n   * This is useful for contexts where JIT support is known to be unnecessary.\n   */\n  R3SelectorScopeMode[R3SelectorScopeMode[\"Omit\"] = 2] = \"Omit\";\n})(R3SelectorScopeMode || (R3SelectorScopeMode = {}));\n/**\n * The type of the NgModule meta data.\n * - Global: Used for full and partial compilation modes which mainly includes R3References.\n * - Local: Used for the local compilation mode which mainly includes the raw expressions as appears\n * in the NgModule decorator.\n */\nvar R3NgModuleMetadataKind;\n(function (R3NgModuleMetadataKind) {\n  R3NgModuleMetadataKind[R3NgModuleMetadataKind[\"Global\"] = 0] = \"Global\";\n  R3NgModuleMetadataKind[R3NgModuleMetadataKind[\"Local\"] = 1] = \"Local\";\n})(R3NgModuleMetadataKind || (R3NgModuleMetadataKind = {}));\n/**\n * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.\n */\nfunction compileNgModule(meta) {\n  const statements = [];\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('type', meta.type.value);\n  // Assign bootstrap definition. In local compilation mode (i.e., for\n  // `R3NgModuleMetadataKind.LOCAL`) we assign the bootstrap field using the runtime\n  // `ɵɵsetNgModuleScope`.\n  if (meta.kind === R3NgModuleMetadataKind.Global && meta.bootstrap.length > 0) {\n    definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));\n  }\n  if (meta.selectorScopeMode === R3SelectorScopeMode.Inline) {\n    // If requested to emit scope information inline, pass the `declarations`, `imports` and\n    // `exports` to the `ɵɵdefineNgModule()` call directly.\n    if (meta.declarations.length > 0) {\n      definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n    }\n    if (meta.imports.length > 0) {\n      definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n    }\n    if (meta.exports.length > 0) {\n      definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n    }\n  } else if (meta.selectorScopeMode === R3SelectorScopeMode.SideEffect) {\n    // In this mode, scope information is not passed into `ɵɵdefineNgModule` as it\n    // would prevent tree-shaking of the declarations, imports and exports references. Instead, it's\n    // patched onto the NgModule definition with a `ɵɵsetNgModuleScope` call that's guarded by the\n    // `ngJitMode` flag.\n    const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);\n    if (setNgModuleScopeCall !== null) {\n      statements.push(setNgModuleScopeCall);\n    }\n  } else {\n    // Selector scope emit was not requested, so skip it.\n  }\n  if (meta.schemas !== null && meta.schemas.length > 0) {\n    definitionMap.set('schemas', literalArr(meta.schemas.map(ref => ref.value)));\n  }\n  if (meta.id !== null) {\n    definitionMap.set('id', meta.id);\n    // Generate a side-effectful call to register this NgModule by its id, as per the semantics of\n    // NgModule ids.\n    statements.push(importExpr(Identifiers.registerNgModuleType).callFn([meta.type.value, meta.id]).toStmt());\n  }\n  const expression = importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()], undefined, true);\n  const type = createNgModuleType(meta);\n  return {\n    expression,\n    type,\n    statements\n  };\n}\n/**\n * This function is used in JIT mode to generate the call to `ɵɵdefineNgModule()` from a call to\n * `ɵɵngDeclareNgModule()`.\n */\nfunction compileNgModuleDeclarationExpression(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('type', new WrappedNodeExpr(meta.type));\n  if (meta.bootstrap !== undefined) {\n    definitionMap.set('bootstrap', new WrappedNodeExpr(meta.bootstrap));\n  }\n  if (meta.declarations !== undefined) {\n    definitionMap.set('declarations', new WrappedNodeExpr(meta.declarations));\n  }\n  if (meta.imports !== undefined) {\n    definitionMap.set('imports', new WrappedNodeExpr(meta.imports));\n  }\n  if (meta.exports !== undefined) {\n    definitionMap.set('exports', new WrappedNodeExpr(meta.exports));\n  }\n  if (meta.schemas !== undefined) {\n    definitionMap.set('schemas', new WrappedNodeExpr(meta.schemas));\n  }\n  if (meta.id !== undefined) {\n    definitionMap.set('id', new WrappedNodeExpr(meta.id));\n  }\n  return importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);\n}\nfunction createNgModuleType(meta) {\n  if (meta.kind === R3NgModuleMetadataKind.Local) {\n    return new ExpressionType(meta.type.value);\n  }\n  const {\n    type: moduleType,\n    declarations,\n    exports,\n    imports,\n    includeImportTypes,\n    publicDeclarationTypes\n  } = meta;\n  return new ExpressionType(importExpr(Identifiers.NgModuleDeclaration, [new ExpressionType(moduleType.type), publicDeclarationTypes === null ? tupleTypeOf(declarations) : tupleOfTypes(publicDeclarationTypes), includeImportTypes ? tupleTypeOf(imports) : NONE_TYPE, tupleTypeOf(exports)]));\n}\n/**\n * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the\n * transitive module scope can be computed during runtime in JIT mode. This call is marked pure\n * such that the references to declarations, imports and exports may be elided causing these\n * symbols to become tree-shakeable.\n */\nfunction generateSetNgModuleScopeCall(meta) {\n  const scopeMap = new DefinitionMap();\n  if (meta.kind === R3NgModuleMetadataKind.Global) {\n    if (meta.declarations.length > 0) {\n      scopeMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n    }\n  } else {\n    if (meta.declarationsExpression) {\n      scopeMap.set('declarations', meta.declarationsExpression);\n    }\n  }\n  if (meta.kind === R3NgModuleMetadataKind.Global) {\n    if (meta.imports.length > 0) {\n      scopeMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n    }\n  } else {\n    if (meta.importsExpression) {\n      scopeMap.set('imports', meta.importsExpression);\n    }\n  }\n  if (meta.kind === R3NgModuleMetadataKind.Global) {\n    if (meta.exports.length > 0) {\n      scopeMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n    }\n  } else {\n    if (meta.exportsExpression) {\n      scopeMap.set('exports', meta.exportsExpression);\n    }\n  }\n  if (meta.kind === R3NgModuleMetadataKind.Local && meta.bootstrapExpression) {\n    scopeMap.set('bootstrap', meta.bootstrapExpression);\n  }\n  if (Object.keys(scopeMap.values).length === 0) {\n    return null;\n  }\n  // setNgModuleScope(...)\n  const fnCall = new InvokeFunctionExpr( /* fn */importExpr(Identifiers.setNgModuleScope), /* args */[meta.type.value, scopeMap.toLiteralMap()]);\n  // (ngJitMode guard) && setNgModuleScope(...)\n  const guardedCall = jitOnlyGuardedExpression(fnCall);\n  // function() { (ngJitMode guard) && setNgModuleScope(...); }\n  const iife = new FunctionExpr( /* params */[], /* statements */[guardedCall.toStmt()]);\n  // (function() { (ngJitMode guard) && setNgModuleScope(...); })()\n  const iifeCall = new InvokeFunctionExpr( /* fn */iife, /* args */[]);\n  return iifeCall.toStmt();\n}\nfunction tupleTypeOf(exp) {\n  const types = exp.map(ref => typeofExpr(ref.type));\n  return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;\n}\nfunction tupleOfTypes(types) {\n  const typeofTypes = types.map(type => typeofExpr(type));\n  return types.length > 0 ? expressionType(literalArr(typeofTypes)) : NONE_TYPE;\n}\nfunction compilePipeFromMetadata(metadata) {\n  const definitionMapValues = [];\n  // e.g. `name: 'myPipe'`\n  definitionMapValues.push({\n    key: 'name',\n    value: literal(metadata.pipeName),\n    quoted: false\n  });\n  // e.g. `type: MyPipe`\n  definitionMapValues.push({\n    key: 'type',\n    value: metadata.type.value,\n    quoted: false\n  });\n  // e.g. `pure: true`\n  definitionMapValues.push({\n    key: 'pure',\n    value: literal(metadata.pure),\n    quoted: false\n  });\n  if (metadata.isStandalone) {\n    definitionMapValues.push({\n      key: 'standalone',\n      value: literal(true),\n      quoted: false\n    });\n  }\n  const expression = importExpr(Identifiers.definePipe).callFn([literalMap(definitionMapValues)], undefined, true);\n  const type = createPipeType(metadata);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\nfunction createPipeType(metadata) {\n  return new ExpressionType(importExpr(Identifiers.PipeDeclaration, [typeWithParameters(metadata.type.type, metadata.typeArgumentCount), new ExpressionType(new LiteralExpr(metadata.pipeName)), new ExpressionType(new LiteralExpr(metadata.isStandalone))]));\n}\nvar R3TemplateDependencyKind;\n(function (R3TemplateDependencyKind) {\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\nclass ParserError {\n  constructor(message, input, errLocation, ctxLocation) {\n    this.input = input;\n    this.errLocation = errLocation;\n    this.ctxLocation = ctxLocation;\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n}\nclass ParseSpan {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n  toAbsolute(absoluteOffset) {\n    return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);\n  }\n}\nclass AST {\n  constructor(span,\n  /**\n   * Absolute location of the expression AST in a source code file.\n   */\n  sourceSpan) {\n    this.span = span;\n    this.sourceSpan = sourceSpan;\n  }\n  toString() {\n    return 'AST';\n  }\n}\nclass ASTWithName extends AST {\n  constructor(span, sourceSpan, nameSpan) {\n    super(span, sourceSpan);\n    this.nameSpan = nameSpan;\n  }\n}\nclass EmptyExpr$1 extends AST {\n  visit(visitor, context = null) {\n    // do nothing\n  }\n}\nclass ImplicitReceiver extends AST {\n  visit(visitor, context = null) {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n}\n/**\n * Receiver when something is accessed through `this` (e.g. `this.foo`). Note that this class\n * inherits from `ImplicitReceiver`, because accessing something through `this` is treated the\n * same as accessing it implicitly inside of an Angular template (e.g. `[attr.title]=\"this.title\"`\n * is the same as `[attr.title]=\"title\"`.). Inheriting allows for the `this` accesses to be treated\n * the same as implicit ones, except for a couple of exceptions like `$event` and `$any`.\n * TODO: we should find a way for this class not to extend from `ImplicitReceiver` in the future.\n */\nclass ThisReceiver extends ImplicitReceiver {\n  visit(visitor, context = null) {\n    return visitor.visitThisReceiver?.(this, context);\n  }\n}\n/**\n * Multiple expressions separated by a semicolon.\n */\nclass Chain extends AST {\n  constructor(span, sourceSpan, expressions) {\n    super(span, sourceSpan);\n    this.expressions = expressions;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitChain(this, context);\n  }\n}\nclass Conditional extends AST {\n  constructor(span, sourceSpan, condition, trueExp, falseExp) {\n    super(span, sourceSpan);\n    this.condition = condition;\n    this.trueExp = trueExp;\n    this.falseExp = falseExp;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitConditional(this, context);\n  }\n}\nclass PropertyRead extends ASTWithName {\n  constructor(span, sourceSpan, nameSpan, receiver, name) {\n    super(span, sourceSpan, nameSpan);\n    this.receiver = receiver;\n    this.name = name;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitPropertyRead(this, context);\n  }\n}\nclass PropertyWrite extends ASTWithName {\n  constructor(span, sourceSpan, nameSpan, receiver, name, value) {\n    super(span, sourceSpan, nameSpan);\n    this.receiver = receiver;\n    this.name = name;\n    this.value = value;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitPropertyWrite(this, context);\n  }\n}\nclass SafePropertyRead extends ASTWithName {\n  constructor(span, sourceSpan, nameSpan, receiver, name) {\n    super(span, sourceSpan, nameSpan);\n    this.receiver = receiver;\n    this.name = name;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n}\nclass KeyedRead extends AST {\n  constructor(span, sourceSpan, receiver, key) {\n    super(span, sourceSpan);\n    this.receiver = receiver;\n    this.key = key;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitKeyedRead(this, context);\n  }\n}\nclass SafeKeyedRead extends AST {\n  constructor(span, sourceSpan, receiver, key) {\n    super(span, sourceSpan);\n    this.receiver = receiver;\n    this.key = key;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitSafeKeyedRead(this, context);\n  }\n}\nclass KeyedWrite extends AST {\n  constructor(span, sourceSpan, receiver, key, value) {\n    super(span, sourceSpan);\n    this.receiver = receiver;\n    this.key = key;\n    this.value = value;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitKeyedWrite(this, context);\n  }\n}\nclass BindingPipe extends ASTWithName {\n  constructor(span, sourceSpan, exp, name, args, nameSpan) {\n    super(span, sourceSpan, nameSpan);\n    this.exp = exp;\n    this.name = name;\n    this.args = args;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitPipe(this, context);\n  }\n}\nclass LiteralPrimitive extends AST {\n  constructor(span, sourceSpan, value) {\n    super(span, sourceSpan);\n    this.value = value;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n}\nclass LiteralArray extends AST {\n  constructor(span, sourceSpan, expressions) {\n    super(span, sourceSpan);\n    this.expressions = expressions;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitLiteralArray(this, context);\n  }\n}\nclass LiteralMap extends AST {\n  constructor(span, sourceSpan, keys, values) {\n    super(span, sourceSpan);\n    this.keys = keys;\n    this.values = values;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitLiteralMap(this, context);\n  }\n}\nclass Interpolation$1 extends AST {\n  constructor(span, sourceSpan, strings, expressions) {\n    super(span, sourceSpan);\n    this.strings = strings;\n    this.expressions = expressions;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitInterpolation(this, context);\n  }\n}\nclass Binary extends AST {\n  constructor(span, sourceSpan, operation, left, right) {\n    super(span, sourceSpan);\n    this.operation = operation;\n    this.left = left;\n    this.right = right;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitBinary(this, context);\n  }\n}\n/**\n * For backwards compatibility reasons, `Unary` inherits from `Binary` and mimics the binary AST\n * node that was originally used. This inheritance relation can be deleted in some future major,\n * after consumers have been given a chance to fully support Unary.\n */\nclass Unary extends Binary {\n  /**\n   * Creates a unary minus expression \"-x\", represented as `Binary` using \"0 - x\".\n   */\n  static createMinus(span, sourceSpan, expr) {\n    return new Unary(span, sourceSpan, '-', expr, '-', new LiteralPrimitive(span, sourceSpan, 0), expr);\n  }\n  /**\n   * Creates a unary plus expression \"+x\", represented as `Binary` using \"x - 0\".\n   */\n  static createPlus(span, sourceSpan, expr) {\n    return new Unary(span, sourceSpan, '+', expr, '-', expr, new LiteralPrimitive(span, sourceSpan, 0));\n  }\n  /**\n   * During the deprecation period this constructor is private, to avoid consumers from creating\n   * a `Unary` with the fallback properties for `Binary`.\n   */\n  constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {\n    super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);\n    this.operator = operator;\n    this.expr = expr;\n    // Redeclare the properties that are inherited from `Binary` as `never`, as consumers should not\n    // depend on these fields when operating on `Unary`.\n    this.left = null;\n    this.right = null;\n    this.operation = null;\n  }\n  visit(visitor, context = null) {\n    if (visitor.visitUnary !== undefined) {\n      return visitor.visitUnary(this, context);\n    }\n    return visitor.visitBinary(this, context);\n  }\n}\nclass PrefixNot extends AST {\n  constructor(span, sourceSpan, expression) {\n    super(span, sourceSpan);\n    this.expression = expression;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitPrefixNot(this, context);\n  }\n}\nclass NonNullAssert extends AST {\n  constructor(span, sourceSpan, expression) {\n    super(span, sourceSpan);\n    this.expression = expression;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitNonNullAssert(this, context);\n  }\n}\nclass Call extends AST {\n  constructor(span, sourceSpan, receiver, args, argumentSpan) {\n    super(span, sourceSpan);\n    this.receiver = receiver;\n    this.args = args;\n    this.argumentSpan = argumentSpan;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitCall(this, context);\n  }\n}\nclass SafeCall extends AST {\n  constructor(span, sourceSpan, receiver, args, argumentSpan) {\n    super(span, sourceSpan);\n    this.receiver = receiver;\n    this.args = args;\n    this.argumentSpan = argumentSpan;\n  }\n  visit(visitor, context = null) {\n    return visitor.visitSafeCall(this, context);\n  }\n}\n/**\n * Records the absolute position of a text span in a source file, where `start` and `end` are the\n * starting and ending byte offsets, respectively, of the text span in a source file.\n */\nclass AbsoluteSourceSpan {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n}\nclass ASTWithSource extends AST {\n  constructor(ast, source, location, absoluteOffset, errors) {\n    super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));\n    this.ast = ast;\n    this.source = source;\n    this.location = location;\n    this.errors = errors;\n  }\n  visit(visitor, context = null) {\n    if (visitor.visitASTWithSource) {\n      return visitor.visitASTWithSource(this, context);\n    }\n    return this.ast.visit(visitor, context);\n  }\n  toString() {\n    return `${this.source} in ${this.location}`;\n  }\n}\nclass VariableBinding {\n  /**\n   * @param sourceSpan entire span of the binding.\n   * @param key name of the LHS along with its span.\n   * @param value optional value for the RHS along with its span.\n   */\n  constructor(sourceSpan, key, value) {\n    this.sourceSpan = sourceSpan;\n    this.key = key;\n    this.value = value;\n  }\n}\nclass ExpressionBinding {\n  /**\n   * @param sourceSpan entire span of the binding.\n   * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its\n   * span. Note that the length of the span may not be the same as\n   * `key.source.length`. For example,\n   * 1. key.source = ngFor, key.span is for \"ngFor\"\n   * 2. key.source = ngForOf, key.span is for \"of\"\n   * 3. key.source = ngForTrackBy, key.span is for \"trackBy\"\n   * @param value optional expression for the RHS.\n   */\n  constructor(sourceSpan, key, value) {\n    this.sourceSpan = sourceSpan;\n    this.key = key;\n    this.value = value;\n  }\n}\nclass RecursiveAstVisitor {\n  visit(ast, context) {\n    // The default implementation just visits every node.\n    // Classes that extend RecursiveAstVisitor should override this function\n    // to selectively visit the specified node.\n    ast.visit(this, context);\n  }\n  visitUnary(ast, context) {\n    this.visit(ast.expr, context);\n  }\n  visitBinary(ast, context) {\n    this.visit(ast.left, context);\n    this.visit(ast.right, context);\n  }\n  visitChain(ast, context) {\n    this.visitAll(ast.expressions, context);\n  }\n  visitConditional(ast, context) {\n    this.visit(ast.condition, context);\n    this.visit(ast.trueExp, context);\n    this.visit(ast.falseExp, context);\n  }\n  visitPipe(ast, context) {\n    this.visit(ast.exp, context);\n    this.visitAll(ast.args, context);\n  }\n  visitImplicitReceiver(ast, context) {}\n  visitThisReceiver(ast, context) {}\n  visitInterpolation(ast, context) {\n    this.visitAll(ast.expressions, context);\n  }\n  visitKeyedRead(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visit(ast.key, context);\n  }\n  visitKeyedWrite(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visit(ast.key, context);\n    this.visit(ast.value, context);\n  }\n  visitLiteralArray(ast, context) {\n    this.visitAll(ast.expressions, context);\n  }\n  visitLiteralMap(ast, context) {\n    this.visitAll(ast.values, context);\n  }\n  visitLiteralPrimitive(ast, context) {}\n  visitPrefixNot(ast, context) {\n    this.visit(ast.expression, context);\n  }\n  visitNonNullAssert(ast, context) {\n    this.visit(ast.expression, context);\n  }\n  visitPropertyRead(ast, context) {\n    this.visit(ast.receiver, context);\n  }\n  visitPropertyWrite(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visit(ast.value, context);\n  }\n  visitSafePropertyRead(ast, context) {\n    this.visit(ast.receiver, context);\n  }\n  visitSafeKeyedRead(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visit(ast.key, context);\n  }\n  visitCall(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visitAll(ast.args, context);\n  }\n  visitSafeCall(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visitAll(ast.args, context);\n  }\n  // This is not part of the AstVisitor interface, just a helper method\n  visitAll(asts, context) {\n    for (const ast of asts) {\n      this.visit(ast, context);\n    }\n  }\n}\nclass AstTransformer {\n  visitImplicitReceiver(ast, context) {\n    return ast;\n  }\n  visitThisReceiver(ast, context) {\n    return ast;\n  }\n  visitInterpolation(ast, context) {\n    return new Interpolation$1(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));\n  }\n  visitLiteralPrimitive(ast, context) {\n    return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);\n  }\n  visitPropertyRead(ast, context) {\n    return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n  }\n  visitPropertyWrite(ast, context) {\n    return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n  }\n  visitSafePropertyRead(ast, context) {\n    return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n  }\n  visitLiteralArray(ast, context) {\n    return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n  }\n  visitLiteralMap(ast, context) {\n    return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));\n  }\n  visitUnary(ast, context) {\n    switch (ast.operator) {\n      case '+':\n        return Unary.createPlus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n      case '-':\n        return Unary.createMinus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n      default:\n        throw new Error(`Unknown unary operator ${ast.operator}`);\n    }\n  }\n  visitBinary(ast, context) {\n    return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n  visitPrefixNot(ast, context) {\n    return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));\n  }\n  visitNonNullAssert(ast, context) {\n    return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));\n  }\n  visitConditional(ast, context) {\n    return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n  visitPipe(ast, context) {\n    return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);\n  }\n  visitKeyedRead(ast, context) {\n    return new KeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n  }\n  visitKeyedWrite(ast, context) {\n    return new KeyedWrite(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n  visitCall(ast, context) {\n    return new Call(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);\n  }\n  visitSafeCall(ast, context) {\n    return new SafeCall(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);\n  }\n  visitAll(asts) {\n    const res = [];\n    for (let i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n  visitChain(ast, context) {\n    return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n  }\n  visitSafeKeyedRead(ast, context) {\n    return new SafeKeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n  }\n}\n// A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\nclass AstMemoryEfficientTransformer {\n  visitImplicitReceiver(ast, context) {\n    return ast;\n  }\n  visitThisReceiver(ast, context) {\n    return ast;\n  }\n  visitInterpolation(ast, context) {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) return new Interpolation$1(ast.span, ast.sourceSpan, ast.strings, expressions);\n    return ast;\n  }\n  visitLiteralPrimitive(ast, context) {\n    return ast;\n  }\n  visitPropertyRead(ast, context) {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n    }\n    return ast;\n  }\n  visitPropertyWrite(ast, context) {\n    const receiver = ast.receiver.visit(this);\n    const value = ast.value.visit(this);\n    if (receiver !== ast.receiver || value !== ast.value) {\n      return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, value);\n    }\n    return ast;\n  }\n  visitSafePropertyRead(ast, context) {\n    const receiver = ast.receiver.visit(this);\n    if (receiver !== ast.receiver) {\n      return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n    }\n    return ast;\n  }\n  visitLiteralArray(ast, context) {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) {\n      return new LiteralArray(ast.span, ast.sourceSpan, expressions);\n    }\n    return ast;\n  }\n  visitLiteralMap(ast, context) {\n    const values = this.visitAll(ast.values);\n    if (values !== ast.values) {\n      return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);\n    }\n    return ast;\n  }\n  visitUnary(ast, context) {\n    const expr = ast.expr.visit(this);\n    if (expr !== ast.expr) {\n      switch (ast.operator) {\n        case '+':\n          return Unary.createPlus(ast.span, ast.sourceSpan, expr);\n        case '-':\n          return Unary.createMinus(ast.span, ast.sourceSpan, expr);\n        default:\n          throw new Error(`Unknown unary operator ${ast.operator}`);\n      }\n    }\n    return ast;\n  }\n  visitBinary(ast, context) {\n    const left = ast.left.visit(this);\n    const right = ast.right.visit(this);\n    if (left !== ast.left || right !== ast.right) {\n      return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);\n    }\n    return ast;\n  }\n  visitPrefixNot(ast, context) {\n    const expression = ast.expression.visit(this);\n    if (expression !== ast.expression) {\n      return new PrefixNot(ast.span, ast.sourceSpan, expression);\n    }\n    return ast;\n  }\n  visitNonNullAssert(ast, context) {\n    const expression = ast.expression.visit(this);\n    if (expression !== ast.expression) {\n      return new NonNullAssert(ast.span, ast.sourceSpan, expression);\n    }\n    return ast;\n  }\n  visitConditional(ast, context) {\n    const condition = ast.condition.visit(this);\n    const trueExp = ast.trueExp.visit(this);\n    const falseExp = ast.falseExp.visit(this);\n    if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {\n      return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);\n    }\n    return ast;\n  }\n  visitPipe(ast, context) {\n    const exp = ast.exp.visit(this);\n    const args = this.visitAll(ast.args);\n    if (exp !== ast.exp || args !== ast.args) {\n      return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);\n    }\n    return ast;\n  }\n  visitKeyedRead(ast, context) {\n    const obj = ast.receiver.visit(this);\n    const key = ast.key.visit(this);\n    if (obj !== ast.receiver || key !== ast.key) {\n      return new KeyedRead(ast.span, ast.sourceSpan, obj, key);\n    }\n    return ast;\n  }\n  visitKeyedWrite(ast, context) {\n    const obj = ast.receiver.visit(this);\n    const key = ast.key.visit(this);\n    const value = ast.value.visit(this);\n    if (obj !== ast.receiver || key !== ast.key || value !== ast.value) {\n      return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);\n    }\n    return ast;\n  }\n  visitAll(asts) {\n    const res = [];\n    let modified = false;\n    for (let i = 0; i < asts.length; ++i) {\n      const original = asts[i];\n      const value = original.visit(this);\n      res[i] = value;\n      modified = modified || value !== original;\n    }\n    return modified ? res : asts;\n  }\n  visitChain(ast, context) {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) {\n      return new Chain(ast.span, ast.sourceSpan, expressions);\n    }\n    return ast;\n  }\n  visitCall(ast, context) {\n    const receiver = ast.receiver.visit(this);\n    const args = this.visitAll(ast.args);\n    if (receiver !== ast.receiver || args !== ast.args) {\n      return new Call(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);\n    }\n    return ast;\n  }\n  visitSafeCall(ast, context) {\n    const receiver = ast.receiver.visit(this);\n    const args = this.visitAll(ast.args);\n    if (receiver !== ast.receiver || args !== ast.args) {\n      return new SafeCall(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);\n    }\n    return ast;\n  }\n  visitSafeKeyedRead(ast, context) {\n    const obj = ast.receiver.visit(this);\n    const key = ast.key.visit(this);\n    if (obj !== ast.receiver || key !== ast.key) {\n      return new SafeKeyedRead(ast.span, ast.sourceSpan, obj, key);\n    }\n    return ast;\n  }\n}\n// Bindings\nclass ParsedProperty {\n  constructor(name, expression, type, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.expression = expression;\n    this.type = type;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n    this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n  }\n}\nvar ParsedPropertyType;\n(function (ParsedPropertyType) {\n  ParsedPropertyType[ParsedPropertyType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  ParsedPropertyType[ParsedPropertyType[\"LITERAL_ATTR\"] = 1] = \"LITERAL_ATTR\";\n  ParsedPropertyType[ParsedPropertyType[\"ANIMATION\"] = 2] = \"ANIMATION\";\n})(ParsedPropertyType || (ParsedPropertyType = {}));\nclass ParsedEvent {\n  // Regular events have a target\n  // Animation events have a phase\n  constructor(name, targetOrPhase, type, handler, sourceSpan, handlerSpan, keySpan) {\n    this.name = name;\n    this.targetOrPhase = targetOrPhase;\n    this.type = type;\n    this.handler = handler;\n    this.sourceSpan = sourceSpan;\n    this.handlerSpan = handlerSpan;\n    this.keySpan = keySpan;\n  }\n}\n/**\n * ParsedVariable represents a variable declaration in a microsyntax expression.\n */\nclass ParsedVariable {\n  constructor(name, value, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n}\nclass BoundElementProperty {\n  constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.type = type;\n    this.securityContext = securityContext;\n    this.value = value;\n    this.unit = unit;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n}\nclass EventHandlerVars {\n  static #_ = this.event = variable('$event');\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n */\nfunction convertActionBinding(localResolver, implicitReceiver, action, bindingId, baseSourceSpan, implicitReceiverAccesses, globals) {\n  if (!localResolver) {\n    localResolver = new DefaultLocalResolver(globals);\n  }\n  const actionWithoutBuiltins = convertPropertyBindingBuiltins({\n    createLiteralArrayConverter: argCount => {\n      // Note: no caching for literal arrays in actions.\n      return args => literalArr(args);\n    },\n    createLiteralMapConverter: keys => {\n      // Note: no caching for literal maps in actions.\n      return values => {\n        const entries = keys.map((k, i) => ({\n          key: k.key,\n          value: values[i],\n          quoted: k.quoted\n        }));\n        return literalMap(entries);\n      };\n    },\n    createPipeConverter: name => {\n      throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);\n    }\n  }, action);\n  const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, /* supportsInterpolation */false, baseSourceSpan, implicitReceiverAccesses);\n  const actionStmts = [];\n  flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n  prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n  const lastIndex = actionStmts.length - 1;\n  if (lastIndex >= 0) {\n    const lastStatement = actionStmts[lastIndex];\n    // Ensure that the value of the last expression statement is returned\n    if (lastStatement instanceof ExpressionStatement) {\n      actionStmts[lastIndex] = new ReturnStatement(lastStatement.expr);\n    }\n  }\n  return actionStmts;\n}\nfunction convertPropertyBindingBuiltins(converterFactory, ast) {\n  return convertBuiltins(converterFactory, ast);\n}\nclass ConvertPropertyBindingResult {\n  constructor(stmts, currValExpr) {\n    this.stmts = stmts;\n    this.currValExpr = currValExpr;\n  }\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression\n * is used in property binding. The expression has to be preprocessed via\n * `convertPropertyBindingBuiltins`.\n */\nfunction convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {\n  if (!localResolver) {\n    localResolver = new DefaultLocalResolver();\n  }\n  const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, /* supportsInterpolation */false);\n  const outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n  const stmts = getStatementsFromVisitor(visitor, bindingId);\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n  return new ConvertPropertyBindingResult(stmts, outputExpr);\n}\n/** Converts an AST to a pure function that may have access to the component scope. */\nfunction convertPureComponentScopeFunction(ast, localResolver, implicitReceiver, bindingId) {\n  const converted = convertPropertyBindingBuiltins({\n    createLiteralArrayConverter: () => args => literalArr(args),\n    createLiteralMapConverter: keys => values => literalMap(keys.map((key, index) => {\n      return {\n        key: key.key,\n        value: values[index],\n        quoted: key.quoted\n      };\n    })),\n    createPipeConverter: () => {\n      throw new Error('Illegal State: Pipes are not allowed in this context');\n    }\n  }, ast);\n  const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, false);\n  const statements = [];\n  flattenStatements(converted.visit(visitor, _Mode.Statement), statements);\n  return statements;\n}\n/**\n * Given some expression, such as a binding or interpolation expression, and a context expression to\n * look values up on, visit each facet of the given expression resolving values from the context\n * expression such that a list of arguments can be derived from the found values that can be used as\n * arguments to an external update instruction.\n *\n * @param localResolver The resolver to use to look up expressions by name appropriately\n * @param contextVariableExpression The expression representing the context variable used to create\n * the final argument expressions\n * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to\n * be resolved and what arguments list to build.\n * @param bindingId A name prefix used to create temporary variable names if they're needed for the\n * arguments generated\n * @returns An array of expressions that can be passed as arguments to instruction expressions like\n * `o.importExpr(R3.propertyInterpolate).callFn(result)`\n */\nfunction convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {\n  const visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, /* supportsInterpolation */true);\n  const outputExpr = visitor.visitInterpolation(expressionWithArgumentsToExtract, _Mode.Expression);\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n  const stmts = getStatementsFromVisitor(visitor, bindingId);\n  const args = outputExpr.args;\n  return {\n    stmts,\n    args\n  };\n}\nfunction getStatementsFromVisitor(visitor, bindingId) {\n  const stmts = [];\n  for (let i = 0; i < visitor.temporaryCount; i++) {\n    stmts.push(temporaryDeclaration(bindingId, i));\n  }\n  return stmts;\n}\nfunction convertBuiltins(converterFactory, ast) {\n  const visitor = new _BuiltinAstConverter(converterFactory);\n  return ast.visit(visitor);\n}\nfunction temporaryName(bindingId, temporaryNumber) {\n  return `tmp_${bindingId}_${temporaryNumber}`;\n}\nfunction temporaryDeclaration(bindingId, temporaryNumber) {\n  return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber));\n}\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\n  for (let i = temporaryCount - 1; i >= 0; i--) {\n    statements.unshift(temporaryDeclaration(bindingId, i));\n  }\n}\nvar _Mode;\n(function (_Mode) {\n  _Mode[_Mode[\"Statement\"] = 0] = \"Statement\";\n  _Mode[_Mode[\"Expression\"] = 1] = \"Expression\";\n})(_Mode || (_Mode = {}));\nfunction ensureStatementMode(mode, ast) {\n  if (mode !== _Mode.Statement) {\n    throw new Error(`Expected a statement, but saw ${ast}`);\n  }\n}\nfunction ensureExpressionMode(mode, ast) {\n  if (mode !== _Mode.Expression) {\n    throw new Error(`Expected an expression, but saw ${ast}`);\n  }\n}\nfunction convertToStatementIfNeeded(mode, expr) {\n  if (mode === _Mode.Statement) {\n    return expr.toStmt();\n  } else {\n    return expr;\n  }\n}\nclass _BuiltinAstConverter extends AstTransformer {\n  constructor(_converterFactory) {\n    super();\n    this._converterFactory = _converterFactory;\n  }\n  visitPipe(ast, context) {\n    const args = [ast.exp, ...ast.args].map(ast => ast.visit(this, context));\n    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n  }\n  visitLiteralArray(ast, context) {\n    const args = ast.expressions.map(ast => ast.visit(this, context));\n    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n  }\n  visitLiteralMap(ast, context) {\n    const args = ast.values.map(ast => ast.visit(this, context));\n    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n  }\n}\nclass _AstToIrVisitor {\n  constructor(_localResolver, _implicitReceiver, bindingId, supportsInterpolation, baseSourceSpan, implicitReceiverAccesses) {\n    this._localResolver = _localResolver;\n    this._implicitReceiver = _implicitReceiver;\n    this.bindingId = bindingId;\n    this.supportsInterpolation = supportsInterpolation;\n    this.baseSourceSpan = baseSourceSpan;\n    this.implicitReceiverAccesses = implicitReceiverAccesses;\n    this._nodeMap = new Map();\n    this._resultMap = new Map();\n    this._currentTemporary = 0;\n    this.temporaryCount = 0;\n    this.usesImplicitReceiver = false;\n  }\n  visitUnary(ast, mode) {\n    let op;\n    switch (ast.operator) {\n      case '+':\n        op = UnaryOperator.Plus;\n        break;\n      case '-':\n        op = UnaryOperator.Minus;\n        break;\n      default:\n        throw new Error(`Unsupported operator ${ast.operator}`);\n    }\n    return convertToStatementIfNeeded(mode, new UnaryOperatorExpr(op, this._visit(ast.expr, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n  }\n  visitBinary(ast, mode) {\n    let op;\n    switch (ast.operation) {\n      case '+':\n        op = BinaryOperator.Plus;\n        break;\n      case '-':\n        op = BinaryOperator.Minus;\n        break;\n      case '*':\n        op = BinaryOperator.Multiply;\n        break;\n      case '/':\n        op = BinaryOperator.Divide;\n        break;\n      case '%':\n        op = BinaryOperator.Modulo;\n        break;\n      case '&&':\n        op = BinaryOperator.And;\n        break;\n      case '||':\n        op = BinaryOperator.Or;\n        break;\n      case '==':\n        op = BinaryOperator.Equals;\n        break;\n      case '!=':\n        op = BinaryOperator.NotEquals;\n        break;\n      case '===':\n        op = BinaryOperator.Identical;\n        break;\n      case '!==':\n        op = BinaryOperator.NotIdentical;\n        break;\n      case '<':\n        op = BinaryOperator.Lower;\n        break;\n      case '>':\n        op = BinaryOperator.Bigger;\n        break;\n      case '<=':\n        op = BinaryOperator.LowerEquals;\n        break;\n      case '>=':\n        op = BinaryOperator.BiggerEquals;\n        break;\n      case '??':\n        return this.convertNullishCoalesce(ast, mode);\n      default:\n        throw new Error(`Unsupported operation ${ast.operation}`);\n    }\n    return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n  }\n  visitChain(ast, mode) {\n    ensureStatementMode(mode, ast);\n    return this.visitAll(ast.expressions, mode);\n  }\n  visitConditional(ast, mode) {\n    const value = this._visit(ast.condition, _Mode.Expression);\n    return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));\n  }\n  visitPipe(ast, mode) {\n    throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);\n  }\n  visitImplicitReceiver(ast, mode) {\n    ensureExpressionMode(mode, ast);\n    this.usesImplicitReceiver = true;\n    return this._implicitReceiver;\n  }\n  visitThisReceiver(ast, mode) {\n    return this.visitImplicitReceiver(ast, mode);\n  }\n  visitInterpolation(ast, mode) {\n    if (!this.supportsInterpolation) {\n      throw new Error('Unexpected interpolation');\n    }\n    ensureExpressionMode(mode, ast);\n    let args = [];\n    for (let i = 0; i < ast.strings.length - 1; i++) {\n      args.push(literal(ast.strings[i]));\n      args.push(this._visit(ast.expressions[i], _Mode.Expression));\n    }\n    args.push(literal(ast.strings[ast.strings.length - 1]));\n    // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the\n    // args returned to just the value, because we're going to pass it to a special instruction.\n    const strings = ast.strings;\n    if (strings.length === 2 && strings[0] === '' && strings[1] === '') {\n      // Single argument interpolate instructions.\n      args = [args[1]];\n    } else if (ast.expressions.length >= 9) {\n      // 9 or more arguments must be passed to the `interpolateV`-style instructions, which accept\n      // an array of arguments\n      args = [literalArr(args)];\n    }\n    return new InterpolationExpression(args);\n  }\n  visitKeyedRead(ast, mode) {\n    const leftMostSafe = this.leftMostSafeNode(ast);\n    if (leftMostSafe) {\n      return this.convertSafeAccess(ast, leftMostSafe, mode);\n    } else {\n      return convertToStatementIfNeeded(mode, this._visit(ast.receiver, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\n    }\n  }\n  visitKeyedWrite(ast, mode) {\n    const obj = this._visit(ast.receiver, _Mode.Expression);\n    const key = this._visit(ast.key, _Mode.Expression);\n    const value = this._visit(ast.value, _Mode.Expression);\n    if (obj === this._implicitReceiver) {\n      this._localResolver.maybeRestoreView();\n    }\n    return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n  }\n  visitLiteralArray(ast, mode) {\n    throw new Error(`Illegal State: literal arrays should have been converted into functions`);\n  }\n  visitLiteralMap(ast, mode) {\n    throw new Error(`Illegal State: literal maps should have been converted into functions`);\n  }\n  visitLiteralPrimitive(ast, mode) {\n    // For literal values of null, undefined, true, or false allow type interference\n    // to infer the type.\n    const type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ? INFERRED_TYPE : undefined;\n    return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));\n  }\n  _getLocal(name, receiver) {\n    if (this._localResolver.globals?.has(name) && receiver instanceof ThisReceiver) {\n      return null;\n    }\n    return this._localResolver.getLocal(name);\n  }\n  visitPrefixNot(ast, mode) {\n    return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));\n  }\n  visitNonNullAssert(ast, mode) {\n    return convertToStatementIfNeeded(mode, this._visit(ast.expression, _Mode.Expression));\n  }\n  visitPropertyRead(ast, mode) {\n    const leftMostSafe = this.leftMostSafeNode(ast);\n    if (leftMostSafe) {\n      return this.convertSafeAccess(ast, leftMostSafe, mode);\n    } else {\n      let result = null;\n      const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n      const receiver = this._visit(ast.receiver, _Mode.Expression);\n      if (receiver === this._implicitReceiver) {\n        result = this._getLocal(ast.name, ast.receiver);\n        if (result) {\n          // Restore the previous \"usesImplicitReceiver\" state since the implicit\n          // receiver has been replaced with a resolved local expression.\n          this.usesImplicitReceiver = prevUsesImplicitReceiver;\n          this.addImplicitReceiverAccess(ast.name);\n        }\n      }\n      if (result == null) {\n        result = receiver.prop(ast.name, this.convertSourceSpan(ast.span));\n      }\n      return convertToStatementIfNeeded(mode, result);\n    }\n  }\n  visitPropertyWrite(ast, mode) {\n    const receiver = this._visit(ast.receiver, _Mode.Expression);\n    const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n    let varExpr = null;\n    if (receiver === this._implicitReceiver) {\n      const localExpr = this._getLocal(ast.name, ast.receiver);\n      if (localExpr) {\n        if (localExpr instanceof ReadPropExpr) {\n          // If the local variable is a property read expression, it's a reference\n          // to a 'context.property' value and will be used as the target of the\n          // write expression.\n          varExpr = localExpr;\n          // Restore the previous \"usesImplicitReceiver\" state since the implicit\n          // receiver has been replaced with a resolved local expression.\n          this.usesImplicitReceiver = prevUsesImplicitReceiver;\n          this.addImplicitReceiverAccess(ast.name);\n        } else {\n          // Otherwise it's an error.\n          const receiver = ast.name;\n          const value = ast.value instanceof PropertyRead ? ast.value.name : undefined;\n          throw new Error(`Cannot assign value \"${value}\" to template variable \"${receiver}\". Template variables are read-only.`);\n        }\n      }\n    }\n    // If no local expression could be produced, use the original receiver's\n    // property as the target.\n    if (varExpr === null) {\n      varExpr = receiver.prop(ast.name, this.convertSourceSpan(ast.span));\n    }\n    return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));\n  }\n  visitSafePropertyRead(ast, mode) {\n    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n  }\n  visitSafeKeyedRead(ast, mode) {\n    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n  }\n  visitAll(asts, mode) {\n    return asts.map(ast => this._visit(ast, mode));\n  }\n  visitCall(ast, mode) {\n    const leftMostSafe = this.leftMostSafeNode(ast);\n    if (leftMostSafe) {\n      return this.convertSafeAccess(ast, leftMostSafe, mode);\n    }\n    const convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n    if (ast instanceof BuiltinFunctionCall) {\n      return convertToStatementIfNeeded(mode, ast.converter(convertedArgs));\n    }\n    const receiver = ast.receiver;\n    if (receiver instanceof PropertyRead && receiver.receiver instanceof ImplicitReceiver && !(receiver.receiver instanceof ThisReceiver) && receiver.name === '$any') {\n      if (convertedArgs.length !== 1) {\n        throw new Error(`Invalid call to $any, expected 1 argument but received ${convertedArgs.length || 'none'}`);\n      }\n      return convertToStatementIfNeeded(mode, convertedArgs[0]);\n    }\n    const call = this._visit(receiver, _Mode.Expression).callFn(convertedArgs, this.convertSourceSpan(ast.span));\n    return convertToStatementIfNeeded(mode, call);\n  }\n  visitSafeCall(ast, mode) {\n    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n  }\n  _visit(ast, mode) {\n    const result = this._resultMap.get(ast);\n    if (result) return result;\n    return (this._nodeMap.get(ast) || ast).visit(this, mode);\n  }\n  convertSafeAccess(ast, leftMostSafe, mode) {\n    // If the expression contains a safe access node on the left it needs to be converted to\n    // an expression that guards the access to the member by checking the receiver for blank. As\n    // execution proceeds from left to right, the left most part of the expression must be guarded\n    // first but, because member access is left associative, the right side of the expression is at\n    // the top of the AST. The desired result requires lifting a copy of the left part of the\n    // expression up to test it for blank before generating the unguarded version.\n    // Consider, for example the following expression: a?.b.c?.d.e\n    // This results in the ast:\n    //         .\n    //        / \\\n    //       ?.   e\n    //      /  \\\n    //     .    d\n    //    / \\\n    //   ?.  c\n    //  /  \\\n    // a    b\n    // The following tree should be generated:\n    //\n    //        /---- ? ----\\\n    //       /      |      \\\n    //     a   /--- ? ---\\  null\n    //        /     |     \\\n    //       .      .     null\n    //      / \\    / \\\n    //     .  c   .   e\n    //    / \\    / \\\n    //   a   b  .   d\n    //         / \\\n    //        .   c\n    //       / \\\n    //      a   b\n    //\n    // Notice that the first guard condition is the left hand of the left most safe access node\n    // which comes in as leftMostSafe to this routine.\n    let guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\n    let temporary = undefined;\n    if (this.needsTemporaryInSafeAccess(leftMostSafe.receiver)) {\n      // If the expression has method calls or pipes then we need to save the result into a\n      // temporary variable to avoid calling stateful or impure code more than once.\n      temporary = this.allocateTemporary();\n      // Preserve the result in the temporary variable\n      guardedExpression = temporary.set(guardedExpression);\n      // Ensure all further references to the guarded expression refer to the temporary instead.\n      this._resultMap.set(leftMostSafe.receiver, temporary);\n    }\n    const condition = guardedExpression.isBlank();\n    // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n    // leftMostNode with its unguarded version in the call to `this.visit()`.\n    if (leftMostSafe instanceof SafeCall) {\n      this._nodeMap.set(leftMostSafe, new Call(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.args, leftMostSafe.argumentSpan));\n    } else if (leftMostSafe instanceof SafeKeyedRead) {\n      this._nodeMap.set(leftMostSafe, new KeyedRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.key));\n    } else {\n      this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name));\n    }\n    // Recursively convert the node now without the guarded member access.\n    const access = this._visit(ast, _Mode.Expression);\n    // Remove the mapping. This is not strictly required as the converter only traverses each node\n    // once but is safer if the conversion is changed to traverse the nodes more than once.\n    this._nodeMap.delete(leftMostSafe);\n    // If we allocated a temporary, release it.\n    if (temporary) {\n      this.releaseTemporary(temporary);\n    }\n    // Produce the conditional\n    return convertToStatementIfNeeded(mode, condition.conditional(NULL_EXPR, access));\n  }\n  convertNullishCoalesce(ast, mode) {\n    const left = this._visit(ast.left, _Mode.Expression);\n    const right = this._visit(ast.right, _Mode.Expression);\n    const temporary = this.allocateTemporary();\n    this.releaseTemporary(temporary);\n    // Generate the following expression. It is identical to how TS\n    // transpiles binary expressions with a nullish coalescing operator.\n    // let temp;\n    // (temp = a) !== null && temp !== undefined ? temp : b;\n    return convertToStatementIfNeeded(mode, temporary.set(left).notIdentical(NULL_EXPR).and(temporary.notIdentical(literal(undefined))).conditional(temporary, right));\n  }\n  // Given an expression of the form a?.b.c?.d.e then the left most safe node is\n  // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n  // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n  // safe method call as this needs to be transformed initially to:\n  //   a == null ? null : a.c.b.c?.d.e\n  // then to:\n  //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n  leftMostSafeNode(ast) {\n    const visit = (visitor, ast) => {\n      return (this._nodeMap.get(ast) || ast).visit(visitor);\n    };\n    return ast.visit({\n      visitUnary(ast) {\n        return null;\n      },\n      visitBinary(ast) {\n        return null;\n      },\n      visitChain(ast) {\n        return null;\n      },\n      visitConditional(ast) {\n        return null;\n      },\n      visitCall(ast) {\n        return visit(this, ast.receiver);\n      },\n      visitSafeCall(ast) {\n        return visit(this, ast.receiver) || ast;\n      },\n      visitImplicitReceiver(ast) {\n        return null;\n      },\n      visitThisReceiver(ast) {\n        return null;\n      },\n      visitInterpolation(ast) {\n        return null;\n      },\n      visitKeyedRead(ast) {\n        return visit(this, ast.receiver);\n      },\n      visitKeyedWrite(ast) {\n        return null;\n      },\n      visitLiteralArray(ast) {\n        return null;\n      },\n      visitLiteralMap(ast) {\n        return null;\n      },\n      visitLiteralPrimitive(ast) {\n        return null;\n      },\n      visitPipe(ast) {\n        return null;\n      },\n      visitPrefixNot(ast) {\n        return null;\n      },\n      visitNonNullAssert(ast) {\n        return visit(this, ast.expression);\n      },\n      visitPropertyRead(ast) {\n        return visit(this, ast.receiver);\n      },\n      visitPropertyWrite(ast) {\n        return null;\n      },\n      visitSafePropertyRead(ast) {\n        return visit(this, ast.receiver) || ast;\n      },\n      visitSafeKeyedRead(ast) {\n        return visit(this, ast.receiver) || ast;\n      }\n    });\n  }\n  // Returns true of the AST includes a method or a pipe indicating that, if the\n  // expression is used as the target of a safe property or method access then\n  // the expression should be stored into a temporary variable.\n  needsTemporaryInSafeAccess(ast) {\n    const visit = (visitor, ast) => {\n      return ast && (this._nodeMap.get(ast) || ast).visit(visitor);\n    };\n    const visitSome = (visitor, ast) => {\n      return ast.some(ast => visit(visitor, ast));\n    };\n    return ast.visit({\n      visitUnary(ast) {\n        return visit(this, ast.expr);\n      },\n      visitBinary(ast) {\n        return visit(this, ast.left) || visit(this, ast.right);\n      },\n      visitChain(ast) {\n        return false;\n      },\n      visitConditional(ast) {\n        return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);\n      },\n      visitCall(ast) {\n        return true;\n      },\n      visitSafeCall(ast) {\n        return true;\n      },\n      visitImplicitReceiver(ast) {\n        return false;\n      },\n      visitThisReceiver(ast) {\n        return false;\n      },\n      visitInterpolation(ast) {\n        return visitSome(this, ast.expressions);\n      },\n      visitKeyedRead(ast) {\n        return false;\n      },\n      visitKeyedWrite(ast) {\n        return false;\n      },\n      visitLiteralArray(ast) {\n        return true;\n      },\n      visitLiteralMap(ast) {\n        return true;\n      },\n      visitLiteralPrimitive(ast) {\n        return false;\n      },\n      visitPipe(ast) {\n        return true;\n      },\n      visitPrefixNot(ast) {\n        return visit(this, ast.expression);\n      },\n      visitNonNullAssert(ast) {\n        return visit(this, ast.expression);\n      },\n      visitPropertyRead(ast) {\n        return false;\n      },\n      visitPropertyWrite(ast) {\n        return false;\n      },\n      visitSafePropertyRead(ast) {\n        return false;\n      },\n      visitSafeKeyedRead(ast) {\n        return false;\n      }\n    });\n  }\n  allocateTemporary() {\n    const tempNumber = this._currentTemporary++;\n    this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n    return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n  }\n  releaseTemporary(temporary) {\n    this._currentTemporary--;\n    if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n      throw new Error(`Temporary ${temporary.name} released out of order`);\n    }\n  }\n  /**\n   * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.\n   *\n   * `ParseSpan` objects are relative to the start of the expression.\n   * This method converts these to full `ParseSourceSpan` objects that\n   * show where the span is within the overall source file.\n   *\n   * @param span the relative span to convert.\n   * @returns a `ParseSourceSpan` for the given span or null if no\n   * `baseSourceSpan` was provided to this class.\n   */\n  convertSourceSpan(span) {\n    if (this.baseSourceSpan) {\n      const start = this.baseSourceSpan.start.moveBy(span.start);\n      const end = this.baseSourceSpan.start.moveBy(span.end);\n      const fullStart = this.baseSourceSpan.fullStart.moveBy(span.start);\n      return new ParseSourceSpan(start, end, fullStart);\n    } else {\n      return null;\n    }\n  }\n  /** Adds the name of an AST to the list of implicit receiver accesses. */\n  addImplicitReceiverAccess(name) {\n    if (this.implicitReceiverAccesses) {\n      this.implicitReceiverAccesses.add(name);\n    }\n  }\n}\nfunction flattenStatements(arg, output) {\n  if (Array.isArray(arg)) {\n    arg.forEach(entry => flattenStatements(entry, output));\n  } else {\n    output.push(arg);\n  }\n}\nfunction unsupported() {\n  throw new Error('Unsupported operation');\n}\nclass InterpolationExpression extends Expression {\n  constructor(args) {\n    super(null, null);\n    this.args = args;\n    this.isConstant = unsupported;\n    this.isEquivalent = unsupported;\n    this.visitExpression = unsupported;\n    this.clone = unsupported;\n  }\n}\nclass DefaultLocalResolver {\n  constructor(globals) {\n    this.globals = globals;\n  }\n  notifyImplicitReceiverUse() {}\n  maybeRestoreView() {}\n  getLocal(name) {\n    if (name === EventHandlerVars.event.name) {\n      return EventHandlerVars.event;\n    }\n    return null;\n  }\n}\nclass BuiltinFunctionCall extends Call {\n  constructor(span, sourceSpan, args, converter) {\n    super(span, sourceSpan, new EmptyExpr$1(span, sourceSpan), args, null);\n    this.converter = converter;\n  }\n}\n\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!\n//                               Reach out to mprobst for details.\n//\n// =================================================================================================\n/** Map from tagName|propertyName to SecurityContext. Properties applying to all tags use '*'. */\nlet _SECURITY_SCHEMA;\nfunction SECURITY_SCHEMA() {\n  if (!_SECURITY_SCHEMA) {\n    _SECURITY_SCHEMA = {};\n    // Case is insignificant below, all element and attribute names are lower-cased for lookup.\n    registerContext(SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);\n    registerContext(SecurityContext.STYLE, ['*|style']);\n    // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\n    registerContext(SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'track|src', 'video|poster', 'video|src']);\n    registerContext(SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);\n  }\n  return _SECURITY_SCHEMA;\n}\nfunction registerContext(ctx, specs) {\n  for (const spec of specs) _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n}\n/**\n * The set of security-sensitive attributes of an `<iframe>` that *must* be\n * applied as a static attribute only. This ensures that all security-sensitive\n * attributes are taken into account while creating an instance of an `<iframe>`\n * at runtime.\n *\n * Note: avoid using this set directly, use the `isIframeSecuritySensitiveAttr` function\n * in the code instead.\n */\nconst IFRAME_SECURITY_SENSITIVE_ATTRS = new Set(['sandbox', 'allow', 'allowfullscreen', 'referrerpolicy', 'csp', 'fetchpriority']);\n/**\n * Checks whether a given attribute name might represent a security-sensitive\n * attribute of an <iframe>.\n */\nfunction isIframeSecuritySensitiveAttr(attrName) {\n  // The `setAttribute` DOM API is case-insensitive, so we lowercase the value\n  // before checking it against a known security-sensitive attributes.\n  return IFRAME_SECURITY_SENSITIVE_ATTRS.has(attrName.toLowerCase());\n}\n\n/**\n * The following set contains all keywords that can be used in the animation css shorthand\n * property and is used during the scoping of keyframes to make sure such keywords\n * are not modified.\n */\nconst animationKeywords = new Set([\n// global values\n'inherit', 'initial', 'revert', 'unset',\n// animation-direction\n'alternate', 'alternate-reverse', 'normal', 'reverse',\n// animation-fill-mode\n'backwards', 'both', 'forwards', 'none',\n// animation-play-state\n'paused', 'running',\n// animation-timing-function\n'ease', 'ease-in', 'ease-in-out', 'ease-out', 'linear', 'step-start', 'step-end',\n// `steps()` function\n'end', 'jump-both', 'jump-end', 'jump-none', 'jump-start', 'start']);\n/**\n * The following class has its origin from a port of shadowCSS from webcomponents.js to TypeScript.\n * It has since diverge in many ways to tailor Angular's needs.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM.\n  The selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nclass ShadowCss {\n  constructor() {\n    /**\n     * Regular expression used to extrapolate the possible keyframes from an\n     * animation declaration (with possibly multiple animation definitions)\n     *\n     * The regular expression can be divided in three parts\n     *  - (^|\\s+)\n     *    simply captures how many (if any) leading whitespaces are present\n     *  - (?:(?:(['\"])((?:\\\\\\\\|\\\\\\2|(?!\\2).)+)\\2)|(-?[A-Za-z][\\w\\-]*))\n     *    captures two different possible keyframes, ones which are quoted or ones which are valid css\n     * idents (custom properties excluded)\n     *  - (?=[,\\s;]|$)\n     *    simply matches the end of the possible keyframe, valid endings are: a comma, a space, a\n     * semicolon or the end of the string\n     */\n    this._animationDeclarationKeyframesRe = /(^|\\s+)(?:(?:(['\"])((?:\\\\\\\\|\\\\\\2|(?!\\2).)+)\\2)|(-?[A-Za-z][\\w\\-]*))(?=[,\\s]|$)/g;\n  }\n  /*\n   * Shim some cssText with the given selector. Returns cssText that can be included in the document\n   *\n   * The selector is the attribute added to all elements inside the host,\n   * The hostSelector is the attribute added to the host itself.\n   */\n  shimCssText(cssText, selector, hostSelector = '') {\n    // **NOTE**: Do not strip comments as this will cause component sourcemaps to break\n    // due to shift in lines.\n    // Collect comments and replace them with a placeholder, this is done to avoid complicating\n    // the rule parsing RegExp and keep it safer.\n    const comments = [];\n    cssText = cssText.replace(_commentRe, m => {\n      if (m.match(_commentWithHashRe)) {\n        comments.push(m);\n      } else {\n        // Replace non hash comments with empty lines.\n        // This is done so that we do not leak any senstive data in comments.\n        const newLinesMatches = m.match(_newLinesRe);\n        comments.push((newLinesMatches?.join('') ?? '') + '\\n');\n      }\n      return COMMENT_PLACEHOLDER;\n    });\n    cssText = this._insertDirectives(cssText);\n    const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n    // Add back comments at the original position.\n    let commentIdx = 0;\n    return scopedCssText.replace(_commentWithHashPlaceHolderRe, () => comments[commentIdx++]);\n  }\n  _insertDirectives(cssText) {\n    cssText = this._insertPolyfillDirectivesInCssText(cssText);\n    return this._insertPolyfillRulesInCssText(cssText);\n  }\n  /**\n   * Process styles to add scope to keyframes.\n   *\n   * Modify both the names of the keyframes defined in the component styles and also the css\n   * animation rules using them.\n   *\n   * Animation rules using keyframes defined elsewhere are not modified to allow for globally\n   * defined keyframes.\n   *\n   * For example, we convert this css:\n   *\n   * ```\n   * .box {\n   *   animation: box-animation 1s forwards;\n   * }\n   *\n   * @keyframes box-animation {\n   *   to {\n   *     background-color: green;\n   *   }\n   * }\n   * ```\n   *\n   * to this:\n   *\n   * ```\n   * .box {\n   *   animation: scopeName_box-animation 1s forwards;\n   * }\n   *\n   * @keyframes scopeName_box-animation {\n   *   to {\n   *     background-color: green;\n   *   }\n   * }\n   * ```\n   *\n   * @param cssText the component's css text that needs to be scoped.\n   * @param scopeSelector the component's scope selector.\n   *\n   * @returns the scoped css text.\n   */\n  _scopeKeyframesRelatedCss(cssText, scopeSelector) {\n    const unscopedKeyframesSet = new Set();\n    const scopedKeyframesCssText = processRules(cssText, rule => this._scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet));\n    return processRules(scopedKeyframesCssText, rule => this._scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet));\n  }\n  /**\n   * Scopes local keyframes names, returning the updated css rule and it also\n   * adds the original keyframe name to a provided set to collect all keyframes names\n   * so that it can later be used to scope the animation rules.\n   *\n   * For example, it takes a rule such as:\n   *\n   * ```\n   * @keyframes box-animation {\n   *   to {\n   *     background-color: green;\n   *   }\n   * }\n   * ```\n   *\n   * and returns:\n   *\n   * ```\n   * @keyframes scopeName_box-animation {\n   *   to {\n   *     background-color: green;\n   *   }\n   * }\n   * ```\n   * and as a side effect it adds \"box-animation\" to the `unscopedKeyframesSet` set\n   *\n   * @param cssRule the css rule to process.\n   * @param scopeSelector the component's scope selector.\n   * @param unscopedKeyframesSet the set of unscoped keyframes names (which can be\n   * modified as a side effect)\n   *\n   * @returns the css rule modified with the scoped keyframes name.\n   */\n  _scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet) {\n    return {\n      ...rule,\n      selector: rule.selector.replace(/(^@(?:-webkit-)?keyframes(?:\\s+))(['\"]?)(.+)\\2(\\s*)$/, (_, start, quote, keyframeName, endSpaces) => {\n        unscopedKeyframesSet.add(unescapeQuotes(keyframeName, quote));\n        return `${start}${quote}${scopeSelector}_${keyframeName}${quote}${endSpaces}`;\n      })\n    };\n  }\n  /**\n   * Function used to scope a keyframes name (obtained from an animation declaration)\n   * using an existing set of unscopedKeyframes names to discern if the scoping needs to be\n   * performed (keyframes names of keyframes not defined in the component's css need not to be\n   * scoped).\n   *\n   * @param keyframe the keyframes name to check.\n   * @param scopeSelector the component's scope selector.\n   * @param unscopedKeyframesSet the set of unscoped keyframes names.\n   *\n   * @returns the scoped name of the keyframe, or the original name is the name need not to be\n   * scoped.\n   */\n  _scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet) {\n    return keyframe.replace(/^(\\s*)(['\"]?)(.+?)\\2(\\s*)$/, (_, spaces1, quote, name, spaces2) => {\n      name = `${unscopedKeyframesSet.has(unescapeQuotes(name, quote)) ? scopeSelector + '_' : ''}${name}`;\n      return `${spaces1}${quote}${name}${quote}${spaces2}`;\n    });\n  }\n  /**\n   * Scope an animation rule so that the keyframes mentioned in such rule\n   * are scoped if defined in the component's css and left untouched otherwise.\n   *\n   * It can scope values of both the 'animation' and 'animation-name' properties.\n   *\n   * @param rule css rule to scope.\n   * @param scopeSelector the component's scope selector.\n   * @param unscopedKeyframesSet the set of unscoped keyframes names.\n   *\n   * @returns the updated css rule.\n   **/\n  _scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet) {\n    let content = rule.content.replace(/((?:^|\\s+|;)(?:-webkit-)?animation(?:\\s*):(?:\\s*))([^;]+)/g, (_, start, animationDeclarations) => start + animationDeclarations.replace(this._animationDeclarationKeyframesRe, (original, leadingSpaces, quote = '', quotedName, nonQuotedName) => {\n      if (quotedName) {\n        return `${leadingSpaces}${this._scopeAnimationKeyframe(`${quote}${quotedName}${quote}`, scopeSelector, unscopedKeyframesSet)}`;\n      } else {\n        return animationKeywords.has(nonQuotedName) ? original : `${leadingSpaces}${this._scopeAnimationKeyframe(nonQuotedName, scopeSelector, unscopedKeyframesSet)}`;\n      }\n    }));\n    content = content.replace(/((?:^|\\s+|;)(?:-webkit-)?animation-name(?:\\s*):(?:\\s*))([^;]+)/g, (_match, start, commaSeparatedKeyframes) => `${start}${commaSeparatedKeyframes.split(',').map(keyframe => this._scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet)).join(',')}`);\n    return {\n      ...rule,\n      content\n    };\n  }\n  /*\n   * Process styles to convert native ShadowDOM rules that will trip\n   * up the css parser; we rely on decorating the stylesheet with inert rules.\n   *\n   * For example, we convert this rule:\n   *\n   * polyfill-next-selector { content: ':host menu-item'; }\n   * ::content menu-item {\n   *\n   * to this:\n   *\n   * scopeName menu-item {\n   *\n   **/\n  _insertPolyfillDirectivesInCssText(cssText) {\n    return cssText.replace(_cssContentNextSelectorRe, function (...m) {\n      return m[2] + '{';\n    });\n  }\n  /*\n   * Process styles to add rules which will only apply under the polyfill\n   *\n   * For example, we convert this rule:\n   *\n   * polyfill-rule {\n   *   content: ':host menu-item';\n   * ...\n   * }\n   *\n   * to this:\n   *\n   * scopeName menu-item {...}\n   *\n   **/\n  _insertPolyfillRulesInCssText(cssText) {\n    return cssText.replace(_cssContentRuleRe, (...m) => {\n      const rule = m[0].replace(m[1], '').replace(m[2], '');\n      return m[4] + rule;\n    });\n  }\n  /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n   *\n   *  .foo {... }\n   *\n   *  and converts this to\n   *\n   *  scopeName .foo { ... }\n   */\n  _scopeCssText(cssText, scopeSelector, hostSelector) {\n    const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\n    // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n    cssText = this._insertPolyfillHostInCssText(cssText);\n    cssText = this._convertColonHost(cssText);\n    cssText = this._convertColonHostContext(cssText);\n    cssText = this._convertShadowDOMSelectors(cssText);\n    if (scopeSelector) {\n      cssText = this._scopeKeyframesRelatedCss(cssText, scopeSelector);\n      cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n    }\n    cssText = cssText + '\\n' + unscopedRules;\n    return cssText.trim();\n  }\n  /*\n   * Process styles to add rules which will only apply under the polyfill\n   * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n   * occasions, e.g. -webkit-calc on Safari.)\n   * For example, we convert this rule:\n   *\n   * @polyfill-unscoped-rule {\n   *   content: 'menu-item';\n   * ... }\n   *\n   * to this:\n   *\n   * menu-item {...}\n   *\n   **/\n  _extractUnscopedRulesFromCssText(cssText) {\n    let r = '';\n    let m;\n    _cssContentUnscopedRuleRe.lastIndex = 0;\n    while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n      const rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n      r += rule + '\\n\\n';\n    }\n    return r;\n  }\n  /*\n   * convert a rule like :host(.foo) > .bar { }\n   *\n   * to\n   *\n   * .foo<scopeName> > .bar\n   */\n  _convertColonHost(cssText) {\n    return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {\n      if (hostSelectors) {\n        const convertedSelectors = [];\n        const hostSelectorArray = hostSelectors.split(',').map(p => p.trim());\n        for (const hostSelector of hostSelectorArray) {\n          if (!hostSelector) break;\n          const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;\n          convertedSelectors.push(convertedSelector);\n        }\n        return convertedSelectors.join(',');\n      } else {\n        return _polyfillHostNoCombinator + otherSelectors;\n      }\n    });\n  }\n  /*\n   * convert a rule like :host-context(.foo) > .bar { }\n   *\n   * to\n   *\n   * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }\n   *\n   * and\n   *\n   * :host-context(.foo:host) .bar { ... }\n   *\n   * to\n   *\n   * .foo<scopeName> .bar { ... }\n   */\n  _convertColonHostContext(cssText) {\n    return cssText.replace(_cssColonHostContextReGlobal, selectorText => {\n      // We have captured a selector that contains a `:host-context` rule.\n      // For backward compatibility `:host-context` may contain a comma separated list of selectors.\n      // Each context selector group will contain a list of host-context selectors that must match\n      // an ancestor of the host.\n      // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)\n      const contextSelectorGroups = [[]];\n      // There may be more than `:host-context` in this selector so `selectorText` could look like:\n      // `:host-context(.one):host-context(.two)`.\n      // Execute `_cssColonHostContextRe` over and over until we have extracted all the\n      // `:host-context` selectors from this selector.\n      let match;\n      while (match = _cssColonHostContextRe.exec(selectorText)) {\n        // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]\n        // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.\n        const newContextSelectors = (match[1] ?? '').trim().split(',').map(m => m.trim()).filter(m => m !== '');\n        // We must duplicate the current selector group for each of these new selectors.\n        // For example if the current groups are:\n        // ```\n        // [\n        //   ['a', 'b', 'c'],\n        //   ['x', 'y', 'z'],\n        // ]\n        // ```\n        // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new\n        // groups are:\n        // ```\n        // [\n        //   ['a', 'b', 'c', 'm'],\n        //   ['x', 'y', 'z', 'm'],\n        //   ['a', 'b', 'c', 'n'],\n        //   ['x', 'y', 'z', 'n'],\n        // ]\n        // ```\n        const contextSelectorGroupsLength = contextSelectorGroups.length;\n        repeatGroups(contextSelectorGroups, newContextSelectors.length);\n        for (let i = 0; i < newContextSelectors.length; i++) {\n          for (let j = 0; j < contextSelectorGroupsLength; j++) {\n            contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);\n          }\n        }\n        // Update the `selectorText` and see repeat to see if there are more `:host-context`s.\n        selectorText = match[2];\n      }\n      // The context selectors now must be combined with each other to capture all the possible\n      // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more\n      // info about how this is done.\n      return contextSelectorGroups.map(contextSelectors => combineHostContextSelectors(contextSelectors, selectorText)).join(', ');\n    });\n  }\n  /*\n   * Convert combinators like ::shadow and pseudo-elements like ::content\n   * by replacing with space.\n   */\n  _convertShadowDOMSelectors(cssText) {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n  }\n  // change a selector like 'div' to 'name div'\n  _scopeSelectors(cssText, scopeSelector, hostSelector) {\n    return processRules(cssText, rule => {\n      let selector = rule.selector;\n      let content = rule.content;\n      if (rule.selector[0] !== '@') {\n        selector = this._scopeSelector(rule.selector, scopeSelector, hostSelector);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@document') || rule.selector.startsWith('@layer') || rule.selector.startsWith('@container') || rule.selector.startsWith('@scope')) {\n        content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n      } else if (rule.selector.startsWith('@font-face') || rule.selector.startsWith('@page')) {\n        content = this._stripScopingSelectors(rule.content);\n      }\n      return new CssRule(selector, content);\n    });\n  }\n  /**\n   * Handle a css text that is within a rule that should not contain scope selectors by simply\n   * removing them! An example of such a rule is `@font-face`.\n   *\n   * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.\n   * Normally this would be a syntax error by the author of the styles. But in some rare cases, such\n   * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we\n   * can end up with broken css if the imported styles happen to contain @font-face rules.\n   *\n   * For example:\n   *\n   * ```\n   * :host ::ng-deep {\n   *   import 'some/lib/containing/font-face';\n   * }\n   *\n   * Similar logic applies to `@page` rules which can contain a particular set of properties,\n   * as well as some specific at-rules. Since they can't be encapsulated, we have to strip\n   * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3\n   * ```\n   */\n  _stripScopingSelectors(cssText) {\n    return processRules(cssText, rule => {\n      const selector = rule.selector.replace(_shadowDeepSelectors, ' ').replace(_polyfillHostNoCombinatorRe, ' ');\n      return new CssRule(selector, rule.content);\n    });\n  }\n  _scopeSelector(selector, scopeSelector, hostSelector) {\n    return selector.split(',').map(part => part.trim().split(_shadowDeepSelectors)).map(deepParts => {\n      const [shallowPart, ...otherParts] = deepParts;\n      const applyScope = shallowPart => {\n        if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n          return this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n        } else {\n          return shallowPart;\n        }\n      };\n      return [applyScope(shallowPart), ...otherParts].join(' ');\n    }).join(', ');\n  }\n  _selectorNeedsScoping(selector, scopeSelector) {\n    const re = this._makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n  }\n  _makeScopeMatcher(scopeSelector) {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n  }\n  // scope via name and [is=name]\n  _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n      const replaceBy = `[${hostSelector}]`;\n      return selector.replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {\n        return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n          return before + replaceBy + colon + after;\n        });\n      }).replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n  }\n  // return a selector with [name] suffix on each simple selector\n  // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n  _applySelectorScope(selector, scopeSelector, hostSelector) {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const attrName = '[' + scopeSelector + ']';\n    const _scopeSelectorPart = p => {\n      let scopedP = p.trim();\n      if (!scopedP) {\n        return '';\n      }\n      if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n        scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n      } else {\n        // remove :host since it should be unnecessary\n        const t = p.replace(_polyfillHostRe, '');\n        if (t.length > 0) {\n          const matches = t.match(/([^:]*)(:*)(.*)/);\n          if (matches) {\n            scopedP = matches[1] + attrName + matches[2] + matches[3];\n          }\n        }\n      }\n      return scopedP;\n    };\n    const safeContent = new SafeSelector(selector);\n    selector = safeContent.content();\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n      const separator = res[1];\n      const part = selector.slice(startIndex, res.index).trim();\n      // A space following an escaped hex value and followed by another hex character\n      // (ie: \".\\fc ber\" for \".über\") is not a separator between 2 selectors\n      // also keep in mind that backslashes are replaced by a placeholder by SafeSelector\n      // These escaped selectors happen for example when esbuild runs with optimization.minify.\n      if (part.match(/__esc-ph-(\\d+)__/) && selector[res.index + 1]?.match(/[a-fA-F\\d]/)) {\n        continue;\n      }\n      shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n      const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n      scopedSelector += `${scopedPart} ${separator} `;\n      startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return safeContent.restore(scopedSelector);\n  }\n  _insertPolyfillHostInCssText(selector) {\n    return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);\n  }\n}\nclass SafeSelector {\n  constructor(selector) {\n    this.placeholders = [];\n    this.index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = this._escapeRegexMatches(selector, /(\\[[^\\]]*\\])/g);\n    // CSS allows for certain special characters to be used in selectors if they're escaped.\n    // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a\n    // pseudo-class, but writing `.foo\\:blue` will match, because the colon was escaped.\n    // Replace all escape sequences (`\\` followed by a character) with a placeholder so\n    // that our handling of pseudo-selectors doesn't mess with them.\n    // Escaped characters have a specific placeholder so they can be detected separately.\n    selector = selector.replace(/(\\\\.)/g, (_, keep) => {\n      const replaceBy = `__esc-ph-${this.index}__`;\n      this.placeholders.push(keep);\n      this.index++;\n      return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n      const replaceBy = `__ph-${this.index}__`;\n      this.placeholders.push(exp);\n      this.index++;\n      return pseudo + replaceBy;\n    });\n  }\n  restore(content) {\n    return content.replace(/__(?:ph|esc-ph)-(\\d+)__/g, (_ph, index) => this.placeholders[+index]);\n  }\n  content() {\n    return this._content;\n  }\n  /**\n   * Replaces all of the substrings that match a regex within a\n   * special string (e.g. `__ph-0__`, `__ph-1__`, etc).\n   */\n  _escapeRegexMatches(content, pattern) {\n    return content.replace(pattern, (_, keep) => {\n      const replaceBy = `__ph-${this.index}__`;\n      this.placeholders.push(keep);\n      this.index++;\n      return replaceBy;\n    });\n  }\n}\nconst _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nconst _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _polyfillHost = '-shadowcsshost';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = '(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g,\n// Deprecated selectors\n/\\/shadow-deep\\//g, /\\/shadow\\//g];\n// The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\nconst _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _newLinesRe = /\\r?\\n/g;\nconst _commentRe = /\\/\\*[\\s\\S]*?\\*\\//g;\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=/g;\nconst COMMENT_PLACEHOLDER = '%COMMENT%';\nconst _commentWithHashPlaceHolderRe = new RegExp(COMMENT_PLACEHOLDER, 'g');\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst _ruleRe = new RegExp(`(\\\\s*(?:${COMMENT_PLACEHOLDER}\\\\s*)*)([^;\\\\{\\\\}]+?)(\\\\s*)((?:{%BLOCK%}?\\\\s*;?)|(?:\\\\s*;))`, 'g');\nconst CONTENT_PAIRS = new Map([['{', '}']]);\nconst COMMA_IN_PLACEHOLDER = '%COMMA_IN_PLACEHOLDER%';\nconst SEMI_IN_PLACEHOLDER = '%SEMI_IN_PLACEHOLDER%';\nconst COLON_IN_PLACEHOLDER = '%COLON_IN_PLACEHOLDER%';\nconst _cssCommaInPlaceholderReGlobal = new RegExp(COMMA_IN_PLACEHOLDER, 'g');\nconst _cssSemiInPlaceholderReGlobal = new RegExp(SEMI_IN_PLACEHOLDER, 'g');\nconst _cssColonInPlaceholderReGlobal = new RegExp(COLON_IN_PLACEHOLDER, 'g');\nclass CssRule {\n  constructor(selector, content) {\n    this.selector = selector;\n    this.content = content;\n  }\n}\nfunction processRules(input, ruleCallback) {\n  const escaped = escapeInStrings(input);\n  const inputWithEscapedBlocks = escapeBlocks(escaped, CONTENT_PAIRS, BLOCK_PLACEHOLDER);\n  let nextBlockIndex = 0;\n  const escapedResult = inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = '';\n    let suffix = m[4];\n    let contentPrefix = '';\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n    const rule = ruleCallback(new CssRule(selector, content));\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n  return unescapeInStrings(escapedResult);\n}\nclass StringWithEscapedBlocks {\n  constructor(escapedString, blocks) {\n    this.escapedString = escapedString;\n    this.blocks = blocks;\n  }\n}\nfunction escapeBlocks(input, charPairs, placeholder) {\n  const resultParts = [];\n  const escapedBlocks = [];\n  let openCharCount = 0;\n  let nonBlockStartIndex = 0;\n  let blockStartIndex = -1;\n  let openChar;\n  let closeChar;\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n    if (char === '\\\\') {\n      i++;\n    } else if (char === closeChar) {\n      openCharCount--;\n      if (openCharCount === 0) {\n        escapedBlocks.push(input.substring(blockStartIndex, i));\n        resultParts.push(placeholder);\n        nonBlockStartIndex = i;\n        blockStartIndex = -1;\n        openChar = closeChar = undefined;\n      }\n    } else if (char === openChar) {\n      openCharCount++;\n    } else if (openCharCount === 0 && charPairs.has(char)) {\n      openChar = char;\n      closeChar = charPairs.get(char);\n      openCharCount = 1;\n      blockStartIndex = i + 1;\n      resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));\n    }\n  }\n  if (blockStartIndex !== -1) {\n    escapedBlocks.push(input.substring(blockStartIndex));\n    resultParts.push(placeholder);\n  } else {\n    resultParts.push(input.substring(nonBlockStartIndex));\n  }\n  return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n/**\n * Object containing as keys characters that should be substituted by placeholders\n * when found in strings during the css text parsing, and as values the respective\n * placeholders\n */\nconst ESCAPE_IN_STRING_MAP = {\n  ';': SEMI_IN_PLACEHOLDER,\n  ',': COMMA_IN_PLACEHOLDER,\n  ':': COLON_IN_PLACEHOLDER\n};\n/**\n * Parse the provided css text and inside strings (meaning, inside pairs of unescaped single or\n * double quotes) replace specific characters with their respective placeholders as indicated\n * by the `ESCAPE_IN_STRING_MAP` map.\n *\n * For example convert the text\n *  `animation: \"my-anim:at\\\"ion\" 1s;`\n * to\n *  `animation: \"my-anim%COLON_IN_PLACEHOLDER%at\\\"ion\" 1s;`\n *\n * This is necessary in order to remove the meaning of some characters when found inside strings\n * (for example `;` indicates the end of a css declaration, `,` the sequence of values and `:` the\n * division between property and value during a declaration, none of these meanings apply when such\n * characters are within strings and so in order to prevent parsing issues they need to be replaced\n * with placeholder text for the duration of the css manipulation process).\n *\n * @param input the original css text.\n *\n * @returns the css text with specific characters in strings replaced by placeholders.\n **/\nfunction escapeInStrings(input) {\n  let result = input;\n  let currentQuoteChar = null;\n  for (let i = 0; i < result.length; i++) {\n    const char = result[i];\n    if (char === '\\\\') {\n      i++;\n    } else {\n      if (currentQuoteChar !== null) {\n        // index i is inside a quoted sub-string\n        if (char === currentQuoteChar) {\n          currentQuoteChar = null;\n        } else {\n          const placeholder = ESCAPE_IN_STRING_MAP[char];\n          if (placeholder) {\n            result = `${result.substr(0, i)}${placeholder}${result.substr(i + 1)}`;\n            i += placeholder.length - 1;\n          }\n        }\n      } else if (char === '\\'' || char === '\"') {\n        currentQuoteChar = char;\n      }\n    }\n  }\n  return result;\n}\n/**\n * Replace in a string all occurrences of keys in the `ESCAPE_IN_STRING_MAP` map with their\n * original representation, this is simply used to revert the changes applied by the\n * escapeInStrings function.\n *\n * For example it reverts the text:\n *  `animation: \"my-anim%COLON_IN_PLACEHOLDER%at\\\"ion\" 1s;`\n * to it's original form of:\n *  `animation: \"my-anim:at\\\"ion\" 1s;`\n *\n * Note: For the sake of simplicity this function does not check that the placeholders are\n * actually inside strings as it would anyway be extremely unlikely to find them outside of strings.\n *\n * @param input the css text containing the placeholders.\n *\n * @returns the css text without the placeholders.\n */\nfunction unescapeInStrings(input) {\n  let result = input.replace(_cssCommaInPlaceholderReGlobal, ',');\n  result = result.replace(_cssSemiInPlaceholderReGlobal, ';');\n  result = result.replace(_cssColonInPlaceholderReGlobal, ':');\n  return result;\n}\n/**\n * Unescape all quotes present in a string, but only if the string was actually already\n * quoted.\n *\n * This generates a \"canonical\" representation of strings which can be used to match strings\n * which would otherwise only differ because of differently escaped quotes.\n *\n * For example it converts the string (assumed to be quoted):\n *  `this \\\\\"is\\\\\" a \\\\'\\\\\\\\'test`\n * to:\n *  `this \"is\" a '\\\\\\\\'test`\n * (note that the latter backslashes are not removed as they are not actually escaping the single\n * quote)\n *\n *\n * @param input the string possibly containing escaped quotes.\n * @param isQuoted boolean indicating whether the string was quoted inside a bigger string (if not\n * then it means that it doesn't represent an inner string and thus no unescaping is required)\n *\n * @returns the string in the \"canonical\" representation without escaped quotes.\n */\nfunction unescapeQuotes(str, isQuoted) {\n  return !isQuoted ? str : str.replace(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\\\(?=['\"])/g, '$1');\n}\n/**\n * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`\n * to create a selector that matches the same as `:host-context()`.\n *\n * Given a single context selector `A` we need to output selectors that match on the host and as an\n * ancestor of the host:\n *\n * ```\n * A <hostMarker>, A<hostMarker> {}\n * ```\n *\n * When there is more than one context selector we also have to create combinations of those\n * selectors with each other. For example if there are `A` and `B` selectors the output is:\n *\n * ```\n * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,\n * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}\n * ```\n *\n * And so on...\n *\n * @param contextSelectors an array of context selectors that will be combined.\n * @param otherSelectors the rest of the selectors that are not context selectors.\n */\nfunction combineHostContextSelectors(contextSelectors, otherSelectors) {\n  const hostMarker = _polyfillHostNoCombinator;\n  _polyfillHostRe.lastIndex = 0; // reset the regex to ensure we get an accurate test\n  const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);\n  // If there are no context selectors then just output a host marker\n  if (contextSelectors.length === 0) {\n    return hostMarker + otherSelectors;\n  }\n  const combined = [contextSelectors.pop() || ''];\n  while (contextSelectors.length > 0) {\n    const length = combined.length;\n    const contextSelector = contextSelectors.pop();\n    for (let i = 0; i < length; i++) {\n      const previousSelectors = combined[i];\n      // Add the new selector as a descendant of the previous selectors\n      combined[length * 2 + i] = previousSelectors + ' ' + contextSelector;\n      // Add the new selector as an ancestor of the previous selectors\n      combined[length + i] = contextSelector + ' ' + previousSelectors;\n      // Add the new selector to act on the same element as the previous selectors\n      combined[i] = contextSelector + previousSelectors;\n    }\n  }\n  // Finally connect the selector to the `hostMarker`s: either acting directly on the host\n  // (A<hostMarker>) or as an ancestor (A <hostMarker>).\n  return combined.map(s => otherSelectorsHasHost ? `${s}${otherSelectors}` : `${s}${hostMarker}${otherSelectors}, ${s} ${hostMarker}${otherSelectors}`).join(',');\n}\n/**\n * Mutate the given `groups` array so that there are `multiples` clones of the original array\n * stored.\n *\n * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the\n * newly added groups will be clones of the original.\n *\n * @param groups An array of groups of strings that will be repeated. This array is mutated\n *     in-place.\n * @param multiples The number of times the current groups should appear.\n */\nfunction repeatGroups(groups, multiples) {\n  const length = groups.length;\n  for (let i = 1; i < multiples; i++) {\n    for (let j = 0; j < length; j++) {\n      groups[j + i * length] = groups[j].slice(0);\n    }\n  }\n}\n\n/**\n * Distinguishes different kinds of IR operations.\n *\n * Includes both creation and update operations.\n */\nvar OpKind;\n(function (OpKind) {\n  /**\n   * A special operation type which is used to represent the beginning and end nodes of a linked\n   * list of operations.\n   */\n  OpKind[OpKind[\"ListEnd\"] = 0] = \"ListEnd\";\n  /**\n   * An operation which wraps an output AST statement.\n   */\n  OpKind[OpKind[\"Statement\"] = 1] = \"Statement\";\n  /**\n   * An operation which declares and initializes a `SemanticVariable`.\n   */\n  OpKind[OpKind[\"Variable\"] = 2] = \"Variable\";\n  /**\n   * An operation to begin rendering of an element.\n   */\n  OpKind[OpKind[\"ElementStart\"] = 3] = \"ElementStart\";\n  /**\n   * An operation to render an element with no children.\n   */\n  OpKind[OpKind[\"Element\"] = 4] = \"Element\";\n  /**\n   * An operation which declares an embedded view.\n   */\n  OpKind[OpKind[\"Template\"] = 5] = \"Template\";\n  /**\n   * An operation to end rendering of an element previously started with `ElementStart`.\n   */\n  OpKind[OpKind[\"ElementEnd\"] = 6] = \"ElementEnd\";\n  /**\n   * An operation to begin an `ng-container`.\n   */\n  OpKind[OpKind[\"ContainerStart\"] = 7] = \"ContainerStart\";\n  /**\n   * An operation for an `ng-container` with no children.\n   */\n  OpKind[OpKind[\"Container\"] = 8] = \"Container\";\n  /**\n   * An operation to end an `ng-container`.\n   */\n  OpKind[OpKind[\"ContainerEnd\"] = 9] = \"ContainerEnd\";\n  /**\n   * An operation disable binding for subsequent elements, which are descendants of a non-bindable\n   * node.\n   */\n  OpKind[OpKind[\"DisableBindings\"] = 10] = \"DisableBindings\";\n  /**\n   * An op to conditionally render a template.\n   */\n  OpKind[OpKind[\"Conditional\"] = 11] = \"Conditional\";\n  /**\n   * An operation to re-enable binding, after it was previously disabled.\n   */\n  OpKind[OpKind[\"EnableBindings\"] = 12] = \"EnableBindings\";\n  /**\n   * An operation to render a text node.\n   */\n  OpKind[OpKind[\"Text\"] = 13] = \"Text\";\n  /**\n   * An operation declaring an event listener for an element.\n   */\n  OpKind[OpKind[\"Listener\"] = 14] = \"Listener\";\n  /**\n   * An operation to interpolate text into a text node.\n   */\n  OpKind[OpKind[\"InterpolateText\"] = 15] = \"InterpolateText\";\n  /**\n   * An intermediate binding op, that has not yet been processed into an individual property,\n   * attribute, style, etc.\n   */\n  OpKind[OpKind[\"Binding\"] = 16] = \"Binding\";\n  /**\n   * An operation to bind an expression to a property of an element.\n   */\n  OpKind[OpKind[\"Property\"] = 17] = \"Property\";\n  /**\n   * An operation to bind an expression to a style property of an element.\n   */\n  OpKind[OpKind[\"StyleProp\"] = 18] = \"StyleProp\";\n  /**\n   * An operation to bind an expression to a class property of an element.\n   */\n  OpKind[OpKind[\"ClassProp\"] = 19] = \"ClassProp\";\n  /**\n   * An operation to bind an expression to the styles of an element.\n   */\n  OpKind[OpKind[\"StyleMap\"] = 20] = \"StyleMap\";\n  /**\n   * An operation to bind an expression to the classes of an element.\n   */\n  OpKind[OpKind[\"ClassMap\"] = 21] = \"ClassMap\";\n  /**\n   * An operation to advance the runtime's implicit slot context during the update phase of a view.\n   */\n  OpKind[OpKind[\"Advance\"] = 22] = \"Advance\";\n  /**\n   * An operation to instantiate a pipe.\n   */\n  OpKind[OpKind[\"Pipe\"] = 23] = \"Pipe\";\n  /**\n   * An operation to associate an attribute with an element.\n   */\n  OpKind[OpKind[\"Attribute\"] = 24] = \"Attribute\";\n  /**\n   * An attribute that has been extracted for inclusion in the consts array.\n   */\n  OpKind[OpKind[\"ExtractedAttribute\"] = 25] = \"ExtractedAttribute\";\n  /**\n   * An operation that configures a `@defer` block.\n   */\n  OpKind[OpKind[\"Defer\"] = 26] = \"Defer\";\n  /**\n   * An operation that controls when a `@defer` loads.\n   */\n  OpKind[OpKind[\"DeferOn\"] = 27] = \"DeferOn\";\n  /**\n   * An operation that controls when a `@defer` loads, using a custom expression as the condition.\n   */\n  OpKind[OpKind[\"DeferWhen\"] = 28] = \"DeferWhen\";\n  /**\n   * An i18n message that has been extracted for inclusion in the consts array.\n   */\n  OpKind[OpKind[\"I18nMessage\"] = 29] = \"I18nMessage\";\n  /**\n   * A host binding property.\n   */\n  OpKind[OpKind[\"HostProperty\"] = 30] = \"HostProperty\";\n  /**\n   * A namespace change, which causes the subsequent elements to be processed as either HTML or SVG.\n   */\n  OpKind[OpKind[\"Namespace\"] = 31] = \"Namespace\";\n  /**\n   * Configure a content projeciton definition for the view.\n   */\n  OpKind[OpKind[\"ProjectionDef\"] = 32] = \"ProjectionDef\";\n  /**\n   * Create a content projection slot.\n   */\n  OpKind[OpKind[\"Projection\"] = 33] = \"Projection\";\n  /**\n   * Create a repeater creation instruction op.\n   */\n  OpKind[OpKind[\"RepeaterCreate\"] = 34] = \"RepeaterCreate\";\n  /**\n   * An update up for a repeater.\n   */\n  OpKind[OpKind[\"Repeater\"] = 35] = \"Repeater\";\n  /**\n   * The start of an i18n block.\n   */\n  OpKind[OpKind[\"I18nStart\"] = 36] = \"I18nStart\";\n  /**\n   * A self-closing i18n on a single element.\n   */\n  OpKind[OpKind[\"I18n\"] = 37] = \"I18n\";\n  /**\n   * The end of an i18n block.\n   */\n  OpKind[OpKind[\"I18nEnd\"] = 38] = \"I18nEnd\";\n  /**\n   * An expression in an i18n message.\n   */\n  OpKind[OpKind[\"I18nExpression\"] = 39] = \"I18nExpression\";\n  /**\n   * An instruction that applies a set of i18n expressions.\n   */\n  OpKind[OpKind[\"I18nApply\"] = 40] = \"I18nApply\";\n  /**\n   * An instruction to create an ICU expression.\n   */\n  OpKind[OpKind[\"IcuStart\"] = 41] = \"IcuStart\";\n  /**\n   * An instruction to update an ICU expression.\n   */\n  OpKind[OpKind[\"IcuEnd\"] = 42] = \"IcuEnd\";\n  /**\n   * An instruction representing a placeholder in an ICU expression.\n   */\n  OpKind[OpKind[\"IcuPlaceholder\"] = 43] = \"IcuPlaceholder\";\n  /**\n   * An i18n context containing information needed to generate an i18n message.\n   */\n  OpKind[OpKind[\"I18nContext\"] = 44] = \"I18nContext\";\n  /**\n   * A creation op that corresponds to i18n attributes on an element.\n   */\n  OpKind[OpKind[\"I18nAttributes\"] = 45] = \"I18nAttributes\";\n})(OpKind || (OpKind = {}));\n/**\n * Distinguishes different kinds of IR expressions.\n */\nvar ExpressionKind;\n(function (ExpressionKind) {\n  /**\n   * Read of a variable in a lexical scope.\n   */\n  ExpressionKind[ExpressionKind[\"LexicalRead\"] = 0] = \"LexicalRead\";\n  /**\n   * A reference to the current view context.\n   */\n  ExpressionKind[ExpressionKind[\"Context\"] = 1] = \"Context\";\n  /**\n   * A reference to the view context, for use inside a track function.\n   */\n  ExpressionKind[ExpressionKind[\"TrackContext\"] = 2] = \"TrackContext\";\n  /**\n   * Read of a variable declared in a `VariableOp`.\n   */\n  ExpressionKind[ExpressionKind[\"ReadVariable\"] = 3] = \"ReadVariable\";\n  /**\n   * Runtime operation to navigate to the next view context in the view hierarchy.\n   */\n  ExpressionKind[ExpressionKind[\"NextContext\"] = 4] = \"NextContext\";\n  /**\n   * Runtime operation to retrieve the value of a local reference.\n   */\n  ExpressionKind[ExpressionKind[\"Reference\"] = 5] = \"Reference\";\n  /**\n   * Runtime operation to snapshot the current view context.\n   */\n  ExpressionKind[ExpressionKind[\"GetCurrentView\"] = 6] = \"GetCurrentView\";\n  /**\n   * Runtime operation to restore a snapshotted view.\n   */\n  ExpressionKind[ExpressionKind[\"RestoreView\"] = 7] = \"RestoreView\";\n  /**\n   * Runtime operation to reset the current view context after `RestoreView`.\n   */\n  ExpressionKind[ExpressionKind[\"ResetView\"] = 8] = \"ResetView\";\n  /**\n   * Defines and calls a function with change-detected arguments.\n   */\n  ExpressionKind[ExpressionKind[\"PureFunctionExpr\"] = 9] = \"PureFunctionExpr\";\n  /**\n   * Indicates a positional parameter to a pure function definition.\n   */\n  ExpressionKind[ExpressionKind[\"PureFunctionParameterExpr\"] = 10] = \"PureFunctionParameterExpr\";\n  /**\n   * Binding to a pipe transformation.\n   */\n  ExpressionKind[ExpressionKind[\"PipeBinding\"] = 11] = \"PipeBinding\";\n  /**\n   * Binding to a pipe transformation with a variable number of arguments.\n   */\n  ExpressionKind[ExpressionKind[\"PipeBindingVariadic\"] = 12] = \"PipeBindingVariadic\";\n  /*\n   * A safe property read requiring expansion into a null check.\n   */\n  ExpressionKind[ExpressionKind[\"SafePropertyRead\"] = 13] = \"SafePropertyRead\";\n  /**\n   * A safe keyed read requiring expansion into a null check.\n   */\n  ExpressionKind[ExpressionKind[\"SafeKeyedRead\"] = 14] = \"SafeKeyedRead\";\n  /**\n   * A safe function call requiring expansion into a null check.\n   */\n  ExpressionKind[ExpressionKind[\"SafeInvokeFunction\"] = 15] = \"SafeInvokeFunction\";\n  /**\n   * An intermediate expression that will be expanded from a safe read into an explicit ternary.\n   */\n  ExpressionKind[ExpressionKind[\"SafeTernaryExpr\"] = 16] = \"SafeTernaryExpr\";\n  /**\n   * An empty expression that will be stipped before generating the final output.\n   */\n  ExpressionKind[ExpressionKind[\"EmptyExpr\"] = 17] = \"EmptyExpr\";\n  /*\n   * An assignment to a temporary variable.\n   */\n  ExpressionKind[ExpressionKind[\"AssignTemporaryExpr\"] = 18] = \"AssignTemporaryExpr\";\n  /**\n   * A reference to a temporary variable.\n   */\n  ExpressionKind[ExpressionKind[\"ReadTemporaryExpr\"] = 19] = \"ReadTemporaryExpr\";\n  /**\n   * An expression representing a sanitizer function.\n   */\n  ExpressionKind[ExpressionKind[\"SanitizerExpr\"] = 20] = \"SanitizerExpr\";\n  /**\n   * An expression representing a function to create trusted values.\n   */\n  ExpressionKind[ExpressionKind[\"TrustedValueFnExpr\"] = 21] = \"TrustedValueFnExpr\";\n  /**\n   * An expression that will cause a literal slot index to be emitted.\n   */\n  ExpressionKind[ExpressionKind[\"SlotLiteralExpr\"] = 22] = \"SlotLiteralExpr\";\n  /**\n   * A test expression for a conditional op.\n   */\n  ExpressionKind[ExpressionKind[\"ConditionalCase\"] = 23] = \"ConditionalCase\";\n  /**\n   * A variable for use inside a repeater, providing one of the ambiently-available context\n   * properties ($even, $first, etc.).\n   */\n  ExpressionKind[ExpressionKind[\"DerivedRepeaterVar\"] = 24] = \"DerivedRepeaterVar\";\n  /**\n   * An expression that will be automatically extracted to the component const array.\n   */\n  ExpressionKind[ExpressionKind[\"ConstCollected\"] = 25] = \"ConstCollected\";\n})(ExpressionKind || (ExpressionKind = {}));\nvar VariableFlags;\n(function (VariableFlags) {\n  VariableFlags[VariableFlags[\"None\"] = 0] = \"None\";\n  /**\n   * Always inline this variable, regardless of the number of times it's used.\n   * An `AlwaysInline` variable may not depend on context, because doing so may cause side effects\n   * that are illegal when multi-inlined. (The optimizer will enforce this constraint.)\n   */\n  VariableFlags[VariableFlags[\"AlwaysInline\"] = 1] = \"AlwaysInline\";\n})(VariableFlags || (VariableFlags = {}));\n/**\n * Distinguishes between different kinds of `SemanticVariable`s.\n */\nvar SemanticVariableKind;\n(function (SemanticVariableKind) {\n  /**\n   * Represents the context of a particular view.\n   */\n  SemanticVariableKind[SemanticVariableKind[\"Context\"] = 0] = \"Context\";\n  /**\n   * Represents an identifier declared in the lexical scope of a view.\n   */\n  SemanticVariableKind[SemanticVariableKind[\"Identifier\"] = 1] = \"Identifier\";\n  /**\n   * Represents a saved state that can be used to restore a view in a listener handler function.\n   */\n  SemanticVariableKind[SemanticVariableKind[\"SavedView\"] = 2] = \"SavedView\";\n  /**\n   * An alias generated by a special embedded view type (e.g. a `@for` block).\n   */\n  SemanticVariableKind[SemanticVariableKind[\"Alias\"] = 3] = \"Alias\";\n})(SemanticVariableKind || (SemanticVariableKind = {}));\n/**\n * Whether to compile in compatibilty mode. In compatibility mode, the template pipeline will\n * attempt to match the output of `TemplateDefinitionBuilder` as exactly as possible, at the cost\n * of producing quirky or larger code in some cases.\n */\nvar CompatibilityMode;\n(function (CompatibilityMode) {\n  CompatibilityMode[CompatibilityMode[\"Normal\"] = 0] = \"Normal\";\n  CompatibilityMode[CompatibilityMode[\"TemplateDefinitionBuilder\"] = 1] = \"TemplateDefinitionBuilder\";\n})(CompatibilityMode || (CompatibilityMode = {}));\n/**\n * Enumeration of the different kinds of `@defer` secondary blocks.\n */\nvar DeferSecondaryKind;\n(function (DeferSecondaryKind) {\n  DeferSecondaryKind[DeferSecondaryKind[\"Loading\"] = 0] = \"Loading\";\n  DeferSecondaryKind[DeferSecondaryKind[\"Placeholder\"] = 1] = \"Placeholder\";\n  DeferSecondaryKind[DeferSecondaryKind[\"Error\"] = 2] = \"Error\";\n})(DeferSecondaryKind || (DeferSecondaryKind = {}));\n/**\n * Enumeration of the types of attributes which can be applied to an element.\n */\nvar BindingKind;\n(function (BindingKind) {\n  /**\n   * Static attributes.\n   */\n  BindingKind[BindingKind[\"Attribute\"] = 0] = \"Attribute\";\n  /**\n   * Class bindings.\n   */\n  BindingKind[BindingKind[\"ClassName\"] = 1] = \"ClassName\";\n  /**\n   * Style bindings.\n   */\n  BindingKind[BindingKind[\"StyleProperty\"] = 2] = \"StyleProperty\";\n  /**\n   * Dynamic property bindings.\n   */\n  BindingKind[BindingKind[\"Property\"] = 3] = \"Property\";\n  /**\n   * Property or attribute bindings on a template.\n   */\n  BindingKind[BindingKind[\"Template\"] = 4] = \"Template\";\n  /**\n   * Internationalized attributes.\n   */\n  BindingKind[BindingKind[\"I18n\"] = 5] = \"I18n\";\n  /**\n   * Animation property bindings.\n   */\n  BindingKind[BindingKind[\"Animation\"] = 6] = \"Animation\";\n})(BindingKind || (BindingKind = {}));\n/**\n * Enumeration of possible times i18n params can be resolved.\n */\nvar I18nParamResolutionTime;\n(function (I18nParamResolutionTime) {\n  /**\n   * Param is resolved at message creation time. Most params should be resolved at message creation\n   * time. However, ICU params need to be handled in post-processing.\n   */\n  I18nParamResolutionTime[I18nParamResolutionTime[\"Creation\"] = 0] = \"Creation\";\n  /**\n   * Param is resolved during post-processing. This should be used for params who's value comes from\n   * an ICU.\n   */\n  I18nParamResolutionTime[I18nParamResolutionTime[\"Postproccessing\"] = 1] = \"Postproccessing\";\n})(I18nParamResolutionTime || (I18nParamResolutionTime = {}));\n/**\n * The contexts in which an i18n expression can be used.\n */\nvar I18nExpressionFor;\n(function (I18nExpressionFor) {\n  /**\n   * This expression is used as a value (i.e. inside an i18n block).\n   */\n  I18nExpressionFor[I18nExpressionFor[\"I18nText\"] = 0] = \"I18nText\";\n  /**\n   * This expression is used in a binding.\n   */\n  I18nExpressionFor[I18nExpressionFor[\"I18nAttribute\"] = 1] = \"I18nAttribute\";\n})(I18nExpressionFor || (I18nExpressionFor = {}));\n/**\n * Flags that describe what an i18n param value. These determine how the value is serialized into\n * the final map.\n */\nvar I18nParamValueFlags;\n(function (I18nParamValueFlags) {\n  I18nParamValueFlags[I18nParamValueFlags[\"None\"] = 0] = \"None\";\n  /**\n   *  This value represtents an element tag.\n   */\n  I18nParamValueFlags[I18nParamValueFlags[\"ElementTag\"] = 1] = \"ElementTag\";\n  /**\n   * This value represents a template tag.\n   */\n  I18nParamValueFlags[I18nParamValueFlags[\"TemplateTag\"] = 2] = \"TemplateTag\";\n  /**\n   * This value represents the opening of a tag.\n   */\n  I18nParamValueFlags[I18nParamValueFlags[\"OpenTag\"] = 4] = \"OpenTag\";\n  /**\n   * This value represents the closing of a tag.\n   */\n  I18nParamValueFlags[I18nParamValueFlags[\"CloseTag\"] = 8] = \"CloseTag\";\n  /**\n   * This value represents an i18n expression index.\n   */\n  I18nParamValueFlags[I18nParamValueFlags[\"ExpressionIndex\"] = 16] = \"ExpressionIndex\";\n})(I18nParamValueFlags || (I18nParamValueFlags = {}));\n/**\n * Whether the active namespace is HTML, MathML, or SVG mode.\n */\nvar Namespace;\n(function (Namespace) {\n  Namespace[Namespace[\"HTML\"] = 0] = \"HTML\";\n  Namespace[Namespace[\"SVG\"] = 1] = \"SVG\";\n  Namespace[Namespace[\"Math\"] = 2] = \"Math\";\n})(Namespace || (Namespace = {}));\n/**\n * The type of a `@defer` trigger, for use in the ir.\n */\nvar DeferTriggerKind;\n(function (DeferTriggerKind) {\n  DeferTriggerKind[DeferTriggerKind[\"Idle\"] = 0] = \"Idle\";\n  DeferTriggerKind[DeferTriggerKind[\"Immediate\"] = 1] = \"Immediate\";\n  DeferTriggerKind[DeferTriggerKind[\"Timer\"] = 2] = \"Timer\";\n  DeferTriggerKind[DeferTriggerKind[\"Hover\"] = 3] = \"Hover\";\n  DeferTriggerKind[DeferTriggerKind[\"Interaction\"] = 4] = \"Interaction\";\n  DeferTriggerKind[DeferTriggerKind[\"Viewport\"] = 5] = \"Viewport\";\n})(DeferTriggerKind || (DeferTriggerKind = {}));\n/**\n * Kinds of i18n contexts. They can be created because of root i18n blocks, or ICUs.\n */\nvar I18nContextKind;\n(function (I18nContextKind) {\n  I18nContextKind[I18nContextKind[\"RootI18n\"] = 0] = \"RootI18n\";\n  I18nContextKind[I18nContextKind[\"Icu\"] = 1] = \"Icu\";\n  I18nContextKind[I18nContextKind[\"Attr\"] = 2] = \"Attr\";\n})(I18nContextKind || (I18nContextKind = {}));\nvar TemplateKind;\n(function (TemplateKind) {\n  TemplateKind[TemplateKind[\"NgTemplate\"] = 0] = \"NgTemplate\";\n  TemplateKind[TemplateKind[\"Structural\"] = 1] = \"Structural\";\n  TemplateKind[TemplateKind[\"Block\"] = 2] = \"Block\";\n})(TemplateKind || (TemplateKind = {}));\n\n/**\n * Marker symbol for `ConsumesSlotOpTrait`.\n */\nconst ConsumesSlot = Symbol('ConsumesSlot');\n/**\n * Marker symbol for `DependsOnSlotContextOpTrait`.\n */\nconst DependsOnSlotContext = Symbol('DependsOnSlotContext');\n/**\n * Marker symbol for `ConsumesVars` trait.\n */\nconst ConsumesVarsTrait = Symbol('ConsumesVars');\n/**\n * Marker symbol for `UsesVarOffset` trait.\n */\nconst UsesVarOffset = Symbol('UsesVarOffset');\n/**\n * Default values for most `ConsumesSlotOpTrait` fields (used with the spread operator to initialize\n * implementors of the trait).\n */\nconst TRAIT_CONSUMES_SLOT = {\n  [ConsumesSlot]: true,\n  numSlotsUsed: 1\n};\n/**\n * Default values for most `DependsOnSlotContextOpTrait` fields (used with the spread operator to\n * initialize implementors of the trait).\n */\nconst TRAIT_DEPENDS_ON_SLOT_CONTEXT = {\n  [DependsOnSlotContext]: true\n};\n/**\n * Default values for `UsesVars` fields (used with the spread operator to initialize\n * implementors of the trait).\n */\nconst TRAIT_CONSUMES_VARS = {\n  [ConsumesVarsTrait]: true\n};\n/**\n * Default values for `UsesVarOffset` fields (used with the spread operator to initialize\n * implementors of this trait).\n */\nconst TRAIT_USES_VAR_OFFSET = {\n  [UsesVarOffset]: true,\n  varOffset: null\n};\n/**\n * Test whether an operation implements `ConsumesSlotOpTrait`.\n */\nfunction hasConsumesSlotTrait(op) {\n  return op[ConsumesSlot] === true;\n}\n/**\n * Test whether an operation implements `DependsOnSlotContextOpTrait`.\n */\nfunction hasDependsOnSlotContextTrait(op) {\n  return op[DependsOnSlotContext] === true;\n}\nfunction hasConsumesVarsTrait(value) {\n  return value[ConsumesVarsTrait] === true;\n}\n/**\n * Test whether an expression implements `UsesVarOffsetTrait`.\n */\nfunction hasUsesVarOffsetTrait(expr) {\n  return expr[UsesVarOffset] === true;\n}\n\n/**\n * Create a `StatementOp`.\n */\nfunction createStatementOp(statement) {\n  return {\n    kind: OpKind.Statement,\n    statement,\n    ...NEW_OP\n  };\n}\n/**\n * Create a `VariableOp`.\n */\nfunction createVariableOp(xref, variable, initializer, flags) {\n  return {\n    kind: OpKind.Variable,\n    xref,\n    variable,\n    initializer,\n    flags,\n    ...NEW_OP\n  };\n}\n/**\n * Static structure shared by all operations.\n *\n * Used as a convenience via the spread operator (`...NEW_OP`) when creating new operations, and\n * ensures the fields are always in the same order.\n */\nconst NEW_OP = {\n  debugListId: null,\n  prev: null,\n  next: null\n};\n\n/**\n * Create an `InterpolationTextOp`.\n */\nfunction createInterpolateTextOp(xref, interpolation, sourceSpan) {\n  return {\n    kind: OpKind.InterpolateText,\n    target: xref,\n    interpolation,\n    sourceSpan,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS,\n    ...NEW_OP\n  };\n}\nclass Interpolation {\n  constructor(strings, expressions, i18nPlaceholders) {\n    this.strings = strings;\n    this.expressions = expressions;\n    this.i18nPlaceholders = i18nPlaceholders;\n    if (i18nPlaceholders.length !== 0 && i18nPlaceholders.length !== expressions.length) {\n      throw new Error(`Expected ${expressions.length} placeholders to match interpolation expression count, but got ${i18nPlaceholders.length}`);\n    }\n  }\n}\n/**\n * Create a `BindingOp`, not yet transformed into a particular type of binding.\n */\nfunction createBindingOp(target, kind, name, expression, unit, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {\n  return {\n    kind: OpKind.Binding,\n    bindingKind: kind,\n    target,\n    name,\n    expression,\n    unit,\n    securityContext,\n    isTextAttribute,\n    isStructuralTemplateAttribute,\n    templateKind,\n    i18nContext: null,\n    i18nMessage,\n    sourceSpan,\n    ...NEW_OP\n  };\n}\n/**\n * Create a `PropertyOp`.\n */\nfunction createPropertyOp(target, name, expression, isAnimationTrigger, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {\n  return {\n    kind: OpKind.Property,\n    target,\n    name,\n    expression,\n    isAnimationTrigger,\n    securityContext,\n    sanitizer: null,\n    isStructuralTemplateAttribute,\n    templateKind,\n    i18nContext,\n    i18nMessage,\n    sourceSpan,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS,\n    ...NEW_OP\n  };\n}\n/** Create a `StylePropOp`. */\nfunction createStylePropOp(xref, name, expression, unit, sourceSpan) {\n  return {\n    kind: OpKind.StyleProp,\n    target: xref,\n    name,\n    expression,\n    unit,\n    sourceSpan,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS,\n    ...NEW_OP\n  };\n}\n/**\n * Create a `ClassPropOp`.\n */\nfunction createClassPropOp(xref, name, expression, sourceSpan) {\n  return {\n    kind: OpKind.ClassProp,\n    target: xref,\n    name,\n    expression,\n    sourceSpan,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS,\n    ...NEW_OP\n  };\n}\n/** Create a `StyleMapOp`. */\nfunction createStyleMapOp(xref, expression, sourceSpan) {\n  return {\n    kind: OpKind.StyleMap,\n    target: xref,\n    expression,\n    sourceSpan,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS,\n    ...NEW_OP\n  };\n}\n/**\n * Create a `ClassMapOp`.\n */\nfunction createClassMapOp(xref, expression, sourceSpan) {\n  return {\n    kind: OpKind.ClassMap,\n    target: xref,\n    expression,\n    sourceSpan,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS,\n    ...NEW_OP\n  };\n}\n/**\n * Create an `AttributeOp`.\n */\nfunction createAttributeOp(target, namespace, name, expression, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {\n  return {\n    kind: OpKind.Attribute,\n    target,\n    namespace,\n    name,\n    expression,\n    securityContext,\n    sanitizer: null,\n    isTextAttribute,\n    isStructuralTemplateAttribute,\n    templateKind,\n    i18nContext: null,\n    i18nMessage,\n    sourceSpan,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS,\n    ...NEW_OP\n  };\n}\n/**\n * Create an `AdvanceOp`.\n */\nfunction createAdvanceOp(delta, sourceSpan) {\n  return {\n    kind: OpKind.Advance,\n    delta,\n    sourceSpan,\n    ...NEW_OP\n  };\n}\n/**\n * Create a conditional op, which will display an embedded view according to a condtion.\n */\nfunction createConditionalOp(target, targetSlot, test, conditions, sourceSpan) {\n  return {\n    kind: OpKind.Conditional,\n    target,\n    targetSlot,\n    test,\n    conditions,\n    processed: null,\n    sourceSpan,\n    contextValue: null,\n    ...NEW_OP,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS\n  };\n}\nfunction createRepeaterOp(repeaterCreate, targetSlot, collection, sourceSpan) {\n  return {\n    kind: OpKind.Repeater,\n    target: repeaterCreate,\n    targetSlot,\n    collection,\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT\n  };\n}\nfunction createDeferWhenOp(target, expr, prefetch, sourceSpan) {\n  return {\n    kind: OpKind.DeferWhen,\n    target,\n    expr,\n    prefetch,\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    ...TRAIT_CONSUMES_VARS\n  };\n}\n/**\n * Create an i18n expression op.\n */\nfunction createI18nExpressionOp(context, target, i18nOwner, handle, expression, icuPlaceholder, i18nPlaceholder, resolutionTime, usage, name, sourceSpan) {\n  return {\n    kind: OpKind.I18nExpression,\n    context,\n    target,\n    i18nOwner,\n    handle,\n    expression,\n    icuPlaceholder,\n    i18nPlaceholder,\n    resolutionTime,\n    usage,\n    name,\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_VARS,\n    ...TRAIT_DEPENDS_ON_SLOT_CONTEXT\n  };\n}\n/**\n * Creates an op to apply i18n expression ops.\n */\nfunction createI18nApplyOp(owner, handle, sourceSpan) {\n  return {\n    kind: OpKind.I18nApply,\n    owner,\n    handle,\n    sourceSpan,\n    ...NEW_OP\n  };\n}\nvar _a, _b, _c, _d, _e, _f;\n/**\n * Check whether a given `o.Expression` is a logical IR expression type.\n */\nfunction isIrExpression(expr) {\n  return expr instanceof ExpressionBase;\n}\n/**\n * Base type used for all logical IR expressions.\n */\nclass ExpressionBase extends Expression {\n  constructor(sourceSpan = null) {\n    super(null, sourceSpan);\n  }\n}\n/**\n * Logical expression representing a lexical read of a variable name.\n */\nclass LexicalReadExpr extends ExpressionBase {\n  constructor(name) {\n    super();\n    this.name = name;\n    this.kind = ExpressionKind.LexicalRead;\n  }\n  visitExpression(visitor, context) {}\n  isEquivalent(other) {\n    // We assume that the lexical reads are in the same context, which must be true for parent\n    // expressions to be equivalent.\n    // TODO: is this generally safe?\n    return this.name === other.name;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions() {}\n  clone() {\n    return new LexicalReadExpr(this.name);\n  }\n}\n/**\n * Runtime operation to retrieve the value of a local reference.\n */\nclass ReferenceExpr extends ExpressionBase {\n  constructor(target, targetSlot, offset) {\n    super();\n    this.target = target;\n    this.targetSlot = targetSlot;\n    this.offset = offset;\n    this.kind = ExpressionKind.Reference;\n  }\n  visitExpression() {}\n  isEquivalent(e) {\n    return e instanceof ReferenceExpr && e.target === this.target;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions() {}\n  clone() {\n    return new ReferenceExpr(this.target, this.targetSlot, this.offset);\n  }\n}\n/**\n * A reference to the current view context (usually the `ctx` variable in a template function).\n */\nclass ContextExpr extends ExpressionBase {\n  constructor(view) {\n    super();\n    this.view = view;\n    this.kind = ExpressionKind.Context;\n  }\n  visitExpression() {}\n  isEquivalent(e) {\n    return e instanceof ContextExpr && e.view === this.view;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions() {}\n  clone() {\n    return new ContextExpr(this.view);\n  }\n}\n/**\n * A reference to the current view context inside a track function.\n */\nclass TrackContextExpr extends ExpressionBase {\n  constructor(view) {\n    super();\n    this.view = view;\n    this.kind = ExpressionKind.TrackContext;\n  }\n  visitExpression() {}\n  isEquivalent(e) {\n    return e instanceof TrackContextExpr && e.view === this.view;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions() {}\n  clone() {\n    return new TrackContextExpr(this.view);\n  }\n}\n/**\n * Runtime operation to navigate to the next view context in the view hierarchy.\n */\nclass NextContextExpr extends ExpressionBase {\n  constructor() {\n    super();\n    this.kind = ExpressionKind.NextContext;\n    this.steps = 1;\n  }\n  visitExpression() {}\n  isEquivalent(e) {\n    return e instanceof NextContextExpr && e.steps === this.steps;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions() {}\n  clone() {\n    const expr = new NextContextExpr();\n    expr.steps = this.steps;\n    return expr;\n  }\n}\n/**\n * Runtime operation to snapshot the current view context.\n *\n * The result of this operation can be stored in a variable and later used with the `RestoreView`\n * operation.\n */\nclass GetCurrentViewExpr extends ExpressionBase {\n  constructor() {\n    super();\n    this.kind = ExpressionKind.GetCurrentView;\n  }\n  visitExpression() {}\n  isEquivalent(e) {\n    return e instanceof GetCurrentViewExpr;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions() {}\n  clone() {\n    return new GetCurrentViewExpr();\n  }\n}\n/**\n * Runtime operation to restore a snapshotted view.\n */\nclass RestoreViewExpr extends ExpressionBase {\n  constructor(view) {\n    super();\n    this.view = view;\n    this.kind = ExpressionKind.RestoreView;\n  }\n  visitExpression(visitor, context) {\n    if (typeof this.view !== 'number') {\n      this.view.visitExpression(visitor, context);\n    }\n  }\n  isEquivalent(e) {\n    if (!(e instanceof RestoreViewExpr) || typeof e.view !== typeof this.view) {\n      return false;\n    }\n    if (typeof this.view === 'number') {\n      return this.view === e.view;\n    } else {\n      return this.view.isEquivalent(e.view);\n    }\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    if (typeof this.view !== 'number') {\n      this.view = transformExpressionsInExpression(this.view, transform, flags);\n    }\n  }\n  clone() {\n    return new RestoreViewExpr(this.view instanceof Expression ? this.view.clone() : this.view);\n  }\n}\n/**\n * Runtime operation to reset the current view context after `RestoreView`.\n */\nclass ResetViewExpr extends ExpressionBase {\n  constructor(expr) {\n    super();\n    this.expr = expr;\n    this.kind = ExpressionKind.ResetView;\n  }\n  visitExpression(visitor, context) {\n    this.expr.visitExpression(visitor, context);\n  }\n  isEquivalent(e) {\n    return e instanceof ResetViewExpr && this.expr.isEquivalent(e.expr);\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    this.expr = transformExpressionsInExpression(this.expr, transform, flags);\n  }\n  clone() {\n    return new ResetViewExpr(this.expr.clone());\n  }\n}\n/**\n * Read of a variable declared as an `ir.VariableOp` and referenced through its `ir.XrefId`.\n */\nclass ReadVariableExpr extends ExpressionBase {\n  constructor(xref) {\n    super();\n    this.xref = xref;\n    this.kind = ExpressionKind.ReadVariable;\n    this.name = null;\n  }\n  visitExpression() {}\n  isEquivalent(other) {\n    return other instanceof ReadVariableExpr && other.xref === this.xref;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions() {}\n  clone() {\n    const expr = new ReadVariableExpr(this.xref);\n    expr.name = this.name;\n    return expr;\n  }\n}\nclass PureFunctionExpr extends ExpressionBase {\n  static #_ = (_a = ConsumesVarsTrait, _b = UsesVarOffset);\n  constructor(expression, args) {\n    super();\n    this.kind = ExpressionKind.PureFunctionExpr;\n    this[_a] = true;\n    this[_b] = true;\n    this.varOffset = null;\n    /**\n     * Once extracted to the `ConstantPool`, a reference to the function which defines the computation\n     * of `body`.\n     */\n    this.fn = null;\n    this.body = expression;\n    this.args = args;\n  }\n  visitExpression(visitor, context) {\n    this.body?.visitExpression(visitor, context);\n    for (const arg of this.args) {\n      arg.visitExpression(visitor, context);\n    }\n  }\n  isEquivalent(other) {\n    if (!(other instanceof PureFunctionExpr) || other.args.length !== this.args.length) {\n      return false;\n    }\n    return other.body !== null && this.body !== null && other.body.isEquivalent(this.body) && other.args.every((arg, idx) => arg.isEquivalent(this.args[idx]));\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    if (this.body !== null) {\n      // TODO: figure out if this is the right flag to pass here.\n      this.body = transformExpressionsInExpression(this.body, transform, flags | VisitorContextFlag.InChildOperation);\n    } else if (this.fn !== null) {\n      this.fn = transformExpressionsInExpression(this.fn, transform, flags);\n    }\n    for (let i = 0; i < this.args.length; i++) {\n      this.args[i] = transformExpressionsInExpression(this.args[i], transform, flags);\n    }\n  }\n  clone() {\n    const expr = new PureFunctionExpr(this.body?.clone() ?? null, this.args.map(arg => arg.clone()));\n    expr.fn = this.fn?.clone() ?? null;\n    expr.varOffset = this.varOffset;\n    return expr;\n  }\n}\nclass PureFunctionParameterExpr extends ExpressionBase {\n  constructor(index) {\n    super();\n    this.index = index;\n    this.kind = ExpressionKind.PureFunctionParameterExpr;\n  }\n  visitExpression() {}\n  isEquivalent(other) {\n    return other instanceof PureFunctionParameterExpr && other.index === this.index;\n  }\n  isConstant() {\n    return true;\n  }\n  transformInternalExpressions() {}\n  clone() {\n    return new PureFunctionParameterExpr(this.index);\n  }\n}\nclass PipeBindingExpr extends ExpressionBase {\n  static #_ = (_c = ConsumesVarsTrait, _d = UsesVarOffset);\n  constructor(target, targetSlot, name, args) {\n    super();\n    this.target = target;\n    this.targetSlot = targetSlot;\n    this.name = name;\n    this.args = args;\n    this.kind = ExpressionKind.PipeBinding;\n    this[_c] = true;\n    this[_d] = true;\n    this.varOffset = null;\n  }\n  visitExpression(visitor, context) {\n    for (const arg of this.args) {\n      arg.visitExpression(visitor, context);\n    }\n  }\n  isEquivalent() {\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    for (let idx = 0; idx < this.args.length; idx++) {\n      this.args[idx] = transformExpressionsInExpression(this.args[idx], transform, flags);\n    }\n  }\n  clone() {\n    const r = new PipeBindingExpr(this.target, this.targetSlot, this.name, this.args.map(a => a.clone()));\n    r.varOffset = this.varOffset;\n    return r;\n  }\n}\nclass PipeBindingVariadicExpr extends ExpressionBase {\n  static #_ = (_e = ConsumesVarsTrait, _f = UsesVarOffset);\n  constructor(target, targetSlot, name, args, numArgs) {\n    super();\n    this.target = target;\n    this.targetSlot = targetSlot;\n    this.name = name;\n    this.args = args;\n    this.numArgs = numArgs;\n    this.kind = ExpressionKind.PipeBindingVariadic;\n    this[_e] = true;\n    this[_f] = true;\n    this.varOffset = null;\n  }\n  visitExpression(visitor, context) {\n    this.args.visitExpression(visitor, context);\n  }\n  isEquivalent() {\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    this.args = transformExpressionsInExpression(this.args, transform, flags);\n  }\n  clone() {\n    const r = new PipeBindingVariadicExpr(this.target, this.targetSlot, this.name, this.args.clone(), this.numArgs);\n    r.varOffset = this.varOffset;\n    return r;\n  }\n}\nclass SafePropertyReadExpr extends ExpressionBase {\n  constructor(receiver, name) {\n    super();\n    this.receiver = receiver;\n    this.name = name;\n    this.kind = ExpressionKind.SafePropertyRead;\n  }\n  // An alias for name, which allows other logic to handle property reads and keyed reads together.\n  get index() {\n    return this.name;\n  }\n  visitExpression(visitor, context) {\n    this.receiver.visitExpression(visitor, context);\n  }\n  isEquivalent() {\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);\n  }\n  clone() {\n    return new SafePropertyReadExpr(this.receiver.clone(), this.name);\n  }\n}\nclass SafeKeyedReadExpr extends ExpressionBase {\n  constructor(receiver, index, sourceSpan) {\n    super(sourceSpan);\n    this.receiver = receiver;\n    this.index = index;\n    this.kind = ExpressionKind.SafeKeyedRead;\n  }\n  visitExpression(visitor, context) {\n    this.receiver.visitExpression(visitor, context);\n    this.index.visitExpression(visitor, context);\n  }\n  isEquivalent() {\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);\n    this.index = transformExpressionsInExpression(this.index, transform, flags);\n  }\n  clone() {\n    return new SafeKeyedReadExpr(this.receiver.clone(), this.index.clone(), this.sourceSpan);\n  }\n}\nclass SafeInvokeFunctionExpr extends ExpressionBase {\n  constructor(receiver, args) {\n    super();\n    this.receiver = receiver;\n    this.args = args;\n    this.kind = ExpressionKind.SafeInvokeFunction;\n  }\n  visitExpression(visitor, context) {\n    this.receiver.visitExpression(visitor, context);\n    for (const a of this.args) {\n      a.visitExpression(visitor, context);\n    }\n  }\n  isEquivalent() {\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);\n    for (let i = 0; i < this.args.length; i++) {\n      this.args[i] = transformExpressionsInExpression(this.args[i], transform, flags);\n    }\n  }\n  clone() {\n    return new SafeInvokeFunctionExpr(this.receiver.clone(), this.args.map(a => a.clone()));\n  }\n}\nclass SafeTernaryExpr extends ExpressionBase {\n  constructor(guard, expr) {\n    super();\n    this.guard = guard;\n    this.expr = expr;\n    this.kind = ExpressionKind.SafeTernaryExpr;\n  }\n  visitExpression(visitor, context) {\n    this.guard.visitExpression(visitor, context);\n    this.expr.visitExpression(visitor, context);\n  }\n  isEquivalent() {\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    this.guard = transformExpressionsInExpression(this.guard, transform, flags);\n    this.expr = transformExpressionsInExpression(this.expr, transform, flags);\n  }\n  clone() {\n    return new SafeTernaryExpr(this.guard.clone(), this.expr.clone());\n  }\n}\nclass EmptyExpr extends ExpressionBase {\n  constructor() {\n    super(...arguments);\n    this.kind = ExpressionKind.EmptyExpr;\n  }\n  visitExpression(visitor, context) {}\n  isEquivalent(e) {\n    return e instanceof EmptyExpr;\n  }\n  isConstant() {\n    return true;\n  }\n  clone() {\n    return new EmptyExpr();\n  }\n  transformInternalExpressions() {}\n}\nclass AssignTemporaryExpr extends ExpressionBase {\n  constructor(expr, xref) {\n    super();\n    this.expr = expr;\n    this.xref = xref;\n    this.kind = ExpressionKind.AssignTemporaryExpr;\n    this.name = null;\n  }\n  visitExpression(visitor, context) {\n    this.expr.visitExpression(visitor, context);\n  }\n  isEquivalent() {\n    return false;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {\n    this.expr = transformExpressionsInExpression(this.expr, transform, flags);\n  }\n  clone() {\n    const a = new AssignTemporaryExpr(this.expr.clone(), this.xref);\n    a.name = this.name;\n    return a;\n  }\n}\nclass ReadTemporaryExpr extends ExpressionBase {\n  constructor(xref) {\n    super();\n    this.xref = xref;\n    this.kind = ExpressionKind.ReadTemporaryExpr;\n    this.name = null;\n  }\n  visitExpression(visitor, context) {}\n  isEquivalent() {\n    return this.xref === this.xref;\n  }\n  isConstant() {\n    return false;\n  }\n  transformInternalExpressions(transform, flags) {}\n  clone() {\n    const r = new ReadTemporaryExpr(this.xref);\n    r.name = this.name;\n    return r;\n  }\n}\nclass SlotLiteralExpr extends ExpressionBase {\n  constructor(slot) {\n    super();\n    this.slot = slot;\n    this.kind = ExpressionKind.SlotLiteralExpr;\n  }\n  visitExpression(visitor, context) {}\n  isEquivalent(e) {\n    return e instanceof SlotLiteralExpr && e.slot === this.slot;\n  }\n  isConstant() {\n    return true;\n  }\n  clone() {\n    return new SlotLiteralExpr(this.slot);\n  }\n  transformInternalExpressions() {}\n}\nclass ConditionalCaseExpr extends ExpressionBase {\n  /**\n   * Create an expression for one branch of a conditional.\n   * @param expr The expression to be tested for this case. Might be null, as in an `else` case.\n   * @param target The Xref of the view to be displayed if this condition is true.\n   */\n  constructor(expr, target, targetSlot, alias = null) {\n    super();\n    this.expr = expr;\n    this.target = target;\n    this.targetSlot = targetSlot;\n    this.alias = alias;\n    this.kind = ExpressionKind.ConditionalCase;\n  }\n  visitExpression(visitor, context) {\n    if (this.expr !== null) {\n      this.expr.visitExpression(visitor, context);\n    }\n  }\n  isEquivalent(e) {\n    return e instanceof ConditionalCaseExpr && e.expr === this.expr;\n  }\n  isConstant() {\n    return true;\n  }\n  clone() {\n    return new ConditionalCaseExpr(this.expr, this.target, this.targetSlot);\n  }\n  transformInternalExpressions(transform, flags) {\n    if (this.expr !== null) {\n      this.expr = transformExpressionsInExpression(this.expr, transform, flags);\n    }\n  }\n}\nclass ConstCollectedExpr extends ExpressionBase {\n  constructor(expr) {\n    super();\n    this.expr = expr;\n    this.kind = ExpressionKind.ConstCollected;\n  }\n  transformInternalExpressions(transform, flags) {\n    this.expr = transform(this.expr, flags);\n  }\n  visitExpression(visitor, context) {\n    this.expr.visitExpression(visitor, context);\n  }\n  isEquivalent(e) {\n    if (!(e instanceof ConstCollectedExpr)) {\n      return false;\n    }\n    return this.expr.isEquivalent(e.expr);\n  }\n  isConstant() {\n    return this.expr.isConstant();\n  }\n  clone() {\n    return new ConstCollectedExpr(this.expr);\n  }\n}\n/**\n * Visits all `Expression`s in the AST of `op` with the `visitor` function.\n */\nfunction visitExpressionsInOp(op, visitor) {\n  transformExpressionsInOp(op, (expr, flags) => {\n    visitor(expr, flags);\n    return expr;\n  }, VisitorContextFlag.None);\n}\nvar VisitorContextFlag;\n(function (VisitorContextFlag) {\n  VisitorContextFlag[VisitorContextFlag[\"None\"] = 0] = \"None\";\n  VisitorContextFlag[VisitorContextFlag[\"InChildOperation\"] = 1] = \"InChildOperation\";\n})(VisitorContextFlag || (VisitorContextFlag = {}));\nfunction transformExpressionsInInterpolation(interpolation, transform, flags) {\n  for (let i = 0; i < interpolation.expressions.length; i++) {\n    interpolation.expressions[i] = transformExpressionsInExpression(interpolation.expressions[i], transform, flags);\n  }\n}\n/**\n * Transform all `Expression`s in the AST of `op` with the `transform` function.\n *\n * All such operations will be replaced with the result of applying `transform`, which may be an\n * identity transformation.\n */\nfunction transformExpressionsInOp(op, transform, flags) {\n  switch (op.kind) {\n    case OpKind.StyleProp:\n    case OpKind.StyleMap:\n    case OpKind.ClassProp:\n    case OpKind.ClassMap:\n    case OpKind.Binding:\n      if (op.expression instanceof Interpolation) {\n        transformExpressionsInInterpolation(op.expression, transform, flags);\n      } else {\n        op.expression = transformExpressionsInExpression(op.expression, transform, flags);\n      }\n      break;\n    case OpKind.Property:\n    case OpKind.HostProperty:\n    case OpKind.Attribute:\n      if (op.expression instanceof Interpolation) {\n        transformExpressionsInInterpolation(op.expression, transform, flags);\n      } else {\n        op.expression = transformExpressionsInExpression(op.expression, transform, flags);\n      }\n      op.sanitizer = op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform, flags);\n      break;\n    case OpKind.I18nExpression:\n      op.expression = transformExpressionsInExpression(op.expression, transform, flags);\n      break;\n    case OpKind.InterpolateText:\n      transformExpressionsInInterpolation(op.interpolation, transform, flags);\n      break;\n    case OpKind.Statement:\n      transformExpressionsInStatement(op.statement, transform, flags);\n      break;\n    case OpKind.Variable:\n      op.initializer = transformExpressionsInExpression(op.initializer, transform, flags);\n      break;\n    case OpKind.Conditional:\n      for (const condition of op.conditions) {\n        if (condition.expr === null) {\n          // This is a default case.\n          continue;\n        }\n        condition.expr = transformExpressionsInExpression(condition.expr, transform, flags);\n      }\n      if (op.processed !== null) {\n        op.processed = transformExpressionsInExpression(op.processed, transform, flags);\n      }\n      if (op.contextValue !== null) {\n        op.contextValue = transformExpressionsInExpression(op.contextValue, transform, flags);\n      }\n      break;\n    case OpKind.Listener:\n      for (const innerOp of op.handlerOps) {\n        transformExpressionsInOp(innerOp, transform, flags | VisitorContextFlag.InChildOperation);\n      }\n      break;\n    case OpKind.ExtractedAttribute:\n      op.expression = op.expression && transformExpressionsInExpression(op.expression, transform, flags);\n      op.trustedValueFn = op.trustedValueFn && transformExpressionsInExpression(op.trustedValueFn, transform, flags);\n      break;\n    case OpKind.RepeaterCreate:\n      op.track = transformExpressionsInExpression(op.track, transform, flags);\n      if (op.trackByFn !== null) {\n        op.trackByFn = transformExpressionsInExpression(op.trackByFn, transform, flags);\n      }\n      break;\n    case OpKind.Repeater:\n      op.collection = transformExpressionsInExpression(op.collection, transform, flags);\n      break;\n    case OpKind.Defer:\n      if (op.loadingConfig !== null) {\n        op.loadingConfig = transformExpressionsInExpression(op.loadingConfig, transform, flags);\n      }\n      if (op.placeholderConfig !== null) {\n        op.placeholderConfig = transformExpressionsInExpression(op.placeholderConfig, transform, flags);\n      }\n      if (op.resolverFn !== null) {\n        op.resolverFn = transformExpressionsInExpression(op.resolverFn, transform, flags);\n      }\n      break;\n    case OpKind.I18nMessage:\n      for (const [placeholder, expr] of op.params) {\n        op.params.set(placeholder, transformExpressionsInExpression(expr, transform, flags));\n      }\n      for (const [placeholder, expr] of op.postprocessingParams) {\n        op.postprocessingParams.set(placeholder, transformExpressionsInExpression(expr, transform, flags));\n      }\n      break;\n    case OpKind.DeferWhen:\n      op.expr = transformExpressionsInExpression(op.expr, transform, flags);\n      break;\n    case OpKind.Advance:\n    case OpKind.Container:\n    case OpKind.ContainerEnd:\n    case OpKind.ContainerStart:\n    case OpKind.DeferOn:\n    case OpKind.DisableBindings:\n    case OpKind.Element:\n    case OpKind.ElementEnd:\n    case OpKind.ElementStart:\n    case OpKind.EnableBindings:\n    case OpKind.I18n:\n    case OpKind.I18nApply:\n    case OpKind.I18nContext:\n    case OpKind.I18nEnd:\n    case OpKind.I18nStart:\n    case OpKind.IcuEnd:\n    case OpKind.IcuStart:\n    case OpKind.Namespace:\n    case OpKind.Pipe:\n    case OpKind.Projection:\n    case OpKind.ProjectionDef:\n    case OpKind.Template:\n    case OpKind.Text:\n    case OpKind.I18nAttributes:\n    case OpKind.IcuPlaceholder:\n      // These operations contain no expressions.\n      break;\n    default:\n      throw new Error(`AssertionError: transformExpressionsInOp doesn't handle ${OpKind[op.kind]}`);\n  }\n}\n/**\n * Transform all `Expression`s in the AST of `expr` with the `transform` function.\n *\n * All such operations will be replaced with the result of applying `transform`, which may be an\n * identity transformation.\n */\nfunction transformExpressionsInExpression(expr, transform, flags) {\n  if (expr instanceof ExpressionBase) {\n    expr.transformInternalExpressions(transform, flags);\n  } else if (expr instanceof BinaryOperatorExpr) {\n    expr.lhs = transformExpressionsInExpression(expr.lhs, transform, flags);\n    expr.rhs = transformExpressionsInExpression(expr.rhs, transform, flags);\n  } else if (expr instanceof UnaryOperatorExpr) {\n    expr.expr = transformExpressionsInExpression(expr.expr, transform, flags);\n  } else if (expr instanceof ReadPropExpr) {\n    expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);\n  } else if (expr instanceof ReadKeyExpr) {\n    expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);\n    expr.index = transformExpressionsInExpression(expr.index, transform, flags);\n  } else if (expr instanceof WritePropExpr) {\n    expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);\n    expr.value = transformExpressionsInExpression(expr.value, transform, flags);\n  } else if (expr instanceof WriteKeyExpr) {\n    expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);\n    expr.index = transformExpressionsInExpression(expr.index, transform, flags);\n    expr.value = transformExpressionsInExpression(expr.value, transform, flags);\n  } else if (expr instanceof InvokeFunctionExpr) {\n    expr.fn = transformExpressionsInExpression(expr.fn, transform, flags);\n    for (let i = 0; i < expr.args.length; i++) {\n      expr.args[i] = transformExpressionsInExpression(expr.args[i], transform, flags);\n    }\n  } else if (expr instanceof LiteralArrayExpr) {\n    for (let i = 0; i < expr.entries.length; i++) {\n      expr.entries[i] = transformExpressionsInExpression(expr.entries[i], transform, flags);\n    }\n  } else if (expr instanceof LiteralMapExpr) {\n    for (let i = 0; i < expr.entries.length; i++) {\n      expr.entries[i].value = transformExpressionsInExpression(expr.entries[i].value, transform, flags);\n    }\n  } else if (expr instanceof ConditionalExpr) {\n    expr.condition = transformExpressionsInExpression(expr.condition, transform, flags);\n    expr.trueCase = transformExpressionsInExpression(expr.trueCase, transform, flags);\n    if (expr.falseCase !== null) {\n      expr.falseCase = transformExpressionsInExpression(expr.falseCase, transform, flags);\n    }\n  } else if (expr instanceof TypeofExpr) {\n    expr.expr = transformExpressionsInExpression(expr.expr, transform, flags);\n  } else if (expr instanceof WriteVarExpr) {\n    expr.value = transformExpressionsInExpression(expr.value, transform, flags);\n  } else if (expr instanceof LocalizedString) {\n    for (let i = 0; i < expr.expressions.length; i++) {\n      expr.expressions[i] = transformExpressionsInExpression(expr.expressions[i], transform, flags);\n    }\n  } else if (expr instanceof NotExpr) {\n    expr.condition = transformExpressionsInExpression(expr.condition, transform, flags);\n  } else if (expr instanceof TaggedTemplateExpr) {\n    expr.tag = transformExpressionsInExpression(expr.tag, transform, flags);\n    expr.template.expressions = expr.template.expressions.map(e => transformExpressionsInExpression(e, transform, flags));\n  } else if (expr instanceof ArrowFunctionExpr) {\n    if (Array.isArray(expr.body)) {\n      for (let i = 0; i < expr.body.length; i++) {\n        transformExpressionsInStatement(expr.body[i], transform, flags);\n      }\n    } else {\n      expr.body = transformExpressionsInExpression(expr.body, transform, flags);\n    }\n  } else if (expr instanceof WrappedNodeExpr) {\n    // TODO: Do we need to transform any TS nodes nested inside of this expression?\n  } else if (expr instanceof ReadVarExpr || expr instanceof ExternalExpr || expr instanceof LiteralExpr) {\n    // No action for these types.\n  } else {\n    throw new Error(`Unhandled expression kind: ${expr.constructor.name}`);\n  }\n  return transform(expr, flags);\n}\n/**\n * Transform all `Expression`s in the AST of `stmt` with the `transform` function.\n *\n * All such operations will be replaced with the result of applying `transform`, which may be an\n * identity transformation.\n */\nfunction transformExpressionsInStatement(stmt, transform, flags) {\n  if (stmt instanceof ExpressionStatement) {\n    stmt.expr = transformExpressionsInExpression(stmt.expr, transform, flags);\n  } else if (stmt instanceof ReturnStatement) {\n    stmt.value = transformExpressionsInExpression(stmt.value, transform, flags);\n  } else if (stmt instanceof DeclareVarStmt) {\n    if (stmt.value !== undefined) {\n      stmt.value = transformExpressionsInExpression(stmt.value, transform, flags);\n    }\n  } else if (stmt instanceof IfStmt) {\n    stmt.condition = transformExpressionsInExpression(stmt.condition, transform, flags);\n    for (const caseStatement of stmt.trueCase) {\n      transformExpressionsInStatement(caseStatement, transform, flags);\n    }\n    for (const caseStatement of stmt.falseCase) {\n      transformExpressionsInStatement(caseStatement, transform, flags);\n    }\n  } else {\n    throw new Error(`Unhandled statement kind: ${stmt.constructor.name}`);\n  }\n}\n/**\n * Checks whether the given expression is a string literal.\n */\nfunction isStringLiteral(expr) {\n  return expr instanceof LiteralExpr && typeof expr.value === 'string';\n}\n\n/**\n * A linked list of `Op` nodes of a given subtype.\n *\n * @param OpT specific subtype of `Op` nodes which this list contains.\n */\nclass OpList {\n  static #_ = this.nextListId = 0;\n  constructor() {\n    /**\n     * Debug ID of this `OpList` instance.\n     */\n    this.debugListId = OpList.nextListId++;\n    // OpList uses static head/tail nodes of a special `ListEnd` type.\n    // This avoids the need for special casing of the first and last list\n    // elements in all list operations.\n    this.head = {\n      kind: OpKind.ListEnd,\n      next: null,\n      prev: null,\n      debugListId: this.debugListId\n    };\n    this.tail = {\n      kind: OpKind.ListEnd,\n      next: null,\n      prev: null,\n      debugListId: this.debugListId\n    };\n    // Link `head` and `tail` together at the start (list is empty).\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  }\n  /**\n   * Push a new operation to the tail of the list.\n   */\n  push(op) {\n    if (Array.isArray(op)) {\n      for (const o of op) {\n        this.push(o);\n      }\n      return;\n    }\n    OpList.assertIsNotEnd(op);\n    OpList.assertIsUnowned(op);\n    op.debugListId = this.debugListId;\n    // The old \"previous\" node (which might be the head, if the list is empty).\n    const oldLast = this.tail.prev;\n    // Insert `op` following the old last node.\n    op.prev = oldLast;\n    oldLast.next = op;\n    // Connect `op` with the list tail.\n    op.next = this.tail;\n    this.tail.prev = op;\n  }\n  /**\n   * Prepend one or more nodes to the start of the list.\n   */\n  prepend(ops) {\n    if (ops.length === 0) {\n      return;\n    }\n    for (const op of ops) {\n      OpList.assertIsNotEnd(op);\n      OpList.assertIsUnowned(op);\n      op.debugListId = this.debugListId;\n    }\n    const first = this.head.next;\n    let prev = this.head;\n    for (const op of ops) {\n      prev.next = op;\n      op.prev = prev;\n      prev = op;\n    }\n    prev.next = first;\n    first.prev = prev;\n  }\n  /**\n   * `OpList` is iterable via the iteration protocol.\n   *\n   * It's safe to mutate the part of the list that has already been returned by the iterator, up to\n   * and including the last operation returned. Mutations beyond that point _may_ be safe, but may\n   * also corrupt the iteration position and should be avoided.\n   */\n  *[Symbol.iterator]() {\n    let current = this.head.next;\n    while (current !== this.tail) {\n      // Guards against corruption of the iterator state by mutations to the tail of the list during\n      // iteration.\n      OpList.assertIsOwned(current, this.debugListId);\n      const next = current.next;\n      yield current;\n      current = next;\n    }\n  }\n  *reversed() {\n    let current = this.tail.prev;\n    while (current !== this.head) {\n      OpList.assertIsOwned(current, this.debugListId);\n      const prev = current.prev;\n      yield current;\n      current = prev;\n    }\n  }\n  /**\n   * Replace `oldOp` with `newOp` in the list.\n   */\n  static replace(oldOp, newOp) {\n    OpList.assertIsNotEnd(oldOp);\n    OpList.assertIsNotEnd(newOp);\n    OpList.assertIsOwned(oldOp);\n    OpList.assertIsUnowned(newOp);\n    newOp.debugListId = oldOp.debugListId;\n    if (oldOp.prev !== null) {\n      oldOp.prev.next = newOp;\n      newOp.prev = oldOp.prev;\n    }\n    if (oldOp.next !== null) {\n      oldOp.next.prev = newOp;\n      newOp.next = oldOp.next;\n    }\n    oldOp.debugListId = null;\n    oldOp.prev = null;\n    oldOp.next = null;\n  }\n  /**\n   * Replace `oldOp` with some number of new operations in the list (which may include `oldOp`).\n   */\n  static replaceWithMany(oldOp, newOps) {\n    if (newOps.length === 0) {\n      // Replacing with an empty list -> pure removal.\n      OpList.remove(oldOp);\n      return;\n    }\n    OpList.assertIsNotEnd(oldOp);\n    OpList.assertIsOwned(oldOp);\n    const listId = oldOp.debugListId;\n    oldOp.debugListId = null;\n    for (const newOp of newOps) {\n      OpList.assertIsNotEnd(newOp);\n      // `newOp` might be `oldOp`, but at this point it's been marked as unowned.\n      OpList.assertIsUnowned(newOp);\n    }\n    // It should be safe to reuse `oldOp` in the `newOps` list - maybe you want to sandwich an\n    // operation between two new ops.\n    const {\n      prev: oldPrev,\n      next: oldNext\n    } = oldOp;\n    oldOp.prev = null;\n    oldOp.next = null;\n    let prev = oldPrev;\n    for (const newOp of newOps) {\n      this.assertIsUnowned(newOp);\n      newOp.debugListId = listId;\n      prev.next = newOp;\n      newOp.prev = prev;\n      // This _should_ be the case, but set it just in case.\n      newOp.next = null;\n      prev = newOp;\n    }\n    // At the end of iteration, `prev` holds the last node in the list.\n    const first = newOps[0];\n    const last = prev;\n    // Replace `oldOp` with the chain `first` -> `last`.\n    if (oldPrev !== null) {\n      oldPrev.next = first;\n      first.prev = oldPrev;\n    }\n    if (oldNext !== null) {\n      oldNext.prev = last;\n      last.next = oldNext;\n    }\n  }\n  /**\n   * Remove the given node from the list which contains it.\n   */\n  static remove(op) {\n    OpList.assertIsNotEnd(op);\n    OpList.assertIsOwned(op);\n    op.prev.next = op.next;\n    op.next.prev = op.prev;\n    // Break any link between the node and this list to safeguard against its usage in future\n    // operations.\n    op.debugListId = null;\n    op.prev = null;\n    op.next = null;\n  }\n  /**\n   * Insert `op` before `target`.\n   */\n  static insertBefore(op, target) {\n    if (Array.isArray(op)) {\n      for (const o of op) {\n        this.insertBefore(o, target);\n      }\n      return;\n    }\n    OpList.assertIsOwned(target);\n    if (target.prev === null) {\n      throw new Error(`AssertionError: illegal operation on list start`);\n    }\n    OpList.assertIsNotEnd(op);\n    OpList.assertIsUnowned(op);\n    op.debugListId = target.debugListId;\n    // Just in case.\n    op.prev = null;\n    target.prev.next = op;\n    op.prev = target.prev;\n    op.next = target;\n    target.prev = op;\n  }\n  /**\n   * Insert `op` after `target`.\n   */\n  static insertAfter(op, target) {\n    OpList.assertIsOwned(target);\n    if (target.next === null) {\n      throw new Error(`AssertionError: illegal operation on list end`);\n    }\n    OpList.assertIsNotEnd(op);\n    OpList.assertIsUnowned(op);\n    op.debugListId = target.debugListId;\n    target.next.prev = op;\n    op.next = target.next;\n    op.prev = target;\n    target.next = op;\n  }\n  /**\n   * Asserts that `op` does not currently belong to a list.\n   */\n  static assertIsUnowned(op) {\n    if (op.debugListId !== null) {\n      throw new Error(`AssertionError: illegal operation on owned node: ${OpKind[op.kind]}`);\n    }\n  }\n  /**\n   * Asserts that `op` currently belongs to a list. If `byList` is passed, `op` is asserted to\n   * specifically belong to that list.\n   */\n  static assertIsOwned(op, byList) {\n    if (op.debugListId === null) {\n      throw new Error(`AssertionError: illegal operation on unowned node: ${OpKind[op.kind]}`);\n    } else if (byList !== undefined && op.debugListId !== byList) {\n      throw new Error(`AssertionError: node belongs to the wrong list (expected ${byList}, actual ${op.debugListId})`);\n    }\n  }\n  /**\n   * Asserts that `op` is not a special `ListEnd` node.\n   */\n  static assertIsNotEnd(op) {\n    if (op.kind === OpKind.ListEnd) {\n      throw new Error(`AssertionError: illegal operation on list head or tail`);\n    }\n  }\n}\nclass SlotHandle {\n  constructor() {\n    this.slot = null;\n  }\n}\n\n/**\n * The set of OpKinds that represent the creation of an element or container\n */\nconst elementContainerOpKinds = new Set([OpKind.Element, OpKind.ElementStart, OpKind.Container, OpKind.ContainerStart, OpKind.Template, OpKind.RepeaterCreate]);\n/**\n * Checks whether the given operation represents the creation of an element or container.\n */\nfunction isElementOrContainerOp(op) {\n  return elementContainerOpKinds.has(op.kind);\n}\n/**\n * Create an `ElementStartOp`.\n */\nfunction createElementStartOp(tag, xref, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {\n  return {\n    kind: OpKind.ElementStart,\n    xref,\n    tag,\n    handle: new SlotHandle(),\n    attributes: null,\n    localRefs: [],\n    nonBindable: false,\n    namespace,\n    i18nPlaceholder,\n    startSourceSpan,\n    wholeSourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP\n  };\n}\n/**\n * Create a `TemplateOp`.\n */\nfunction createTemplateOp(xref, templateKind, tag, functionNameSuffix, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {\n  return {\n    kind: OpKind.Template,\n    xref,\n    templateKind,\n    attributes: null,\n    tag,\n    handle: new SlotHandle(),\n    functionNameSuffix,\n    decls: null,\n    vars: null,\n    localRefs: [],\n    nonBindable: false,\n    namespace,\n    i18nPlaceholder,\n    startSourceSpan,\n    wholeSourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP\n  };\n}\nfunction createRepeaterCreateOp(primaryView, emptyView, tag, track, varNames, emptyTag, i18nPlaceholder, emptyI18nPlaceholder, startSourceSpan, wholeSourceSpan) {\n  return {\n    kind: OpKind.RepeaterCreate,\n    attributes: null,\n    xref: primaryView,\n    handle: new SlotHandle(),\n    emptyView,\n    track,\n    trackByFn: null,\n    tag,\n    emptyTag,\n    emptyAttributes: null,\n    functionNameSuffix: 'For',\n    namespace: Namespace.HTML,\n    nonBindable: false,\n    localRefs: [],\n    decls: null,\n    vars: null,\n    varNames,\n    usesComponentInstance: false,\n    i18nPlaceholder,\n    emptyI18nPlaceholder,\n    startSourceSpan,\n    wholeSourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_VARS,\n    numSlotsUsed: emptyView === null ? 2 : 3\n  };\n}\n/**\n * Create an `ElementEndOp`.\n */\nfunction createElementEndOp(xref, sourceSpan) {\n  return {\n    kind: OpKind.ElementEnd,\n    xref,\n    sourceSpan,\n    ...NEW_OP\n  };\n}\nfunction createDisableBindingsOp(xref) {\n  return {\n    kind: OpKind.DisableBindings,\n    xref,\n    ...NEW_OP\n  };\n}\nfunction createEnableBindingsOp(xref) {\n  return {\n    kind: OpKind.EnableBindings,\n    xref,\n    ...NEW_OP\n  };\n}\n/**\n * Create a `TextOp`.\n */\nfunction createTextOp(xref, initialValue, icuPlaceholder, sourceSpan) {\n  return {\n    kind: OpKind.Text,\n    xref,\n    handle: new SlotHandle(),\n    initialValue,\n    icuPlaceholder,\n    sourceSpan,\n    ...TRAIT_CONSUMES_SLOT,\n    ...NEW_OP\n  };\n}\n/**\n * Create a `ListenerOp`. Host bindings reuse all the listener logic.\n */\nfunction createListenerOp(target, targetSlot, name, tag, handlerOps, animationPhase, eventTarget, hostListener, sourceSpan) {\n  const handlerList = new OpList();\n  handlerList.push(handlerOps);\n  return {\n    kind: OpKind.Listener,\n    target,\n    targetSlot,\n    tag,\n    hostListener,\n    name,\n    handlerOps: handlerList,\n    handlerFnName: null,\n    consumesDollarEvent: false,\n    isAnimationListener: animationPhase !== null,\n    animationPhase,\n    eventTarget,\n    sourceSpan,\n    ...NEW_OP\n  };\n}\nfunction createPipeOp(xref, slot, name) {\n  return {\n    kind: OpKind.Pipe,\n    xref,\n    handle: slot,\n    name,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT\n  };\n}\nfunction createNamespaceOp(namespace) {\n  return {\n    kind: OpKind.Namespace,\n    active: namespace,\n    ...NEW_OP\n  };\n}\nfunction createProjectionDefOp(def) {\n  return {\n    kind: OpKind.ProjectionDef,\n    def,\n    ...NEW_OP\n  };\n}\nfunction createProjectionOp(xref, selector, i18nPlaceholder, sourceSpan) {\n  return {\n    kind: OpKind.Projection,\n    xref,\n    handle: new SlotHandle(),\n    selector,\n    i18nPlaceholder,\n    projectionSlotIndex: 0,\n    attributes: null,\n    localRefs: [],\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT\n  };\n}\n/**\n * Create an `ExtractedAttributeOp`.\n */\nfunction createExtractedAttributeOp(target, bindingKind, namespace, name, expression, i18nContext, i18nMessage, securityContext) {\n  return {\n    kind: OpKind.ExtractedAttribute,\n    target,\n    bindingKind,\n    namespace,\n    name,\n    expression,\n    i18nContext,\n    i18nMessage,\n    securityContext,\n    trustedValueFn: null,\n    ...NEW_OP\n  };\n}\nfunction createDeferOp(xref, main, mainSlot, metadata, sourceSpan) {\n  return {\n    kind: OpKind.Defer,\n    xref,\n    handle: new SlotHandle(),\n    mainView: main,\n    mainSlot,\n    loadingView: null,\n    loadingSlot: null,\n    loadingConfig: null,\n    loadingMinimumTime: null,\n    loadingAfterTime: null,\n    placeholderView: null,\n    placeholderSlot: null,\n    placeholderConfig: null,\n    placeholderMinimumTime: null,\n    errorView: null,\n    errorSlot: null,\n    metadata,\n    resolverFn: null,\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT,\n    numSlotsUsed: 2\n  };\n}\nfunction createDeferOnOp(defer, trigger, prefetch, sourceSpan) {\n  return {\n    kind: OpKind.DeferOn,\n    defer,\n    trigger,\n    prefetch,\n    sourceSpan,\n    ...NEW_OP\n  };\n}\n/**\n * Create an `ExtractedMessageOp`.\n */\nfunction createI18nMessageOp(xref, i18nContext, i18nBlock, message, messagePlaceholder, params, postprocessingParams, needsPostprocessing) {\n  return {\n    kind: OpKind.I18nMessage,\n    xref,\n    i18nContext,\n    i18nBlock,\n    message,\n    messagePlaceholder,\n    params,\n    postprocessingParams,\n    needsPostprocessing,\n    subMessages: [],\n    ...NEW_OP\n  };\n}\n/**\n * Create an `I18nStartOp`.\n */\nfunction createI18nStartOp(xref, message, root, sourceSpan) {\n  return {\n    kind: OpKind.I18nStart,\n    xref,\n    handle: new SlotHandle(),\n    root: root ?? xref,\n    message,\n    messageIndex: null,\n    subTemplateIndex: null,\n    context: null,\n    sourceSpan,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT\n  };\n}\n/**\n * Create an `I18nEndOp`.\n */\nfunction createI18nEndOp(xref, sourceSpan) {\n  return {\n    kind: OpKind.I18nEnd,\n    xref,\n    sourceSpan,\n    ...NEW_OP\n  };\n}\n/**\n * Creates an ICU start op.\n */\nfunction createIcuStartOp(xref, message, messagePlaceholder, sourceSpan) {\n  return {\n    kind: OpKind.IcuStart,\n    xref,\n    message,\n    messagePlaceholder,\n    context: null,\n    sourceSpan,\n    ...NEW_OP\n  };\n}\n/**\n * Creates an ICU end op.\n */\nfunction createIcuEndOp(xref) {\n  return {\n    kind: OpKind.IcuEnd,\n    xref,\n    ...NEW_OP\n  };\n}\n/**\n * Creates an ICU placeholder op.\n */\nfunction createIcuPlaceholderOp(xref, name, strings) {\n  return {\n    kind: OpKind.IcuPlaceholder,\n    xref,\n    name,\n    strings,\n    expressionPlaceholders: [],\n    ...NEW_OP\n  };\n}\nfunction createI18nContextOp(contextKind, xref, i18nBlock, message, sourceSpan) {\n  if (i18nBlock === null && contextKind !== I18nContextKind.Attr) {\n    throw new Error('AssertionError: i18nBlock must be provided for non-attribute contexts.');\n  }\n  return {\n    kind: OpKind.I18nContext,\n    contextKind,\n    xref,\n    i18nBlock,\n    message,\n    sourceSpan,\n    params: new Map(),\n    postprocessingParams: new Map(),\n    ...NEW_OP\n  };\n}\nfunction createI18nAttributesOp(xref, handle, target) {\n  return {\n    kind: OpKind.I18nAttributes,\n    xref,\n    handle,\n    target,\n    i18nAttributesConfig: null,\n    ...NEW_OP,\n    ...TRAIT_CONSUMES_SLOT\n  };\n}\nfunction literalOrArrayLiteral$1(value) {\n  if (Array.isArray(value)) {\n    return literalArr(value.map(literalOrArrayLiteral$1));\n  }\n  return literal(value, INFERRED_TYPE);\n}\nfunction createHostPropertyOp(name, expression, isAnimationTrigger, i18nContext, securityContext, sourceSpan) {\n  return {\n    kind: OpKind.HostProperty,\n    name,\n    expression,\n    isAnimationTrigger,\n    i18nContext,\n    securityContext,\n    sanitizer: null,\n    sourceSpan,\n    ...TRAIT_CONSUMES_VARS,\n    ...NEW_OP\n  };\n}\n\n/**\n * When referenced in the template's context parameters, this indicates a reference to the entire\n * context object, rather than a specific parameter.\n */\nconst CTX_REF = 'CTX_REF_MARKER';\nvar CompilationJobKind;\n(function (CompilationJobKind) {\n  CompilationJobKind[CompilationJobKind[\"Tmpl\"] = 0] = \"Tmpl\";\n  CompilationJobKind[CompilationJobKind[\"Host\"] = 1] = \"Host\";\n  CompilationJobKind[CompilationJobKind[\"Both\"] = 2] = \"Both\";\n})(CompilationJobKind || (CompilationJobKind = {}));\n/**\n * An entire ongoing compilation, which will result in one or more template functions when complete.\n * Contains one or more corresponding compilation units.\n */\nclass CompilationJob {\n  constructor(componentName, pool, compatibility) {\n    this.componentName = componentName;\n    this.pool = pool;\n    this.compatibility = compatibility;\n    this.kind = CompilationJobKind.Both;\n    /**\n     * Tracks the next `ir.XrefId` which can be assigned as template structures are ingested.\n     */\n    this.nextXrefId = 0;\n  }\n  /**\n   * Generate a new unique `ir.XrefId` in this job.\n   */\n  allocateXrefId() {\n    return this.nextXrefId++;\n  }\n}\n/**\n * Compilation-in-progress of a whole component's template, including the main template and any\n * embedded views or host bindings.\n */\nclass ComponentCompilationJob extends CompilationJob {\n  constructor(componentName, pool, compatibility, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta) {\n    super(componentName, pool, compatibility);\n    this.relativeContextFilePath = relativeContextFilePath;\n    this.i18nUseExternalIds = i18nUseExternalIds;\n    this.deferBlocksMeta = deferBlocksMeta;\n    this.kind = CompilationJobKind.Tmpl;\n    this.fnSuffix = 'Template';\n    this.views = new Map();\n    /**\n     * Causes ngContentSelectors to be emitted, for content projection slots in the view. Possibly a\n     * reference into the constant pool.\n     */\n    this.contentSelectors = null;\n    /**\n     * Constant expressions used by operations within this component's compilation.\n     *\n     * This will eventually become the `consts` array in the component definition.\n     */\n    this.consts = [];\n    /**\n     * Initialization statements needed to set up the consts.\n     */\n    this.constsInitializers = [];\n    this.root = new ViewCompilationUnit(this, this.allocateXrefId(), null);\n    this.views.set(this.root.xref, this.root);\n  }\n  /**\n   * Add a `ViewCompilation` for a new embedded view to this compilation.\n   */\n  allocateView(parent) {\n    const view = new ViewCompilationUnit(this, this.allocateXrefId(), parent);\n    this.views.set(view.xref, view);\n    return view;\n  }\n  get units() {\n    return this.views.values();\n  }\n  /**\n   * Add a constant `o.Expression` to the compilation and return its index in the `consts` array.\n   */\n  addConst(newConst, initializers) {\n    for (let idx = 0; idx < this.consts.length; idx++) {\n      if (this.consts[idx].isEquivalent(newConst)) {\n        return idx;\n      }\n    }\n    const idx = this.consts.length;\n    this.consts.push(newConst);\n    if (initializers) {\n      this.constsInitializers.push(...initializers);\n    }\n    return idx;\n  }\n}\n/**\n * A compilation unit is compiled into a template function. Some example units are views and host\n * bindings.\n */\nclass CompilationUnit {\n  constructor(xref) {\n    this.xref = xref;\n    /**\n     * List of creation operations for this view.\n     *\n     * Creation operations may internally contain other operations, including update operations.\n     */\n    this.create = new OpList();\n    /**\n     * List of update operations for this view.\n     */\n    this.update = new OpList();\n    /**\n     * Name of the function which will be generated for this unit.\n     *\n     * May be `null` if not yet determined.\n     */\n    this.fnName = null;\n    /**\n     * Number of variable slots used within this view, or `null` if variables have not yet been\n     * counted.\n     */\n    this.vars = null;\n  }\n  /**\n   * Iterate over all `ir.Op`s within this view.\n   *\n   * Some operations may have child operations, which this iterator will visit.\n   */\n  *ops() {\n    for (const op of this.create) {\n      yield op;\n      if (op.kind === OpKind.Listener) {\n        for (const listenerOp of op.handlerOps) {\n          yield listenerOp;\n        }\n      }\n    }\n    for (const op of this.update) {\n      yield op;\n    }\n  }\n}\n/**\n * Compilation-in-progress of an individual view within a template.\n */\nclass ViewCompilationUnit extends CompilationUnit {\n  constructor(job, xref, parent) {\n    super(xref);\n    this.job = job;\n    this.parent = parent;\n    /**\n     * Map of declared variables available within this view to the property on the context object\n     * which they alias.\n     */\n    this.contextVariables = new Map();\n    /**\n     * Set of aliases available within this view. An alias is a variable whose provided expression is\n     * inlined at every location it is used. It may also depend on context variables, by name.\n     */\n    this.aliases = new Set();\n    /**\n     * Number of declaration slots used within this view, or `null` if slots have not yet been\n     * allocated.\n     */\n    this.decls = null;\n  }\n}\n/**\n * Compilation-in-progress of a host binding, which contains a single unit for that host binding.\n */\nclass HostBindingCompilationJob extends CompilationJob {\n  constructor(componentName, pool, compatibility) {\n    super(componentName, pool, compatibility);\n    this.kind = CompilationJobKind.Host;\n    this.fnSuffix = 'HostBindings';\n    this.root = new HostBindingCompilationUnit(this);\n  }\n  get units() {\n    return [this.root];\n  }\n}\nclass HostBindingCompilationUnit extends CompilationUnit {\n  constructor(job) {\n    super(0);\n    this.job = job;\n    /**\n     * Much like an element can have attributes, so can a host binding function.\n     */\n    this.attributes = null;\n  }\n}\n\n/**\n * Find any function calls to `$any`, excluding `this.$any`, and delete them, since they have no\n * runtime effects.\n */\nfunction deleteAnyCasts(job) {\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      transformExpressionsInOp(op, removeAnys, VisitorContextFlag.None);\n    }\n  }\n}\nfunction removeAnys(e) {\n  if (e instanceof InvokeFunctionExpr && e.fn instanceof LexicalReadExpr && e.fn.name === '$any') {\n    if (e.args.length !== 1) {\n      throw new Error('The $any builtin function expects exactly one argument.');\n    }\n    return e.args[0];\n  }\n  return e;\n}\n\n/**\n * Adds apply operations after i18n expressions.\n */\nfunction applyI18nExpressions(job) {\n  const i18nContexts = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.I18nContext) {\n        i18nContexts.set(op.xref, op);\n      }\n    }\n  }\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      // Only add apply after expressions that are not followed by more expressions.\n      if (op.kind === OpKind.I18nExpression && needsApplication(i18nContexts, op)) {\n        // TODO: what should be the source span for the apply op?\n        OpList.insertAfter(createI18nApplyOp(op.i18nOwner, op.handle, null), op);\n      }\n    }\n  }\n}\n/**\n * Checks whether the given expression op needs to be followed with an apply op.\n */\nfunction needsApplication(i18nContexts, op) {\n  // If the next op is not another expression, we need to apply.\n  if (op.next?.kind !== OpKind.I18nExpression) {\n    return true;\n  }\n  const context = i18nContexts.get(op.context);\n  const nextContext = i18nContexts.get(op.next.context);\n  if (context === undefined) {\n    throw new Error('AssertionError: expected an I18nContextOp to exist for the I18nExpressionOp\\'s context');\n  }\n  if (nextContext === undefined) {\n    throw new Error('AssertionError: expected an I18nContextOp to exist for the next I18nExpressionOp\\'s context');\n  }\n  // If the next op is an expression targeting a different i18n block (or different element, in the\n  // case of i18n attributes), we need to apply.\n  // First, handle the case of i18n blocks.\n  if (context.i18nBlock !== null) {\n    // This is a block context. Compare the blocks.\n    if (context.i18nBlock !== nextContext.i18nBlock) {\n      return true;\n    }\n    return false;\n  }\n  // Second, handle the case of i18n attributes.\n  if (op.i18nOwner !== op.next.i18nOwner) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Updates i18n expression ops to target the last slot in their owning i18n block, and moves them\n * after the last update instruction that depends on that slot.\n */\nfunction assignI18nSlotDependencies(job) {\n  for (const unit of job.units) {\n    // The first update op.\n    let updateOp = unit.update.head;\n    // I18n expressions currently being moved during the iteration.\n    let i18nExpressionsInProgress = [];\n    // Non-null  while we are iterating through an i18nStart/i18nEnd pair\n    let state = null;\n    for (const createOp of unit.create) {\n      if (createOp.kind === OpKind.I18nStart) {\n        state = {\n          blockXref: createOp.xref,\n          lastSlotConsumer: createOp.xref\n        };\n      } else if (createOp.kind === OpKind.I18nEnd) {\n        for (const op of i18nExpressionsInProgress) {\n          op.target = state.lastSlotConsumer;\n          OpList.insertBefore(op, updateOp);\n        }\n        i18nExpressionsInProgress.length = 0;\n        state = null;\n      }\n      if (hasConsumesSlotTrait(createOp)) {\n        if (state !== null) {\n          state.lastSlotConsumer = createOp.xref;\n        }\n        while (true) {\n          if (updateOp.next === null) {\n            break;\n          }\n          if (state !== null && updateOp.kind === OpKind.I18nExpression && updateOp.usage === I18nExpressionFor.I18nText && updateOp.i18nOwner === state.blockXref) {\n            const opToRemove = updateOp;\n            updateOp = updateOp.next;\n            OpList.remove(opToRemove);\n            i18nExpressionsInProgress.push(opToRemove);\n            continue;\n          }\n          if (hasDependsOnSlotContextTrait(updateOp) && updateOp.target !== createOp.xref) {\n            break;\n          }\n          updateOp = updateOp.next;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Gets a map of all elements in the given view by their xref id.\n */\nfunction createOpXrefMap(unit) {\n  const map = new Map();\n  for (const op of unit.create) {\n    if (!hasConsumesSlotTrait(op)) {\n      continue;\n    }\n    map.set(op.xref, op);\n    // TODO(dylhunn): `@for` loops with `@empty` blocks need to be special-cased here,\n    // because the slot consumer trait currently only supports one slot per consumer and we\n    // need two. This should be revisited when making the refactors mentioned in:\n    // https://github.com/angular/angular/pull/53620#discussion_r1430918822\n    if (op.kind === OpKind.RepeaterCreate && op.emptyView !== null) {\n      map.set(op.emptyView, op);\n    }\n  }\n  return map;\n}\n\n/**\n * Find all extractable attribute and binding ops, and create ExtractedAttributeOps for them.\n * In cases where no instruction needs to be generated for the attribute or binding, it is removed.\n */\nfunction extractAttributes(job) {\n  for (const unit of job.units) {\n    const elements = createOpXrefMap(unit);\n    for (const op of unit.ops()) {\n      switch (op.kind) {\n        case OpKind.Attribute:\n          extractAttributeOp(unit, op, elements);\n          break;\n        case OpKind.Property:\n          if (!op.isAnimationTrigger) {\n            let bindingKind;\n            if (op.i18nMessage !== null && op.templateKind === null) {\n              // If the binding has an i18n context, it is an i18n attribute, and should have that\n              // kind in the consts array.\n              bindingKind = BindingKind.I18n;\n            } else if (op.isStructuralTemplateAttribute) {\n              bindingKind = BindingKind.Template;\n            } else {\n              bindingKind = BindingKind.Property;\n            }\n            OpList.insertBefore(\n            // Deliberaly null i18nMessage value\n            createExtractedAttributeOp(op.target, bindingKind, null, op.name, /* expression */null, /* i18nContext */null, /* i18nMessage */null, op.securityContext), lookupElement$2(elements, op.target));\n          }\n          break;\n        case OpKind.StyleProp:\n        case OpKind.ClassProp:\n          // TODO: Can style or class bindings be i18n attributes?\n          // The old compiler treated empty style bindings as regular bindings for the purpose of\n          // directive matching. That behavior is incorrect, but we emulate it in compatibility\n          // mode.\n          if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder && op.expression instanceof EmptyExpr) {\n            OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.Property, null, op.name, /* expression */null, /* i18nContext */null, /* i18nMessage */null, SecurityContext.STYLE), lookupElement$2(elements, op.target));\n          }\n          break;\n        case OpKind.Listener:\n          if (!op.isAnimationListener) {\n            const extractedAttributeOp = createExtractedAttributeOp(op.target, BindingKind.Property, null, op.name, /* expression */null, /* i18nContext */null, /* i18nMessage */null, SecurityContext.NONE);\n            if (job.kind === CompilationJobKind.Host) {\n              if (job.compatibility) {\n                // TemplateDefinitionBuilder does not extract listener bindings to the const array\n                // (which is honestly pretty inconsistent).\n                break;\n              }\n              // This attribute will apply to the enclosing host binding compilation unit, so order\n              // doesn't matter.\n              unit.create.push(extractedAttributeOp);\n            } else {\n              OpList.insertBefore(extractedAttributeOp, lookupElement$2(elements, op.target));\n            }\n          }\n          break;\n      }\n    }\n  }\n}\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupElement$2(elements, xref) {\n  const el = elements.get(xref);\n  if (el === undefined) {\n    throw new Error('All attributes should have an element-like target.');\n  }\n  return el;\n}\n/**\n * Extracts an attribute binding.\n */\nfunction extractAttributeOp(unit, op, elements) {\n  if (op.expression instanceof Interpolation) {\n    return;\n  }\n  let extractable = op.isTextAttribute || op.expression.isConstant();\n  if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {\n    // TemplateDefinitionBuilder only extracts text attributes. It does not extract attriibute\n    // bindings, even if they are constants.\n    extractable &&= op.isTextAttribute;\n  }\n  if (extractable) {\n    const extractedAttributeOp = createExtractedAttributeOp(op.target, op.isStructuralTemplateAttribute ? BindingKind.Template : BindingKind.Attribute, op.namespace, op.name, op.expression, op.i18nContext, op.i18nMessage, op.securityContext);\n    if (unit.job.kind === CompilationJobKind.Host) {\n      // This attribute will apply to the enclosing host binding compilation unit, so order doesn't\n      // matter.\n      unit.create.push(extractedAttributeOp);\n    } else {\n      const ownerOp = lookupElement$2(elements, op.target);\n      OpList.insertBefore(extractedAttributeOp, ownerOp);\n    }\n    OpList.remove(op);\n  }\n}\n\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupElement$1(elements, xref) {\n  const el = elements.get(xref);\n  if (el === undefined) {\n    throw new Error('All attributes should have an element-like target.');\n  }\n  return el;\n}\nfunction specializeBindings(job) {\n  const elements = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (!isElementOrContainerOp(op)) {\n        continue;\n      }\n      elements.set(op.xref, op);\n    }\n  }\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      if (op.kind !== OpKind.Binding) {\n        continue;\n      }\n      switch (op.bindingKind) {\n        case BindingKind.Attribute:\n          if (op.name === 'ngNonBindable') {\n            OpList.remove(op);\n            const target = lookupElement$1(elements, op.target);\n            target.nonBindable = true;\n          } else {\n            const [namespace, name] = splitNsName(op.name);\n            OpList.replace(op, createAttributeOp(op.target, namespace, name, op.expression, op.securityContext, op.isTextAttribute, op.isStructuralTemplateAttribute, op.templateKind, op.i18nMessage, op.sourceSpan));\n          }\n          break;\n        case BindingKind.Property:\n        case BindingKind.Animation:\n          if (job.kind === CompilationJobKind.Host) {\n            OpList.replace(op, createHostPropertyOp(op.name, op.expression, op.bindingKind === BindingKind.Animation, op.i18nContext, op.securityContext, op.sourceSpan));\n          } else {\n            OpList.replace(op, createPropertyOp(op.target, op.name, op.expression, op.bindingKind === BindingKind.Animation, op.securityContext, op.isStructuralTemplateAttribute, op.templateKind, op.i18nContext, op.i18nMessage, op.sourceSpan));\n          }\n          break;\n        case BindingKind.I18n:\n        case BindingKind.ClassName:\n        case BindingKind.StyleProperty:\n          throw new Error(`Unhandled binding of kind ${BindingKind[op.bindingKind]}`);\n      }\n    }\n  }\n}\nconst CHAINABLE = new Set([Identifiers.attribute, Identifiers.classProp, Identifiers.element, Identifiers.elementContainer, Identifiers.elementContainerEnd, Identifiers.elementContainerStart, Identifiers.elementEnd, Identifiers.elementStart, Identifiers.hostProperty, Identifiers.i18nExp, Identifiers.listener, Identifiers.listener, Identifiers.property, Identifiers.styleProp, Identifiers.stylePropInterpolate1, Identifiers.stylePropInterpolate2, Identifiers.stylePropInterpolate3, Identifiers.stylePropInterpolate4, Identifiers.stylePropInterpolate5, Identifiers.stylePropInterpolate6, Identifiers.stylePropInterpolate7, Identifiers.stylePropInterpolate8, Identifiers.stylePropInterpolateV, Identifiers.syntheticHostListener, Identifiers.syntheticHostProperty, Identifiers.templateCreate]);\n/**\n * Post-process a reified view compilation and convert sequential calls to chainable instructions\n * into chain calls.\n *\n * For example, two `elementStart` operations in sequence:\n *\n * ```typescript\n * elementStart(0, 'div');\n * elementStart(1, 'span');\n * ```\n *\n * Can be called as a chain instead:\n *\n * ```typescript\n * elementStart(0, 'div')(1, 'span');\n * ```\n */\nfunction chain(job) {\n  for (const unit of job.units) {\n    chainOperationsInList(unit.create);\n    chainOperationsInList(unit.update);\n  }\n}\nfunction chainOperationsInList(opList) {\n  let chain = null;\n  for (const op of opList) {\n    if (op.kind !== OpKind.Statement || !(op.statement instanceof ExpressionStatement)) {\n      // This type of statement isn't chainable.\n      chain = null;\n      continue;\n    }\n    if (!(op.statement.expr instanceof InvokeFunctionExpr) || !(op.statement.expr.fn instanceof ExternalExpr)) {\n      // This is a statement, but not an instruction-type call, so not chainable.\n      chain = null;\n      continue;\n    }\n    const instruction = op.statement.expr.fn.value;\n    if (!CHAINABLE.has(instruction)) {\n      // This instruction isn't chainable.\n      chain = null;\n      continue;\n    }\n    // This instruction can be chained. It can either be added on to the previous chain (if\n    // compatible) or it can be the start of a new chain.\n    if (chain !== null && chain.instruction === instruction) {\n      // This instruction can be added onto the previous chain.\n      const expression = chain.expression.callFn(op.statement.expr.args, op.statement.expr.sourceSpan, op.statement.expr.pure);\n      chain.expression = expression;\n      chain.op.statement = expression.toStmt();\n      OpList.remove(op);\n    } else {\n      // Leave this instruction alone for now, but consider it the start of a new chain.\n      chain = {\n        op,\n        instruction,\n        expression: op.statement.expr\n      };\n    }\n  }\n}\n\n/**\n * Attribute interpolations of the form `[attr.foo]=\"{{foo}}\"\"` should be \"collapsed\" into a plain\n * attribute instruction, instead of an `attributeInterpolate` instruction.\n *\n * (We cannot do this for singleton property interpolations, because `propertyInterpolate`\n * stringifies its expression.)\n *\n * The reification step is also capable of performing this transformation, but doing it early in the\n * pipeline allows other phases to accurately know what instruction will be emitted.\n */\nfunction collapseSingletonInterpolations(job) {\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      const eligibleOpKind = op.kind === OpKind.Attribute;\n      if (eligibleOpKind && op.expression instanceof Interpolation && op.expression.strings.length === 2 && op.expression.strings.every(s => s === '')) {\n        op.expression = op.expression.expressions[0];\n      }\n    }\n  }\n}\n\n/**\n * Collapse the various conditions of conditional ops (if, switch) into a single test expression.\n */\nfunction generateConditionalExpressions(job) {\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      if (op.kind !== OpKind.Conditional) {\n        continue;\n      }\n      let test;\n      // Any case with a `null` condition is `default`. If one exists, default to it instead.\n      const defaultCase = op.conditions.findIndex(cond => cond.expr === null);\n      if (defaultCase >= 0) {\n        const slot = op.conditions.splice(defaultCase, 1)[0].targetSlot;\n        test = new SlotLiteralExpr(slot);\n      } else {\n        // By default, a switch evaluates to `-1`, causing no template to be displayed.\n        test = literal(-1);\n      }\n      // Switch expressions assign their main test to a temporary, to avoid re-executing it.\n      let tmp = op.test == null ? null : new AssignTemporaryExpr(op.test, job.allocateXrefId());\n      // For each remaining condition, test whether the temporary satifies the check. (If no temp is\n      // present, just check each expression directly.)\n      for (let i = op.conditions.length - 1; i >= 0; i--) {\n        let conditionalCase = op.conditions[i];\n        if (conditionalCase.expr === null) {\n          continue;\n        }\n        if (tmp !== null) {\n          const useTmp = i === 0 ? tmp : new ReadTemporaryExpr(tmp.xref);\n          conditionalCase.expr = new BinaryOperatorExpr(BinaryOperator.Identical, useTmp, conditionalCase.expr);\n        } else if (conditionalCase.alias !== null) {\n          const caseExpressionTemporaryXref = job.allocateXrefId();\n          conditionalCase.expr = new AssignTemporaryExpr(conditionalCase.expr, caseExpressionTemporaryXref);\n          op.contextValue = new ReadTemporaryExpr(caseExpressionTemporaryXref);\n        }\n        test = new ConditionalExpr(conditionalCase.expr, new SlotLiteralExpr(conditionalCase.targetSlot), test);\n      }\n      // Save the resulting aggregate Joost-expression.\n      op.processed = test;\n      // Clear the original conditions array, since we no longer need it, and don't want it to\n      // affect subsequent phases (e.g. pipe creation).\n      op.conditions = [];\n    }\n  }\n}\nconst BINARY_OPERATORS = new Map([['&&', BinaryOperator.And], ['>', BinaryOperator.Bigger], ['>=', BinaryOperator.BiggerEquals], ['|', BinaryOperator.BitwiseOr], ['&', BinaryOperator.BitwiseAnd], ['/', BinaryOperator.Divide], ['==', BinaryOperator.Equals], ['===', BinaryOperator.Identical], ['<', BinaryOperator.Lower], ['<=', BinaryOperator.LowerEquals], ['-', BinaryOperator.Minus], ['%', BinaryOperator.Modulo], ['*', BinaryOperator.Multiply], ['!=', BinaryOperator.NotEquals], ['!==', BinaryOperator.NotIdentical], ['??', BinaryOperator.NullishCoalesce], ['||', BinaryOperator.Or], ['+', BinaryOperator.Plus]]);\nfunction namespaceForKey(namespacePrefixKey) {\n  const NAMESPACES = new Map([['svg', Namespace.SVG], ['math', Namespace.Math]]);\n  if (namespacePrefixKey === null) {\n    return Namespace.HTML;\n  }\n  return NAMESPACES.get(namespacePrefixKey) ?? Namespace.HTML;\n}\nfunction keyForNamespace(namespace) {\n  const NAMESPACES = new Map([['svg', Namespace.SVG], ['math', Namespace.Math]]);\n  for (const [k, n] of NAMESPACES.entries()) {\n    if (n === namespace) {\n      return k;\n    }\n  }\n  return null; // No namespace prefix for HTML\n}\nfunction prefixWithNamespace(strippedTag, namespace) {\n  if (namespace === Namespace.HTML) {\n    return strippedTag;\n  }\n  return `:${keyForNamespace(namespace)}:${strippedTag}`;\n}\nfunction literalOrArrayLiteral(value) {\n  if (Array.isArray(value)) {\n    return literalArr(value.map(literalOrArrayLiteral));\n  }\n  return literal(value);\n}\n\n/**\n * Converts the semantic attributes of element-like operations (elements, templates) into constant\n * array expressions, and lifts them into the overall component `consts`.\n */\nfunction collectElementConsts(job) {\n  // Collect all extracted attributes.\n  const allElementAttributes = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.ExtractedAttribute) {\n        const attributes = allElementAttributes.get(op.target) || new ElementAttributes(job.compatibility);\n        allElementAttributes.set(op.target, attributes);\n        attributes.add(op.bindingKind, op.name, op.expression, op.namespace, op.trustedValueFn);\n        OpList.remove(op);\n      }\n    }\n  }\n  // Serialize the extracted attributes into the const array.\n  if (job instanceof ComponentCompilationJob) {\n    for (const unit of job.units) {\n      for (const op of unit.create) {\n        // TODO: Simplify and combine these cases.\n        if (op.kind == OpKind.Projection) {\n          const attributes = allElementAttributes.get(op.xref);\n          if (attributes !== undefined) {\n            const attrArray = serializeAttributes(attributes);\n            if (attrArray.entries.length > 0) {\n              op.attributes = attrArray;\n            }\n          }\n        } else if (isElementOrContainerOp(op)) {\n          op.attributes = getConstIndex(job, allElementAttributes, op.xref);\n          // TODO(dylhunn): `@for` loops with `@empty` blocks need to be special-cased here,\n          // because the slot consumer trait currently only supports one slot per consumer and we\n          // need two. This should be revisited when making the refactors mentioned in:\n          // https://github.com/angular/angular/pull/53620#discussion_r1430918822\n          if (op.kind === OpKind.RepeaterCreate && op.emptyView !== null) {\n            op.emptyAttributes = getConstIndex(job, allElementAttributes, op.emptyView);\n          }\n        }\n      }\n    }\n  } else if (job instanceof HostBindingCompilationJob) {\n    // TODO: If the host binding case further diverges, we may want to split it into its own\n    // phase.\n    for (const [xref, attributes] of allElementAttributes.entries()) {\n      if (xref !== job.root.xref) {\n        throw new Error(`An attribute would be const collected into the host binding's template function, but is not associated with the root xref.`);\n      }\n      const attrArray = serializeAttributes(attributes);\n      if (attrArray.entries.length > 0) {\n        job.root.attributes = attrArray;\n      }\n    }\n  }\n}\nfunction getConstIndex(job, allElementAttributes, xref) {\n  const attributes = allElementAttributes.get(xref);\n  if (attributes !== undefined) {\n    const attrArray = serializeAttributes(attributes);\n    if (attrArray.entries.length > 0) {\n      return job.addConst(attrArray);\n    }\n  }\n  return null;\n}\n/**\n * Shared instance of an empty array to avoid unnecessary array allocations.\n */\nconst FLYWEIGHT_ARRAY = Object.freeze([]);\n/**\n * Container for all of the various kinds of attributes which are applied on an element.\n */\nclass ElementAttributes {\n  get attributes() {\n    return this.byKind.get(BindingKind.Attribute) ?? FLYWEIGHT_ARRAY;\n  }\n  get classes() {\n    return this.byKind.get(BindingKind.ClassName) ?? FLYWEIGHT_ARRAY;\n  }\n  get styles() {\n    return this.byKind.get(BindingKind.StyleProperty) ?? FLYWEIGHT_ARRAY;\n  }\n  get bindings() {\n    return this.byKind.get(BindingKind.Property) ?? FLYWEIGHT_ARRAY;\n  }\n  get template() {\n    return this.byKind.get(BindingKind.Template) ?? FLYWEIGHT_ARRAY;\n  }\n  get i18n() {\n    return this.byKind.get(BindingKind.I18n) ?? FLYWEIGHT_ARRAY;\n  }\n  constructor(compatibility) {\n    this.compatibility = compatibility;\n    this.known = new Map();\n    this.byKind = new Map();\n    this.projectAs = null;\n  }\n  isKnown(kind, name, value) {\n    const nameToValue = this.known.get(kind) ?? new Set();\n    this.known.set(kind, nameToValue);\n    if (nameToValue.has(name)) {\n      return true;\n    }\n    nameToValue.add(name);\n    return false;\n  }\n  add(kind, name, value, namespace, trustedValueFn) {\n    // TemplateDefinitionBuilder puts duplicate attribute, class, and style values into the consts\n    // array. This seems inefficient, we can probably keep just the first one or the last value\n    // (whichever actually gets applied when multiple values are listed for the same attribute).\n    const allowDuplicates = this.compatibility === CompatibilityMode.TemplateDefinitionBuilder && (kind === BindingKind.Attribute || kind === BindingKind.ClassName || kind === BindingKind.StyleProperty);\n    if (!allowDuplicates && this.isKnown(kind, name, value)) {\n      return;\n    }\n    // TODO: Can this be its own phase\n    if (name === 'ngProjectAs') {\n      if (value === null || !(value instanceof LiteralExpr) || value.value == null || typeof value.value?.toString() !== 'string') {\n        throw Error('ngProjectAs must have a string literal value');\n      }\n      this.projectAs = value.value.toString();\n      // TODO: TemplateDefinitionBuilder allows `ngProjectAs` to also be assigned as a literal\n      // attribute. Is this sane?\n    }\n    const array = this.arrayFor(kind);\n    array.push(...getAttributeNameLiterals$1(namespace, name));\n    if (kind === BindingKind.Attribute || kind === BindingKind.StyleProperty) {\n      if (value === null) {\n        throw Error('Attribute, i18n attribute, & style element attributes must have a value');\n      }\n      if (trustedValueFn !== null) {\n        if (!isStringLiteral(value)) {\n          throw Error('AssertionError: extracted attribute value should be string literal');\n        }\n        array.push(taggedTemplate(trustedValueFn, new TemplateLiteral([new TemplateLiteralElement(value.value)], []), undefined, value.sourceSpan));\n      } else {\n        array.push(value);\n      }\n    }\n  }\n  arrayFor(kind) {\n    if (!this.byKind.has(kind)) {\n      this.byKind.set(kind, []);\n    }\n    return this.byKind.get(kind);\n  }\n}\n/**\n * Gets an array of literal expressions representing the attribute's namespaced name.\n */\nfunction getAttributeNameLiterals$1(namespace, name) {\n  const nameLiteral = literal(name);\n  if (namespace) {\n    return [literal(0 /* core.AttributeMarker.NamespaceURI */), literal(namespace), nameLiteral];\n  }\n  return [nameLiteral];\n}\n/**\n * Serializes an ElementAttributes object into an array expression.\n */\nfunction serializeAttributes({\n  attributes,\n  bindings,\n  classes,\n  i18n,\n  projectAs,\n  styles,\n  template\n}) {\n  const attrArray = [...attributes];\n  if (projectAs !== null) {\n    // Parse the attribute value into a CssSelectorList. Note that we only take the\n    // first selector, because we don't support multiple selectors in ngProjectAs.\n    const parsedR3Selector = parseSelectorToR3Selector(projectAs)[0];\n    attrArray.push(literal(5 /* core.AttributeMarker.ProjectAs */), literalOrArrayLiteral(parsedR3Selector));\n  }\n  if (classes.length > 0) {\n    attrArray.push(literal(1 /* core.AttributeMarker.Classes */), ...classes);\n  }\n  if (styles.length > 0) {\n    attrArray.push(literal(2 /* core.AttributeMarker.Styles */), ...styles);\n  }\n  if (bindings.length > 0) {\n    attrArray.push(literal(3 /* core.AttributeMarker.Bindings */), ...bindings);\n  }\n  if (template.length > 0) {\n    attrArray.push(literal(4 /* core.AttributeMarker.Template */), ...template);\n  }\n  if (i18n.length > 0) {\n    attrArray.push(literal(6 /* core.AttributeMarker.I18n */), ...i18n);\n  }\n  return literalArr(attrArray);\n}\n\n/**\n * Some binding instructions in the update block may actually correspond to i18n bindings. In that\n * case, they should be replaced with i18nExp instructions for the dynamic portions.\n */\nfunction convertI18nBindings(job) {\n  const i18nAttributesByElem = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.I18nAttributes) {\n        i18nAttributesByElem.set(op.target, op);\n      }\n    }\n    for (const op of unit.update) {\n      switch (op.kind) {\n        case OpKind.Property:\n        case OpKind.Attribute:\n          if (op.i18nContext === null) {\n            continue;\n          }\n          if (!(op.expression instanceof Interpolation)) {\n            continue;\n          }\n          const i18nAttributesForElem = i18nAttributesByElem.get(op.target);\n          if (i18nAttributesForElem === undefined) {\n            throw new Error('AssertionError: An i18n attribute binding instruction requires the owning element to have an I18nAttributes create instruction');\n          }\n          if (i18nAttributesForElem.target !== op.target) {\n            throw new Error('AssertionError: Expected i18nAttributes target element to match binding target element');\n          }\n          const ops = [];\n          for (let i = 0; i < op.expression.expressions.length; i++) {\n            const expr = op.expression.expressions[i];\n            if (op.expression.i18nPlaceholders.length !== op.expression.expressions.length) {\n              throw new Error(`AssertionError: An i18n attribute binding instruction requires the same number of expressions and placeholders, but found ${op.expression.i18nPlaceholders.length} placeholders and ${op.expression.expressions.length} expressions`);\n            }\n            ops.push(createI18nExpressionOp(op.i18nContext, i18nAttributesForElem.target, i18nAttributesForElem.xref, i18nAttributesForElem.handle, expr, null, op.expression.i18nPlaceholders[i], I18nParamResolutionTime.Creation, I18nExpressionFor.I18nAttribute, op.name, op.sourceSpan));\n          }\n          OpList.replaceWithMany(op, ops);\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Create extracted deps functions for defer ops.\n */\nfunction createDeferDepsFns(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.Defer) {\n        if (op.metadata.deps.length === 0) {\n          continue;\n        }\n        const dependencies = [];\n        for (const dep of op.metadata.deps) {\n          if (dep.isDeferrable) {\n            // Callback function, e.g. `m () => m.MyCmp;`.\n            const innerFn = arrowFn([new FnParam('m', DYNAMIC_TYPE)], variable('m').prop(dep.symbolName));\n            // Dynamic import, e.g. `import('./a').then(...)`.\n            const importExpr = new DynamicImportExpr(dep.importPath).prop('then').callFn([innerFn]);\n            dependencies.push(importExpr);\n          } else {\n            // Non-deferrable symbol, just use a reference to the type.\n            dependencies.push(dep.type);\n          }\n        }\n        const depsFnExpr = arrowFn([], literalArr(dependencies));\n        if (op.handle.slot === null) {\n          throw new Error('AssertionError: slot must be assigned bfore extracting defer deps functions');\n        }\n        op.resolverFn = job.pool.getSharedFunctionReference(depsFnExpr, `${job.componentName}_Defer_${op.handle.slot}_DepsFn`, /* Don't use unique names for TDB compatibility */false);\n      }\n    }\n  }\n}\n\n/**\n * Create one helper context op per i18n block (including generate descending blocks).\n *\n * Also, if an ICU exists inside an i18n block that also contains other localizable content (such as\n * string), create an additional helper context op for the ICU.\n *\n * These context ops are later used for generating i18n messages. (Although we generate at least one\n * context op per nested view, we will collect them up the tree later, to generate a top-level\n * message.)\n */\nfunction createI18nContexts(job) {\n  // Create i18n context ops for i18n attrs.\n  const attrContextByMessage = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      switch (op.kind) {\n        case OpKind.Binding:\n        case OpKind.Property:\n        case OpKind.Attribute:\n        case OpKind.ExtractedAttribute:\n          if (op.i18nMessage === null) {\n            continue;\n          }\n          if (!attrContextByMessage.has(op.i18nMessage)) {\n            const i18nContext = createI18nContextOp(I18nContextKind.Attr, job.allocateXrefId(), null, op.i18nMessage, null);\n            unit.create.push(i18nContext);\n            attrContextByMessage.set(op.i18nMessage, i18nContext.xref);\n          }\n          op.i18nContext = attrContextByMessage.get(op.i18nMessage);\n          break;\n      }\n    }\n  }\n  // Create i18n context ops for root i18n blocks.\n  const blockContextByI18nBlock = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nStart:\n          if (op.xref === op.root) {\n            const contextOp = createI18nContextOp(I18nContextKind.RootI18n, job.allocateXrefId(), op.xref, op.message, null);\n            unit.create.push(contextOp);\n            op.context = contextOp.xref;\n            blockContextByI18nBlock.set(op.xref, contextOp);\n          }\n          break;\n      }\n    }\n  }\n  // Assign i18n contexts for child i18n blocks. These don't need their own conext, instead they\n  // should inherit from their root i18n block.\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.I18nStart && op.xref !== op.root) {\n        const rootContext = blockContextByI18nBlock.get(op.root);\n        if (rootContext === undefined) {\n          throw Error('AssertionError: Root i18n block i18n context should have been created.');\n        }\n        op.context = rootContext.xref;\n        blockContextByI18nBlock.set(op.xref, rootContext);\n      }\n    }\n  }\n  // Create or assign i18n contexts for ICUs.\n  let currentI18nOp = null;\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nStart:\n          currentI18nOp = op;\n          break;\n        case OpKind.I18nEnd:\n          currentI18nOp = null;\n          break;\n        case OpKind.IcuStart:\n          if (currentI18nOp === null) {\n            throw Error('AssertionError: Unexpected ICU outside of an i18n block.');\n          }\n          if (op.message.id !== currentI18nOp.message.id) {\n            // This ICU is a sub-message inside its parent i18n block message. We need to give it\n            // its own context.\n            const contextOp = createI18nContextOp(I18nContextKind.Icu, job.allocateXrefId(), currentI18nOp.xref, op.message, null);\n            unit.create.push(contextOp);\n            op.context = contextOp.xref;\n          } else {\n            // This ICU is the only translatable content in its parent i18n block. We need to\n            // convert the parent's context into an ICU context.\n            op.context = currentI18nOp.context;\n            blockContextByI18nBlock.get(currentI18nOp.xref).contextKind = I18nContextKind.Icu;\n          }\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Deduplicate text bindings, e.g. <div class=\"cls1\" class=\"cls2\">\n */\nfunction deduplicateTextBindings(job) {\n  const seen = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.update.reversed()) {\n      if (op.kind === OpKind.Binding && op.isTextAttribute) {\n        const seenForElement = seen.get(op.target) || new Set();\n        if (seenForElement.has(op.name)) {\n          if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {\n            // For most duplicated attributes, TemplateDefinitionBuilder lists all of the values in\n            // the consts array. However, for style and class attributes it only keeps the last one.\n            // We replicate that behavior here since it has actual consequences for apps with\n            // duplicate class or style attrs.\n            if (op.name === 'style' || op.name === 'class') {\n              OpList.remove(op);\n            }\n          } else {\n            // TODO: Determine the correct behavior. It would probably make sense to merge multiple\n            // style and class attributes. Alternatively we could just throw an error, as HTML\n            // doesn't permit duplicate attributes.\n          }\n        }\n        seenForElement.add(op.name);\n        seen.set(op.target, seenForElement);\n      }\n    }\n  }\n}\n\n/**\n * Defer instructions take a configuration array, which should be collected into the component\n * consts. This phase finds the config options, and creates the corresponding const array.\n */\nfunction configureDeferInstructions(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind !== OpKind.Defer) {\n        continue;\n      }\n      if (op.placeholderMinimumTime !== null) {\n        op.placeholderConfig = new ConstCollectedExpr(literalOrArrayLiteral([op.placeholderMinimumTime]));\n      }\n      if (op.loadingMinimumTime !== null || op.loadingAfterTime !== null) {\n        op.loadingConfig = new ConstCollectedExpr(literalOrArrayLiteral([op.loadingMinimumTime, op.loadingAfterTime]));\n      }\n    }\n  }\n}\n\n/**\n * Some `defer` conditions can reference other elements in the template, using their local reference\n * names. However, the semantics are quite different from the normal local reference system: in\n * particular, we need to look at local reference names in enclosing views. This phase resolves\n * all such references to actual xrefs.\n */\nfunction resolveDeferTargetNames(job) {\n  const scopes = new Map();\n  function getScopeForView(view) {\n    if (scopes.has(view.xref)) {\n      return scopes.get(view.xref);\n    }\n    const scope = new Scope$1();\n    for (const op of view.create) {\n      // add everything that can be referenced.\n      if (!isElementOrContainerOp(op) || op.localRefs === null) {\n        continue;\n      }\n      if (!Array.isArray(op.localRefs)) {\n        throw new Error('LocalRefs were already processed, but were needed to resolve defer targets.');\n      }\n      for (const ref of op.localRefs) {\n        if (ref.target !== '') {\n          continue;\n        }\n        scope.targets.set(ref.name, {\n          xref: op.xref,\n          slot: op.handle\n        });\n      }\n    }\n    scopes.set(view.xref, scope);\n    return scope;\n  }\n  function resolveTrigger(deferOwnerView, op, placeholderView) {\n    switch (op.trigger.kind) {\n      case DeferTriggerKind.Idle:\n      case DeferTriggerKind.Immediate:\n      case DeferTriggerKind.Timer:\n        return;\n      case DeferTriggerKind.Hover:\n      case DeferTriggerKind.Interaction:\n      case DeferTriggerKind.Viewport:\n        if (op.trigger.targetName === null) {\n          // A `null` target name indicates we should default to the first element in the\n          // placeholder block.\n          if (placeholderView === null) {\n            throw new Error('defer on trigger with no target name must have a placeholder block');\n          }\n          const placeholder = job.views.get(placeholderView);\n          if (placeholder == undefined) {\n            throw new Error('AssertionError: could not find placeholder view for defer on trigger');\n          }\n          for (const placeholderOp of placeholder.create) {\n            if (hasConsumesSlotTrait(placeholderOp) && (isElementOrContainerOp(placeholderOp) || placeholderOp.kind === OpKind.Projection)) {\n              op.trigger.targetXref = placeholderOp.xref;\n              op.trigger.targetView = placeholderView;\n              op.trigger.targetSlotViewSteps = -1;\n              op.trigger.targetSlot = placeholderOp.handle;\n              return;\n            }\n          }\n          return;\n        }\n        let view = placeholderView !== null ? job.views.get(placeholderView) : deferOwnerView;\n        let step = placeholderView !== null ? -1 : 0;\n        while (view !== null) {\n          const scope = getScopeForView(view);\n          if (scope.targets.has(op.trigger.targetName)) {\n            const {\n              xref,\n              slot\n            } = scope.targets.get(op.trigger.targetName);\n            op.trigger.targetXref = xref;\n            op.trigger.targetView = view.xref;\n            op.trigger.targetSlotViewSteps = step;\n            op.trigger.targetSlot = slot;\n            return;\n          }\n          view = view.parent !== null ? job.views.get(view.parent) : null;\n          step++;\n        }\n        break;\n      default:\n        throw new Error(`Trigger kind ${op.trigger.kind} not handled`);\n    }\n  }\n  // Find the defer ops, and assign the data about their targets.\n  for (const unit of job.units) {\n    const defers = new Map();\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.Defer:\n          defers.set(op.xref, op);\n          break;\n        case OpKind.DeferOn:\n          const deferOp = defers.get(op.defer);\n          resolveTrigger(unit, op, deferOp.placeholderView);\n          break;\n      }\n    }\n  }\n}\nclass Scope$1 {\n  constructor() {\n    this.targets = new Map();\n  }\n}\nconst REPLACEMENTS = new Map([[OpKind.ElementEnd, [OpKind.ElementStart, OpKind.Element]], [OpKind.ContainerEnd, [OpKind.ContainerStart, OpKind.Container]], [OpKind.I18nEnd, [OpKind.I18nStart, OpKind.I18n]]]);\n/**\n * Op kinds that should not prevent merging of start/end ops.\n */\nconst IGNORED_OP_KINDS = new Set([OpKind.Pipe]);\n/**\n * Replace sequences of mergable instructions (e.g. `ElementStart` and `ElementEnd`) with a\n * consolidated instruction (e.g. `Element`).\n */\nfunction collapseEmptyInstructions(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      // Find end ops that may be able to be merged.\n      const opReplacements = REPLACEMENTS.get(op.kind);\n      if (opReplacements === undefined) {\n        continue;\n      }\n      const [startKind, mergedKind] = opReplacements;\n      // Locate the previous (non-ignored) op.\n      let prevOp = op.prev;\n      while (prevOp !== null && IGNORED_OP_KINDS.has(prevOp.kind)) {\n        prevOp = prevOp.prev;\n      }\n      // If the previous op is the corresponding start op, we can megre.\n      if (prevOp !== null && prevOp.kind === startKind) {\n        // Transmute the start instruction to the merged version. This is safe as they're designed\n        // to be identical apart from the `kind`.\n        prevOp.kind = mergedKind;\n        // Remove the end instruction.\n        OpList.remove(op);\n      }\n    }\n  }\n}\n\n/**\n * Safe read expressions such as `a?.b` have different semantics in Angular templates as\n * compared to JavaScript. In particular, they default to `null` instead of `undefined`. This phase\n * finds all unresolved safe read expressions, and converts them into the appropriate output AST\n * reads, guarded by null checks. We generate temporaries as needed, to avoid re-evaluating the same\n * sub-expression multiple times.\n */\nfunction expandSafeReads(job) {\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      transformExpressionsInOp(op, e => safeTransform(e, {\n        job\n      }), VisitorContextFlag.None);\n      transformExpressionsInOp(op, ternaryTransform, VisitorContextFlag.None);\n    }\n  }\n}\n// A lookup set of all the expression kinds that require a temporary variable to be generated.\nconst requiresTemporary = [InvokeFunctionExpr, LiteralArrayExpr, LiteralMapExpr, SafeInvokeFunctionExpr, PipeBindingExpr].map(e => e.constructor.name);\nfunction needsTemporaryInSafeAccess(e) {\n  // TODO: We probably want to use an expression visitor to recursively visit all descendents.\n  // However, that would potentially do a lot of extra work (because it cannot short circuit), so we\n  // implement the logic ourselves for now.\n  if (e instanceof UnaryOperatorExpr) {\n    return needsTemporaryInSafeAccess(e.expr);\n  } else if (e instanceof BinaryOperatorExpr) {\n    return needsTemporaryInSafeAccess(e.lhs) || needsTemporaryInSafeAccess(e.rhs);\n  } else if (e instanceof ConditionalExpr) {\n    if (e.falseCase && needsTemporaryInSafeAccess(e.falseCase)) return true;\n    return needsTemporaryInSafeAccess(e.condition) || needsTemporaryInSafeAccess(e.trueCase);\n  } else if (e instanceof NotExpr) {\n    return needsTemporaryInSafeAccess(e.condition);\n  } else if (e instanceof AssignTemporaryExpr) {\n    return needsTemporaryInSafeAccess(e.expr);\n  } else if (e instanceof ReadPropExpr) {\n    return needsTemporaryInSafeAccess(e.receiver);\n  } else if (e instanceof ReadKeyExpr) {\n    return needsTemporaryInSafeAccess(e.receiver) || needsTemporaryInSafeAccess(e.index);\n  }\n  // TODO: Switch to a method which is exhaustive of newly added expression subtypes.\n  return e instanceof InvokeFunctionExpr || e instanceof LiteralArrayExpr || e instanceof LiteralMapExpr || e instanceof SafeInvokeFunctionExpr || e instanceof PipeBindingExpr;\n}\nfunction temporariesIn(e) {\n  const temporaries = new Set();\n  // TODO: Although it's not currently supported by the transform helper, we should be able to\n  // short-circuit exploring the tree to do less work. In particular, we don't have to penetrate\n  // into the subexpressions of temporary assignments.\n  transformExpressionsInExpression(e, e => {\n    if (e instanceof AssignTemporaryExpr) {\n      temporaries.add(e.xref);\n    }\n    return e;\n  }, VisitorContextFlag.None);\n  return temporaries;\n}\nfunction eliminateTemporaryAssignments(e, tmps, ctx) {\n  // TODO: We can be more efficient than the transform helper here. We don't need to visit any\n  // descendents of temporary assignments.\n  transformExpressionsInExpression(e, e => {\n    if (e instanceof AssignTemporaryExpr && tmps.has(e.xref)) {\n      const read = new ReadTemporaryExpr(e.xref);\n      // `TemplateDefinitionBuilder` has the (accidental?) behavior of generating assignments of\n      // temporary variables to themselves. This happens because some subexpression that the\n      // temporary refers to, possibly through nested temporaries, has a function call. We copy that\n      // behavior here.\n      return ctx.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder ? new AssignTemporaryExpr(read, read.xref) : read;\n    }\n    return e;\n  }, VisitorContextFlag.None);\n  return e;\n}\n/**\n * Creates a safe ternary guarded by the input expression, and with a body generated by the provided\n * callback on the input expression. Generates a temporary variable assignment if needed, and\n * deduplicates nested temporary assignments if needed.\n */\nfunction safeTernaryWithTemporary(guard, body, ctx) {\n  let result;\n  if (needsTemporaryInSafeAccess(guard)) {\n    const xref = ctx.job.allocateXrefId();\n    result = [new AssignTemporaryExpr(guard, xref), new ReadTemporaryExpr(xref)];\n  } else {\n    result = [guard, guard.clone()];\n    // Consider an expression like `a?.[b?.c()]?.d`. The `b?.c()` will be transformed first,\n    // introducing a temporary assignment into the key. Then, as part of expanding the `?.d`. That\n    // assignment will be duplicated into both the guard and expression sides. We de-duplicate it,\n    // by transforming it from an assignment into a read on the expression side.\n    eliminateTemporaryAssignments(result[1], temporariesIn(result[0]), ctx);\n  }\n  return new SafeTernaryExpr(result[0], body(result[1]));\n}\nfunction isSafeAccessExpression(e) {\n  return e instanceof SafePropertyReadExpr || e instanceof SafeKeyedReadExpr || e instanceof SafeInvokeFunctionExpr;\n}\nfunction isUnsafeAccessExpression(e) {\n  return e instanceof ReadPropExpr || e instanceof ReadKeyExpr || e instanceof InvokeFunctionExpr;\n}\nfunction isAccessExpression(e) {\n  return isSafeAccessExpression(e) || isUnsafeAccessExpression(e);\n}\nfunction deepestSafeTernary(e) {\n  if (isAccessExpression(e) && e.receiver instanceof SafeTernaryExpr) {\n    let st = e.receiver;\n    while (st.expr instanceof SafeTernaryExpr) {\n      st = st.expr;\n    }\n    return st;\n  }\n  return null;\n}\n// TODO: When strict compatibility with TemplateDefinitionBuilder is not required, we can use `&&`\n// instead to save some code size.\nfunction safeTransform(e, ctx) {\n  if (!isAccessExpression(e)) {\n    return e;\n  }\n  const dst = deepestSafeTernary(e);\n  if (dst) {\n    if (e instanceof InvokeFunctionExpr) {\n      dst.expr = dst.expr.callFn(e.args);\n      return e.receiver;\n    }\n    if (e instanceof ReadPropExpr) {\n      dst.expr = dst.expr.prop(e.name);\n      return e.receiver;\n    }\n    if (e instanceof ReadKeyExpr) {\n      dst.expr = dst.expr.key(e.index);\n      return e.receiver;\n    }\n    if (e instanceof SafeInvokeFunctionExpr) {\n      dst.expr = safeTernaryWithTemporary(dst.expr, r => r.callFn(e.args), ctx);\n      return e.receiver;\n    }\n    if (e instanceof SafePropertyReadExpr) {\n      dst.expr = safeTernaryWithTemporary(dst.expr, r => r.prop(e.name), ctx);\n      return e.receiver;\n    }\n    if (e instanceof SafeKeyedReadExpr) {\n      dst.expr = safeTernaryWithTemporary(dst.expr, r => r.key(e.index), ctx);\n      return e.receiver;\n    }\n  } else {\n    if (e instanceof SafeInvokeFunctionExpr) {\n      return safeTernaryWithTemporary(e.receiver, r => r.callFn(e.args), ctx);\n    }\n    if (e instanceof SafePropertyReadExpr) {\n      return safeTernaryWithTemporary(e.receiver, r => r.prop(e.name), ctx);\n    }\n    if (e instanceof SafeKeyedReadExpr) {\n      return safeTernaryWithTemporary(e.receiver, r => r.key(e.index), ctx);\n    }\n  }\n  return e;\n}\nfunction ternaryTransform(e) {\n  if (!(e instanceof SafeTernaryExpr)) {\n    return e;\n  }\n  return new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.Equals, e.guard, NULL_EXPR), NULL_EXPR, e.expr);\n}\n\n/**\n * The escape sequence used indicate message param values.\n */\nconst ESCAPE$1 = '\\uFFFD';\n/**\n * Marker used to indicate an element tag.\n */\nconst ELEMENT_MARKER = '#';\n/**\n * Marker used to indicate a template tag.\n */\nconst TEMPLATE_MARKER = '*';\n/**\n * Marker used to indicate closing of an element or template tag.\n */\nconst TAG_CLOSE_MARKER = '/';\n/**\n * Marker used to indicate the sub-template context.\n */\nconst CONTEXT_MARKER = ':';\n/**\n * Marker used to indicate the start of a list of values.\n */\nconst LIST_START_MARKER = '[';\n/**\n * Marker used to indicate the end of a list of values.\n */\nconst LIST_END_MARKER = ']';\n/**\n * Delimiter used to separate multiple values in a list.\n */\nconst LIST_DELIMITER = '|';\n/**\n * Formats the param maps on extracted message ops into a maps of `Expression` objects that can be\n * used in the final output.\n */\nfunction extractI18nMessages(job) {\n  // Create an i18n message for each context.\n  // TODO: Merge the context op with the message op since they're 1:1 anyways.\n  const i18nMessagesByContext = new Map();\n  const i18nBlocks = new Map();\n  const i18nContexts = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nContext:\n          const i18nMessageOp = createI18nMessage(job, op);\n          unit.create.push(i18nMessageOp);\n          i18nMessagesByContext.set(op.xref, i18nMessageOp);\n          i18nContexts.set(op.xref, op);\n          break;\n        case OpKind.I18nStart:\n          i18nBlocks.set(op.xref, op);\n          break;\n      }\n    }\n  }\n  // Associate sub-messages for ICUs with their root message. At this point we can also remove the\n  // ICU start/end ops, as they are no longer needed.\n  let currentIcu = null;\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.IcuStart:\n          currentIcu = op;\n          OpList.remove(op);\n          // Skip any contexts not associated with an ICU.\n          const icuContext = i18nContexts.get(op.context);\n          if (icuContext.contextKind !== I18nContextKind.Icu) {\n            continue;\n          }\n          // Skip ICUs that share a context with their i18n message. These represent root-level\n          // ICUs, not sub-messages.\n          const i18nBlock = i18nBlocks.get(icuContext.i18nBlock);\n          if (i18nBlock.context === icuContext.xref) {\n            continue;\n          }\n          // Find the root message and push this ICUs message as a sub-message.\n          const rootI18nBlock = i18nBlocks.get(i18nBlock.root);\n          const rootMessage = i18nMessagesByContext.get(rootI18nBlock.context);\n          if (rootMessage === undefined) {\n            throw Error('AssertionError: ICU sub-message should belong to a root message.');\n          }\n          const subMessage = i18nMessagesByContext.get(icuContext.xref);\n          subMessage.messagePlaceholder = op.messagePlaceholder;\n          rootMessage.subMessages.push(subMessage.xref);\n          break;\n        case OpKind.IcuEnd:\n          currentIcu = null;\n          OpList.remove(op);\n          break;\n        case OpKind.IcuPlaceholder:\n          // Add ICU placeholders to the message, then remove the ICU placeholder ops.\n          if (currentIcu === null || currentIcu.context == null) {\n            throw Error('AssertionError: Unexpected ICU placeholder outside of i18n context');\n          }\n          const msg = i18nMessagesByContext.get(currentIcu.context);\n          msg.postprocessingParams.set(op.name, literal(formatIcuPlaceholder(op)));\n          OpList.remove(op);\n          break;\n      }\n    }\n  }\n}\n/**\n * Create an i18n message op from an i18n context op.\n */\nfunction createI18nMessage(job, context, messagePlaceholder) {\n  let formattedParams = formatParams(context.params);\n  const formattedPostprocessingParams = formatParams(context.postprocessingParams);\n  let needsPostprocessing = [...context.params.values()].some(v => v.length > 1);\n  return createI18nMessageOp(job.allocateXrefId(), context.xref, context.i18nBlock, context.message, messagePlaceholder ?? null, formattedParams, formattedPostprocessingParams, needsPostprocessing);\n}\n/**\n * Formats an ICU placeholder into a single string with expression placeholders.\n */\nfunction formatIcuPlaceholder(op) {\n  if (op.strings.length !== op.expressionPlaceholders.length + 1) {\n    throw Error(`AsserionError: Invalid ICU placeholder with ${op.strings.length} strings and ${op.expressionPlaceholders.length} expressions`);\n  }\n  const values = op.expressionPlaceholders.map(formatValue);\n  return op.strings.flatMap((str, i) => [str, values[i] || '']).join('');\n}\n/**\n * Formats a map of `I18nParamValue[]` values into a map of `Expression` values.\n */\nfunction formatParams(params) {\n  const formattedParams = new Map();\n  for (const [placeholder, placeholderValues] of params) {\n    const serializedValues = formatParamValues(placeholderValues);\n    if (serializedValues !== null) {\n      formattedParams.set(placeholder, literal(serializedValues));\n    }\n  }\n  return formattedParams;\n}\n/**\n * Formats an `I18nParamValue[]` into a string (or null for empty array).\n */\nfunction formatParamValues(values) {\n  if (values.length === 0) {\n    return null;\n  }\n  const serializedValues = values.map(value => formatValue(value));\n  return serializedValues.length === 1 ? serializedValues[0] : `${LIST_START_MARKER}${serializedValues.join(LIST_DELIMITER)}${LIST_END_MARKER}`;\n}\n/**\n * Formats a single `I18nParamValue` into a string\n */\nfunction formatValue(value) {\n  // Element tags with a structural directive use a special form that concatenates the element and\n  // template values.\n  if (value.flags & I18nParamValueFlags.ElementTag && value.flags & I18nParamValueFlags.TemplateTag) {\n    if (typeof value.value !== 'object') {\n      throw Error('AssertionError: Expected i18n param value to have an element and template slot');\n    }\n    const elementValue = formatValue({\n      ...value,\n      value: value.value.element,\n      flags: value.flags & ~I18nParamValueFlags.TemplateTag\n    });\n    const templateValue = formatValue({\n      ...value,\n      value: value.value.template,\n      flags: value.flags & ~I18nParamValueFlags.ElementTag\n    });\n    // TODO(mmalerba): This is likely a bug in TemplateDefinitionBuilder, we should not need to\n    // record the template value twice. For now I'm re-implementing the behavior here to keep the\n    // output consistent with TemplateDefinitionBuilder.\n    if (value.flags & I18nParamValueFlags.OpenTag && value.flags & I18nParamValueFlags.CloseTag) {\n      return `${templateValue}${elementValue}${templateValue}`;\n    }\n    // To match the TemplateDefinitionBuilder output, flip the order depending on whether the\n    // values represent a closing or opening tag (or both).\n    // TODO(mmalerba): Figure out if this makes a difference in terms of either functionality,\n    // or the resulting message ID. If not, we can remove the special-casing in the future.\n    return value.flags & I18nParamValueFlags.CloseTag ? `${elementValue}${templateValue}` : `${templateValue}${elementValue}`;\n  }\n  // Self-closing tags use a special form that concatenates the start and close tag values.\n  if (value.flags & I18nParamValueFlags.OpenTag && value.flags & I18nParamValueFlags.CloseTag) {\n    return `${formatValue({\n      ...value,\n      flags: value.flags & ~I18nParamValueFlags.CloseTag\n    })}${formatValue({\n      ...value,\n      flags: value.flags & ~I18nParamValueFlags.OpenTag\n    })}`;\n  }\n  // If there are no special flags, just return the raw value.\n  if (value.flags === I18nParamValueFlags.None) {\n    return `${value.value}`;\n  }\n  // Encode the remaining flags as part of the value.\n  let tagMarker = '';\n  let closeMarker = '';\n  if (value.flags & I18nParamValueFlags.ElementTag) {\n    tagMarker = ELEMENT_MARKER;\n  } else if (value.flags & I18nParamValueFlags.TemplateTag) {\n    tagMarker = TEMPLATE_MARKER;\n  }\n  if (tagMarker !== '') {\n    closeMarker = value.flags & I18nParamValueFlags.CloseTag ? TAG_CLOSE_MARKER : '';\n  }\n  const context = value.subTemplateIndex === null ? '' : `${CONTEXT_MARKER}${value.subTemplateIndex}`;\n  return `${ESCAPE$1}${closeMarker}${tagMarker}${value.value}${context}${ESCAPE$1}`;\n}\n\n/**\n * Generate `ir.AdvanceOp`s in between `ir.UpdateOp`s that ensure the runtime's implicit slot\n * context will be advanced correctly.\n */\nfunction generateAdvance(job) {\n  for (const unit of job.units) {\n    // First build a map of all of the declarations in the view that have assigned slots.\n    const slotMap = new Map();\n    for (const op of unit.create) {\n      if (!hasConsumesSlotTrait(op)) {\n        continue;\n      } else if (op.handle.slot === null) {\n        throw new Error(`AssertionError: expected slots to have been allocated before generating advance() calls`);\n      }\n      slotMap.set(op.xref, op.handle.slot);\n    }\n    // Next, step through the update operations and generate `ir.AdvanceOp`s as required to ensure\n    // the runtime's implicit slot counter will be set to the correct slot before executing each\n    // update operation which depends on it.\n    //\n    // To do that, we track what the runtime's slot counter will be through the update operations.\n    let slotContext = 0;\n    for (const op of unit.update) {\n      if (!hasDependsOnSlotContextTrait(op)) {\n        // `op` doesn't depend on the slot counter, so it can be skipped.\n        continue;\n      } else if (!slotMap.has(op.target)) {\n        // We expect ops that _do_ depend on the slot counter to point at declarations that exist in\n        // the `slotMap`.\n        throw new Error(`AssertionError: reference to unknown slot for target ${op.target}`);\n      }\n      const slot = slotMap.get(op.target);\n      // Does the slot counter need to be adjusted?\n      if (slotContext !== slot) {\n        // If so, generate an `ir.AdvanceOp` to advance the counter.\n        const delta = slot - slotContext;\n        if (delta < 0) {\n          throw new Error(`AssertionError: slot counter should never need to move backwards`);\n        }\n        OpList.insertBefore(createAdvanceOp(delta, op.sourceSpan), op);\n        slotContext = slot;\n      }\n    }\n  }\n}\n\n/**\n * Locate projection slots, populate the each component's `ngContentSelectors` literal field,\n * populate `project` arguments, and generate the required `projectionDef` instruction for the job's\n * root view.\n */\nfunction generateProjectionDefs(job) {\n  // TODO: Why does TemplateDefinitionBuilder force a shared constant?\n  const share = job.compatibility === CompatibilityMode.TemplateDefinitionBuilder;\n  // Collect all selectors from this component, and its nested views. Also, assign each projection a\n  // unique ascending projection slot index.\n  const selectors = [];\n  let projectionSlotIndex = 0;\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.Projection) {\n        selectors.push(op.selector);\n        op.projectionSlotIndex = projectionSlotIndex++;\n      }\n    }\n  }\n  if (selectors.length > 0) {\n    // Create the projectionDef array. If we only found a single wildcard selector, then we use the\n    // default behavior with no arguments instead.\n    let defExpr = null;\n    if (selectors.length > 1 || selectors[0] !== '*') {\n      const def = selectors.map(s => s === '*' ? s : parseSelectorToR3Selector(s));\n      defExpr = job.pool.getConstLiteral(literalOrArrayLiteral(def), share);\n    }\n    // Create the ngContentSelectors constant.\n    job.contentSelectors = job.pool.getConstLiteral(literalOrArrayLiteral(selectors), share);\n    // The projection def instruction goes at the beginning of the root view, before any\n    // `projection` instructions.\n    job.root.create.prepend([createProjectionDefOp(defExpr)]);\n  }\n}\n\n/**\n * Generate a preamble sequence for each view creation block and listener function which declares\n * any variables that be referenced in other operations in the block.\n *\n * Variables generated include:\n *   * a saved view context to be used to restore the current view in event listeners.\n *   * the context of the restored view within event listener handlers.\n *   * context variables from the current view as well as all parent views (including the root\n *     context if needed).\n *   * local references from elements within the current view and any lexical parents.\n *\n * Variables are generated here unconditionally, and may optimized away in future operations if it\n * turns out their values (and any side effects) are unused.\n */\nfunction generateVariables(job) {\n  recursivelyProcessView(job.root, /* there is no parent scope for the root view */null);\n}\n/**\n * Process the given `ViewCompilation` and generate preambles for it and any listeners that it\n * declares.\n *\n * @param `parentScope` a scope extracted from the parent view which captures any variables which\n *     should be inherited by this view. `null` if the current view is the root view.\n */\nfunction recursivelyProcessView(view, parentScope) {\n  // Extract a `Scope` from this view.\n  const scope = getScopeForView(view, parentScope);\n  for (const op of view.create) {\n    switch (op.kind) {\n      case OpKind.Template:\n        // Descend into child embedded views.\n        recursivelyProcessView(view.job.views.get(op.xref), scope);\n        break;\n      case OpKind.RepeaterCreate:\n        // Descend into child embedded views.\n        recursivelyProcessView(view.job.views.get(op.xref), scope);\n        if (op.emptyView) {\n          recursivelyProcessView(view.job.views.get(op.emptyView), scope);\n        }\n        break;\n      case OpKind.Listener:\n        // Prepend variables to listener handler functions.\n        op.handlerOps.prepend(generateVariablesInScopeForView(view, scope));\n        break;\n    }\n  }\n  // Prepend the declarations for all available variables in scope to the `update` block.\n  const preambleOps = generateVariablesInScopeForView(view, scope);\n  view.update.prepend(preambleOps);\n}\n/**\n * Process a view and generate a `Scope` representing the variables available for reference within\n * that view.\n */\nfunction getScopeForView(view, parent) {\n  const scope = {\n    view: view.xref,\n    viewContextVariable: {\n      kind: SemanticVariableKind.Context,\n      name: null,\n      view: view.xref\n    },\n    contextVariables: new Map(),\n    aliases: view.aliases,\n    references: [],\n    parent\n  };\n  for (const identifier of view.contextVariables.keys()) {\n    scope.contextVariables.set(identifier, {\n      kind: SemanticVariableKind.Identifier,\n      name: null,\n      identifier\n    });\n  }\n  for (const op of view.create) {\n    switch (op.kind) {\n      case OpKind.ElementStart:\n      case OpKind.Template:\n        if (!Array.isArray(op.localRefs)) {\n          throw new Error(`AssertionError: expected localRefs to be an array`);\n        }\n        // Record available local references from this element.\n        for (let offset = 0; offset < op.localRefs.length; offset++) {\n          scope.references.push({\n            name: op.localRefs[offset].name,\n            targetId: op.xref,\n            targetSlot: op.handle,\n            offset,\n            variable: {\n              kind: SemanticVariableKind.Identifier,\n              name: null,\n              identifier: op.localRefs[offset].name\n            }\n          });\n        }\n        break;\n    }\n  }\n  return scope;\n}\n/**\n * Generate declarations for all variables that are in scope for a given view.\n *\n * This is a recursive process, as views inherit variables available from their parent view, which\n * itself may have inherited variables, etc.\n */\nfunction generateVariablesInScopeForView(view, scope) {\n  const newOps = [];\n  if (scope.view !== view.xref) {\n    // Before generating variables for a parent view, we need to switch to the context of the parent\n    // view with a `nextContext` expression. This context switching operation itself declares a\n    // variable, because the context of the view may be referenced directly.\n    newOps.push(createVariableOp(view.job.allocateXrefId(), scope.viewContextVariable, new NextContextExpr(), VariableFlags.None));\n  }\n  // Add variables for all context variables available in this scope's view.\n  const scopeView = view.job.views.get(scope.view);\n  for (const [name, value] of scopeView.contextVariables) {\n    const context = new ContextExpr(scope.view);\n    // We either read the context, or, if the variable is CTX_REF, use the context directly.\n    const variable = value === CTX_REF ? context : new ReadPropExpr(context, value);\n    // Add the variable declaration.\n    newOps.push(createVariableOp(view.job.allocateXrefId(), scope.contextVariables.get(name), variable, VariableFlags.None));\n  }\n  for (const alias of scopeView.aliases) {\n    newOps.push(createVariableOp(view.job.allocateXrefId(), alias, alias.expression.clone(), VariableFlags.AlwaysInline));\n  }\n  // Add variables for all local references declared for elements in this scope.\n  for (const ref of scope.references) {\n    newOps.push(createVariableOp(view.job.allocateXrefId(), ref.variable, new ReferenceExpr(ref.targetId, ref.targetSlot, ref.offset), VariableFlags.None));\n  }\n  if (scope.parent !== null) {\n    // Recursively add variables from the parent scope.\n    newOps.push(...generateVariablesInScopeForView(view, scope.parent));\n  }\n  return newOps;\n}\n\n/**\n * `ir.ConstCollectedExpr` may be present in any IR expression. This means that expression needs to\n * be lifted into the component const array, and replaced with a reference to the const array at its\n *\n * usage site. This phase walks the IR and performs this transformation.\n */\nfunction collectConstExpressions(job) {\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      transformExpressionsInOp(op, expr => {\n        if (!(expr instanceof ConstCollectedExpr)) {\n          return expr;\n        }\n        return literal(job.addConst(expr.expr));\n      }, VisitorContextFlag.None);\n    }\n  }\n}\nconst STYLE_DOT = 'style.';\nconst CLASS_DOT = 'class.';\nconst STYLE_BANG = 'style!';\nconst CLASS_BANG = 'class!';\nconst BANG_IMPORTANT = '!important';\n/**\n * Host bindings are compiled using a different parser entrypoint, and are parsed quite differently\n * as a result. Therefore, we need to do some extra parsing for host style properties, as compared\n * to non-host style properties.\n * TODO: Unify host bindings and non-host bindings in the parser.\n */\nfunction parseHostStyleProperties(job) {\n  for (const op of job.root.update) {\n    if (!(op.kind === OpKind.Binding && op.bindingKind === BindingKind.Property)) {\n      continue;\n    }\n    if (op.name.endsWith(BANG_IMPORTANT)) {\n      // Delete any `!important` suffixes from the binding name.\n      op.name = op.name.substring(0, op.name.length - BANG_IMPORTANT.length);\n    }\n    if (op.name.startsWith(STYLE_DOT)) {\n      op.bindingKind = BindingKind.StyleProperty;\n      op.name = op.name.substring(STYLE_DOT.length);\n      if (!isCssCustomProperty$1(op.name)) {\n        op.name = hyphenate$1(op.name);\n      }\n      const {\n        property,\n        suffix\n      } = parseProperty$1(op.name);\n      op.name = property;\n      op.unit = suffix;\n    } else if (op.name.startsWith(STYLE_BANG)) {\n      op.bindingKind = BindingKind.StyleProperty;\n      op.name = 'style';\n    } else if (op.name.startsWith(CLASS_DOT)) {\n      op.bindingKind = BindingKind.ClassName;\n      op.name = parseProperty$1(op.name.substring(CLASS_DOT.length)).property;\n    } else if (op.name.startsWith(CLASS_BANG)) {\n      op.bindingKind = BindingKind.ClassName;\n      op.name = parseProperty$1(op.name.substring(CLASS_BANG.length)).property;\n    }\n  }\n}\n/**\n * Checks whether property name is a custom CSS property.\n * See: https://www.w3.org/TR/css-variables-1\n */\nfunction isCssCustomProperty$1(name) {\n  return name.startsWith('--');\n}\nfunction hyphenate$1(value) {\n  return value.replace(/[a-z][A-Z]/g, v => {\n    return v.charAt(0) + '-' + v.charAt(1);\n  }).toLowerCase();\n}\nfunction parseProperty$1(name) {\n  const overrideIndex = name.indexOf('!important');\n  if (overrideIndex !== -1) {\n    name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';\n  }\n  let suffix = null;\n  let property = name;\n  const unitIndex = name.lastIndexOf('.');\n  if (unitIndex > 0) {\n    suffix = name.slice(unitIndex + 1);\n    property = name.substring(0, unitIndex);\n  }\n  return {\n    property,\n    suffix\n  };\n}\nfunction mapEntry(key, value) {\n  return {\n    key,\n    value,\n    quoted: false\n  };\n}\nfunction mapLiteral(obj, quoted = false) {\n  return literalMap(Object.keys(obj).map(key => ({\n    key,\n    quoted,\n    value: obj[key]\n  })));\n}\nclass IcuSerializerVisitor {\n  visitText(text) {\n    return text.value;\n  }\n  visitContainer(container) {\n    return container.children.map(child => child.visit(this)).join('');\n  }\n  visitIcu(icu) {\n    const strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n    const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n    return result;\n  }\n  visitTagPlaceholder(ph) {\n    return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n  }\n  visitPlaceholder(ph) {\n    return this.formatPh(ph.name);\n  }\n  visitBlockPlaceholder(ph) {\n    return `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n  }\n  visitIcuPlaceholder(ph, context) {\n    return this.formatPh(ph.name);\n  }\n  formatPh(value) {\n    return `{${formatI18nPlaceholderName(value, /* useCamelCase */false)}}`;\n  }\n}\nconst serializer = new IcuSerializerVisitor();\nfunction serializeIcuNode(icu) {\n  return icu.visit(serializer);\n}\nvar TokenType;\n(function (TokenType) {\n  TokenType[TokenType[\"Character\"] = 0] = \"Character\";\n  TokenType[TokenType[\"Identifier\"] = 1] = \"Identifier\";\n  TokenType[TokenType[\"PrivateIdentifier\"] = 2] = \"PrivateIdentifier\";\n  TokenType[TokenType[\"Keyword\"] = 3] = \"Keyword\";\n  TokenType[TokenType[\"String\"] = 4] = \"String\";\n  TokenType[TokenType[\"Operator\"] = 5] = \"Operator\";\n  TokenType[TokenType[\"Number\"] = 6] = \"Number\";\n  TokenType[TokenType[\"Error\"] = 7] = \"Error\";\n})(TokenType || (TokenType = {}));\nconst KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\nclass Lexer {\n  tokenize(text) {\n    const scanner = new _Scanner(text);\n    const tokens = [];\n    let token = scanner.scanToken();\n    while (token != null) {\n      tokens.push(token);\n      token = scanner.scanToken();\n    }\n    return tokens;\n  }\n}\nclass Token {\n  constructor(index, end, type, numValue, strValue) {\n    this.index = index;\n    this.end = end;\n    this.type = type;\n    this.numValue = numValue;\n    this.strValue = strValue;\n  }\n  isCharacter(code) {\n    return this.type == TokenType.Character && this.numValue == code;\n  }\n  isNumber() {\n    return this.type == TokenType.Number;\n  }\n  isString() {\n    return this.type == TokenType.String;\n  }\n  isOperator(operator) {\n    return this.type == TokenType.Operator && this.strValue == operator;\n  }\n  isIdentifier() {\n    return this.type == TokenType.Identifier;\n  }\n  isPrivateIdentifier() {\n    return this.type == TokenType.PrivateIdentifier;\n  }\n  isKeyword() {\n    return this.type == TokenType.Keyword;\n  }\n  isKeywordLet() {\n    return this.type == TokenType.Keyword && this.strValue == 'let';\n  }\n  isKeywordAs() {\n    return this.type == TokenType.Keyword && this.strValue == 'as';\n  }\n  isKeywordNull() {\n    return this.type == TokenType.Keyword && this.strValue == 'null';\n  }\n  isKeywordUndefined() {\n    return this.type == TokenType.Keyword && this.strValue == 'undefined';\n  }\n  isKeywordTrue() {\n    return this.type == TokenType.Keyword && this.strValue == 'true';\n  }\n  isKeywordFalse() {\n    return this.type == TokenType.Keyword && this.strValue == 'false';\n  }\n  isKeywordThis() {\n    return this.type == TokenType.Keyword && this.strValue == 'this';\n  }\n  isError() {\n    return this.type == TokenType.Error;\n  }\n  toNumber() {\n    return this.type == TokenType.Number ? this.numValue : -1;\n  }\n  toString() {\n    switch (this.type) {\n      case TokenType.Character:\n      case TokenType.Identifier:\n      case TokenType.Keyword:\n      case TokenType.Operator:\n      case TokenType.PrivateIdentifier:\n      case TokenType.String:\n      case TokenType.Error:\n        return this.strValue;\n      case TokenType.Number:\n        return this.numValue.toString();\n      default:\n        return null;\n    }\n  }\n}\nfunction newCharacterToken(index, end, code) {\n  return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));\n}\nfunction newIdentifierToken(index, end, text) {\n  return new Token(index, end, TokenType.Identifier, 0, text);\n}\nfunction newPrivateIdentifierToken(index, end, text) {\n  return new Token(index, end, TokenType.PrivateIdentifier, 0, text);\n}\nfunction newKeywordToken(index, end, text) {\n  return new Token(index, end, TokenType.Keyword, 0, text);\n}\nfunction newOperatorToken(index, end, text) {\n  return new Token(index, end, TokenType.Operator, 0, text);\n}\nfunction newStringToken(index, end, text) {\n  return new Token(index, end, TokenType.String, 0, text);\n}\nfunction newNumberToken(index, end, n) {\n  return new Token(index, end, TokenType.Number, n, '');\n}\nfunction newErrorToken(index, end, message) {\n  return new Token(index, end, TokenType.Error, 0, message);\n}\nconst EOF = new Token(-1, -1, TokenType.Character, 0, '');\nclass _Scanner {\n  constructor(input) {\n    this.input = input;\n    this.peek = 0;\n    this.index = -1;\n    this.length = input.length;\n    this.advance();\n  }\n  advance() {\n    this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\n  }\n  scanToken() {\n    const input = this.input,\n      length = this.length;\n    let peek = this.peek,\n      index = this.index;\n    // Skip whitespace.\n    while (peek <= $SPACE) {\n      if (++index >= length) {\n        peek = $EOF;\n        break;\n      } else {\n        peek = input.charCodeAt(index);\n      }\n    }\n    this.peek = peek;\n    this.index = index;\n    if (index >= length) {\n      return null;\n    }\n    // Handle identifiers and numbers.\n    if (isIdentifierStart(peek)) return this.scanIdentifier();\n    if (isDigit(peek)) return this.scanNumber(index);\n    const start = index;\n    switch (peek) {\n      case $PERIOD:\n        this.advance();\n        return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, this.index, $PERIOD);\n      case $LPAREN:\n      case $RPAREN:\n      case $LBRACE:\n      case $RBRACE:\n      case $LBRACKET:\n      case $RBRACKET:\n      case $COMMA:\n      case $COLON:\n      case $SEMICOLON:\n        return this.scanCharacter(start, peek);\n      case $SQ:\n      case $DQ:\n        return this.scanString();\n      case $HASH:\n        return this.scanPrivateIdentifier();\n      case $PLUS:\n      case $MINUS:\n      case $STAR:\n      case $SLASH:\n      case $PERCENT:\n      case $CARET:\n        return this.scanOperator(start, String.fromCharCode(peek));\n      case $QUESTION:\n        return this.scanQuestion(start);\n      case $LT:\n      case $GT:\n        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');\n      case $BANG:\n      case $EQ:\n        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');\n      case $AMPERSAND:\n        return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n      case $BAR:\n        return this.scanComplexOperator(start, '|', $BAR, '|');\n      case $NBSP:\n        while (isWhitespace(this.peek)) this.advance();\n        return this.scanToken();\n    }\n    this.advance();\n    return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\n  }\n  scanCharacter(start, code) {\n    this.advance();\n    return newCharacterToken(start, this.index, code);\n  }\n  scanOperator(start, str) {\n    this.advance();\n    return newOperatorToken(start, this.index, str);\n  }\n  /**\n   * Tokenize a 2/3 char long operator\n   *\n   * @param start start index in the expression\n   * @param one first symbol (always part of the operator)\n   * @param twoCode code point for the second symbol\n   * @param two second symbol (part of the operator when the second code point matches)\n   * @param threeCode code point for the third symbol\n   * @param three third symbol (part of the operator when provided and matches source expression)\n   */\n  scanComplexOperator(start, one, twoCode, two, threeCode, three) {\n    this.advance();\n    let str = one;\n    if (this.peek == twoCode) {\n      this.advance();\n      str += two;\n    }\n    if (threeCode != null && this.peek == threeCode) {\n      this.advance();\n      str += three;\n    }\n    return newOperatorToken(start, this.index, str);\n  }\n  scanIdentifier() {\n    const start = this.index;\n    this.advance();\n    while (isIdentifierPart(this.peek)) this.advance();\n    const str = this.input.substring(start, this.index);\n    return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) : newIdentifierToken(start, this.index, str);\n  }\n  /** Scans an ECMAScript private identifier. */\n  scanPrivateIdentifier() {\n    const start = this.index;\n    this.advance();\n    if (!isIdentifierStart(this.peek)) {\n      return this.error('Invalid character [#]', -1);\n    }\n    while (isIdentifierPart(this.peek)) this.advance();\n    const identifierName = this.input.substring(start, this.index);\n    return newPrivateIdentifierToken(start, this.index, identifierName);\n  }\n  scanNumber(start) {\n    let simple = this.index === start;\n    let hasSeparators = false;\n    this.advance(); // Skip initial digit.\n    while (true) {\n      if (isDigit(this.peek)) {\n        // Do nothing.\n      } else if (this.peek === $_) {\n        // Separators are only valid when they're surrounded by digits. E.g. `1_0_1` is\n        // valid while `_101` and `101_` are not. The separator can't be next to the decimal\n        // point or another separator either. Note that it's unlikely that we'll hit a case where\n        // the underscore is at the start, because that's a valid identifier and it will be picked\n        // up earlier in the parsing. We validate for it anyway just in case.\n        if (!isDigit(this.input.charCodeAt(this.index - 1)) || !isDigit(this.input.charCodeAt(this.index + 1))) {\n          return this.error('Invalid numeric separator', 0);\n        }\n        hasSeparators = true;\n      } else if (this.peek === $PERIOD) {\n        simple = false;\n      } else if (isExponentStart(this.peek)) {\n        this.advance();\n        if (isExponentSign(this.peek)) this.advance();\n        if (!isDigit(this.peek)) return this.error('Invalid exponent', -1);\n        simple = false;\n      } else {\n        break;\n      }\n      this.advance();\n    }\n    let str = this.input.substring(start, this.index);\n    if (hasSeparators) {\n      str = str.replace(/_/g, '');\n    }\n    const value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n    return newNumberToken(start, this.index, value);\n  }\n  scanString() {\n    const start = this.index;\n    const quote = this.peek;\n    this.advance(); // Skip initial quote.\n    let buffer = '';\n    let marker = this.index;\n    const input = this.input;\n    while (this.peek != quote) {\n      if (this.peek == $BACKSLASH) {\n        buffer += input.substring(marker, this.index);\n        let unescapedCode;\n        this.advance(); // mutates this.peek\n        // @ts-expect-error see microsoft/TypeScript#9998\n        if (this.peek == $u) {\n          // 4 character hex code for unicode character.\n          const hex = input.substring(this.index + 1, this.index + 5);\n          if (/^[0-9a-f]+$/i.test(hex)) {\n            unescapedCode = parseInt(hex, 16);\n          } else {\n            return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n          }\n          for (let i = 0; i < 5; i++) {\n            this.advance();\n          }\n        } else {\n          unescapedCode = unescape(this.peek);\n          this.advance();\n        }\n        buffer += String.fromCharCode(unescapedCode);\n        marker = this.index;\n      } else if (this.peek == $EOF) {\n        return this.error('Unterminated quote', 0);\n      } else {\n        this.advance();\n      }\n    }\n    const last = input.substring(marker, this.index);\n    this.advance(); // Skip terminating quote.\n    return newStringToken(start, this.index, buffer + last);\n  }\n  scanQuestion(start) {\n    this.advance();\n    let str = '?';\n    // Either `a ?? b` or 'a?.b'.\n    if (this.peek === $QUESTION || this.peek === $PERIOD) {\n      str += this.peek === $PERIOD ? '.' : '?';\n      this.advance();\n    }\n    return newOperatorToken(start, this.index, str);\n  }\n  error(message, offset) {\n    const position = this.index + offset;\n    return newErrorToken(position, this.index, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n  }\n}\nfunction isIdentifierStart(code) {\n  return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;\n}\nfunction isIdentifier(input) {\n  if (input.length == 0) return false;\n  const scanner = new _Scanner(input);\n  if (!isIdentifierStart(scanner.peek)) return false;\n  scanner.advance();\n  while (scanner.peek !== $EOF) {\n    if (!isIdentifierPart(scanner.peek)) return false;\n    scanner.advance();\n  }\n  return true;\n}\nfunction isIdentifierPart(code) {\n  return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;\n}\nfunction isExponentStart(code) {\n  return code == $e || code == $E;\n}\nfunction isExponentSign(code) {\n  return code == $MINUS || code == $PLUS;\n}\nfunction unescape(code) {\n  switch (code) {\n    case $n:\n      return $LF;\n    case $f:\n      return $FF;\n    case $r:\n      return $CR;\n    case $t:\n      return $TAB;\n    case $v:\n      return $VTAB;\n    default:\n      return code;\n  }\n}\nfunction parseIntAutoRadix(text) {\n  const result = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\nclass SplitInterpolation {\n  constructor(strings, expressions, offsets) {\n    this.strings = strings;\n    this.expressions = expressions;\n    this.offsets = offsets;\n  }\n}\nclass TemplateBindingParseResult {\n  constructor(templateBindings, warnings, errors) {\n    this.templateBindings = templateBindings;\n    this.warnings = warnings;\n    this.errors = errors;\n  }\n}\nclass Parser$1 {\n  constructor(_lexer) {\n    this._lexer = _lexer;\n    this.errors = [];\n  }\n  parseAction(input, isAssignmentEvent, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    this._checkNoInterpolation(input, location, interpolationConfig);\n    const sourceToLex = this._stripComments(input);\n    const tokens = this._lexer.tokenize(sourceToLex);\n    let flags = 1 /* ParseFlags.Action */;\n    if (isAssignmentEvent) {\n      flags |= 2 /* ParseFlags.AssignmentEvent */;\n    }\n    const ast = new _ParseAST(input, location, absoluteOffset, tokens, flags, this.errors, 0).parseChain();\n    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n  }\n  parseBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n  }\n  checkSimpleExpression(ast) {\n    const checker = new SimpleExpressionChecker();\n    ast.visit(checker);\n    return checker.errors;\n  }\n  // Host bindings parsed here\n  parseSimpleBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n    const errors = this.checkSimpleExpression(ast);\n    if (errors.length > 0) {\n      this._reportError(`Host binding expression cannot contain ${errors.join(' ')}`, input, location);\n    }\n    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n  }\n  _reportError(message, input, errLocation, ctxLocation) {\n    this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n  }\n  _parseBindingAst(input, location, absoluteOffset, interpolationConfig) {\n    this._checkNoInterpolation(input, location, interpolationConfig);\n    const sourceToLex = this._stripComments(input);\n    const tokens = this._lexer.tokenize(sourceToLex);\n    return new _ParseAST(input, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0).parseChain();\n  }\n  /**\n   * Parse microsyntax template expression and return a list of bindings or\n   * parsing errors in case the given expression is invalid.\n   *\n   * For example,\n   * ```\n   *   <div *ngFor=\"let item of items\">\n   *         ^      ^ absoluteValueOffset for `templateValue`\n   *         absoluteKeyOffset for `templateKey`\n   * ```\n   * contains three bindings:\n   * 1. ngFor -> null\n   * 2. item -> NgForOfContext.$implicit\n   * 3. ngForOf -> items\n   *\n   * This is apparent from the de-sugared template:\n   * ```\n   *   <ng-template ngFor let-item [ngForOf]=\"items\">\n   * ```\n   *\n   * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor\n   * @param templateValue RHS of the microsyntax attribute\n   * @param templateUrl template filename if it's external, component filename if it's inline\n   * @param absoluteKeyOffset start of the `templateKey`\n   * @param absoluteValueOffset start of the `templateValue`\n   */\n  parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {\n    const tokens = this._lexer.tokenize(templateValue);\n    const parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0 /* relative offset */);\n    return parser.parseTemplateBindings({\n      source: templateKey,\n      span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)\n    });\n  }\n  parseInterpolation(input, location, absoluteOffset, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    const {\n      strings,\n      expressions,\n      offsets\n    } = this.splitInterpolation(input, location, interpolatedTokens, interpolationConfig);\n    if (expressions.length === 0) return null;\n    const expressionNodes = [];\n    for (let i = 0; i < expressions.length; ++i) {\n      const expressionText = expressions[i].text;\n      const sourceToLex = this._stripComments(expressionText);\n      const tokens = this._lexer.tokenize(sourceToLex);\n      const ast = new _ParseAST(input, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, offsets[i]).parseChain();\n      expressionNodes.push(ast);\n    }\n    return this.createInterpolationAst(strings.map(s => s.text), expressionNodes, input, location, absoluteOffset);\n  }\n  /**\n   * Similar to `parseInterpolation`, but treats the provided string as a single expression\n   * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n   * This is used for parsing the switch expression in ICUs.\n   */\n  parseInterpolationExpression(expression, location, absoluteOffset) {\n    const sourceToLex = this._stripComments(expression);\n    const tokens = this._lexer.tokenize(sourceToLex);\n    const ast = new _ParseAST(expression, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0).parseChain();\n    const strings = ['', '']; // The prefix and suffix strings are both empty\n    return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);\n  }\n  createInterpolationAst(strings, expressions, input, location, absoluteOffset) {\n    const span = new ParseSpan(0, input.length);\n    const interpolation = new Interpolation$1(span, span.toAbsolute(absoluteOffset), strings, expressions);\n    return new ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);\n  }\n  /**\n   * Splits a string of text into \"raw\" text segments and expressions present in interpolations in\n   * the string.\n   * Returns `null` if there are no interpolations, otherwise a\n   * `SplitInterpolation` with splits that look like\n   *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>\n   */\n  splitInterpolation(input, location, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    const strings = [];\n    const expressions = [];\n    const offsets = [];\n    const inputToTemplateIndexMap = interpolatedTokens ? getIndexMapForOriginalTemplate(interpolatedTokens) : null;\n    let i = 0;\n    let atInterpolation = false;\n    let extendLastString = false;\n    let {\n      start: interpStart,\n      end: interpEnd\n    } = interpolationConfig;\n    while (i < input.length) {\n      if (!atInterpolation) {\n        // parse until starting {{\n        const start = i;\n        i = input.indexOf(interpStart, i);\n        if (i === -1) {\n          i = input.length;\n        }\n        const text = input.substring(start, i);\n        strings.push({\n          text,\n          start,\n          end: i\n        });\n        atInterpolation = true;\n      } else {\n        // parse from starting {{ to ending }} while ignoring content inside quotes.\n        const fullStart = i;\n        const exprStart = fullStart + interpStart.length;\n        const exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);\n        if (exprEnd === -1) {\n          // Could not find the end of the interpolation; do not parse an expression.\n          // Instead we should extend the content on the last raw string.\n          atInterpolation = false;\n          extendLastString = true;\n          break;\n        }\n        const fullEnd = exprEnd + interpEnd.length;\n        const text = input.substring(exprStart, exprEnd);\n        if (text.trim().length === 0) {\n          this._reportError('Blank expressions are not allowed in interpolated strings', input, `at column ${i} in`, location);\n        }\n        expressions.push({\n          text,\n          start: fullStart,\n          end: fullEnd\n        });\n        const startInOriginalTemplate = inputToTemplateIndexMap?.get(fullStart) ?? fullStart;\n        const offset = startInOriginalTemplate + interpStart.length;\n        offsets.push(offset);\n        i = fullEnd;\n        atInterpolation = false;\n      }\n    }\n    if (!atInterpolation) {\n      // If we are now at a text section, add the remaining content as a raw string.\n      if (extendLastString) {\n        const piece = strings[strings.length - 1];\n        piece.text += input.substring(i);\n        piece.end = input.length;\n      } else {\n        strings.push({\n          text: input.substring(i),\n          start: i,\n          end: input.length\n        });\n      }\n    }\n    return new SplitInterpolation(strings, expressions, offsets);\n  }\n  wrapLiteralPrimitive(input, location, absoluteOffset) {\n    const span = new ParseSpan(0, input == null ? 0 : input.length);\n    return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);\n  }\n  _stripComments(input) {\n    const i = this._commentStart(input);\n    return i != null ? input.substring(0, i) : input;\n  }\n  _commentStart(input) {\n    let outerQuote = null;\n    for (let i = 0; i < input.length - 1; i++) {\n      const char = input.charCodeAt(i);\n      const nextChar = input.charCodeAt(i + 1);\n      if (char === $SLASH && nextChar == $SLASH && outerQuote == null) return i;\n      if (outerQuote === char) {\n        outerQuote = null;\n      } else if (outerQuote == null && isQuote(char)) {\n        outerQuote = char;\n      }\n    }\n    return null;\n  }\n  _checkNoInterpolation(input, location, {\n    start,\n    end\n  }) {\n    let startIndex = -1;\n    let endIndex = -1;\n    for (const charIndex of this._forEachUnquotedChar(input, 0)) {\n      if (startIndex === -1) {\n        if (input.startsWith(start)) {\n          startIndex = charIndex;\n        }\n      } else {\n        endIndex = this._getInterpolationEndIndex(input, end, charIndex);\n        if (endIndex > -1) {\n          break;\n        }\n      }\n    }\n    if (startIndex > -1 && endIndex > -1) {\n      this._reportError(`Got interpolation (${start}${end}) where expression was expected`, input, `at column ${startIndex} in`, location);\n    }\n  }\n  /**\n   * Finds the index of the end of an interpolation expression\n   * while ignoring comments and quoted content.\n   */\n  _getInterpolationEndIndex(input, expressionEnd, start) {\n    for (const charIndex of this._forEachUnquotedChar(input, start)) {\n      if (input.startsWith(expressionEnd, charIndex)) {\n        return charIndex;\n      }\n      // Nothing else in the expression matters after we've\n      // hit a comment so look directly for the end token.\n      if (input.startsWith('//', charIndex)) {\n        return input.indexOf(expressionEnd, charIndex);\n      }\n    }\n    return -1;\n  }\n  /**\n   * Generator used to iterate over the character indexes of a string that are outside of quotes.\n   * @param input String to loop through.\n   * @param start Index within the string at which to start.\n   */\n  *_forEachUnquotedChar(input, start) {\n    let currentQuote = null;\n    let escapeCount = 0;\n    for (let i = start; i < input.length; i++) {\n      const char = input[i];\n      // Skip the characters inside quotes. Note that we only care about the outer-most\n      // quotes matching up and we need to account for escape characters.\n      if (isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === char) && escapeCount % 2 === 0) {\n        currentQuote = currentQuote === null ? char : null;\n      } else if (currentQuote === null) {\n        yield i;\n      }\n      escapeCount = char === '\\\\' ? escapeCount + 1 : 0;\n    }\n  }\n}\n/** Describes a stateful context an expression parser is in. */\nvar ParseContextFlags;\n(function (ParseContextFlags) {\n  ParseContextFlags[ParseContextFlags[\"None\"] = 0] = \"None\";\n  /**\n   * A Writable context is one in which a value may be written to an lvalue.\n   * For example, after we see a property access, we may expect a write to the\n   * property via the \"=\" operator.\n   *   prop\n   *        ^ possible \"=\" after\n   */\n  ParseContextFlags[ParseContextFlags[\"Writable\"] = 1] = \"Writable\";\n})(ParseContextFlags || (ParseContextFlags = {}));\nclass _ParseAST {\n  constructor(input, location, absoluteOffset, tokens, parseFlags, errors, offset) {\n    this.input = input;\n    this.location = location;\n    this.absoluteOffset = absoluteOffset;\n    this.tokens = tokens;\n    this.parseFlags = parseFlags;\n    this.errors = errors;\n    this.offset = offset;\n    this.rparensExpected = 0;\n    this.rbracketsExpected = 0;\n    this.rbracesExpected = 0;\n    this.context = ParseContextFlags.None;\n    // Cache of expression start and input indeces to the absolute source span they map to, used to\n    // prevent creating superfluous source spans in `sourceSpan`.\n    // A serial of the expression start and input index is used for mapping because both are stateful\n    // and may change for subsequent expressions visited by the parser.\n    this.sourceSpanCache = new Map();\n    this.index = 0;\n  }\n  peek(offset) {\n    const i = this.index + offset;\n    return i < this.tokens.length ? this.tokens[i] : EOF;\n  }\n  get next() {\n    return this.peek(0);\n  }\n  /** Whether all the parser input has been processed. */\n  get atEOF() {\n    return this.index >= this.tokens.length;\n  }\n  /**\n   * Index of the next token to be processed, or the end of the last token if all have been\n   * processed.\n   */\n  get inputIndex() {\n    return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;\n  }\n  /**\n   * End index of the last processed token, or the start of the first token if none have been\n   * processed.\n   */\n  get currentEndIndex() {\n    if (this.index > 0) {\n      const curToken = this.peek(-1);\n      return curToken.end + this.offset;\n    }\n    // No tokens have been processed yet; return the next token's start or the length of the input\n    // if there is no token.\n    if (this.tokens.length === 0) {\n      return this.input.length + this.offset;\n    }\n    return this.next.index + this.offset;\n  }\n  /**\n   * Returns the absolute offset of the start of the current token.\n   */\n  get currentAbsoluteOffset() {\n    return this.absoluteOffset + this.inputIndex;\n  }\n  /**\n   * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if\n   * provided).\n   *\n   * @param start Position from which the `ParseSpan` will start.\n   * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the\n   *     natural ending index)\n   */\n  span(start, artificialEndIndex) {\n    let endIndex = this.currentEndIndex;\n    if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {\n      endIndex = artificialEndIndex;\n    }\n    // In some unusual parsing scenarios (like when certain tokens are missing and an `EmptyExpr` is\n    // being created), the current token may already be advanced beyond the `currentEndIndex`. This\n    // appears to be a deep-seated parser bug.\n    //\n    // As a workaround for now, swap the start and end indices to ensure a valid `ParseSpan`.\n    // TODO(alxhub): fix the bug upstream in the parser state, and remove this workaround.\n    if (start > endIndex) {\n      const tmp = endIndex;\n      endIndex = start;\n      start = tmp;\n    }\n    return new ParseSpan(start, endIndex);\n  }\n  sourceSpan(start, artificialEndIndex) {\n    const serial = `${start}@${this.inputIndex}:${artificialEndIndex}`;\n    if (!this.sourceSpanCache.has(serial)) {\n      this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));\n    }\n    return this.sourceSpanCache.get(serial);\n  }\n  advance() {\n    this.index++;\n  }\n  /**\n   * Executes a callback in the provided context.\n   */\n  withContext(context, cb) {\n    this.context |= context;\n    const ret = cb();\n    this.context ^= context;\n    return ret;\n  }\n  consumeOptionalCharacter(code) {\n    if (this.next.isCharacter(code)) {\n      this.advance();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  peekKeywordLet() {\n    return this.next.isKeywordLet();\n  }\n  peekKeywordAs() {\n    return this.next.isKeywordAs();\n  }\n  /**\n   * Consumes an expected character, otherwise emits an error about the missing expected character\n   * and skips over the token stream until reaching a recoverable point.\n   *\n   * See `this.error` and `this.skip` for more details.\n   */\n  expectCharacter(code) {\n    if (this.consumeOptionalCharacter(code)) return;\n    this.error(`Missing expected ${String.fromCharCode(code)}`);\n  }\n  consumeOptionalOperator(op) {\n    if (this.next.isOperator(op)) {\n      this.advance();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  expectOperator(operator) {\n    if (this.consumeOptionalOperator(operator)) return;\n    this.error(`Missing expected operator ${operator}`);\n  }\n  prettyPrintToken(tok) {\n    return tok === EOF ? 'end of input' : `token ${tok}`;\n  }\n  expectIdentifierOrKeyword() {\n    const n = this.next;\n    if (!n.isIdentifier() && !n.isKeyword()) {\n      if (n.isPrivateIdentifier()) {\n        this._reportErrorForPrivateIdentifier(n, 'expected identifier or keyword');\n      } else {\n        this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier or keyword`);\n      }\n      return null;\n    }\n    this.advance();\n    return n.toString();\n  }\n  expectIdentifierOrKeywordOrString() {\n    const n = this.next;\n    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n      if (n.isPrivateIdentifier()) {\n        this._reportErrorForPrivateIdentifier(n, 'expected identifier, keyword or string');\n      } else {\n        this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier, keyword, or string`);\n      }\n      return '';\n    }\n    this.advance();\n    return n.toString();\n  }\n  parseChain() {\n    const exprs = [];\n    const start = this.inputIndex;\n    while (this.index < this.tokens.length) {\n      const expr = this.parsePipe();\n      exprs.push(expr);\n      if (this.consumeOptionalCharacter($SEMICOLON)) {\n        if (!(this.parseFlags & 1 /* ParseFlags.Action */)) {\n          this.error('Binding expression cannot contain chained expression');\n        }\n        while (this.consumeOptionalCharacter($SEMICOLON)) {} // read all semicolons\n      } else if (this.index < this.tokens.length) {\n        const errorIndex = this.index;\n        this.error(`Unexpected token '${this.next}'`);\n        // The `error` call above will skip ahead to the next recovery point in an attempt to\n        // recover part of the expression, but that might be the token we started from which will\n        // lead to an infinite loop. If that's the case, break the loop assuming that we can't\n        // parse further.\n        if (this.index === errorIndex) {\n          break;\n        }\n      }\n    }\n    if (exprs.length === 0) {\n      // We have no expressions so create an empty expression that spans the entire input length\n      const artificialStart = this.offset;\n      const artificialEnd = this.offset + this.input.length;\n      return new EmptyExpr$1(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));\n    }\n    if (exprs.length == 1) return exprs[0];\n    return new Chain(this.span(start), this.sourceSpan(start), exprs);\n  }\n  parsePipe() {\n    const start = this.inputIndex;\n    let result = this.parseExpression();\n    if (this.consumeOptionalOperator('|')) {\n      if (this.parseFlags & 1 /* ParseFlags.Action */) {\n        this.error('Cannot have a pipe in an action expression');\n      }\n      do {\n        const nameStart = this.inputIndex;\n        let nameId = this.expectIdentifierOrKeyword();\n        let nameSpan;\n        let fullSpanEnd = undefined;\n        if (nameId !== null) {\n          nameSpan = this.sourceSpan(nameStart);\n        } else {\n          // No valid identifier was found, so we'll assume an empty pipe name ('').\n          nameId = '';\n          // However, there may have been whitespace present between the pipe character and the next\n          // token in the sequence (or the end of input). We want to track this whitespace so that\n          // the `BindingPipe` we produce covers not just the pipe character, but any trailing\n          // whitespace beyond it. Another way of thinking about this is that the zero-length name\n          // is assumed to be at the end of any whitespace beyond the pipe character.\n          //\n          // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the\n          // beginning of the next token, or until the end of input if the next token is EOF.\n          fullSpanEnd = this.next.index !== -1 ? this.next.index : this.input.length + this.offset;\n          // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace\n          // beyond the pipe character.\n          nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);\n        }\n        const args = [];\n        while (this.consumeOptionalCharacter($COLON)) {\n          args.push(this.parseExpression());\n          // If there are additional expressions beyond the name, then the artificial end for the\n          // name is no longer relevant.\n        }\n        result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);\n      } while (this.consumeOptionalOperator('|'));\n    }\n    return result;\n  }\n  parseExpression() {\n    return this.parseConditional();\n  }\n  parseConditional() {\n    const start = this.inputIndex;\n    const result = this.parseLogicalOr();\n    if (this.consumeOptionalOperator('?')) {\n      const yes = this.parsePipe();\n      let no;\n      if (!this.consumeOptionalCharacter($COLON)) {\n        const end = this.inputIndex;\n        const expression = this.input.substring(start, end);\n        this.error(`Conditional expression ${expression} requires all 3 expressions`);\n        no = new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n      } else {\n        no = this.parsePipe();\n      }\n      return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);\n    } else {\n      return result;\n    }\n  }\n  parseLogicalOr() {\n    // '||'\n    const start = this.inputIndex;\n    let result = this.parseLogicalAnd();\n    while (this.consumeOptionalOperator('||')) {\n      const right = this.parseLogicalAnd();\n      result = new Binary(this.span(start), this.sourceSpan(start), '||', result, right);\n    }\n    return result;\n  }\n  parseLogicalAnd() {\n    // '&&'\n    const start = this.inputIndex;\n    let result = this.parseNullishCoalescing();\n    while (this.consumeOptionalOperator('&&')) {\n      const right = this.parseNullishCoalescing();\n      result = new Binary(this.span(start), this.sourceSpan(start), '&&', result, right);\n    }\n    return result;\n  }\n  parseNullishCoalescing() {\n    // '??'\n    const start = this.inputIndex;\n    let result = this.parseEquality();\n    while (this.consumeOptionalOperator('??')) {\n      const right = this.parseEquality();\n      result = new Binary(this.span(start), this.sourceSpan(start), '??', result, right);\n    }\n    return result;\n  }\n  parseEquality() {\n    // '==','!=','===','!=='\n    const start = this.inputIndex;\n    let result = this.parseRelational();\n    while (this.next.type == TokenType.Operator) {\n      const operator = this.next.strValue;\n      switch (operator) {\n        case '==':\n        case '===':\n        case '!=':\n        case '!==':\n          this.advance();\n          const right = this.parseRelational();\n          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n          continue;\n      }\n      break;\n    }\n    return result;\n  }\n  parseRelational() {\n    // '<', '>', '<=', '>='\n    const start = this.inputIndex;\n    let result = this.parseAdditive();\n    while (this.next.type == TokenType.Operator) {\n      const operator = this.next.strValue;\n      switch (operator) {\n        case '<':\n        case '>':\n        case '<=':\n        case '>=':\n          this.advance();\n          const right = this.parseAdditive();\n          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n          continue;\n      }\n      break;\n    }\n    return result;\n  }\n  parseAdditive() {\n    // '+', '-'\n    const start = this.inputIndex;\n    let result = this.parseMultiplicative();\n    while (this.next.type == TokenType.Operator) {\n      const operator = this.next.strValue;\n      switch (operator) {\n        case '+':\n        case '-':\n          this.advance();\n          let right = this.parseMultiplicative();\n          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n          continue;\n      }\n      break;\n    }\n    return result;\n  }\n  parseMultiplicative() {\n    // '*', '%', '/'\n    const start = this.inputIndex;\n    let result = this.parsePrefix();\n    while (this.next.type == TokenType.Operator) {\n      const operator = this.next.strValue;\n      switch (operator) {\n        case '*':\n        case '%':\n        case '/':\n          this.advance();\n          let right = this.parsePrefix();\n          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n          continue;\n      }\n      break;\n    }\n    return result;\n  }\n  parsePrefix() {\n    if (this.next.type == TokenType.Operator) {\n      const start = this.inputIndex;\n      const operator = this.next.strValue;\n      let result;\n      switch (operator) {\n        case '+':\n          this.advance();\n          result = this.parsePrefix();\n          return Unary.createPlus(this.span(start), this.sourceSpan(start), result);\n        case '-':\n          this.advance();\n          result = this.parsePrefix();\n          return Unary.createMinus(this.span(start), this.sourceSpan(start), result);\n        case '!':\n          this.advance();\n          result = this.parsePrefix();\n          return new PrefixNot(this.span(start), this.sourceSpan(start), result);\n      }\n    }\n    return this.parseCallChain();\n  }\n  parseCallChain() {\n    const start = this.inputIndex;\n    let result = this.parsePrimary();\n    while (true) {\n      if (this.consumeOptionalCharacter($PERIOD)) {\n        result = this.parseAccessMember(result, start, false);\n      } else if (this.consumeOptionalOperator('?.')) {\n        if (this.consumeOptionalCharacter($LPAREN)) {\n          result = this.parseCall(result, start, true);\n        } else {\n          result = this.consumeOptionalCharacter($LBRACKET) ? this.parseKeyedReadOrWrite(result, start, true) : this.parseAccessMember(result, start, true);\n        }\n      } else if (this.consumeOptionalCharacter($LBRACKET)) {\n        result = this.parseKeyedReadOrWrite(result, start, false);\n      } else if (this.consumeOptionalCharacter($LPAREN)) {\n        result = this.parseCall(result, start, false);\n      } else if (this.consumeOptionalOperator('!')) {\n        result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);\n      } else {\n        return result;\n      }\n    }\n  }\n  parsePrimary() {\n    const start = this.inputIndex;\n    if (this.consumeOptionalCharacter($LPAREN)) {\n      this.rparensExpected++;\n      const result = this.parsePipe();\n      this.rparensExpected--;\n      this.expectCharacter($RPAREN);\n      return result;\n    } else if (this.next.isKeywordNull()) {\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);\n    } else if (this.next.isKeywordUndefined()) {\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);\n    } else if (this.next.isKeywordTrue()) {\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);\n    } else if (this.next.isKeywordFalse()) {\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);\n    } else if (this.next.isKeywordThis()) {\n      this.advance();\n      return new ThisReceiver(this.span(start), this.sourceSpan(start));\n    } else if (this.consumeOptionalCharacter($LBRACKET)) {\n      this.rbracketsExpected++;\n      const elements = this.parseExpressionList($RBRACKET);\n      this.rbracketsExpected--;\n      this.expectCharacter($RBRACKET);\n      return new LiteralArray(this.span(start), this.sourceSpan(start), elements);\n    } else if (this.next.isCharacter($LBRACE)) {\n      return this.parseLiteralMap();\n    } else if (this.next.isIdentifier()) {\n      return this.parseAccessMember(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);\n    } else if (this.next.isNumber()) {\n      const value = this.next.toNumber();\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);\n    } else if (this.next.isString()) {\n      const literalValue = this.next.toString();\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);\n    } else if (this.next.isPrivateIdentifier()) {\n      this._reportErrorForPrivateIdentifier(this.next, null);\n      return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n    } else if (this.index >= this.tokens.length) {\n      this.error(`Unexpected end of expression: ${this.input}`);\n      return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n    } else {\n      this.error(`Unexpected token ${this.next}`);\n      return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n    }\n  }\n  parseExpressionList(terminator) {\n    const result = [];\n    do {\n      if (!this.next.isCharacter(terminator)) {\n        result.push(this.parsePipe());\n      } else {\n        break;\n      }\n    } while (this.consumeOptionalCharacter($COMMA));\n    return result;\n  }\n  parseLiteralMap() {\n    const keys = [];\n    const values = [];\n    const start = this.inputIndex;\n    this.expectCharacter($LBRACE);\n    if (!this.consumeOptionalCharacter($RBRACE)) {\n      this.rbracesExpected++;\n      do {\n        const keyStart = this.inputIndex;\n        const quoted = this.next.isString();\n        const key = this.expectIdentifierOrKeywordOrString();\n        keys.push({\n          key,\n          quoted\n        });\n        // Properties with quoted keys can't use the shorthand syntax.\n        if (quoted) {\n          this.expectCharacter($COLON);\n          values.push(this.parsePipe());\n        } else if (this.consumeOptionalCharacter($COLON)) {\n          values.push(this.parsePipe());\n        } else {\n          const span = this.span(keyStart);\n          const sourceSpan = this.sourceSpan(keyStart);\n          values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));\n        }\n      } while (this.consumeOptionalCharacter($COMMA) && !this.next.isCharacter($RBRACE));\n      this.rbracesExpected--;\n      this.expectCharacter($RBRACE);\n    }\n    return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);\n  }\n  parseAccessMember(readReceiver, start, isSafe) {\n    const nameStart = this.inputIndex;\n    const id = this.withContext(ParseContextFlags.Writable, () => {\n      const id = this.expectIdentifierOrKeyword() ?? '';\n      if (id.length === 0) {\n        this.error(`Expected identifier for property access`, readReceiver.span.end);\n      }\n      return id;\n    });\n    const nameSpan = this.sourceSpan(nameStart);\n    let receiver;\n    if (isSafe) {\n      if (this.consumeOptionalAssignment()) {\n        this.error('The \\'?.\\' operator cannot be used in the assignment');\n        receiver = new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n      } else {\n        receiver = new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);\n      }\n    } else {\n      if (this.consumeOptionalAssignment()) {\n        if (!(this.parseFlags & 1 /* ParseFlags.Action */)) {\n          this.error('Bindings cannot contain assignments');\n          return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n        }\n        const value = this.parseConditional();\n        receiver = new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id, value);\n      } else {\n        receiver = new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);\n      }\n    }\n    return receiver;\n  }\n  parseCall(receiver, start, isSafe) {\n    const argumentStart = this.inputIndex;\n    this.rparensExpected++;\n    const args = this.parseCallArguments();\n    const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n    this.expectCharacter($RPAREN);\n    this.rparensExpected--;\n    const span = this.span(start);\n    const sourceSpan = this.sourceSpan(start);\n    return isSafe ? new SafeCall(span, sourceSpan, receiver, args, argumentSpan) : new Call(span, sourceSpan, receiver, args, argumentSpan);\n  }\n  consumeOptionalAssignment() {\n    // When parsing assignment events (originating from two-way-binding aka banana-in-a-box syntax),\n    // it is valid for the primary expression to be terminated by the non-null operator. This\n    // primary expression is substituted as LHS of the assignment operator to achieve\n    // two-way-binding, such that the LHS could be the non-null operator. The grammar doesn't\n    // naturally allow for this syntax, so assignment events are parsed specially.\n    if (this.parseFlags & 2 /* ParseFlags.AssignmentEvent */ && this.next.isOperator('!') && this.peek(1).isOperator('=')) {\n      // First skip over the ! operator.\n      this.advance();\n      // Then skip over the = operator, to fully consume the optional assignment operator.\n      this.advance();\n      return true;\n    }\n    return this.consumeOptionalOperator('=');\n  }\n  parseCallArguments() {\n    if (this.next.isCharacter($RPAREN)) return [];\n    const positionals = [];\n    do {\n      positionals.push(this.parsePipe());\n    } while (this.consumeOptionalCharacter($COMMA));\n    return positionals;\n  }\n  /**\n   * Parses an identifier, a keyword, a string with an optional `-` in between,\n   * and returns the string along with its absolute source span.\n   */\n  expectTemplateBindingKey() {\n    let result = '';\n    let operatorFound = false;\n    const start = this.currentAbsoluteOffset;\n    do {\n      result += this.expectIdentifierOrKeywordOrString();\n      operatorFound = this.consumeOptionalOperator('-');\n      if (operatorFound) {\n        result += '-';\n      }\n    } while (operatorFound);\n    return {\n      source: result,\n      span: new AbsoluteSourceSpan(start, start + result.length)\n    };\n  }\n  /**\n   * Parse microsyntax template expression and return a list of bindings or\n   * parsing errors in case the given expression is invalid.\n   *\n   * For example,\n   * ```\n   *   <div *ngFor=\"let item of items; index as i; trackBy: func\">\n   * ```\n   * contains five bindings:\n   * 1. ngFor -> null\n   * 2. item -> NgForOfContext.$implicit\n   * 3. ngForOf -> items\n   * 4. i -> NgForOfContext.index\n   * 5. ngForTrackBy -> func\n   *\n   * For a full description of the microsyntax grammar, see\n   * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855\n   *\n   * @param templateKey name of the microsyntax directive, like ngIf, ngFor,\n   * without the *, along with its absolute span.\n   */\n  parseTemplateBindings(templateKey) {\n    const bindings = [];\n    // The first binding is for the template key itself\n    // In *ngFor=\"let item of items\", key = \"ngFor\", value = null\n    // In *ngIf=\"cond | pipe\", key = \"ngIf\", value = \"cond | pipe\"\n    bindings.push(...this.parseDirectiveKeywordBindings(templateKey));\n    while (this.index < this.tokens.length) {\n      // If it starts with 'let', then this must be variable declaration\n      const letBinding = this.parseLetBinding();\n      if (letBinding) {\n        bindings.push(letBinding);\n      } else {\n        // Two possible cases here, either `value \"as\" key` or\n        // \"directive-keyword expression\". We don't know which case, but both\n        // \"value\" and \"directive-keyword\" are template binding key, so consume\n        // the key first.\n        const key = this.expectTemplateBindingKey();\n        // Peek at the next token, if it is \"as\" then this must be variable\n        // declaration.\n        const binding = this.parseAsBinding(key);\n        if (binding) {\n          bindings.push(binding);\n        } else {\n          // Otherwise the key must be a directive keyword, like \"of\". Transform\n          // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy\n          key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);\n          bindings.push(...this.parseDirectiveKeywordBindings(key));\n        }\n      }\n      this.consumeStatementTerminator();\n    }\n    return new TemplateBindingParseResult(bindings, [] /* warnings */, this.errors);\n  }\n  parseKeyedReadOrWrite(receiver, start, isSafe) {\n    return this.withContext(ParseContextFlags.Writable, () => {\n      this.rbracketsExpected++;\n      const key = this.parsePipe();\n      if (key instanceof EmptyExpr$1) {\n        this.error(`Key access cannot be empty`);\n      }\n      this.rbracketsExpected--;\n      this.expectCharacter($RBRACKET);\n      if (this.consumeOptionalOperator('=')) {\n        if (isSafe) {\n          this.error('The \\'?.\\' operator cannot be used in the assignment');\n        } else {\n          const value = this.parseConditional();\n          return new KeyedWrite(this.span(start), this.sourceSpan(start), receiver, key, value);\n        }\n      } else {\n        return isSafe ? new SafeKeyedRead(this.span(start), this.sourceSpan(start), receiver, key) : new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);\n      }\n      return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n    });\n  }\n  /**\n   * Parse a directive keyword, followed by a mandatory expression.\n   * For example, \"of items\", \"trackBy: func\".\n   * The bindings are: ngForOf -> items, ngForTrackBy -> func\n   * There could be an optional \"as\" binding that follows the expression.\n   * For example,\n   * ```\n   *   *ngFor=\"let item of items | slice:0:1 as collection\".\n   *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^\n   *               keyword    bound target   optional 'as' binding\n   * ```\n   *\n   * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its\n   * absolute span.\n   */\n  parseDirectiveKeywordBindings(key) {\n    const bindings = [];\n    this.consumeOptionalCharacter($COLON); // trackBy: trackByFunction\n    const value = this.getDirectiveBoundTarget();\n    let spanEnd = this.currentAbsoluteOffset;\n    // The binding could optionally be followed by \"as\". For example,\n    // *ngIf=\"cond | pipe as x\". In this case, the key in the \"as\" binding\n    // is \"x\" and the value is the template key itself (\"ngIf\"). Note that the\n    // 'key' in the current context now becomes the \"value\" in the next binding.\n    const asBinding = this.parseAsBinding(key);\n    if (!asBinding) {\n      this.consumeStatementTerminator();\n      spanEnd = this.currentAbsoluteOffset;\n    }\n    const sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);\n    bindings.push(new ExpressionBinding(sourceSpan, key, value));\n    if (asBinding) {\n      bindings.push(asBinding);\n    }\n    return bindings;\n  }\n  /**\n   * Return the expression AST for the bound target of a directive keyword\n   * binding. For example,\n   * ```\n   *   *ngIf=\"condition | pipe\"\n   *          ^^^^^^^^^^^^^^^^ bound target for \"ngIf\"\n   *   *ngFor=\"let item of items\"\n   *                       ^^^^^ bound target for \"ngForOf\"\n   * ```\n   */\n  getDirectiveBoundTarget() {\n    if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {\n      return null;\n    }\n    const ast = this.parsePipe(); // example: \"condition | async\"\n    const {\n      start,\n      end\n    } = ast.span;\n    const value = this.input.substring(start, end);\n    return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);\n  }\n  /**\n   * Return the binding for a variable declared using `as`. Note that the order\n   * of the key-value pair in this declaration is reversed. For example,\n   * ```\n   *   *ngFor=\"let item of items; index as i\"\n   *                              ^^^^^    ^\n   *                              value    key\n   * ```\n   *\n   * @param value name of the value in the declaration, \"ngIf\" in the example\n   * above, along with its absolute span.\n   */\n  parseAsBinding(value) {\n    if (!this.peekKeywordAs()) {\n      return null;\n    }\n    this.advance(); // consume the 'as' keyword\n    const key = this.expectTemplateBindingKey();\n    this.consumeStatementTerminator();\n    const sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);\n    return new VariableBinding(sourceSpan, key, value);\n  }\n  /**\n   * Return the binding for a variable declared using `let`. For example,\n   * ```\n   *   *ngFor=\"let item of items; let i=index;\"\n   *           ^^^^^^^^           ^^^^^^^^^^^\n   * ```\n   * In the first binding, `item` is bound to `NgForOfContext.$implicit`.\n   * In the second binding, `i` is bound to `NgForOfContext.index`.\n   */\n  parseLetBinding() {\n    if (!this.peekKeywordLet()) {\n      return null;\n    }\n    const spanStart = this.currentAbsoluteOffset;\n    this.advance(); // consume the 'let' keyword\n    const key = this.expectTemplateBindingKey();\n    let value = null;\n    if (this.consumeOptionalOperator('=')) {\n      value = this.expectTemplateBindingKey();\n    }\n    this.consumeStatementTerminator();\n    const sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);\n    return new VariableBinding(sourceSpan, key, value);\n  }\n  /**\n   * Consume the optional statement terminator: semicolon or comma.\n   */\n  consumeStatementTerminator() {\n    this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);\n  }\n  /**\n   * Records an error and skips over the token stream until reaching a recoverable point. See\n   * `this.skip` for more details on token skipping.\n   */\n  error(message, index = null) {\n    this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n    this.skip();\n  }\n  locationText(index = null) {\n    if (index == null) index = this.index;\n    return index < this.tokens.length ? `at column ${this.tokens[index].index + 1} in` : `at the end of the expression`;\n  }\n  /**\n   * Records an error for an unexpected private identifier being discovered.\n   * @param token Token representing a private identifier.\n   * @param extraMessage Optional additional message being appended to the error.\n   */\n  _reportErrorForPrivateIdentifier(token, extraMessage) {\n    let errorMessage = `Private identifiers are not supported. Unexpected private identifier: ${token}`;\n    if (extraMessage !== null) {\n      errorMessage += `, ${extraMessage}`;\n    }\n    this.error(errorMessage);\n  }\n  /**\n   * Error recovery should skip tokens until it encounters a recovery point.\n   *\n   * The following are treated as unconditional recovery points:\n   *   - end of input\n   *   - ';' (parseChain() is always the root production, and it expects a ';')\n   *   - '|' (since pipes may be chained and each pipe expression may be treated independently)\n   *\n   * The following are conditional recovery points:\n   *   - ')', '}', ']' if one of calling productions is expecting one of these symbols\n   *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to\n   *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins\n   *       an '(' <expr> ')' production).\n   *       The recovery points of grouping symbols must be conditional as they must be skipped if\n   *       none of the calling productions are not expecting the closing token else we will never\n   *       make progress in the case of an extraneous group closing symbol (such as a stray ')').\n   *       That is, we skip a closing symbol if we are not in a grouping production.\n   *   - '=' in a `Writable` context\n   *     - In this context, we are able to recover after seeing the `=` operator, which\n   *       signals the presence of an independent rvalue expression following the `=` operator.\n   *\n   * If a production expects one of these token it increments the corresponding nesting count,\n   * and then decrements it just prior to checking if the token is in the input.\n   */\n  skip() {\n    let n = this.next;\n    while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {\n      if (this.next.isError()) {\n        this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n      }\n      this.advance();\n      n = this.next;\n    }\n  }\n}\nclass SimpleExpressionChecker extends RecursiveAstVisitor {\n  constructor() {\n    super(...arguments);\n    this.errors = [];\n  }\n  visitPipe() {\n    this.errors.push('pipes');\n  }\n}\n/**\n * Computes the real offset in the original template for indexes in an interpolation.\n *\n * Because templates can have encoded HTML entities and the input passed to the parser at this stage\n * of the compiler is the _decoded_ value, we need to compute the real offset using the original\n * encoded values in the interpolated tokens. Note that this is only a special case handling for\n * `MlParserTokenType.ENCODED_ENTITY` token types. All other interpolated tokens are expected to\n * have parts which exactly match the input string for parsing the interpolation.\n *\n * @param interpolatedTokens The tokens for the interpolated value.\n *\n * @returns A map of index locations in the decoded template to indexes in the original template\n */\nfunction getIndexMapForOriginalTemplate(interpolatedTokens) {\n  let offsetMap = new Map();\n  let consumedInOriginalTemplate = 0;\n  let consumedInInput = 0;\n  let tokenIndex = 0;\n  while (tokenIndex < interpolatedTokens.length) {\n    const currentToken = interpolatedTokens[tokenIndex];\n    if (currentToken.type === 9 /* MlParserTokenType.ENCODED_ENTITY */) {\n      const [decoded, encoded] = currentToken.parts;\n      consumedInOriginalTemplate += encoded.length;\n      consumedInInput += decoded.length;\n    } else {\n      const lengthOfParts = currentToken.parts.reduce((sum, current) => sum + current.length, 0);\n      consumedInInput += lengthOfParts;\n      consumedInOriginalTemplate += lengthOfParts;\n    }\n    offsetMap.set(consumedInInput, consumedInOriginalTemplate);\n    tokenIndex++;\n  }\n  return offsetMap;\n}\nclass NodeWithI18n {\n  constructor(sourceSpan, i18n) {\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n  }\n}\nclass Text extends NodeWithI18n {\n  constructor(value, sourceSpan, tokens, i18n) {\n    super(sourceSpan, i18n);\n    this.value = value;\n    this.tokens = tokens;\n  }\n  visit(visitor, context) {\n    return visitor.visitText(this, context);\n  }\n}\nclass Expansion extends NodeWithI18n {\n  constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {\n    super(sourceSpan, i18n);\n    this.switchValue = switchValue;\n    this.type = type;\n    this.cases = cases;\n    this.switchValueSourceSpan = switchValueSourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitExpansion(this, context);\n  }\n}\nclass ExpansionCase {\n  constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n    this.value = value;\n    this.expression = expression;\n    this.sourceSpan = sourceSpan;\n    this.valueSourceSpan = valueSourceSpan;\n    this.expSourceSpan = expSourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitExpansionCase(this, context);\n  }\n}\nclass Attribute extends NodeWithI18n {\n  constructor(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n) {\n    super(sourceSpan, i18n);\n    this.name = name;\n    this.value = value;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.valueTokens = valueTokens;\n  }\n  visit(visitor, context) {\n    return visitor.visitAttribute(this, context);\n  }\n}\nclass Element extends NodeWithI18n {\n  constructor(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan = null, i18n) {\n    super(sourceSpan, i18n);\n    this.name = name;\n    this.attrs = attrs;\n    this.children = children;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitElement(this, context);\n  }\n}\nclass Comment {\n  constructor(value, sourceSpan) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitComment(this, context);\n  }\n}\nclass Block extends NodeWithI18n {\n  constructor(name, parameters, children, sourceSpan, nameSpan, startSourceSpan, endSourceSpan = null, i18n) {\n    super(sourceSpan, i18n);\n    this.name = name;\n    this.parameters = parameters;\n    this.children = children;\n    this.nameSpan = nameSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitBlock(this, context);\n  }\n}\nclass BlockParameter {\n  constructor(expression, sourceSpan) {\n    this.expression = expression;\n    this.sourceSpan = sourceSpan;\n  }\n  visit(visitor, context) {\n    return visitor.visitBlockParameter(this, context);\n  }\n}\nfunction visitAll(visitor, nodes, context = null) {\n  const result = [];\n  const visit = visitor.visit ? ast => visitor.visit(ast, context) || ast.visit(visitor, context) : ast => ast.visit(visitor, context);\n  nodes.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\nclass RecursiveVisitor {\n  constructor() {}\n  visitElement(ast, context) {\n    this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.children);\n    });\n  }\n  visitAttribute(ast, context) {}\n  visitText(ast, context) {}\n  visitComment(ast, context) {}\n  visitExpansion(ast, context) {\n    return this.visitChildren(context, visit => {\n      visit(ast.cases);\n    });\n  }\n  visitExpansionCase(ast, context) {}\n  visitBlock(block, context) {\n    this.visitChildren(context, visit => {\n      visit(block.parameters);\n      visit(block.children);\n    });\n  }\n  visitBlockParameter(ast, context) {}\n  visitChildren(context, cb) {\n    let results = [];\n    let t = this;\n    function visit(children) {\n      if (children) results.push(visitAll(t, children, context));\n    }\n    cb(visit);\n    return Array.prototype.concat.apply([], results);\n  }\n}\nclass ElementSchemaRegistry {}\nconst BOOLEAN = 'boolean';\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst OBJECT = 'object';\n/**\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\n *\n * ## Overview\n *\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\n * using `element_inheritance|properties` syntax.\n *\n * ## Element Inheritance\n *\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n * Here the individual elements are separated by `,` (commas). Every element in the list\n * has identical properties.\n *\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n * specified then `\"\"` (blank) element is assumed.\n *\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\n * elements.\n *\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n *\n * ## Properties\n *\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n * by a special character designating its type:\n *\n * - (no prefix): property is a string.\n * - `*`: property represents an event.\n * - `!`: property is a boolean.\n * - `#`: property is a number.\n * - `%`: property is an object.\n *\n * ## Query\n *\n * The class creates an internal squas representation which allows to easily answer the query of\n * if a given property exist on a given element.\n *\n * NOTE: We don't yet support querying for types or events.\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n *       see dom_element_schema_registry_spec.ts\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!\n//\n// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in\n// dom_security_schema.ts. Reach out to mprobst & rjamet for details.\n//\n// =================================================================================================\nconst SCHEMA = ['[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot' + /* added manually to avoid breaking changes */\n',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored', '[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy', 'abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy', 'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume', ':svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'data^[HTMLElement]|value', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,media,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type', 'select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'slot^[HTMLElement]|name', 'source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'time^[HTMLElement]|dateTime', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|decoding', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime', ':svg:cursor^:svg:|'];\nconst _ATTR_TO_PROP = new Map(Object.entries({\n  'class': 'className',\n  'for': 'htmlFor',\n  'formaction': 'formAction',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex'\n}));\n// Invert _ATTR_TO_PROP.\nconst _PROP_TO_ATTR = Array.from(_ATTR_TO_PROP).reduce((inverted, [propertyName, attributeName]) => {\n  inverted.set(propertyName, attributeName);\n  return inverted;\n}, new Map());\nclass DomElementSchemaRegistry extends ElementSchemaRegistry {\n  constructor() {\n    super();\n    this._schema = new Map();\n    // We don't allow binding to events for security reasons. Allowing event bindings would almost\n    // certainly introduce bad XSS vulnerabilities. Instead, we store events in a separate schema.\n    this._eventSchema = new Map();\n    SCHEMA.forEach(encodedType => {\n      const type = new Map();\n      const events = new Set();\n      const [strType, strProperties] = encodedType.split('|');\n      const properties = strProperties.split(',');\n      const [typeNames, superName] = strType.split('^');\n      typeNames.split(',').forEach(tag => {\n        this._schema.set(tag.toLowerCase(), type);\n        this._eventSchema.set(tag.toLowerCase(), events);\n      });\n      const superType = superName && this._schema.get(superName.toLowerCase());\n      if (superType) {\n        for (const [prop, value] of superType) {\n          type.set(prop, value);\n        }\n        for (const superEvent of this._eventSchema.get(superName.toLowerCase())) {\n          events.add(superEvent);\n        }\n      }\n      properties.forEach(property => {\n        if (property.length > 0) {\n          switch (property[0]) {\n            case '*':\n              events.add(property.substring(1));\n              break;\n            case '!':\n              type.set(property.substring(1), BOOLEAN);\n              break;\n            case '#':\n              type.set(property.substring(1), NUMBER);\n              break;\n            case '%':\n              type.set(property.substring(1), OBJECT);\n              break;\n            default:\n              type.set(property, STRING);\n          }\n        }\n      });\n    });\n  }\n  hasProperty(tagName, propName, schemaMetas) {\n    if (schemaMetas.some(schema => schema.name === NO_ERRORS_SCHEMA.name)) {\n      return true;\n    }\n    if (tagName.indexOf('-') > -1) {\n      if (isNgContainer(tagName) || isNgContent(tagName)) {\n        return false;\n      }\n      if (schemaMetas.some(schema => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n        // Can't tell now as we don't know which properties a custom element will get\n        // once it is instantiated\n        return true;\n      }\n    }\n    const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get('unknown');\n    return elementProperties.has(propName);\n  }\n  hasElement(tagName, schemaMetas) {\n    if (schemaMetas.some(schema => schema.name === NO_ERRORS_SCHEMA.name)) {\n      return true;\n    }\n    if (tagName.indexOf('-') > -1) {\n      if (isNgContainer(tagName) || isNgContent(tagName)) {\n        return true;\n      }\n      if (schemaMetas.some(schema => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n        // Allow any custom elements\n        return true;\n      }\n    }\n    return this._schema.has(tagName.toLowerCase());\n  }\n  /**\n   * securityContext returns the security context for the given property on the given DOM tag.\n   *\n   * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n   * possible to bind a value into a changing attribute or tag name.\n   *\n   * The filtering is based on a list of allowed tags|attributes. All attributes in the schema\n   * above are assumed to have the 'NONE' security context, i.e. that they are safe inert\n   * string values. Only specific well known attack vectors are assigned their appropriate context.\n   */\n  securityContext(tagName, propName, isAttribute) {\n    if (isAttribute) {\n      // NB: For security purposes, use the mapped property name, not the attribute name.\n      propName = this.getMappedPropName(propName);\n    }\n    // Make sure comparisons are case insensitive, so that case differences between attribute and\n    // property names do not have a security impact.\n    tagName = tagName.toLowerCase();\n    propName = propName.toLowerCase();\n    let ctx = SECURITY_SCHEMA()[tagName + '|' + propName];\n    if (ctx) {\n      return ctx;\n    }\n    ctx = SECURITY_SCHEMA()['*|' + propName];\n    return ctx ? ctx : SecurityContext.NONE;\n  }\n  getMappedPropName(propName) {\n    return _ATTR_TO_PROP.get(propName) ?? propName;\n  }\n  getDefaultComponentElementName() {\n    return 'ng-component';\n  }\n  validateProperty(name) {\n    if (name.toLowerCase().startsWith('on')) {\n      const msg = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;\n      return {\n        error: true,\n        msg: msg\n      };\n    } else {\n      return {\n        error: false\n      };\n    }\n  }\n  validateAttribute(name) {\n    if (name.toLowerCase().startsWith('on')) {\n      const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;\n      return {\n        error: true,\n        msg: msg\n      };\n    } else {\n      return {\n        error: false\n      };\n    }\n  }\n  allKnownElementNames() {\n    return Array.from(this._schema.keys());\n  }\n  allKnownAttributesOfElement(tagName) {\n    const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get('unknown');\n    // Convert properties to attributes.\n    return Array.from(elementProperties.keys()).map(prop => _PROP_TO_ATTR.get(prop) ?? prop);\n  }\n  allKnownEventsOfElement(tagName) {\n    return Array.from(this._eventSchema.get(tagName.toLowerCase()) ?? []);\n  }\n  normalizeAnimationStyleProperty(propName) {\n    return dashCaseToCamelCase(propName);\n  }\n  normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n    let unit = '';\n    const strVal = val.toString().trim();\n    let errorMsg = null;\n    if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n      if (typeof val === 'number') {\n        unit = 'px';\n      } else {\n        const valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n          errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;\n        }\n      }\n    }\n    return {\n      error: errorMsg,\n      value: strVal + unit\n    };\n  }\n}\nfunction _isPixelDimensionStyle(prop) {\n  switch (prop) {\n    case 'width':\n    case 'height':\n    case 'minWidth':\n    case 'minHeight':\n    case 'maxWidth':\n    case 'maxHeight':\n    case 'left':\n    case 'top':\n    case 'bottom':\n    case 'right':\n    case 'fontSize':\n    case 'outlineWidth':\n    case 'outlineOffset':\n    case 'paddingTop':\n    case 'paddingLeft':\n    case 'paddingBottom':\n    case 'paddingRight':\n    case 'marginTop':\n    case 'marginLeft':\n    case 'marginBottom':\n    case 'marginRight':\n    case 'borderRadius':\n    case 'borderWidth':\n    case 'borderTopWidth':\n    case 'borderLeftWidth':\n    case 'borderRightWidth':\n    case 'borderBottomWidth':\n    case 'textIndent':\n      return true;\n    default:\n      return false;\n  }\n}\nclass HtmlTagDefinition {\n  constructor({\n    closedByChildren,\n    implicitNamespacePrefix,\n    contentType = TagContentType.PARSABLE_DATA,\n    closedByParent = false,\n    isVoid = false,\n    ignoreFirstLf = false,\n    preventNamespaceInheritance = false,\n    canSelfClose = false\n  } = {}) {\n    this.closedByChildren = {};\n    this.closedByParent = false;\n    if (closedByChildren && closedByChildren.length > 0) {\n      closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);\n    }\n    this.isVoid = isVoid;\n    this.closedByParent = closedByParent || isVoid;\n    this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n    this.contentType = contentType;\n    this.ignoreFirstLf = ignoreFirstLf;\n    this.preventNamespaceInheritance = preventNamespaceInheritance;\n    this.canSelfClose = canSelfClose ?? isVoid;\n  }\n  isClosedByChild(name) {\n    return this.isVoid || name.toLowerCase() in this.closedByChildren;\n  }\n  getContentType(prefix) {\n    if (typeof this.contentType === 'object') {\n      const overrideType = prefix === undefined ? undefined : this.contentType[prefix];\n      return overrideType ?? this.contentType.default;\n    }\n    return this.contentType;\n  }\n}\nlet DEFAULT_TAG_DEFINITION;\n// see https://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\nlet TAG_DEFINITIONS;\nfunction getHtmlTagDefinition(tagName) {\n  if (!TAG_DEFINITIONS) {\n    DEFAULT_TAG_DEFINITION = new HtmlTagDefinition({\n      canSelfClose: true\n    });\n    TAG_DEFINITIONS = Object.assign(Object.create(null), {\n      'base': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'meta': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'area': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'embed': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'link': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'img': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'input': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'param': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'hr': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'br': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'source': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'track': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'wbr': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'p': new HtmlTagDefinition({\n        closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],\n        closedByParent: true\n      }),\n      'thead': new HtmlTagDefinition({\n        closedByChildren: ['tbody', 'tfoot']\n      }),\n      'tbody': new HtmlTagDefinition({\n        closedByChildren: ['tbody', 'tfoot'],\n        closedByParent: true\n      }),\n      'tfoot': new HtmlTagDefinition({\n        closedByChildren: ['tbody'],\n        closedByParent: true\n      }),\n      'tr': new HtmlTagDefinition({\n        closedByChildren: ['tr'],\n        closedByParent: true\n      }),\n      'td': new HtmlTagDefinition({\n        closedByChildren: ['td', 'th'],\n        closedByParent: true\n      }),\n      'th': new HtmlTagDefinition({\n        closedByChildren: ['td', 'th'],\n        closedByParent: true\n      }),\n      'col': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'svg': new HtmlTagDefinition({\n        implicitNamespacePrefix: 'svg'\n      }),\n      'foreignObject': new HtmlTagDefinition({\n        // Usually the implicit namespace here would be redundant since it will be inherited from\n        // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser\n        // works is that the parent node of an end tag is its own start tag which means that\n        // the `preventNamespaceInheritance` on `foreignObject` would have it default to the\n        // implicit namespace which is `html`, unless specified otherwise.\n        implicitNamespacePrefix: 'svg',\n        // We want to prevent children of foreignObject from inheriting its namespace, because\n        // the point of the element is to allow nodes from other namespaces to be inserted.\n        preventNamespaceInheritance: true\n      }),\n      'math': new HtmlTagDefinition({\n        implicitNamespacePrefix: 'math'\n      }),\n      'li': new HtmlTagDefinition({\n        closedByChildren: ['li'],\n        closedByParent: true\n      }),\n      'dt': new HtmlTagDefinition({\n        closedByChildren: ['dt', 'dd']\n      }),\n      'dd': new HtmlTagDefinition({\n        closedByChildren: ['dt', 'dd'],\n        closedByParent: true\n      }),\n      'rb': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rt': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rtc': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rp': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'optgroup': new HtmlTagDefinition({\n        closedByChildren: ['optgroup'],\n        closedByParent: true\n      }),\n      'option': new HtmlTagDefinition({\n        closedByChildren: ['option', 'optgroup'],\n        closedByParent: true\n      }),\n      'pre': new HtmlTagDefinition({\n        ignoreFirstLf: true\n      }),\n      'listing': new HtmlTagDefinition({\n        ignoreFirstLf: true\n      }),\n      'style': new HtmlTagDefinition({\n        contentType: TagContentType.RAW_TEXT\n      }),\n      'script': new HtmlTagDefinition({\n        contentType: TagContentType.RAW_TEXT\n      }),\n      'title': new HtmlTagDefinition({\n        // The browser supports two separate `title` tags which have to use\n        // a different content type: `HTMLTitleElement` and `SVGTitleElement`\n        contentType: {\n          default: TagContentType.ESCAPABLE_RAW_TEXT,\n          svg: TagContentType.PARSABLE_DATA\n        }\n      }),\n      'textarea': new HtmlTagDefinition({\n        contentType: TagContentType.ESCAPABLE_RAW_TEXT,\n        ignoreFirstLf: true\n      })\n    });\n    new DomElementSchemaRegistry().allKnownElementNames().forEach(knownTagName => {\n      if (!TAG_DEFINITIONS[knownTagName] && getNsPrefix(knownTagName) === null) {\n        TAG_DEFINITIONS[knownTagName] = new HtmlTagDefinition({\n          canSelfClose: false\n        });\n      }\n    });\n  }\n  // We have to make both a case-sensitive and a case-insensitive lookup, because\n  // HTML tag names are case insensitive, whereas some SVG tags are case sensitive.\n  return TAG_DEFINITIONS[tagName] ?? TAG_DEFINITIONS[tagName.toLowerCase()] ?? DEFAULT_TAG_DEFINITION;\n}\nconst TAG_TO_PLACEHOLDER_NAMES = {\n  'A': 'LINK',\n  'B': 'BOLD_TEXT',\n  'BR': 'LINE_BREAK',\n  'EM': 'EMPHASISED_TEXT',\n  'H1': 'HEADING_LEVEL1',\n  'H2': 'HEADING_LEVEL2',\n  'H3': 'HEADING_LEVEL3',\n  'H4': 'HEADING_LEVEL4',\n  'H5': 'HEADING_LEVEL5',\n  'H6': 'HEADING_LEVEL6',\n  'HR': 'HORIZONTAL_RULE',\n  'I': 'ITALIC_TEXT',\n  'LI': 'LIST_ITEM',\n  'LINK': 'MEDIA_LINK',\n  'OL': 'ORDERED_LIST',\n  'P': 'PARAGRAPH',\n  'Q': 'QUOTATION',\n  'S': 'STRIKETHROUGH_TEXT',\n  'SMALL': 'SMALL_TEXT',\n  'SUB': 'SUBSTRIPT',\n  'SUP': 'SUPERSCRIPT',\n  'TBODY': 'TABLE_BODY',\n  'TD': 'TABLE_CELL',\n  'TFOOT': 'TABLE_FOOTER',\n  'TH': 'TABLE_HEADER_CELL',\n  'THEAD': 'TABLE_HEADER',\n  'TR': 'TABLE_ROW',\n  'TT': 'MONOSPACED_TEXT',\n  'U': 'UNDERLINED_TEXT',\n  'UL': 'UNORDERED_LIST'\n};\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nclass PlaceholderRegistry {\n  constructor() {\n    // Count the occurrence of the base name top generate a unique name\n    this._placeHolderNameCounts = {};\n    // Maps signature to placeholder names\n    this._signatureToName = {};\n  }\n  getStartTagPlaceholderName(tag, attrs, isVoid) {\n    const signature = this._hashTag(tag, attrs, isVoid);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n    const upperTag = tag.toUpperCase();\n    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n    this._signatureToName[signature] = name;\n    return name;\n  }\n  getCloseTagPlaceholderName(tag) {\n    const signature = this._hashClosingTag(tag);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n    const upperTag = tag.toUpperCase();\n    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const name = this._generateUniqueName(`CLOSE_${baseName}`);\n    this._signatureToName[signature] = name;\n    return name;\n  }\n  getPlaceholderName(name, content) {\n    const upperName = name.toUpperCase();\n    const signature = `PH: ${upperName}=${content}`;\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n    const uniqueName = this._generateUniqueName(upperName);\n    this._signatureToName[signature] = uniqueName;\n    return uniqueName;\n  }\n  getUniquePlaceholder(name) {\n    return this._generateUniqueName(name.toUpperCase());\n  }\n  getStartBlockPlaceholderName(name, parameters) {\n    const signature = this._hashBlock(name, parameters);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n    const placeholder = this._generateUniqueName(`START_BLOCK_${this._toSnakeCase(name)}`);\n    this._signatureToName[signature] = placeholder;\n    return placeholder;\n  }\n  getCloseBlockPlaceholderName(name) {\n    const signature = this._hashClosingBlock(name);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n    const placeholder = this._generateUniqueName(`CLOSE_BLOCK_${this._toSnakeCase(name)}`);\n    this._signatureToName[signature] = placeholder;\n    return placeholder;\n  }\n  // Generate a hash for a tag - does not take attribute order into account\n  _hashTag(tag, attrs, isVoid) {\n    const start = `<${tag}`;\n    const strAttrs = Object.keys(attrs).sort().map(name => ` ${name}=${attrs[name]}`).join('');\n    const end = isVoid ? '/>' : `></${tag}>`;\n    return start + strAttrs + end;\n  }\n  _hashClosingTag(tag) {\n    return this._hashTag(`/${tag}`, {}, false);\n  }\n  _hashBlock(name, parameters) {\n    const params = parameters.length === 0 ? '' : ` (${parameters.sort().join('; ')})`;\n    return `@${name}${params} {}`;\n  }\n  _hashClosingBlock(name) {\n    return this._hashBlock(`close_${name}`, []);\n  }\n  _toSnakeCase(name) {\n    return name.toUpperCase().replace(/[^A-Z0-9]/g, '_');\n  }\n  _generateUniqueName(base) {\n    const seen = this._placeHolderNameCounts.hasOwnProperty(base);\n    if (!seen) {\n      this._placeHolderNameCounts[base] = 1;\n      return base;\n    }\n    const id = this._placeHolderNameCounts[base];\n    this._placeHolderNameCounts[base] = id + 1;\n    return `${base}_${id}`;\n  }\n}\nconst _expParser = new Parser$1(new Lexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n */\nfunction createI18nMessageFactory(interpolationConfig, containerBlocks) {\n  const visitor = new _I18nVisitor(_expParser, interpolationConfig, containerBlocks);\n  return (nodes, meaning, description, customId, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n}\nfunction noopVisitNodeFn(_html, i18n) {\n  return i18n;\n}\nclass _I18nVisitor {\n  constructor(_expressionParser, _interpolationConfig, _containerBlocks) {\n    this._expressionParser = _expressionParser;\n    this._interpolationConfig = _interpolationConfig;\n    this._containerBlocks = _containerBlocks;\n  }\n  toI18nMessage(nodes, meaning = '', description = '', customId = '', visitNodeFn) {\n    const context = {\n      isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,\n      icuDepth: 0,\n      placeholderRegistry: new PlaceholderRegistry(),\n      placeholderToContent: {},\n      placeholderToMessage: {},\n      visitNodeFn: visitNodeFn || noopVisitNodeFn\n    };\n    const i18nodes = visitAll(this, nodes, context);\n    return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);\n  }\n  visitElement(el, context) {\n    const children = visitAll(this, el.children, context);\n    const attrs = {};\n    el.attrs.forEach(attr => {\n      // Do not visit the attributes, translatable ones are top-level ASTs\n      attrs[attr.name] = attr.value;\n    });\n    const isVoid = getHtmlTagDefinition(el.name).isVoid;\n    const startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n    context.placeholderToContent[startPhName] = {\n      text: el.startSourceSpan.toString(),\n      sourceSpan: el.startSourceSpan\n    };\n    let closePhName = '';\n    if (!isVoid) {\n      closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);\n      context.placeholderToContent[closePhName] = {\n        text: `</${el.name}>`,\n        sourceSpan: el.endSourceSpan ?? el.sourceSpan\n      };\n    }\n    const node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n    return context.visitNodeFn(el, node);\n  }\n  visitAttribute(attribute, context) {\n    const node = attribute.valueTokens === undefined || attribute.valueTokens.length === 1 ? new Text$2(attribute.value, attribute.valueSpan || attribute.sourceSpan) : this._visitTextWithInterpolation(attribute.valueTokens, attribute.valueSpan || attribute.sourceSpan, context, attribute.i18n);\n    return context.visitNodeFn(attribute, node);\n  }\n  visitText(text, context) {\n    const node = text.tokens.length === 1 ? new Text$2(text.value, text.sourceSpan) : this._visitTextWithInterpolation(text.tokens, text.sourceSpan, context, text.i18n);\n    return context.visitNodeFn(text, node);\n  }\n  visitComment(comment, context) {\n    return null;\n  }\n  visitExpansion(icu, context) {\n    context.icuDepth++;\n    const i18nIcuCases = {};\n    const i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n    icu.cases.forEach(caze => {\n      i18nIcuCases[caze.value] = new Container(caze.expression.map(node => node.visit(this, context)), caze.expSourceSpan);\n    });\n    context.icuDepth--;\n    if (context.isIcu || context.icuDepth > 0) {\n      // Returns an ICU node when:\n      // - the message (vs a part of the message) is an ICU message, or\n      // - the ICU message is nested.\n      const expPh = context.placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\n      i18nIcu.expressionPlaceholder = expPh;\n      context.placeholderToContent[expPh] = {\n        text: icu.switchValue,\n        sourceSpan: icu.switchValueSourceSpan\n      };\n      return context.visitNodeFn(icu, i18nIcu);\n    }\n    // Else returns a placeholder\n    // ICU placeholders should not be replaced with their original content but with the their\n    // translations.\n    // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n    const phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n    context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);\n    const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n    return context.visitNodeFn(icu, node);\n  }\n  visitExpansionCase(_icuCase, _context) {\n    throw new Error('Unreachable code');\n  }\n  visitBlock(block, context) {\n    const children = visitAll(this, block.children, context);\n    if (this._containerBlocks.has(block.name)) {\n      return new Container(children, block.sourceSpan);\n    }\n    const parameters = block.parameters.map(param => param.expression);\n    const startPhName = context.placeholderRegistry.getStartBlockPlaceholderName(block.name, parameters);\n    const closePhName = context.placeholderRegistry.getCloseBlockPlaceholderName(block.name);\n    context.placeholderToContent[startPhName] = {\n      text: block.startSourceSpan.toString(),\n      sourceSpan: block.startSourceSpan\n    };\n    context.placeholderToContent[closePhName] = {\n      text: block.endSourceSpan ? block.endSourceSpan.toString() : '}',\n      sourceSpan: block.endSourceSpan ?? block.sourceSpan\n    };\n    const node = new BlockPlaceholder(block.name, parameters, startPhName, closePhName, children, block.sourceSpan, block.startSourceSpan, block.endSourceSpan);\n    return context.visitNodeFn(block, node);\n  }\n  visitBlockParameter(_parameter, _context) {\n    throw new Error('Unreachable code');\n  }\n  /**\n   * Convert, text and interpolated tokens up into text and placeholder pieces.\n   *\n   * @param tokens The text and interpolated tokens.\n   * @param sourceSpan The span of the whole of the `text` string.\n   * @param context The current context of the visitor, used to compute and store placeholders.\n   * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.\n   */\n  _visitTextWithInterpolation(tokens, sourceSpan, context, previousI18n) {\n    // Return a sequence of `Text` and `Placeholder` nodes grouped in a `Container`.\n    const nodes = [];\n    // We will only create a container if there are actually interpolations,\n    // so this flag tracks that.\n    let hasInterpolation = false;\n    for (const token of tokens) {\n      switch (token.type) {\n        case 8 /* TokenType.INTERPOLATION */:\n        case 17 /* TokenType.ATTR_VALUE_INTERPOLATION */:\n          hasInterpolation = true;\n          const expression = token.parts[1];\n          const baseName = extractPlaceholderName(expression) || 'INTERPOLATION';\n          const phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);\n          context.placeholderToContent[phName] = {\n            text: token.parts.join(''),\n            sourceSpan: token.sourceSpan\n          };\n          nodes.push(new Placeholder(expression, phName, token.sourceSpan));\n          break;\n        default:\n          if (token.parts[0].length > 0) {\n            // This token is text or an encoded entity.\n            // If it is following on from a previous text node then merge it into that node\n            // Otherwise, if it is following an interpolation, then add a new node.\n            const previous = nodes[nodes.length - 1];\n            if (previous instanceof Text$2) {\n              previous.value += token.parts[0];\n              previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);\n            } else {\n              nodes.push(new Text$2(token.parts[0], token.sourceSpan));\n            }\n          }\n          break;\n      }\n    }\n    if (hasInterpolation) {\n      // Whitespace removal may have invalidated the interpolation source-spans.\n      reusePreviousSourceSpans(nodes, previousI18n);\n      return new Container(nodes, sourceSpan);\n    } else {\n      return nodes[0];\n    }\n  }\n}\n/**\n * Re-use the source-spans from `previousI18n` metadata for the `nodes`.\n *\n * Whitespace removal can invalidate the source-spans of interpolation nodes, so we\n * reuse the source-span stored from a previous pass before the whitespace was removed.\n *\n * @param nodes The `Text` and `Placeholder` nodes to be processed.\n * @param previousI18n Any i18n metadata for these `nodes` stored from a previous pass.\n */\nfunction reusePreviousSourceSpans(nodes, previousI18n) {\n  if (previousI18n instanceof Message) {\n    // The `previousI18n` is an i18n `Message`, so we are processing an `Attribute` with i18n\n    // metadata. The `Message` should consist only of a single `Container` that contains the\n    // parts (`Text` and `Placeholder`) to process.\n    assertSingleContainerMessage(previousI18n);\n    previousI18n = previousI18n.nodes[0];\n  }\n  if (previousI18n instanceof Container) {\n    // The `previousI18n` is a `Container`, which means that this is a second i18n extraction pass\n    // after whitespace has been removed from the AST nodes.\n    assertEquivalentNodes(previousI18n.children, nodes);\n    // Reuse the source-spans from the first pass.\n    for (let i = 0; i < nodes.length; i++) {\n      nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;\n    }\n  }\n}\n/**\n * Asserts that the `message` contains exactly one `Container` node.\n */\nfunction assertSingleContainerMessage(message) {\n  const nodes = message.nodes;\n  if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {\n    throw new Error('Unexpected previous i18n message - expected it to consist of only a single `Container` node.');\n  }\n}\n/**\n * Asserts that the `previousNodes` and `node` collections have the same number of elements and\n * corresponding elements have the same node type.\n */\nfunction assertEquivalentNodes(previousNodes, nodes) {\n  if (previousNodes.length !== nodes.length) {\n    throw new Error('The number of i18n message children changed between first and second pass.');\n  }\n  if (previousNodes.some((node, i) => nodes[i].constructor !== node.constructor)) {\n    throw new Error('The types of the i18n message children changed between first and second pass.');\n  }\n}\nconst _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\nfunction extractPlaceholderName(input) {\n  return input.split(_CUSTOM_PH_EXP)[2];\n}\n\n/**\n * An i18n error.\n */\nclass I18nError extends ParseError {\n  constructor(span, msg) {\n    super(span, msg);\n  }\n}\n\n// Mapping between all HTML entity names and their unicode representation.\n// Generated from https://html.spec.whatwg.org/multipage/entities.json by stripping\n// the `&` and `;` from the keys and removing the duplicates.\n// see https://www.w3.org/TR/html51/syntax.html#named-character-references\nconst NAMED_ENTITIES = {\n  'AElig': '\\u00C6',\n  'AMP': '\\u0026',\n  'amp': '\\u0026',\n  'Aacute': '\\u00C1',\n  'Abreve': '\\u0102',\n  'Acirc': '\\u00C2',\n  'Acy': '\\u0410',\n  'Afr': '\\uD835\\uDD04',\n  'Agrave': '\\u00C0',\n  'Alpha': '\\u0391',\n  'Amacr': '\\u0100',\n  'And': '\\u2A53',\n  'Aogon': '\\u0104',\n  'Aopf': '\\uD835\\uDD38',\n  'ApplyFunction': '\\u2061',\n  'af': '\\u2061',\n  'Aring': '\\u00C5',\n  'angst': '\\u00C5',\n  'Ascr': '\\uD835\\uDC9C',\n  'Assign': '\\u2254',\n  'colone': '\\u2254',\n  'coloneq': '\\u2254',\n  'Atilde': '\\u00C3',\n  'Auml': '\\u00C4',\n  'Backslash': '\\u2216',\n  'setminus': '\\u2216',\n  'setmn': '\\u2216',\n  'smallsetminus': '\\u2216',\n  'ssetmn': '\\u2216',\n  'Barv': '\\u2AE7',\n  'Barwed': '\\u2306',\n  'doublebarwedge': '\\u2306',\n  'Bcy': '\\u0411',\n  'Because': '\\u2235',\n  'becaus': '\\u2235',\n  'because': '\\u2235',\n  'Bernoullis': '\\u212C',\n  'Bscr': '\\u212C',\n  'bernou': '\\u212C',\n  'Beta': '\\u0392',\n  'Bfr': '\\uD835\\uDD05',\n  'Bopf': '\\uD835\\uDD39',\n  'Breve': '\\u02D8',\n  'breve': '\\u02D8',\n  'Bumpeq': '\\u224E',\n  'HumpDownHump': '\\u224E',\n  'bump': '\\u224E',\n  'CHcy': '\\u0427',\n  'COPY': '\\u00A9',\n  'copy': '\\u00A9',\n  'Cacute': '\\u0106',\n  'Cap': '\\u22D2',\n  'CapitalDifferentialD': '\\u2145',\n  'DD': '\\u2145',\n  'Cayleys': '\\u212D',\n  'Cfr': '\\u212D',\n  'Ccaron': '\\u010C',\n  'Ccedil': '\\u00C7',\n  'Ccirc': '\\u0108',\n  'Cconint': '\\u2230',\n  'Cdot': '\\u010A',\n  'Cedilla': '\\u00B8',\n  'cedil': '\\u00B8',\n  'CenterDot': '\\u00B7',\n  'centerdot': '\\u00B7',\n  'middot': '\\u00B7',\n  'Chi': '\\u03A7',\n  'CircleDot': '\\u2299',\n  'odot': '\\u2299',\n  'CircleMinus': '\\u2296',\n  'ominus': '\\u2296',\n  'CirclePlus': '\\u2295',\n  'oplus': '\\u2295',\n  'CircleTimes': '\\u2297',\n  'otimes': '\\u2297',\n  'ClockwiseContourIntegral': '\\u2232',\n  'cwconint': '\\u2232',\n  'CloseCurlyDoubleQuote': '\\u201D',\n  'rdquo': '\\u201D',\n  'rdquor': '\\u201D',\n  'CloseCurlyQuote': '\\u2019',\n  'rsquo': '\\u2019',\n  'rsquor': '\\u2019',\n  'Colon': '\\u2237',\n  'Proportion': '\\u2237',\n  'Colone': '\\u2A74',\n  'Congruent': '\\u2261',\n  'equiv': '\\u2261',\n  'Conint': '\\u222F',\n  'DoubleContourIntegral': '\\u222F',\n  'ContourIntegral': '\\u222E',\n  'conint': '\\u222E',\n  'oint': '\\u222E',\n  'Copf': '\\u2102',\n  'complexes': '\\u2102',\n  'Coproduct': '\\u2210',\n  'coprod': '\\u2210',\n  'CounterClockwiseContourIntegral': '\\u2233',\n  'awconint': '\\u2233',\n  'Cross': '\\u2A2F',\n  'Cscr': '\\uD835\\uDC9E',\n  'Cup': '\\u22D3',\n  'CupCap': '\\u224D',\n  'asympeq': '\\u224D',\n  'DDotrahd': '\\u2911',\n  'DJcy': '\\u0402',\n  'DScy': '\\u0405',\n  'DZcy': '\\u040F',\n  'Dagger': '\\u2021',\n  'ddagger': '\\u2021',\n  'Darr': '\\u21A1',\n  'Dashv': '\\u2AE4',\n  'DoubleLeftTee': '\\u2AE4',\n  'Dcaron': '\\u010E',\n  'Dcy': '\\u0414',\n  'Del': '\\u2207',\n  'nabla': '\\u2207',\n  'Delta': '\\u0394',\n  'Dfr': '\\uD835\\uDD07',\n  'DiacriticalAcute': '\\u00B4',\n  'acute': '\\u00B4',\n  'DiacriticalDot': '\\u02D9',\n  'dot': '\\u02D9',\n  'DiacriticalDoubleAcute': '\\u02DD',\n  'dblac': '\\u02DD',\n  'DiacriticalGrave': '\\u0060',\n  'grave': '\\u0060',\n  'DiacriticalTilde': '\\u02DC',\n  'tilde': '\\u02DC',\n  'Diamond': '\\u22C4',\n  'diam': '\\u22C4',\n  'diamond': '\\u22C4',\n  'DifferentialD': '\\u2146',\n  'dd': '\\u2146',\n  'Dopf': '\\uD835\\uDD3B',\n  'Dot': '\\u00A8',\n  'DoubleDot': '\\u00A8',\n  'die': '\\u00A8',\n  'uml': '\\u00A8',\n  'DotDot': '\\u20DC',\n  'DotEqual': '\\u2250',\n  'doteq': '\\u2250',\n  'esdot': '\\u2250',\n  'DoubleDownArrow': '\\u21D3',\n  'Downarrow': '\\u21D3',\n  'dArr': '\\u21D3',\n  'DoubleLeftArrow': '\\u21D0',\n  'Leftarrow': '\\u21D0',\n  'lArr': '\\u21D0',\n  'DoubleLeftRightArrow': '\\u21D4',\n  'Leftrightarrow': '\\u21D4',\n  'hArr': '\\u21D4',\n  'iff': '\\u21D4',\n  'DoubleLongLeftArrow': '\\u27F8',\n  'Longleftarrow': '\\u27F8',\n  'xlArr': '\\u27F8',\n  'DoubleLongLeftRightArrow': '\\u27FA',\n  'Longleftrightarrow': '\\u27FA',\n  'xhArr': '\\u27FA',\n  'DoubleLongRightArrow': '\\u27F9',\n  'Longrightarrow': '\\u27F9',\n  'xrArr': '\\u27F9',\n  'DoubleRightArrow': '\\u21D2',\n  'Implies': '\\u21D2',\n  'Rightarrow': '\\u21D2',\n  'rArr': '\\u21D2',\n  'DoubleRightTee': '\\u22A8',\n  'vDash': '\\u22A8',\n  'DoubleUpArrow': '\\u21D1',\n  'Uparrow': '\\u21D1',\n  'uArr': '\\u21D1',\n  'DoubleUpDownArrow': '\\u21D5',\n  'Updownarrow': '\\u21D5',\n  'vArr': '\\u21D5',\n  'DoubleVerticalBar': '\\u2225',\n  'par': '\\u2225',\n  'parallel': '\\u2225',\n  'shortparallel': '\\u2225',\n  'spar': '\\u2225',\n  'DownArrow': '\\u2193',\n  'ShortDownArrow': '\\u2193',\n  'darr': '\\u2193',\n  'downarrow': '\\u2193',\n  'DownArrowBar': '\\u2913',\n  'DownArrowUpArrow': '\\u21F5',\n  'duarr': '\\u21F5',\n  'DownBreve': '\\u0311',\n  'DownLeftRightVector': '\\u2950',\n  'DownLeftTeeVector': '\\u295E',\n  'DownLeftVector': '\\u21BD',\n  'leftharpoondown': '\\u21BD',\n  'lhard': '\\u21BD',\n  'DownLeftVectorBar': '\\u2956',\n  'DownRightTeeVector': '\\u295F',\n  'DownRightVector': '\\u21C1',\n  'rhard': '\\u21C1',\n  'rightharpoondown': '\\u21C1',\n  'DownRightVectorBar': '\\u2957',\n  'DownTee': '\\u22A4',\n  'top': '\\u22A4',\n  'DownTeeArrow': '\\u21A7',\n  'mapstodown': '\\u21A7',\n  'Dscr': '\\uD835\\uDC9F',\n  'Dstrok': '\\u0110',\n  'ENG': '\\u014A',\n  'ETH': '\\u00D0',\n  'Eacute': '\\u00C9',\n  'Ecaron': '\\u011A',\n  'Ecirc': '\\u00CA',\n  'Ecy': '\\u042D',\n  'Edot': '\\u0116',\n  'Efr': '\\uD835\\uDD08',\n  'Egrave': '\\u00C8',\n  'Element': '\\u2208',\n  'in': '\\u2208',\n  'isin': '\\u2208',\n  'isinv': '\\u2208',\n  'Emacr': '\\u0112',\n  'EmptySmallSquare': '\\u25FB',\n  'EmptyVerySmallSquare': '\\u25AB',\n  'Eogon': '\\u0118',\n  'Eopf': '\\uD835\\uDD3C',\n  'Epsilon': '\\u0395',\n  'Equal': '\\u2A75',\n  'EqualTilde': '\\u2242',\n  'eqsim': '\\u2242',\n  'esim': '\\u2242',\n  'Equilibrium': '\\u21CC',\n  'rightleftharpoons': '\\u21CC',\n  'rlhar': '\\u21CC',\n  'Escr': '\\u2130',\n  'expectation': '\\u2130',\n  'Esim': '\\u2A73',\n  'Eta': '\\u0397',\n  'Euml': '\\u00CB',\n  'Exists': '\\u2203',\n  'exist': '\\u2203',\n  'ExponentialE': '\\u2147',\n  'ee': '\\u2147',\n  'exponentiale': '\\u2147',\n  'Fcy': '\\u0424',\n  'Ffr': '\\uD835\\uDD09',\n  'FilledSmallSquare': '\\u25FC',\n  'FilledVerySmallSquare': '\\u25AA',\n  'blacksquare': '\\u25AA',\n  'squarf': '\\u25AA',\n  'squf': '\\u25AA',\n  'Fopf': '\\uD835\\uDD3D',\n  'ForAll': '\\u2200',\n  'forall': '\\u2200',\n  'Fouriertrf': '\\u2131',\n  'Fscr': '\\u2131',\n  'GJcy': '\\u0403',\n  'GT': '\\u003E',\n  'gt': '\\u003E',\n  'Gamma': '\\u0393',\n  'Gammad': '\\u03DC',\n  'Gbreve': '\\u011E',\n  'Gcedil': '\\u0122',\n  'Gcirc': '\\u011C',\n  'Gcy': '\\u0413',\n  'Gdot': '\\u0120',\n  'Gfr': '\\uD835\\uDD0A',\n  'Gg': '\\u22D9',\n  'ggg': '\\u22D9',\n  'Gopf': '\\uD835\\uDD3E',\n  'GreaterEqual': '\\u2265',\n  'ge': '\\u2265',\n  'geq': '\\u2265',\n  'GreaterEqualLess': '\\u22DB',\n  'gel': '\\u22DB',\n  'gtreqless': '\\u22DB',\n  'GreaterFullEqual': '\\u2267',\n  'gE': '\\u2267',\n  'geqq': '\\u2267',\n  'GreaterGreater': '\\u2AA2',\n  'GreaterLess': '\\u2277',\n  'gl': '\\u2277',\n  'gtrless': '\\u2277',\n  'GreaterSlantEqual': '\\u2A7E',\n  'geqslant': '\\u2A7E',\n  'ges': '\\u2A7E',\n  'GreaterTilde': '\\u2273',\n  'gsim': '\\u2273',\n  'gtrsim': '\\u2273',\n  'Gscr': '\\uD835\\uDCA2',\n  'Gt': '\\u226B',\n  'NestedGreaterGreater': '\\u226B',\n  'gg': '\\u226B',\n  'HARDcy': '\\u042A',\n  'Hacek': '\\u02C7',\n  'caron': '\\u02C7',\n  'Hat': '\\u005E',\n  'Hcirc': '\\u0124',\n  'Hfr': '\\u210C',\n  'Poincareplane': '\\u210C',\n  'HilbertSpace': '\\u210B',\n  'Hscr': '\\u210B',\n  'hamilt': '\\u210B',\n  'Hopf': '\\u210D',\n  'quaternions': '\\u210D',\n  'HorizontalLine': '\\u2500',\n  'boxh': '\\u2500',\n  'Hstrok': '\\u0126',\n  'HumpEqual': '\\u224F',\n  'bumpe': '\\u224F',\n  'bumpeq': '\\u224F',\n  'IEcy': '\\u0415',\n  'IJlig': '\\u0132',\n  'IOcy': '\\u0401',\n  'Iacute': '\\u00CD',\n  'Icirc': '\\u00CE',\n  'Icy': '\\u0418',\n  'Idot': '\\u0130',\n  'Ifr': '\\u2111',\n  'Im': '\\u2111',\n  'image': '\\u2111',\n  'imagpart': '\\u2111',\n  'Igrave': '\\u00CC',\n  'Imacr': '\\u012A',\n  'ImaginaryI': '\\u2148',\n  'ii': '\\u2148',\n  'Int': '\\u222C',\n  'Integral': '\\u222B',\n  'int': '\\u222B',\n  'Intersection': '\\u22C2',\n  'bigcap': '\\u22C2',\n  'xcap': '\\u22C2',\n  'InvisibleComma': '\\u2063',\n  'ic': '\\u2063',\n  'InvisibleTimes': '\\u2062',\n  'it': '\\u2062',\n  'Iogon': '\\u012E',\n  'Iopf': '\\uD835\\uDD40',\n  'Iota': '\\u0399',\n  'Iscr': '\\u2110',\n  'imagline': '\\u2110',\n  'Itilde': '\\u0128',\n  'Iukcy': '\\u0406',\n  'Iuml': '\\u00CF',\n  'Jcirc': '\\u0134',\n  'Jcy': '\\u0419',\n  'Jfr': '\\uD835\\uDD0D',\n  'Jopf': '\\uD835\\uDD41',\n  'Jscr': '\\uD835\\uDCA5',\n  'Jsercy': '\\u0408',\n  'Jukcy': '\\u0404',\n  'KHcy': '\\u0425',\n  'KJcy': '\\u040C',\n  'Kappa': '\\u039A',\n  'Kcedil': '\\u0136',\n  'Kcy': '\\u041A',\n  'Kfr': '\\uD835\\uDD0E',\n  'Kopf': '\\uD835\\uDD42',\n  'Kscr': '\\uD835\\uDCA6',\n  'LJcy': '\\u0409',\n  'LT': '\\u003C',\n  'lt': '\\u003C',\n  'Lacute': '\\u0139',\n  'Lambda': '\\u039B',\n  'Lang': '\\u27EA',\n  'Laplacetrf': '\\u2112',\n  'Lscr': '\\u2112',\n  'lagran': '\\u2112',\n  'Larr': '\\u219E',\n  'twoheadleftarrow': '\\u219E',\n  'Lcaron': '\\u013D',\n  'Lcedil': '\\u013B',\n  'Lcy': '\\u041B',\n  'LeftAngleBracket': '\\u27E8',\n  'lang': '\\u27E8',\n  'langle': '\\u27E8',\n  'LeftArrow': '\\u2190',\n  'ShortLeftArrow': '\\u2190',\n  'larr': '\\u2190',\n  'leftarrow': '\\u2190',\n  'slarr': '\\u2190',\n  'LeftArrowBar': '\\u21E4',\n  'larrb': '\\u21E4',\n  'LeftArrowRightArrow': '\\u21C6',\n  'leftrightarrows': '\\u21C6',\n  'lrarr': '\\u21C6',\n  'LeftCeiling': '\\u2308',\n  'lceil': '\\u2308',\n  'LeftDoubleBracket': '\\u27E6',\n  'lobrk': '\\u27E6',\n  'LeftDownTeeVector': '\\u2961',\n  'LeftDownVector': '\\u21C3',\n  'dharl': '\\u21C3',\n  'downharpoonleft': '\\u21C3',\n  'LeftDownVectorBar': '\\u2959',\n  'LeftFloor': '\\u230A',\n  'lfloor': '\\u230A',\n  'LeftRightArrow': '\\u2194',\n  'harr': '\\u2194',\n  'leftrightarrow': '\\u2194',\n  'LeftRightVector': '\\u294E',\n  'LeftTee': '\\u22A3',\n  'dashv': '\\u22A3',\n  'LeftTeeArrow': '\\u21A4',\n  'mapstoleft': '\\u21A4',\n  'LeftTeeVector': '\\u295A',\n  'LeftTriangle': '\\u22B2',\n  'vartriangleleft': '\\u22B2',\n  'vltri': '\\u22B2',\n  'LeftTriangleBar': '\\u29CF',\n  'LeftTriangleEqual': '\\u22B4',\n  'ltrie': '\\u22B4',\n  'trianglelefteq': '\\u22B4',\n  'LeftUpDownVector': '\\u2951',\n  'LeftUpTeeVector': '\\u2960',\n  'LeftUpVector': '\\u21BF',\n  'uharl': '\\u21BF',\n  'upharpoonleft': '\\u21BF',\n  'LeftUpVectorBar': '\\u2958',\n  'LeftVector': '\\u21BC',\n  'leftharpoonup': '\\u21BC',\n  'lharu': '\\u21BC',\n  'LeftVectorBar': '\\u2952',\n  'LessEqualGreater': '\\u22DA',\n  'leg': '\\u22DA',\n  'lesseqgtr': '\\u22DA',\n  'LessFullEqual': '\\u2266',\n  'lE': '\\u2266',\n  'leqq': '\\u2266',\n  'LessGreater': '\\u2276',\n  'lessgtr': '\\u2276',\n  'lg': '\\u2276',\n  'LessLess': '\\u2AA1',\n  'LessSlantEqual': '\\u2A7D',\n  'leqslant': '\\u2A7D',\n  'les': '\\u2A7D',\n  'LessTilde': '\\u2272',\n  'lesssim': '\\u2272',\n  'lsim': '\\u2272',\n  'Lfr': '\\uD835\\uDD0F',\n  'Ll': '\\u22D8',\n  'Lleftarrow': '\\u21DA',\n  'lAarr': '\\u21DA',\n  'Lmidot': '\\u013F',\n  'LongLeftArrow': '\\u27F5',\n  'longleftarrow': '\\u27F5',\n  'xlarr': '\\u27F5',\n  'LongLeftRightArrow': '\\u27F7',\n  'longleftrightarrow': '\\u27F7',\n  'xharr': '\\u27F7',\n  'LongRightArrow': '\\u27F6',\n  'longrightarrow': '\\u27F6',\n  'xrarr': '\\u27F6',\n  'Lopf': '\\uD835\\uDD43',\n  'LowerLeftArrow': '\\u2199',\n  'swarr': '\\u2199',\n  'swarrow': '\\u2199',\n  'LowerRightArrow': '\\u2198',\n  'searr': '\\u2198',\n  'searrow': '\\u2198',\n  'Lsh': '\\u21B0',\n  'lsh': '\\u21B0',\n  'Lstrok': '\\u0141',\n  'Lt': '\\u226A',\n  'NestedLessLess': '\\u226A',\n  'll': '\\u226A',\n  'Map': '\\u2905',\n  'Mcy': '\\u041C',\n  'MediumSpace': '\\u205F',\n  'Mellintrf': '\\u2133',\n  'Mscr': '\\u2133',\n  'phmmat': '\\u2133',\n  'Mfr': '\\uD835\\uDD10',\n  'MinusPlus': '\\u2213',\n  'mnplus': '\\u2213',\n  'mp': '\\u2213',\n  'Mopf': '\\uD835\\uDD44',\n  'Mu': '\\u039C',\n  'NJcy': '\\u040A',\n  'Nacute': '\\u0143',\n  'Ncaron': '\\u0147',\n  'Ncedil': '\\u0145',\n  'Ncy': '\\u041D',\n  'NegativeMediumSpace': '\\u200B',\n  'NegativeThickSpace': '\\u200B',\n  'NegativeThinSpace': '\\u200B',\n  'NegativeVeryThinSpace': '\\u200B',\n  'ZeroWidthSpace': '\\u200B',\n  'NewLine': '\\u000A',\n  'Nfr': '\\uD835\\uDD11',\n  'NoBreak': '\\u2060',\n  'NonBreakingSpace': '\\u00A0',\n  'nbsp': '\\u00A0',\n  'Nopf': '\\u2115',\n  'naturals': '\\u2115',\n  'Not': '\\u2AEC',\n  'NotCongruent': '\\u2262',\n  'nequiv': '\\u2262',\n  'NotCupCap': '\\u226D',\n  'NotDoubleVerticalBar': '\\u2226',\n  'npar': '\\u2226',\n  'nparallel': '\\u2226',\n  'nshortparallel': '\\u2226',\n  'nspar': '\\u2226',\n  'NotElement': '\\u2209',\n  'notin': '\\u2209',\n  'notinva': '\\u2209',\n  'NotEqual': '\\u2260',\n  'ne': '\\u2260',\n  'NotEqualTilde': '\\u2242\\u0338',\n  'nesim': '\\u2242\\u0338',\n  'NotExists': '\\u2204',\n  'nexist': '\\u2204',\n  'nexists': '\\u2204',\n  'NotGreater': '\\u226F',\n  'ngt': '\\u226F',\n  'ngtr': '\\u226F',\n  'NotGreaterEqual': '\\u2271',\n  'nge': '\\u2271',\n  'ngeq': '\\u2271',\n  'NotGreaterFullEqual': '\\u2267\\u0338',\n  'ngE': '\\u2267\\u0338',\n  'ngeqq': '\\u2267\\u0338',\n  'NotGreaterGreater': '\\u226B\\u0338',\n  'nGtv': '\\u226B\\u0338',\n  'NotGreaterLess': '\\u2279',\n  'ntgl': '\\u2279',\n  'NotGreaterSlantEqual': '\\u2A7E\\u0338',\n  'ngeqslant': '\\u2A7E\\u0338',\n  'nges': '\\u2A7E\\u0338',\n  'NotGreaterTilde': '\\u2275',\n  'ngsim': '\\u2275',\n  'NotHumpDownHump': '\\u224E\\u0338',\n  'nbump': '\\u224E\\u0338',\n  'NotHumpEqual': '\\u224F\\u0338',\n  'nbumpe': '\\u224F\\u0338',\n  'NotLeftTriangle': '\\u22EA',\n  'nltri': '\\u22EA',\n  'ntriangleleft': '\\u22EA',\n  'NotLeftTriangleBar': '\\u29CF\\u0338',\n  'NotLeftTriangleEqual': '\\u22EC',\n  'nltrie': '\\u22EC',\n  'ntrianglelefteq': '\\u22EC',\n  'NotLess': '\\u226E',\n  'nless': '\\u226E',\n  'nlt': '\\u226E',\n  'NotLessEqual': '\\u2270',\n  'nle': '\\u2270',\n  'nleq': '\\u2270',\n  'NotLessGreater': '\\u2278',\n  'ntlg': '\\u2278',\n  'NotLessLess': '\\u226A\\u0338',\n  'nLtv': '\\u226A\\u0338',\n  'NotLessSlantEqual': '\\u2A7D\\u0338',\n  'nleqslant': '\\u2A7D\\u0338',\n  'nles': '\\u2A7D\\u0338',\n  'NotLessTilde': '\\u2274',\n  'nlsim': '\\u2274',\n  'NotNestedGreaterGreater': '\\u2AA2\\u0338',\n  'NotNestedLessLess': '\\u2AA1\\u0338',\n  'NotPrecedes': '\\u2280',\n  'npr': '\\u2280',\n  'nprec': '\\u2280',\n  'NotPrecedesEqual': '\\u2AAF\\u0338',\n  'npre': '\\u2AAF\\u0338',\n  'npreceq': '\\u2AAF\\u0338',\n  'NotPrecedesSlantEqual': '\\u22E0',\n  'nprcue': '\\u22E0',\n  'NotReverseElement': '\\u220C',\n  'notni': '\\u220C',\n  'notniva': '\\u220C',\n  'NotRightTriangle': '\\u22EB',\n  'nrtri': '\\u22EB',\n  'ntriangleright': '\\u22EB',\n  'NotRightTriangleBar': '\\u29D0\\u0338',\n  'NotRightTriangleEqual': '\\u22ED',\n  'nrtrie': '\\u22ED',\n  'ntrianglerighteq': '\\u22ED',\n  'NotSquareSubset': '\\u228F\\u0338',\n  'NotSquareSubsetEqual': '\\u22E2',\n  'nsqsube': '\\u22E2',\n  'NotSquareSuperset': '\\u2290\\u0338',\n  'NotSquareSupersetEqual': '\\u22E3',\n  'nsqsupe': '\\u22E3',\n  'NotSubset': '\\u2282\\u20D2',\n  'nsubset': '\\u2282\\u20D2',\n  'vnsub': '\\u2282\\u20D2',\n  'NotSubsetEqual': '\\u2288',\n  'nsube': '\\u2288',\n  'nsubseteq': '\\u2288',\n  'NotSucceeds': '\\u2281',\n  'nsc': '\\u2281',\n  'nsucc': '\\u2281',\n  'NotSucceedsEqual': '\\u2AB0\\u0338',\n  'nsce': '\\u2AB0\\u0338',\n  'nsucceq': '\\u2AB0\\u0338',\n  'NotSucceedsSlantEqual': '\\u22E1',\n  'nsccue': '\\u22E1',\n  'NotSucceedsTilde': '\\u227F\\u0338',\n  'NotSuperset': '\\u2283\\u20D2',\n  'nsupset': '\\u2283\\u20D2',\n  'vnsup': '\\u2283\\u20D2',\n  'NotSupersetEqual': '\\u2289',\n  'nsupe': '\\u2289',\n  'nsupseteq': '\\u2289',\n  'NotTilde': '\\u2241',\n  'nsim': '\\u2241',\n  'NotTildeEqual': '\\u2244',\n  'nsime': '\\u2244',\n  'nsimeq': '\\u2244',\n  'NotTildeFullEqual': '\\u2247',\n  'ncong': '\\u2247',\n  'NotTildeTilde': '\\u2249',\n  'nap': '\\u2249',\n  'napprox': '\\u2249',\n  'NotVerticalBar': '\\u2224',\n  'nmid': '\\u2224',\n  'nshortmid': '\\u2224',\n  'nsmid': '\\u2224',\n  'Nscr': '\\uD835\\uDCA9',\n  'Ntilde': '\\u00D1',\n  'Nu': '\\u039D',\n  'OElig': '\\u0152',\n  'Oacute': '\\u00D3',\n  'Ocirc': '\\u00D4',\n  'Ocy': '\\u041E',\n  'Odblac': '\\u0150',\n  'Ofr': '\\uD835\\uDD12',\n  'Ograve': '\\u00D2',\n  'Omacr': '\\u014C',\n  'Omega': '\\u03A9',\n  'ohm': '\\u03A9',\n  'Omicron': '\\u039F',\n  'Oopf': '\\uD835\\uDD46',\n  'OpenCurlyDoubleQuote': '\\u201C',\n  'ldquo': '\\u201C',\n  'OpenCurlyQuote': '\\u2018',\n  'lsquo': '\\u2018',\n  'Or': '\\u2A54',\n  'Oscr': '\\uD835\\uDCAA',\n  'Oslash': '\\u00D8',\n  'Otilde': '\\u00D5',\n  'Otimes': '\\u2A37',\n  'Ouml': '\\u00D6',\n  'OverBar': '\\u203E',\n  'oline': '\\u203E',\n  'OverBrace': '\\u23DE',\n  'OverBracket': '\\u23B4',\n  'tbrk': '\\u23B4',\n  'OverParenthesis': '\\u23DC',\n  'PartialD': '\\u2202',\n  'part': '\\u2202',\n  'Pcy': '\\u041F',\n  'Pfr': '\\uD835\\uDD13',\n  'Phi': '\\u03A6',\n  'Pi': '\\u03A0',\n  'PlusMinus': '\\u00B1',\n  'plusmn': '\\u00B1',\n  'pm': '\\u00B1',\n  'Popf': '\\u2119',\n  'primes': '\\u2119',\n  'Pr': '\\u2ABB',\n  'Precedes': '\\u227A',\n  'pr': '\\u227A',\n  'prec': '\\u227A',\n  'PrecedesEqual': '\\u2AAF',\n  'pre': '\\u2AAF',\n  'preceq': '\\u2AAF',\n  'PrecedesSlantEqual': '\\u227C',\n  'prcue': '\\u227C',\n  'preccurlyeq': '\\u227C',\n  'PrecedesTilde': '\\u227E',\n  'precsim': '\\u227E',\n  'prsim': '\\u227E',\n  'Prime': '\\u2033',\n  'Product': '\\u220F',\n  'prod': '\\u220F',\n  'Proportional': '\\u221D',\n  'prop': '\\u221D',\n  'propto': '\\u221D',\n  'varpropto': '\\u221D',\n  'vprop': '\\u221D',\n  'Pscr': '\\uD835\\uDCAB',\n  'Psi': '\\u03A8',\n  'QUOT': '\\u0022',\n  'quot': '\\u0022',\n  'Qfr': '\\uD835\\uDD14',\n  'Qopf': '\\u211A',\n  'rationals': '\\u211A',\n  'Qscr': '\\uD835\\uDCAC',\n  'RBarr': '\\u2910',\n  'drbkarow': '\\u2910',\n  'REG': '\\u00AE',\n  'circledR': '\\u00AE',\n  'reg': '\\u00AE',\n  'Racute': '\\u0154',\n  'Rang': '\\u27EB',\n  'Rarr': '\\u21A0',\n  'twoheadrightarrow': '\\u21A0',\n  'Rarrtl': '\\u2916',\n  'Rcaron': '\\u0158',\n  'Rcedil': '\\u0156',\n  'Rcy': '\\u0420',\n  'Re': '\\u211C',\n  'Rfr': '\\u211C',\n  'real': '\\u211C',\n  'realpart': '\\u211C',\n  'ReverseElement': '\\u220B',\n  'SuchThat': '\\u220B',\n  'ni': '\\u220B',\n  'niv': '\\u220B',\n  'ReverseEquilibrium': '\\u21CB',\n  'leftrightharpoons': '\\u21CB',\n  'lrhar': '\\u21CB',\n  'ReverseUpEquilibrium': '\\u296F',\n  'duhar': '\\u296F',\n  'Rho': '\\u03A1',\n  'RightAngleBracket': '\\u27E9',\n  'rang': '\\u27E9',\n  'rangle': '\\u27E9',\n  'RightArrow': '\\u2192',\n  'ShortRightArrow': '\\u2192',\n  'rarr': '\\u2192',\n  'rightarrow': '\\u2192',\n  'srarr': '\\u2192',\n  'RightArrowBar': '\\u21E5',\n  'rarrb': '\\u21E5',\n  'RightArrowLeftArrow': '\\u21C4',\n  'rightleftarrows': '\\u21C4',\n  'rlarr': '\\u21C4',\n  'RightCeiling': '\\u2309',\n  'rceil': '\\u2309',\n  'RightDoubleBracket': '\\u27E7',\n  'robrk': '\\u27E7',\n  'RightDownTeeVector': '\\u295D',\n  'RightDownVector': '\\u21C2',\n  'dharr': '\\u21C2',\n  'downharpoonright': '\\u21C2',\n  'RightDownVectorBar': '\\u2955',\n  'RightFloor': '\\u230B',\n  'rfloor': '\\u230B',\n  'RightTee': '\\u22A2',\n  'vdash': '\\u22A2',\n  'RightTeeArrow': '\\u21A6',\n  'map': '\\u21A6',\n  'mapsto': '\\u21A6',\n  'RightTeeVector': '\\u295B',\n  'RightTriangle': '\\u22B3',\n  'vartriangleright': '\\u22B3',\n  'vrtri': '\\u22B3',\n  'RightTriangleBar': '\\u29D0',\n  'RightTriangleEqual': '\\u22B5',\n  'rtrie': '\\u22B5',\n  'trianglerighteq': '\\u22B5',\n  'RightUpDownVector': '\\u294F',\n  'RightUpTeeVector': '\\u295C',\n  'RightUpVector': '\\u21BE',\n  'uharr': '\\u21BE',\n  'upharpoonright': '\\u21BE',\n  'RightUpVectorBar': '\\u2954',\n  'RightVector': '\\u21C0',\n  'rharu': '\\u21C0',\n  'rightharpoonup': '\\u21C0',\n  'RightVectorBar': '\\u2953',\n  'Ropf': '\\u211D',\n  'reals': '\\u211D',\n  'RoundImplies': '\\u2970',\n  'Rrightarrow': '\\u21DB',\n  'rAarr': '\\u21DB',\n  'Rscr': '\\u211B',\n  'realine': '\\u211B',\n  'Rsh': '\\u21B1',\n  'rsh': '\\u21B1',\n  'RuleDelayed': '\\u29F4',\n  'SHCHcy': '\\u0429',\n  'SHcy': '\\u0428',\n  'SOFTcy': '\\u042C',\n  'Sacute': '\\u015A',\n  'Sc': '\\u2ABC',\n  'Scaron': '\\u0160',\n  'Scedil': '\\u015E',\n  'Scirc': '\\u015C',\n  'Scy': '\\u0421',\n  'Sfr': '\\uD835\\uDD16',\n  'ShortUpArrow': '\\u2191',\n  'UpArrow': '\\u2191',\n  'uarr': '\\u2191',\n  'uparrow': '\\u2191',\n  'Sigma': '\\u03A3',\n  'SmallCircle': '\\u2218',\n  'compfn': '\\u2218',\n  'Sopf': '\\uD835\\uDD4A',\n  'Sqrt': '\\u221A',\n  'radic': '\\u221A',\n  'Square': '\\u25A1',\n  'squ': '\\u25A1',\n  'square': '\\u25A1',\n  'SquareIntersection': '\\u2293',\n  'sqcap': '\\u2293',\n  'SquareSubset': '\\u228F',\n  'sqsub': '\\u228F',\n  'sqsubset': '\\u228F',\n  'SquareSubsetEqual': '\\u2291',\n  'sqsube': '\\u2291',\n  'sqsubseteq': '\\u2291',\n  'SquareSuperset': '\\u2290',\n  'sqsup': '\\u2290',\n  'sqsupset': '\\u2290',\n  'SquareSupersetEqual': '\\u2292',\n  'sqsupe': '\\u2292',\n  'sqsupseteq': '\\u2292',\n  'SquareUnion': '\\u2294',\n  'sqcup': '\\u2294',\n  'Sscr': '\\uD835\\uDCAE',\n  'Star': '\\u22C6',\n  'sstarf': '\\u22C6',\n  'Sub': '\\u22D0',\n  'Subset': '\\u22D0',\n  'SubsetEqual': '\\u2286',\n  'sube': '\\u2286',\n  'subseteq': '\\u2286',\n  'Succeeds': '\\u227B',\n  'sc': '\\u227B',\n  'succ': '\\u227B',\n  'SucceedsEqual': '\\u2AB0',\n  'sce': '\\u2AB0',\n  'succeq': '\\u2AB0',\n  'SucceedsSlantEqual': '\\u227D',\n  'sccue': '\\u227D',\n  'succcurlyeq': '\\u227D',\n  'SucceedsTilde': '\\u227F',\n  'scsim': '\\u227F',\n  'succsim': '\\u227F',\n  'Sum': '\\u2211',\n  'sum': '\\u2211',\n  'Sup': '\\u22D1',\n  'Supset': '\\u22D1',\n  'Superset': '\\u2283',\n  'sup': '\\u2283',\n  'supset': '\\u2283',\n  'SupersetEqual': '\\u2287',\n  'supe': '\\u2287',\n  'supseteq': '\\u2287',\n  'THORN': '\\u00DE',\n  'TRADE': '\\u2122',\n  'trade': '\\u2122',\n  'TSHcy': '\\u040B',\n  'TScy': '\\u0426',\n  'Tab': '\\u0009',\n  'Tau': '\\u03A4',\n  'Tcaron': '\\u0164',\n  'Tcedil': '\\u0162',\n  'Tcy': '\\u0422',\n  'Tfr': '\\uD835\\uDD17',\n  'Therefore': '\\u2234',\n  'there4': '\\u2234',\n  'therefore': '\\u2234',\n  'Theta': '\\u0398',\n  'ThickSpace': '\\u205F\\u200A',\n  'ThinSpace': '\\u2009',\n  'thinsp': '\\u2009',\n  'Tilde': '\\u223C',\n  'sim': '\\u223C',\n  'thicksim': '\\u223C',\n  'thksim': '\\u223C',\n  'TildeEqual': '\\u2243',\n  'sime': '\\u2243',\n  'simeq': '\\u2243',\n  'TildeFullEqual': '\\u2245',\n  'cong': '\\u2245',\n  'TildeTilde': '\\u2248',\n  'ap': '\\u2248',\n  'approx': '\\u2248',\n  'asymp': '\\u2248',\n  'thickapprox': '\\u2248',\n  'thkap': '\\u2248',\n  'Topf': '\\uD835\\uDD4B',\n  'TripleDot': '\\u20DB',\n  'tdot': '\\u20DB',\n  'Tscr': '\\uD835\\uDCAF',\n  'Tstrok': '\\u0166',\n  'Uacute': '\\u00DA',\n  'Uarr': '\\u219F',\n  'Uarrocir': '\\u2949',\n  'Ubrcy': '\\u040E',\n  'Ubreve': '\\u016C',\n  'Ucirc': '\\u00DB',\n  'Ucy': '\\u0423',\n  'Udblac': '\\u0170',\n  'Ufr': '\\uD835\\uDD18',\n  'Ugrave': '\\u00D9',\n  'Umacr': '\\u016A',\n  'UnderBar': '\\u005F',\n  'lowbar': '\\u005F',\n  'UnderBrace': '\\u23DF',\n  'UnderBracket': '\\u23B5',\n  'bbrk': '\\u23B5',\n  'UnderParenthesis': '\\u23DD',\n  'Union': '\\u22C3',\n  'bigcup': '\\u22C3',\n  'xcup': '\\u22C3',\n  'UnionPlus': '\\u228E',\n  'uplus': '\\u228E',\n  'Uogon': '\\u0172',\n  'Uopf': '\\uD835\\uDD4C',\n  'UpArrowBar': '\\u2912',\n  'UpArrowDownArrow': '\\u21C5',\n  'udarr': '\\u21C5',\n  'UpDownArrow': '\\u2195',\n  'updownarrow': '\\u2195',\n  'varr': '\\u2195',\n  'UpEquilibrium': '\\u296E',\n  'udhar': '\\u296E',\n  'UpTee': '\\u22A5',\n  'bot': '\\u22A5',\n  'bottom': '\\u22A5',\n  'perp': '\\u22A5',\n  'UpTeeArrow': '\\u21A5',\n  'mapstoup': '\\u21A5',\n  'UpperLeftArrow': '\\u2196',\n  'nwarr': '\\u2196',\n  'nwarrow': '\\u2196',\n  'UpperRightArrow': '\\u2197',\n  'nearr': '\\u2197',\n  'nearrow': '\\u2197',\n  'Upsi': '\\u03D2',\n  'upsih': '\\u03D2',\n  'Upsilon': '\\u03A5',\n  'Uring': '\\u016E',\n  'Uscr': '\\uD835\\uDCB0',\n  'Utilde': '\\u0168',\n  'Uuml': '\\u00DC',\n  'VDash': '\\u22AB',\n  'Vbar': '\\u2AEB',\n  'Vcy': '\\u0412',\n  'Vdash': '\\u22A9',\n  'Vdashl': '\\u2AE6',\n  'Vee': '\\u22C1',\n  'bigvee': '\\u22C1',\n  'xvee': '\\u22C1',\n  'Verbar': '\\u2016',\n  'Vert': '\\u2016',\n  'VerticalBar': '\\u2223',\n  'mid': '\\u2223',\n  'shortmid': '\\u2223',\n  'smid': '\\u2223',\n  'VerticalLine': '\\u007C',\n  'verbar': '\\u007C',\n  'vert': '\\u007C',\n  'VerticalSeparator': '\\u2758',\n  'VerticalTilde': '\\u2240',\n  'wr': '\\u2240',\n  'wreath': '\\u2240',\n  'VeryThinSpace': '\\u200A',\n  'hairsp': '\\u200A',\n  'Vfr': '\\uD835\\uDD19',\n  'Vopf': '\\uD835\\uDD4D',\n  'Vscr': '\\uD835\\uDCB1',\n  'Vvdash': '\\u22AA',\n  'Wcirc': '\\u0174',\n  'Wedge': '\\u22C0',\n  'bigwedge': '\\u22C0',\n  'xwedge': '\\u22C0',\n  'Wfr': '\\uD835\\uDD1A',\n  'Wopf': '\\uD835\\uDD4E',\n  'Wscr': '\\uD835\\uDCB2',\n  'Xfr': '\\uD835\\uDD1B',\n  'Xi': '\\u039E',\n  'Xopf': '\\uD835\\uDD4F',\n  'Xscr': '\\uD835\\uDCB3',\n  'YAcy': '\\u042F',\n  'YIcy': '\\u0407',\n  'YUcy': '\\u042E',\n  'Yacute': '\\u00DD',\n  'Ycirc': '\\u0176',\n  'Ycy': '\\u042B',\n  'Yfr': '\\uD835\\uDD1C',\n  'Yopf': '\\uD835\\uDD50',\n  'Yscr': '\\uD835\\uDCB4',\n  'Yuml': '\\u0178',\n  'ZHcy': '\\u0416',\n  'Zacute': '\\u0179',\n  'Zcaron': '\\u017D',\n  'Zcy': '\\u0417',\n  'Zdot': '\\u017B',\n  'Zeta': '\\u0396',\n  'Zfr': '\\u2128',\n  'zeetrf': '\\u2128',\n  'Zopf': '\\u2124',\n  'integers': '\\u2124',\n  'Zscr': '\\uD835\\uDCB5',\n  'aacute': '\\u00E1',\n  'abreve': '\\u0103',\n  'ac': '\\u223E',\n  'mstpos': '\\u223E',\n  'acE': '\\u223E\\u0333',\n  'acd': '\\u223F',\n  'acirc': '\\u00E2',\n  'acy': '\\u0430',\n  'aelig': '\\u00E6',\n  'afr': '\\uD835\\uDD1E',\n  'agrave': '\\u00E0',\n  'alefsym': '\\u2135',\n  'aleph': '\\u2135',\n  'alpha': '\\u03B1',\n  'amacr': '\\u0101',\n  'amalg': '\\u2A3F',\n  'and': '\\u2227',\n  'wedge': '\\u2227',\n  'andand': '\\u2A55',\n  'andd': '\\u2A5C',\n  'andslope': '\\u2A58',\n  'andv': '\\u2A5A',\n  'ang': '\\u2220',\n  'angle': '\\u2220',\n  'ange': '\\u29A4',\n  'angmsd': '\\u2221',\n  'measuredangle': '\\u2221',\n  'angmsdaa': '\\u29A8',\n  'angmsdab': '\\u29A9',\n  'angmsdac': '\\u29AA',\n  'angmsdad': '\\u29AB',\n  'angmsdae': '\\u29AC',\n  'angmsdaf': '\\u29AD',\n  'angmsdag': '\\u29AE',\n  'angmsdah': '\\u29AF',\n  'angrt': '\\u221F',\n  'angrtvb': '\\u22BE',\n  'angrtvbd': '\\u299D',\n  'angsph': '\\u2222',\n  'angzarr': '\\u237C',\n  'aogon': '\\u0105',\n  'aopf': '\\uD835\\uDD52',\n  'apE': '\\u2A70',\n  'apacir': '\\u2A6F',\n  'ape': '\\u224A',\n  'approxeq': '\\u224A',\n  'apid': '\\u224B',\n  'apos': '\\u0027',\n  'aring': '\\u00E5',\n  'ascr': '\\uD835\\uDCB6',\n  'ast': '\\u002A',\n  'midast': '\\u002A',\n  'atilde': '\\u00E3',\n  'auml': '\\u00E4',\n  'awint': '\\u2A11',\n  'bNot': '\\u2AED',\n  'backcong': '\\u224C',\n  'bcong': '\\u224C',\n  'backepsilon': '\\u03F6',\n  'bepsi': '\\u03F6',\n  'backprime': '\\u2035',\n  'bprime': '\\u2035',\n  'backsim': '\\u223D',\n  'bsim': '\\u223D',\n  'backsimeq': '\\u22CD',\n  'bsime': '\\u22CD',\n  'barvee': '\\u22BD',\n  'barwed': '\\u2305',\n  'barwedge': '\\u2305',\n  'bbrktbrk': '\\u23B6',\n  'bcy': '\\u0431',\n  'bdquo': '\\u201E',\n  'ldquor': '\\u201E',\n  'bemptyv': '\\u29B0',\n  'beta': '\\u03B2',\n  'beth': '\\u2136',\n  'between': '\\u226C',\n  'twixt': '\\u226C',\n  'bfr': '\\uD835\\uDD1F',\n  'bigcirc': '\\u25EF',\n  'xcirc': '\\u25EF',\n  'bigodot': '\\u2A00',\n  'xodot': '\\u2A00',\n  'bigoplus': '\\u2A01',\n  'xoplus': '\\u2A01',\n  'bigotimes': '\\u2A02',\n  'xotime': '\\u2A02',\n  'bigsqcup': '\\u2A06',\n  'xsqcup': '\\u2A06',\n  'bigstar': '\\u2605',\n  'starf': '\\u2605',\n  'bigtriangledown': '\\u25BD',\n  'xdtri': '\\u25BD',\n  'bigtriangleup': '\\u25B3',\n  'xutri': '\\u25B3',\n  'biguplus': '\\u2A04',\n  'xuplus': '\\u2A04',\n  'bkarow': '\\u290D',\n  'rbarr': '\\u290D',\n  'blacklozenge': '\\u29EB',\n  'lozf': '\\u29EB',\n  'blacktriangle': '\\u25B4',\n  'utrif': '\\u25B4',\n  'blacktriangledown': '\\u25BE',\n  'dtrif': '\\u25BE',\n  'blacktriangleleft': '\\u25C2',\n  'ltrif': '\\u25C2',\n  'blacktriangleright': '\\u25B8',\n  'rtrif': '\\u25B8',\n  'blank': '\\u2423',\n  'blk12': '\\u2592',\n  'blk14': '\\u2591',\n  'blk34': '\\u2593',\n  'block': '\\u2588',\n  'bne': '\\u003D\\u20E5',\n  'bnequiv': '\\u2261\\u20E5',\n  'bnot': '\\u2310',\n  'bopf': '\\uD835\\uDD53',\n  'bowtie': '\\u22C8',\n  'boxDL': '\\u2557',\n  'boxDR': '\\u2554',\n  'boxDl': '\\u2556',\n  'boxDr': '\\u2553',\n  'boxH': '\\u2550',\n  'boxHD': '\\u2566',\n  'boxHU': '\\u2569',\n  'boxHd': '\\u2564',\n  'boxHu': '\\u2567',\n  'boxUL': '\\u255D',\n  'boxUR': '\\u255A',\n  'boxUl': '\\u255C',\n  'boxUr': '\\u2559',\n  'boxV': '\\u2551',\n  'boxVH': '\\u256C',\n  'boxVL': '\\u2563',\n  'boxVR': '\\u2560',\n  'boxVh': '\\u256B',\n  'boxVl': '\\u2562',\n  'boxVr': '\\u255F',\n  'boxbox': '\\u29C9',\n  'boxdL': '\\u2555',\n  'boxdR': '\\u2552',\n  'boxdl': '\\u2510',\n  'boxdr': '\\u250C',\n  'boxhD': '\\u2565',\n  'boxhU': '\\u2568',\n  'boxhd': '\\u252C',\n  'boxhu': '\\u2534',\n  'boxminus': '\\u229F',\n  'minusb': '\\u229F',\n  'boxplus': '\\u229E',\n  'plusb': '\\u229E',\n  'boxtimes': '\\u22A0',\n  'timesb': '\\u22A0',\n  'boxuL': '\\u255B',\n  'boxuR': '\\u2558',\n  'boxul': '\\u2518',\n  'boxur': '\\u2514',\n  'boxv': '\\u2502',\n  'boxvH': '\\u256A',\n  'boxvL': '\\u2561',\n  'boxvR': '\\u255E',\n  'boxvh': '\\u253C',\n  'boxvl': '\\u2524',\n  'boxvr': '\\u251C',\n  'brvbar': '\\u00A6',\n  'bscr': '\\uD835\\uDCB7',\n  'bsemi': '\\u204F',\n  'bsol': '\\u005C',\n  'bsolb': '\\u29C5',\n  'bsolhsub': '\\u27C8',\n  'bull': '\\u2022',\n  'bullet': '\\u2022',\n  'bumpE': '\\u2AAE',\n  'cacute': '\\u0107',\n  'cap': '\\u2229',\n  'capand': '\\u2A44',\n  'capbrcup': '\\u2A49',\n  'capcap': '\\u2A4B',\n  'capcup': '\\u2A47',\n  'capdot': '\\u2A40',\n  'caps': '\\u2229\\uFE00',\n  'caret': '\\u2041',\n  'ccaps': '\\u2A4D',\n  'ccaron': '\\u010D',\n  'ccedil': '\\u00E7',\n  'ccirc': '\\u0109',\n  'ccups': '\\u2A4C',\n  'ccupssm': '\\u2A50',\n  'cdot': '\\u010B',\n  'cemptyv': '\\u29B2',\n  'cent': '\\u00A2',\n  'cfr': '\\uD835\\uDD20',\n  'chcy': '\\u0447',\n  'check': '\\u2713',\n  'checkmark': '\\u2713',\n  'chi': '\\u03C7',\n  'cir': '\\u25CB',\n  'cirE': '\\u29C3',\n  'circ': '\\u02C6',\n  'circeq': '\\u2257',\n  'cire': '\\u2257',\n  'circlearrowleft': '\\u21BA',\n  'olarr': '\\u21BA',\n  'circlearrowright': '\\u21BB',\n  'orarr': '\\u21BB',\n  'circledS': '\\u24C8',\n  'oS': '\\u24C8',\n  'circledast': '\\u229B',\n  'oast': '\\u229B',\n  'circledcirc': '\\u229A',\n  'ocir': '\\u229A',\n  'circleddash': '\\u229D',\n  'odash': '\\u229D',\n  'cirfnint': '\\u2A10',\n  'cirmid': '\\u2AEF',\n  'cirscir': '\\u29C2',\n  'clubs': '\\u2663',\n  'clubsuit': '\\u2663',\n  'colon': '\\u003A',\n  'comma': '\\u002C',\n  'commat': '\\u0040',\n  'comp': '\\u2201',\n  'complement': '\\u2201',\n  'congdot': '\\u2A6D',\n  'copf': '\\uD835\\uDD54',\n  'copysr': '\\u2117',\n  'crarr': '\\u21B5',\n  'cross': '\\u2717',\n  'cscr': '\\uD835\\uDCB8',\n  'csub': '\\u2ACF',\n  'csube': '\\u2AD1',\n  'csup': '\\u2AD0',\n  'csupe': '\\u2AD2',\n  'ctdot': '\\u22EF',\n  'cudarrl': '\\u2938',\n  'cudarrr': '\\u2935',\n  'cuepr': '\\u22DE',\n  'curlyeqprec': '\\u22DE',\n  'cuesc': '\\u22DF',\n  'curlyeqsucc': '\\u22DF',\n  'cularr': '\\u21B6',\n  'curvearrowleft': '\\u21B6',\n  'cularrp': '\\u293D',\n  'cup': '\\u222A',\n  'cupbrcap': '\\u2A48',\n  'cupcap': '\\u2A46',\n  'cupcup': '\\u2A4A',\n  'cupdot': '\\u228D',\n  'cupor': '\\u2A45',\n  'cups': '\\u222A\\uFE00',\n  'curarr': '\\u21B7',\n  'curvearrowright': '\\u21B7',\n  'curarrm': '\\u293C',\n  'curlyvee': '\\u22CE',\n  'cuvee': '\\u22CE',\n  'curlywedge': '\\u22CF',\n  'cuwed': '\\u22CF',\n  'curren': '\\u00A4',\n  'cwint': '\\u2231',\n  'cylcty': '\\u232D',\n  'dHar': '\\u2965',\n  'dagger': '\\u2020',\n  'daleth': '\\u2138',\n  'dash': '\\u2010',\n  'hyphen': '\\u2010',\n  'dbkarow': '\\u290F',\n  'rBarr': '\\u290F',\n  'dcaron': '\\u010F',\n  'dcy': '\\u0434',\n  'ddarr': '\\u21CA',\n  'downdownarrows': '\\u21CA',\n  'ddotseq': '\\u2A77',\n  'eDDot': '\\u2A77',\n  'deg': '\\u00B0',\n  'delta': '\\u03B4',\n  'demptyv': '\\u29B1',\n  'dfisht': '\\u297F',\n  'dfr': '\\uD835\\uDD21',\n  'diamondsuit': '\\u2666',\n  'diams': '\\u2666',\n  'digamma': '\\u03DD',\n  'gammad': '\\u03DD',\n  'disin': '\\u22F2',\n  'div': '\\u00F7',\n  'divide': '\\u00F7',\n  'divideontimes': '\\u22C7',\n  'divonx': '\\u22C7',\n  'djcy': '\\u0452',\n  'dlcorn': '\\u231E',\n  'llcorner': '\\u231E',\n  'dlcrop': '\\u230D',\n  'dollar': '\\u0024',\n  'dopf': '\\uD835\\uDD55',\n  'doteqdot': '\\u2251',\n  'eDot': '\\u2251',\n  'dotminus': '\\u2238',\n  'minusd': '\\u2238',\n  'dotplus': '\\u2214',\n  'plusdo': '\\u2214',\n  'dotsquare': '\\u22A1',\n  'sdotb': '\\u22A1',\n  'drcorn': '\\u231F',\n  'lrcorner': '\\u231F',\n  'drcrop': '\\u230C',\n  'dscr': '\\uD835\\uDCB9',\n  'dscy': '\\u0455',\n  'dsol': '\\u29F6',\n  'dstrok': '\\u0111',\n  'dtdot': '\\u22F1',\n  'dtri': '\\u25BF',\n  'triangledown': '\\u25BF',\n  'dwangle': '\\u29A6',\n  'dzcy': '\\u045F',\n  'dzigrarr': '\\u27FF',\n  'eacute': '\\u00E9',\n  'easter': '\\u2A6E',\n  'ecaron': '\\u011B',\n  'ecir': '\\u2256',\n  'eqcirc': '\\u2256',\n  'ecirc': '\\u00EA',\n  'ecolon': '\\u2255',\n  'eqcolon': '\\u2255',\n  'ecy': '\\u044D',\n  'edot': '\\u0117',\n  'efDot': '\\u2252',\n  'fallingdotseq': '\\u2252',\n  'efr': '\\uD835\\uDD22',\n  'eg': '\\u2A9A',\n  'egrave': '\\u00E8',\n  'egs': '\\u2A96',\n  'eqslantgtr': '\\u2A96',\n  'egsdot': '\\u2A98',\n  'el': '\\u2A99',\n  'elinters': '\\u23E7',\n  'ell': '\\u2113',\n  'els': '\\u2A95',\n  'eqslantless': '\\u2A95',\n  'elsdot': '\\u2A97',\n  'emacr': '\\u0113',\n  'empty': '\\u2205',\n  'emptyset': '\\u2205',\n  'emptyv': '\\u2205',\n  'varnothing': '\\u2205',\n  'emsp13': '\\u2004',\n  'emsp14': '\\u2005',\n  'emsp': '\\u2003',\n  'eng': '\\u014B',\n  'ensp': '\\u2002',\n  'eogon': '\\u0119',\n  'eopf': '\\uD835\\uDD56',\n  'epar': '\\u22D5',\n  'eparsl': '\\u29E3',\n  'eplus': '\\u2A71',\n  'epsi': '\\u03B5',\n  'epsilon': '\\u03B5',\n  'epsiv': '\\u03F5',\n  'straightepsilon': '\\u03F5',\n  'varepsilon': '\\u03F5',\n  'equals': '\\u003D',\n  'equest': '\\u225F',\n  'questeq': '\\u225F',\n  'equivDD': '\\u2A78',\n  'eqvparsl': '\\u29E5',\n  'erDot': '\\u2253',\n  'risingdotseq': '\\u2253',\n  'erarr': '\\u2971',\n  'escr': '\\u212F',\n  'eta': '\\u03B7',\n  'eth': '\\u00F0',\n  'euml': '\\u00EB',\n  'euro': '\\u20AC',\n  'excl': '\\u0021',\n  'fcy': '\\u0444',\n  'female': '\\u2640',\n  'ffilig': '\\uFB03',\n  'fflig': '\\uFB00',\n  'ffllig': '\\uFB04',\n  'ffr': '\\uD835\\uDD23',\n  'filig': '\\uFB01',\n  'fjlig': '\\u0066\\u006A',\n  'flat': '\\u266D',\n  'fllig': '\\uFB02',\n  'fltns': '\\u25B1',\n  'fnof': '\\u0192',\n  'fopf': '\\uD835\\uDD57',\n  'fork': '\\u22D4',\n  'pitchfork': '\\u22D4',\n  'forkv': '\\u2AD9',\n  'fpartint': '\\u2A0D',\n  'frac12': '\\u00BD',\n  'half': '\\u00BD',\n  'frac13': '\\u2153',\n  'frac14': '\\u00BC',\n  'frac15': '\\u2155',\n  'frac16': '\\u2159',\n  'frac18': '\\u215B',\n  'frac23': '\\u2154',\n  'frac25': '\\u2156',\n  'frac34': '\\u00BE',\n  'frac35': '\\u2157',\n  'frac38': '\\u215C',\n  'frac45': '\\u2158',\n  'frac56': '\\u215A',\n  'frac58': '\\u215D',\n  'frac78': '\\u215E',\n  'frasl': '\\u2044',\n  'frown': '\\u2322',\n  'sfrown': '\\u2322',\n  'fscr': '\\uD835\\uDCBB',\n  'gEl': '\\u2A8C',\n  'gtreqqless': '\\u2A8C',\n  'gacute': '\\u01F5',\n  'gamma': '\\u03B3',\n  'gap': '\\u2A86',\n  'gtrapprox': '\\u2A86',\n  'gbreve': '\\u011F',\n  'gcirc': '\\u011D',\n  'gcy': '\\u0433',\n  'gdot': '\\u0121',\n  'gescc': '\\u2AA9',\n  'gesdot': '\\u2A80',\n  'gesdoto': '\\u2A82',\n  'gesdotol': '\\u2A84',\n  'gesl': '\\u22DB\\uFE00',\n  'gesles': '\\u2A94',\n  'gfr': '\\uD835\\uDD24',\n  'gimel': '\\u2137',\n  'gjcy': '\\u0453',\n  'glE': '\\u2A92',\n  'gla': '\\u2AA5',\n  'glj': '\\u2AA4',\n  'gnE': '\\u2269',\n  'gneqq': '\\u2269',\n  'gnap': '\\u2A8A',\n  'gnapprox': '\\u2A8A',\n  'gne': '\\u2A88',\n  'gneq': '\\u2A88',\n  'gnsim': '\\u22E7',\n  'gopf': '\\uD835\\uDD58',\n  'gscr': '\\u210A',\n  'gsime': '\\u2A8E',\n  'gsiml': '\\u2A90',\n  'gtcc': '\\u2AA7',\n  'gtcir': '\\u2A7A',\n  'gtdot': '\\u22D7',\n  'gtrdot': '\\u22D7',\n  'gtlPar': '\\u2995',\n  'gtquest': '\\u2A7C',\n  'gtrarr': '\\u2978',\n  'gvertneqq': '\\u2269\\uFE00',\n  'gvnE': '\\u2269\\uFE00',\n  'hardcy': '\\u044A',\n  'harrcir': '\\u2948',\n  'harrw': '\\u21AD',\n  'leftrightsquigarrow': '\\u21AD',\n  'hbar': '\\u210F',\n  'hslash': '\\u210F',\n  'planck': '\\u210F',\n  'plankv': '\\u210F',\n  'hcirc': '\\u0125',\n  'hearts': '\\u2665',\n  'heartsuit': '\\u2665',\n  'hellip': '\\u2026',\n  'mldr': '\\u2026',\n  'hercon': '\\u22B9',\n  'hfr': '\\uD835\\uDD25',\n  'hksearow': '\\u2925',\n  'searhk': '\\u2925',\n  'hkswarow': '\\u2926',\n  'swarhk': '\\u2926',\n  'hoarr': '\\u21FF',\n  'homtht': '\\u223B',\n  'hookleftarrow': '\\u21A9',\n  'larrhk': '\\u21A9',\n  'hookrightarrow': '\\u21AA',\n  'rarrhk': '\\u21AA',\n  'hopf': '\\uD835\\uDD59',\n  'horbar': '\\u2015',\n  'hscr': '\\uD835\\uDCBD',\n  'hstrok': '\\u0127',\n  'hybull': '\\u2043',\n  'iacute': '\\u00ED',\n  'icirc': '\\u00EE',\n  'icy': '\\u0438',\n  'iecy': '\\u0435',\n  'iexcl': '\\u00A1',\n  'ifr': '\\uD835\\uDD26',\n  'igrave': '\\u00EC',\n  'iiiint': '\\u2A0C',\n  'qint': '\\u2A0C',\n  'iiint': '\\u222D',\n  'tint': '\\u222D',\n  'iinfin': '\\u29DC',\n  'iiota': '\\u2129',\n  'ijlig': '\\u0133',\n  'imacr': '\\u012B',\n  'imath': '\\u0131',\n  'inodot': '\\u0131',\n  'imof': '\\u22B7',\n  'imped': '\\u01B5',\n  'incare': '\\u2105',\n  'infin': '\\u221E',\n  'infintie': '\\u29DD',\n  'intcal': '\\u22BA',\n  'intercal': '\\u22BA',\n  'intlarhk': '\\u2A17',\n  'intprod': '\\u2A3C',\n  'iprod': '\\u2A3C',\n  'iocy': '\\u0451',\n  'iogon': '\\u012F',\n  'iopf': '\\uD835\\uDD5A',\n  'iota': '\\u03B9',\n  'iquest': '\\u00BF',\n  'iscr': '\\uD835\\uDCBE',\n  'isinE': '\\u22F9',\n  'isindot': '\\u22F5',\n  'isins': '\\u22F4',\n  'isinsv': '\\u22F3',\n  'itilde': '\\u0129',\n  'iukcy': '\\u0456',\n  'iuml': '\\u00EF',\n  'jcirc': '\\u0135',\n  'jcy': '\\u0439',\n  'jfr': '\\uD835\\uDD27',\n  'jmath': '\\u0237',\n  'jopf': '\\uD835\\uDD5B',\n  'jscr': '\\uD835\\uDCBF',\n  'jsercy': '\\u0458',\n  'jukcy': '\\u0454',\n  'kappa': '\\u03BA',\n  'kappav': '\\u03F0',\n  'varkappa': '\\u03F0',\n  'kcedil': '\\u0137',\n  'kcy': '\\u043A',\n  'kfr': '\\uD835\\uDD28',\n  'kgreen': '\\u0138',\n  'khcy': '\\u0445',\n  'kjcy': '\\u045C',\n  'kopf': '\\uD835\\uDD5C',\n  'kscr': '\\uD835\\uDCC0',\n  'lAtail': '\\u291B',\n  'lBarr': '\\u290E',\n  'lEg': '\\u2A8B',\n  'lesseqqgtr': '\\u2A8B',\n  'lHar': '\\u2962',\n  'lacute': '\\u013A',\n  'laemptyv': '\\u29B4',\n  'lambda': '\\u03BB',\n  'langd': '\\u2991',\n  'lap': '\\u2A85',\n  'lessapprox': '\\u2A85',\n  'laquo': '\\u00AB',\n  'larrbfs': '\\u291F',\n  'larrfs': '\\u291D',\n  'larrlp': '\\u21AB',\n  'looparrowleft': '\\u21AB',\n  'larrpl': '\\u2939',\n  'larrsim': '\\u2973',\n  'larrtl': '\\u21A2',\n  'leftarrowtail': '\\u21A2',\n  'lat': '\\u2AAB',\n  'latail': '\\u2919',\n  'late': '\\u2AAD',\n  'lates': '\\u2AAD\\uFE00',\n  'lbarr': '\\u290C',\n  'lbbrk': '\\u2772',\n  'lbrace': '\\u007B',\n  'lcub': '\\u007B',\n  'lbrack': '\\u005B',\n  'lsqb': '\\u005B',\n  'lbrke': '\\u298B',\n  'lbrksld': '\\u298F',\n  'lbrkslu': '\\u298D',\n  'lcaron': '\\u013E',\n  'lcedil': '\\u013C',\n  'lcy': '\\u043B',\n  'ldca': '\\u2936',\n  'ldrdhar': '\\u2967',\n  'ldrushar': '\\u294B',\n  'ldsh': '\\u21B2',\n  'le': '\\u2264',\n  'leq': '\\u2264',\n  'leftleftarrows': '\\u21C7',\n  'llarr': '\\u21C7',\n  'leftthreetimes': '\\u22CB',\n  'lthree': '\\u22CB',\n  'lescc': '\\u2AA8',\n  'lesdot': '\\u2A7F',\n  'lesdoto': '\\u2A81',\n  'lesdotor': '\\u2A83',\n  'lesg': '\\u22DA\\uFE00',\n  'lesges': '\\u2A93',\n  'lessdot': '\\u22D6',\n  'ltdot': '\\u22D6',\n  'lfisht': '\\u297C',\n  'lfr': '\\uD835\\uDD29',\n  'lgE': '\\u2A91',\n  'lharul': '\\u296A',\n  'lhblk': '\\u2584',\n  'ljcy': '\\u0459',\n  'llhard': '\\u296B',\n  'lltri': '\\u25FA',\n  'lmidot': '\\u0140',\n  'lmoust': '\\u23B0',\n  'lmoustache': '\\u23B0',\n  'lnE': '\\u2268',\n  'lneqq': '\\u2268',\n  'lnap': '\\u2A89',\n  'lnapprox': '\\u2A89',\n  'lne': '\\u2A87',\n  'lneq': '\\u2A87',\n  'lnsim': '\\u22E6',\n  'loang': '\\u27EC',\n  'loarr': '\\u21FD',\n  'longmapsto': '\\u27FC',\n  'xmap': '\\u27FC',\n  'looparrowright': '\\u21AC',\n  'rarrlp': '\\u21AC',\n  'lopar': '\\u2985',\n  'lopf': '\\uD835\\uDD5D',\n  'loplus': '\\u2A2D',\n  'lotimes': '\\u2A34',\n  'lowast': '\\u2217',\n  'loz': '\\u25CA',\n  'lozenge': '\\u25CA',\n  'lpar': '\\u0028',\n  'lparlt': '\\u2993',\n  'lrhard': '\\u296D',\n  'lrm': '\\u200E',\n  'lrtri': '\\u22BF',\n  'lsaquo': '\\u2039',\n  'lscr': '\\uD835\\uDCC1',\n  'lsime': '\\u2A8D',\n  'lsimg': '\\u2A8F',\n  'lsquor': '\\u201A',\n  'sbquo': '\\u201A',\n  'lstrok': '\\u0142',\n  'ltcc': '\\u2AA6',\n  'ltcir': '\\u2A79',\n  'ltimes': '\\u22C9',\n  'ltlarr': '\\u2976',\n  'ltquest': '\\u2A7B',\n  'ltrPar': '\\u2996',\n  'ltri': '\\u25C3',\n  'triangleleft': '\\u25C3',\n  'lurdshar': '\\u294A',\n  'luruhar': '\\u2966',\n  'lvertneqq': '\\u2268\\uFE00',\n  'lvnE': '\\u2268\\uFE00',\n  'mDDot': '\\u223A',\n  'macr': '\\u00AF',\n  'strns': '\\u00AF',\n  'male': '\\u2642',\n  'malt': '\\u2720',\n  'maltese': '\\u2720',\n  'marker': '\\u25AE',\n  'mcomma': '\\u2A29',\n  'mcy': '\\u043C',\n  'mdash': '\\u2014',\n  'mfr': '\\uD835\\uDD2A',\n  'mho': '\\u2127',\n  'micro': '\\u00B5',\n  'midcir': '\\u2AF0',\n  'minus': '\\u2212',\n  'minusdu': '\\u2A2A',\n  'mlcp': '\\u2ADB',\n  'models': '\\u22A7',\n  'mopf': '\\uD835\\uDD5E',\n  'mscr': '\\uD835\\uDCC2',\n  'mu': '\\u03BC',\n  'multimap': '\\u22B8',\n  'mumap': '\\u22B8',\n  'nGg': '\\u22D9\\u0338',\n  'nGt': '\\u226B\\u20D2',\n  'nLeftarrow': '\\u21CD',\n  'nlArr': '\\u21CD',\n  'nLeftrightarrow': '\\u21CE',\n  'nhArr': '\\u21CE',\n  'nLl': '\\u22D8\\u0338',\n  'nLt': '\\u226A\\u20D2',\n  'nRightarrow': '\\u21CF',\n  'nrArr': '\\u21CF',\n  'nVDash': '\\u22AF',\n  'nVdash': '\\u22AE',\n  'nacute': '\\u0144',\n  'nang': '\\u2220\\u20D2',\n  'napE': '\\u2A70\\u0338',\n  'napid': '\\u224B\\u0338',\n  'napos': '\\u0149',\n  'natur': '\\u266E',\n  'natural': '\\u266E',\n  'ncap': '\\u2A43',\n  'ncaron': '\\u0148',\n  'ncedil': '\\u0146',\n  'ncongdot': '\\u2A6D\\u0338',\n  'ncup': '\\u2A42',\n  'ncy': '\\u043D',\n  'ndash': '\\u2013',\n  'neArr': '\\u21D7',\n  'nearhk': '\\u2924',\n  'nedot': '\\u2250\\u0338',\n  'nesear': '\\u2928',\n  'toea': '\\u2928',\n  'nfr': '\\uD835\\uDD2B',\n  'nharr': '\\u21AE',\n  'nleftrightarrow': '\\u21AE',\n  'nhpar': '\\u2AF2',\n  'nis': '\\u22FC',\n  'nisd': '\\u22FA',\n  'njcy': '\\u045A',\n  'nlE': '\\u2266\\u0338',\n  'nleqq': '\\u2266\\u0338',\n  'nlarr': '\\u219A',\n  'nleftarrow': '\\u219A',\n  'nldr': '\\u2025',\n  'nopf': '\\uD835\\uDD5F',\n  'not': '\\u00AC',\n  'notinE': '\\u22F9\\u0338',\n  'notindot': '\\u22F5\\u0338',\n  'notinvb': '\\u22F7',\n  'notinvc': '\\u22F6',\n  'notnivb': '\\u22FE',\n  'notnivc': '\\u22FD',\n  'nparsl': '\\u2AFD\\u20E5',\n  'npart': '\\u2202\\u0338',\n  'npolint': '\\u2A14',\n  'nrarr': '\\u219B',\n  'nrightarrow': '\\u219B',\n  'nrarrc': '\\u2933\\u0338',\n  'nrarrw': '\\u219D\\u0338',\n  'nscr': '\\uD835\\uDCC3',\n  'nsub': '\\u2284',\n  'nsubE': '\\u2AC5\\u0338',\n  'nsubseteqq': '\\u2AC5\\u0338',\n  'nsup': '\\u2285',\n  'nsupE': '\\u2AC6\\u0338',\n  'nsupseteqq': '\\u2AC6\\u0338',\n  'ntilde': '\\u00F1',\n  'nu': '\\u03BD',\n  'num': '\\u0023',\n  'numero': '\\u2116',\n  'numsp': '\\u2007',\n  'nvDash': '\\u22AD',\n  'nvHarr': '\\u2904',\n  'nvap': '\\u224D\\u20D2',\n  'nvdash': '\\u22AC',\n  'nvge': '\\u2265\\u20D2',\n  'nvgt': '\\u003E\\u20D2',\n  'nvinfin': '\\u29DE',\n  'nvlArr': '\\u2902',\n  'nvle': '\\u2264\\u20D2',\n  'nvlt': '\\u003C\\u20D2',\n  'nvltrie': '\\u22B4\\u20D2',\n  'nvrArr': '\\u2903',\n  'nvrtrie': '\\u22B5\\u20D2',\n  'nvsim': '\\u223C\\u20D2',\n  'nwArr': '\\u21D6',\n  'nwarhk': '\\u2923',\n  'nwnear': '\\u2927',\n  'oacute': '\\u00F3',\n  'ocirc': '\\u00F4',\n  'ocy': '\\u043E',\n  'odblac': '\\u0151',\n  'odiv': '\\u2A38',\n  'odsold': '\\u29BC',\n  'oelig': '\\u0153',\n  'ofcir': '\\u29BF',\n  'ofr': '\\uD835\\uDD2C',\n  'ogon': '\\u02DB',\n  'ograve': '\\u00F2',\n  'ogt': '\\u29C1',\n  'ohbar': '\\u29B5',\n  'olcir': '\\u29BE',\n  'olcross': '\\u29BB',\n  'olt': '\\u29C0',\n  'omacr': '\\u014D',\n  'omega': '\\u03C9',\n  'omicron': '\\u03BF',\n  'omid': '\\u29B6',\n  'oopf': '\\uD835\\uDD60',\n  'opar': '\\u29B7',\n  'operp': '\\u29B9',\n  'or': '\\u2228',\n  'vee': '\\u2228',\n  'ord': '\\u2A5D',\n  'order': '\\u2134',\n  'orderof': '\\u2134',\n  'oscr': '\\u2134',\n  'ordf': '\\u00AA',\n  'ordm': '\\u00BA',\n  'origof': '\\u22B6',\n  'oror': '\\u2A56',\n  'orslope': '\\u2A57',\n  'orv': '\\u2A5B',\n  'oslash': '\\u00F8',\n  'osol': '\\u2298',\n  'otilde': '\\u00F5',\n  'otimesas': '\\u2A36',\n  'ouml': '\\u00F6',\n  'ovbar': '\\u233D',\n  'para': '\\u00B6',\n  'parsim': '\\u2AF3',\n  'parsl': '\\u2AFD',\n  'pcy': '\\u043F',\n  'percnt': '\\u0025',\n  'period': '\\u002E',\n  'permil': '\\u2030',\n  'pertenk': '\\u2031',\n  'pfr': '\\uD835\\uDD2D',\n  'phi': '\\u03C6',\n  'phiv': '\\u03D5',\n  'straightphi': '\\u03D5',\n  'varphi': '\\u03D5',\n  'phone': '\\u260E',\n  'pi': '\\u03C0',\n  'piv': '\\u03D6',\n  'varpi': '\\u03D6',\n  'planckh': '\\u210E',\n  'plus': '\\u002B',\n  'plusacir': '\\u2A23',\n  'pluscir': '\\u2A22',\n  'plusdu': '\\u2A25',\n  'pluse': '\\u2A72',\n  'plussim': '\\u2A26',\n  'plustwo': '\\u2A27',\n  'pointint': '\\u2A15',\n  'popf': '\\uD835\\uDD61',\n  'pound': '\\u00A3',\n  'prE': '\\u2AB3',\n  'prap': '\\u2AB7',\n  'precapprox': '\\u2AB7',\n  'precnapprox': '\\u2AB9',\n  'prnap': '\\u2AB9',\n  'precneqq': '\\u2AB5',\n  'prnE': '\\u2AB5',\n  'precnsim': '\\u22E8',\n  'prnsim': '\\u22E8',\n  'prime': '\\u2032',\n  'profalar': '\\u232E',\n  'profline': '\\u2312',\n  'profsurf': '\\u2313',\n  'prurel': '\\u22B0',\n  'pscr': '\\uD835\\uDCC5',\n  'psi': '\\u03C8',\n  'puncsp': '\\u2008',\n  'qfr': '\\uD835\\uDD2E',\n  'qopf': '\\uD835\\uDD62',\n  'qprime': '\\u2057',\n  'qscr': '\\uD835\\uDCC6',\n  'quatint': '\\u2A16',\n  'quest': '\\u003F',\n  'rAtail': '\\u291C',\n  'rHar': '\\u2964',\n  'race': '\\u223D\\u0331',\n  'racute': '\\u0155',\n  'raemptyv': '\\u29B3',\n  'rangd': '\\u2992',\n  'range': '\\u29A5',\n  'raquo': '\\u00BB',\n  'rarrap': '\\u2975',\n  'rarrbfs': '\\u2920',\n  'rarrc': '\\u2933',\n  'rarrfs': '\\u291E',\n  'rarrpl': '\\u2945',\n  'rarrsim': '\\u2974',\n  'rarrtl': '\\u21A3',\n  'rightarrowtail': '\\u21A3',\n  'rarrw': '\\u219D',\n  'rightsquigarrow': '\\u219D',\n  'ratail': '\\u291A',\n  'ratio': '\\u2236',\n  'rbbrk': '\\u2773',\n  'rbrace': '\\u007D',\n  'rcub': '\\u007D',\n  'rbrack': '\\u005D',\n  'rsqb': '\\u005D',\n  'rbrke': '\\u298C',\n  'rbrksld': '\\u298E',\n  'rbrkslu': '\\u2990',\n  'rcaron': '\\u0159',\n  'rcedil': '\\u0157',\n  'rcy': '\\u0440',\n  'rdca': '\\u2937',\n  'rdldhar': '\\u2969',\n  'rdsh': '\\u21B3',\n  'rect': '\\u25AD',\n  'rfisht': '\\u297D',\n  'rfr': '\\uD835\\uDD2F',\n  'rharul': '\\u296C',\n  'rho': '\\u03C1',\n  'rhov': '\\u03F1',\n  'varrho': '\\u03F1',\n  'rightrightarrows': '\\u21C9',\n  'rrarr': '\\u21C9',\n  'rightthreetimes': '\\u22CC',\n  'rthree': '\\u22CC',\n  'ring': '\\u02DA',\n  'rlm': '\\u200F',\n  'rmoust': '\\u23B1',\n  'rmoustache': '\\u23B1',\n  'rnmid': '\\u2AEE',\n  'roang': '\\u27ED',\n  'roarr': '\\u21FE',\n  'ropar': '\\u2986',\n  'ropf': '\\uD835\\uDD63',\n  'roplus': '\\u2A2E',\n  'rotimes': '\\u2A35',\n  'rpar': '\\u0029',\n  'rpargt': '\\u2994',\n  'rppolint': '\\u2A12',\n  'rsaquo': '\\u203A',\n  'rscr': '\\uD835\\uDCC7',\n  'rtimes': '\\u22CA',\n  'rtri': '\\u25B9',\n  'triangleright': '\\u25B9',\n  'rtriltri': '\\u29CE',\n  'ruluhar': '\\u2968',\n  'rx': '\\u211E',\n  'sacute': '\\u015B',\n  'scE': '\\u2AB4',\n  'scap': '\\u2AB8',\n  'succapprox': '\\u2AB8',\n  'scaron': '\\u0161',\n  'scedil': '\\u015F',\n  'scirc': '\\u015D',\n  'scnE': '\\u2AB6',\n  'succneqq': '\\u2AB6',\n  'scnap': '\\u2ABA',\n  'succnapprox': '\\u2ABA',\n  'scnsim': '\\u22E9',\n  'succnsim': '\\u22E9',\n  'scpolint': '\\u2A13',\n  'scy': '\\u0441',\n  'sdot': '\\u22C5',\n  'sdote': '\\u2A66',\n  'seArr': '\\u21D8',\n  'sect': '\\u00A7',\n  'semi': '\\u003B',\n  'seswar': '\\u2929',\n  'tosa': '\\u2929',\n  'sext': '\\u2736',\n  'sfr': '\\uD835\\uDD30',\n  'sharp': '\\u266F',\n  'shchcy': '\\u0449',\n  'shcy': '\\u0448',\n  'shy': '\\u00AD',\n  'sigma': '\\u03C3',\n  'sigmaf': '\\u03C2',\n  'sigmav': '\\u03C2',\n  'varsigma': '\\u03C2',\n  'simdot': '\\u2A6A',\n  'simg': '\\u2A9E',\n  'simgE': '\\u2AA0',\n  'siml': '\\u2A9D',\n  'simlE': '\\u2A9F',\n  'simne': '\\u2246',\n  'simplus': '\\u2A24',\n  'simrarr': '\\u2972',\n  'smashp': '\\u2A33',\n  'smeparsl': '\\u29E4',\n  'smile': '\\u2323',\n  'ssmile': '\\u2323',\n  'smt': '\\u2AAA',\n  'smte': '\\u2AAC',\n  'smtes': '\\u2AAC\\uFE00',\n  'softcy': '\\u044C',\n  'sol': '\\u002F',\n  'solb': '\\u29C4',\n  'solbar': '\\u233F',\n  'sopf': '\\uD835\\uDD64',\n  'spades': '\\u2660',\n  'spadesuit': '\\u2660',\n  'sqcaps': '\\u2293\\uFE00',\n  'sqcups': '\\u2294\\uFE00',\n  'sscr': '\\uD835\\uDCC8',\n  'star': '\\u2606',\n  'sub': '\\u2282',\n  'subset': '\\u2282',\n  'subE': '\\u2AC5',\n  'subseteqq': '\\u2AC5',\n  'subdot': '\\u2ABD',\n  'subedot': '\\u2AC3',\n  'submult': '\\u2AC1',\n  'subnE': '\\u2ACB',\n  'subsetneqq': '\\u2ACB',\n  'subne': '\\u228A',\n  'subsetneq': '\\u228A',\n  'subplus': '\\u2ABF',\n  'subrarr': '\\u2979',\n  'subsim': '\\u2AC7',\n  'subsub': '\\u2AD5',\n  'subsup': '\\u2AD3',\n  'sung': '\\u266A',\n  'sup1': '\\u00B9',\n  'sup2': '\\u00B2',\n  'sup3': '\\u00B3',\n  'supE': '\\u2AC6',\n  'supseteqq': '\\u2AC6',\n  'supdot': '\\u2ABE',\n  'supdsub': '\\u2AD8',\n  'supedot': '\\u2AC4',\n  'suphsol': '\\u27C9',\n  'suphsub': '\\u2AD7',\n  'suplarr': '\\u297B',\n  'supmult': '\\u2AC2',\n  'supnE': '\\u2ACC',\n  'supsetneqq': '\\u2ACC',\n  'supne': '\\u228B',\n  'supsetneq': '\\u228B',\n  'supplus': '\\u2AC0',\n  'supsim': '\\u2AC8',\n  'supsub': '\\u2AD4',\n  'supsup': '\\u2AD6',\n  'swArr': '\\u21D9',\n  'swnwar': '\\u292A',\n  'szlig': '\\u00DF',\n  'target': '\\u2316',\n  'tau': '\\u03C4',\n  'tcaron': '\\u0165',\n  'tcedil': '\\u0163',\n  'tcy': '\\u0442',\n  'telrec': '\\u2315',\n  'tfr': '\\uD835\\uDD31',\n  'theta': '\\u03B8',\n  'thetasym': '\\u03D1',\n  'thetav': '\\u03D1',\n  'vartheta': '\\u03D1',\n  'thorn': '\\u00FE',\n  'times': '\\u00D7',\n  'timesbar': '\\u2A31',\n  'timesd': '\\u2A30',\n  'topbot': '\\u2336',\n  'topcir': '\\u2AF1',\n  'topf': '\\uD835\\uDD65',\n  'topfork': '\\u2ADA',\n  'tprime': '\\u2034',\n  'triangle': '\\u25B5',\n  'utri': '\\u25B5',\n  'triangleq': '\\u225C',\n  'trie': '\\u225C',\n  'tridot': '\\u25EC',\n  'triminus': '\\u2A3A',\n  'triplus': '\\u2A39',\n  'trisb': '\\u29CD',\n  'tritime': '\\u2A3B',\n  'trpezium': '\\u23E2',\n  'tscr': '\\uD835\\uDCC9',\n  'tscy': '\\u0446',\n  'tshcy': '\\u045B',\n  'tstrok': '\\u0167',\n  'uHar': '\\u2963',\n  'uacute': '\\u00FA',\n  'ubrcy': '\\u045E',\n  'ubreve': '\\u016D',\n  'ucirc': '\\u00FB',\n  'ucy': '\\u0443',\n  'udblac': '\\u0171',\n  'ufisht': '\\u297E',\n  'ufr': '\\uD835\\uDD32',\n  'ugrave': '\\u00F9',\n  'uhblk': '\\u2580',\n  'ulcorn': '\\u231C',\n  'ulcorner': '\\u231C',\n  'ulcrop': '\\u230F',\n  'ultri': '\\u25F8',\n  'umacr': '\\u016B',\n  'uogon': '\\u0173',\n  'uopf': '\\uD835\\uDD66',\n  'upsi': '\\u03C5',\n  'upsilon': '\\u03C5',\n  'upuparrows': '\\u21C8',\n  'uuarr': '\\u21C8',\n  'urcorn': '\\u231D',\n  'urcorner': '\\u231D',\n  'urcrop': '\\u230E',\n  'uring': '\\u016F',\n  'urtri': '\\u25F9',\n  'uscr': '\\uD835\\uDCCA',\n  'utdot': '\\u22F0',\n  'utilde': '\\u0169',\n  'uuml': '\\u00FC',\n  'uwangle': '\\u29A7',\n  'vBar': '\\u2AE8',\n  'vBarv': '\\u2AE9',\n  'vangrt': '\\u299C',\n  'varsubsetneq': '\\u228A\\uFE00',\n  'vsubne': '\\u228A\\uFE00',\n  'varsubsetneqq': '\\u2ACB\\uFE00',\n  'vsubnE': '\\u2ACB\\uFE00',\n  'varsupsetneq': '\\u228B\\uFE00',\n  'vsupne': '\\u228B\\uFE00',\n  'varsupsetneqq': '\\u2ACC\\uFE00',\n  'vsupnE': '\\u2ACC\\uFE00',\n  'vcy': '\\u0432',\n  'veebar': '\\u22BB',\n  'veeeq': '\\u225A',\n  'vellip': '\\u22EE',\n  'vfr': '\\uD835\\uDD33',\n  'vopf': '\\uD835\\uDD67',\n  'vscr': '\\uD835\\uDCCB',\n  'vzigzag': '\\u299A',\n  'wcirc': '\\u0175',\n  'wedbar': '\\u2A5F',\n  'wedgeq': '\\u2259',\n  'weierp': '\\u2118',\n  'wp': '\\u2118',\n  'wfr': '\\uD835\\uDD34',\n  'wopf': '\\uD835\\uDD68',\n  'wscr': '\\uD835\\uDCCC',\n  'xfr': '\\uD835\\uDD35',\n  'xi': '\\u03BE',\n  'xnis': '\\u22FB',\n  'xopf': '\\uD835\\uDD69',\n  'xscr': '\\uD835\\uDCCD',\n  'yacute': '\\u00FD',\n  'yacy': '\\u044F',\n  'ycirc': '\\u0177',\n  'ycy': '\\u044B',\n  'yen': '\\u00A5',\n  'yfr': '\\uD835\\uDD36',\n  'yicy': '\\u0457',\n  'yopf': '\\uD835\\uDD6A',\n  'yscr': '\\uD835\\uDCCE',\n  'yucy': '\\u044E',\n  'yuml': '\\u00FF',\n  'zacute': '\\u017A',\n  'zcaron': '\\u017E',\n  'zcy': '\\u0437',\n  'zdot': '\\u017C',\n  'zeta': '\\u03B6',\n  'zfr': '\\uD835\\uDD37',\n  'zhcy': '\\u0436',\n  'zigrarr': '\\u21DD',\n  'zopf': '\\uD835\\uDD6B',\n  'zscr': '\\uD835\\uDCCF',\n  'zwj': '\\u200D',\n  'zwnj': '\\u200C'\n};\n// The &ngsp; pseudo-entity is denoting a space.\n// 0xE500 is a PUA (Private Use Areas) unicode character\n// This is inspired by the Angular Dart implementation.\nconst NGSP_UNICODE = '\\uE500';\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\nclass TokenError extends ParseError {\n  constructor(errorMsg, tokenType, span) {\n    super(span, errorMsg);\n    this.tokenType = tokenType;\n  }\n}\nclass TokenizeResult {\n  constructor(tokens, errors, nonNormalizedIcuExpressions) {\n    this.tokens = tokens;\n    this.errors = errors;\n    this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;\n  }\n}\nfunction tokenize(source, url, getTagDefinition, options = {}) {\n  const tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);\n  tokenizer.tokenize();\n  return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);\n}\nconst _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\nfunction _unexpectedCharacterErrorMsg(charCode) {\n  const char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\n  return `Unexpected character \"${char}\"`;\n}\nfunction _unknownEntityErrorMsg(entitySrc) {\n  return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\n}\nfunction _unparsableEntityErrorMsg(type, entityStr) {\n  return `Unable to parse entity \"${entityStr}\" - ${type} character reference entities must end with \";\"`;\n}\nvar CharacterReferenceType;\n(function (CharacterReferenceType) {\n  CharacterReferenceType[\"HEX\"] = \"hexadecimal\";\n  CharacterReferenceType[\"DEC\"] = \"decimal\";\n})(CharacterReferenceType || (CharacterReferenceType = {}));\nclass _ControlFlowError {\n  constructor(error) {\n    this.error = error;\n  }\n}\n// See https://www.w3.org/TR/html51/syntax.html#writing-html-documents\nclass _Tokenizer {\n  /**\n   * @param _file The html source file being tokenized.\n   * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.\n   * @param options Configuration of the tokenization.\n   */\n  constructor(_file, _getTagDefinition, options) {\n    this._getTagDefinition = _getTagDefinition;\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    this._expansionCaseStack = [];\n    this._inInterpolation = false;\n    this.tokens = [];\n    this.errors = [];\n    this.nonNormalizedIcuExpressions = [];\n    this._tokenizeIcu = options.tokenizeExpansionForms || false;\n    this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n    this._leadingTriviaCodePoints = options.leadingTriviaChars && options.leadingTriviaChars.map(c => c.codePointAt(0) || 0);\n    const range = options.range || {\n      endPos: _file.content.length,\n      startPos: 0,\n      startLine: 0,\n      startCol: 0\n    };\n    this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) : new PlainCharacterCursor(_file, range);\n    this._preserveLineEndings = options.preserveLineEndings || false;\n    this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;\n    this._tokenizeBlocks = options.tokenizeBlocks ?? true;\n    try {\n      this._cursor.init();\n    } catch (e) {\n      this.handleError(e);\n    }\n  }\n  _processCarriageReturns(content) {\n    if (this._preserveLineEndings) {\n      return content;\n    }\n    // https://www.w3.org/TR/html51/syntax.html#preprocessing-the-input-stream\n    // In order to keep the original position in the source, we can not\n    // pre-process it.\n    // Instead CRs are processed right before instantiating the tokens.\n    return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n  }\n  tokenize() {\n    while (this._cursor.peek() !== $EOF) {\n      const start = this._cursor.clone();\n      try {\n        if (this._attemptCharCode($LT)) {\n          if (this._attemptCharCode($BANG)) {\n            if (this._attemptCharCode($LBRACKET)) {\n              this._consumeCdata(start);\n            } else if (this._attemptCharCode($MINUS)) {\n              this._consumeComment(start);\n            } else {\n              this._consumeDocType(start);\n            }\n          } else if (this._attemptCharCode($SLASH)) {\n            this._consumeTagClose(start);\n          } else {\n            this._consumeTagOpen(start);\n          }\n        } else if (this._tokenizeBlocks && this._attemptCharCode($AT)) {\n          this._consumeBlockStart(start);\n        } else if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansionCase() && !this._isInExpansionForm() && this._attemptCharCode($RBRACE)) {\n          this._consumeBlockEnd(start);\n        } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n          // In (possibly interpolated) text the end of the text is given by `isTextEnd()`, while\n          // the premature end of an interpolation is given by the start of a new HTML element.\n          this._consumeWithInterpolation(5 /* TokenType.TEXT */, 8 /* TokenType.INTERPOLATION */, () => this._isTextEnd(), () => this._isTagStart());\n        }\n      } catch (e) {\n        this.handleError(e);\n      }\n    }\n    this._beginToken(29 /* TokenType.EOF */);\n    this._endToken([]);\n  }\n  _getBlockName() {\n    // This allows us to capture up something like `@else if`, but not `@ if`.\n    let spacesInNameAllowed = false;\n    const nameCursor = this._cursor.clone();\n    this._attemptCharCodeUntilFn(code => {\n      if (isWhitespace(code)) {\n        return !spacesInNameAllowed;\n      }\n      if (isBlockNameChar(code)) {\n        spacesInNameAllowed = true;\n        return false;\n      }\n      return true;\n    });\n    return this._cursor.getChars(nameCursor).trim();\n  }\n  _consumeBlockStart(start) {\n    this._beginToken(24 /* TokenType.BLOCK_OPEN_START */, start);\n    const startToken = this._endToken([this._getBlockName()]);\n    if (this._cursor.peek() === $LPAREN) {\n      // Advance past the opening paren.\n      this._cursor.advance();\n      // Capture the parameters.\n      this._consumeBlockParameters();\n      // Allow spaces before the closing paren.\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      if (this._attemptCharCode($RPAREN)) {\n        // Allow spaces after the paren.\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n      } else {\n        startToken.type = 28 /* TokenType.INCOMPLETE_BLOCK_OPEN */;\n        return;\n      }\n    }\n    if (this._attemptCharCode($LBRACE)) {\n      this._beginToken(25 /* TokenType.BLOCK_OPEN_END */);\n      this._endToken([]);\n    } else {\n      startToken.type = 28 /* TokenType.INCOMPLETE_BLOCK_OPEN */;\n    }\n  }\n  _consumeBlockEnd(start) {\n    this._beginToken(26 /* TokenType.BLOCK_CLOSE */, start);\n    this._endToken([]);\n  }\n  _consumeBlockParameters() {\n    // Trim the whitespace until the first parameter.\n    this._attemptCharCodeUntilFn(isBlockParameterChar);\n    while (this._cursor.peek() !== $RPAREN && this._cursor.peek() !== $EOF) {\n      this._beginToken(27 /* TokenType.BLOCK_PARAMETER */);\n      const start = this._cursor.clone();\n      let inQuote = null;\n      let openParens = 0;\n      // Consume the parameter until the next semicolon or brace.\n      // Note that we skip over semicolons/braces inside of strings.\n      while (this._cursor.peek() !== $SEMICOLON && this._cursor.peek() !== $EOF || inQuote !== null) {\n        const char = this._cursor.peek();\n        // Skip to the next character if it was escaped.\n        if (char === $BACKSLASH) {\n          this._cursor.advance();\n        } else if (char === inQuote) {\n          inQuote = null;\n        } else if (inQuote === null && isQuote(char)) {\n          inQuote = char;\n        } else if (char === $LPAREN && inQuote === null) {\n          openParens++;\n        } else if (char === $RPAREN && inQuote === null) {\n          if (openParens === 0) {\n            break;\n          } else if (openParens > 0) {\n            openParens--;\n          }\n        }\n        this._cursor.advance();\n      }\n      this._endToken([this._cursor.getChars(start)]);\n      // Skip to the next parameter.\n      this._attemptCharCodeUntilFn(isBlockParameterChar);\n    }\n  }\n  /**\n   * @returns whether an ICU token has been created\n   * @internal\n   */\n  _tokenizeExpansionForm() {\n    if (this.isExpansionFormStart()) {\n      this._consumeExpansionFormStart();\n      return true;\n    }\n    if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {\n      this._consumeExpansionCaseStart();\n      return true;\n    }\n    if (this._cursor.peek() === $RBRACE) {\n      if (this._isInExpansionCase()) {\n        this._consumeExpansionCaseEnd();\n        return true;\n      }\n      if (this._isInExpansionForm()) {\n        this._consumeExpansionFormEnd();\n        return true;\n      }\n    }\n    return false;\n  }\n  _beginToken(type, start = this._cursor.clone()) {\n    this._currentTokenStart = start;\n    this._currentTokenType = type;\n  }\n  _endToken(parts, end) {\n    if (this._currentTokenStart === null) {\n      throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));\n    }\n    if (this._currentTokenType === null) {\n      throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));\n    }\n    const token = {\n      type: this._currentTokenType,\n      parts,\n      sourceSpan: (end ?? this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints)\n    };\n    this.tokens.push(token);\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    return token;\n  }\n  _createError(msg, span) {\n    if (this._isInExpansionForm()) {\n      msg += ` (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)`;\n    }\n    const error = new TokenError(msg, this._currentTokenType, span);\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    return new _ControlFlowError(error);\n  }\n  handleError(e) {\n    if (e instanceof CursorError) {\n      e = this._createError(e.msg, this._cursor.getSpan(e.cursor));\n    }\n    if (e instanceof _ControlFlowError) {\n      this.errors.push(e.error);\n    } else {\n      throw e;\n    }\n  }\n  _attemptCharCode(charCode) {\n    if (this._cursor.peek() === charCode) {\n      this._cursor.advance();\n      return true;\n    }\n    return false;\n  }\n  _attemptCharCodeCaseInsensitive(charCode) {\n    if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {\n      this._cursor.advance();\n      return true;\n    }\n    return false;\n  }\n  _requireCharCode(charCode) {\n    const location = this._cursor.clone();\n    if (!this._attemptCharCode(charCode)) {\n      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n    }\n  }\n  _attemptStr(chars) {\n    const len = chars.length;\n    if (this._cursor.charsLeft() < len) {\n      return false;\n    }\n    const initialPosition = this._cursor.clone();\n    for (let i = 0; i < len; i++) {\n      if (!this._attemptCharCode(chars.charCodeAt(i))) {\n        // If attempting to parse the string fails, we want to reset the parser\n        // to where it was before the attempt\n        this._cursor = initialPosition;\n        return false;\n      }\n    }\n    return true;\n  }\n  _attemptStrCaseInsensitive(chars) {\n    for (let i = 0; i < chars.length; i++) {\n      if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _requireStr(chars) {\n    const location = this._cursor.clone();\n    if (!this._attemptStr(chars)) {\n      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n    }\n  }\n  _attemptCharCodeUntilFn(predicate) {\n    while (!predicate(this._cursor.peek())) {\n      this._cursor.advance();\n    }\n  }\n  _requireCharCodeUntilFn(predicate, len) {\n    const start = this._cursor.clone();\n    this._attemptCharCodeUntilFn(predicate);\n    if (this._cursor.diff(start) < len) {\n      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n    }\n  }\n  _attemptUntilChar(char) {\n    while (this._cursor.peek() !== char) {\n      this._cursor.advance();\n    }\n  }\n  _readChar() {\n    // Don't rely upon reading directly from `_input` as the actual char value\n    // may have been generated from an escape sequence.\n    const char = String.fromCodePoint(this._cursor.peek());\n    this._cursor.advance();\n    return char;\n  }\n  _consumeEntity(textTokenType) {\n    this._beginToken(9 /* TokenType.ENCODED_ENTITY */);\n    const start = this._cursor.clone();\n    this._cursor.advance();\n    if (this._attemptCharCode($HASH)) {\n      const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n      const codeStart = this._cursor.clone();\n      this._attemptCharCodeUntilFn(isDigitEntityEnd);\n      if (this._cursor.peek() != $SEMICOLON) {\n        // Advance cursor to include the peeked character in the string provided to the error\n        // message.\n        this._cursor.advance();\n        const entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;\n        throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());\n      }\n      const strNum = this._cursor.getChars(codeStart);\n      this._cursor.advance();\n      try {\n        const charCode = parseInt(strNum, isHex ? 16 : 10);\n        this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);\n      } catch {\n        throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());\n      }\n    } else {\n      const nameStart = this._cursor.clone();\n      this._attemptCharCodeUntilFn(isNamedEntityEnd);\n      if (this._cursor.peek() != $SEMICOLON) {\n        // No semicolon was found so abort the encoded entity token that was in progress, and treat\n        // this as a text token\n        this._beginToken(textTokenType, start);\n        this._cursor = nameStart;\n        this._endToken(['&']);\n      } else {\n        const name = this._cursor.getChars(nameStart);\n        this._cursor.advance();\n        const char = NAMED_ENTITIES[name];\n        if (!char) {\n          throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));\n        }\n        this._endToken([char, `&${name};`]);\n      }\n    }\n  }\n  _consumeRawText(consumeEntities, endMarkerPredicate) {\n    this._beginToken(consumeEntities ? 6 /* TokenType.ESCAPABLE_RAW_TEXT */ : 7 /* TokenType.RAW_TEXT */);\n    const parts = [];\n    while (true) {\n      const tagCloseStart = this._cursor.clone();\n      const foundEndMarker = endMarkerPredicate();\n      this._cursor = tagCloseStart;\n      if (foundEndMarker) {\n        break;\n      }\n      if (consumeEntities && this._cursor.peek() === $AMPERSAND) {\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n        parts.length = 0;\n        this._consumeEntity(6 /* TokenType.ESCAPABLE_RAW_TEXT */);\n        this._beginToken(6 /* TokenType.ESCAPABLE_RAW_TEXT */);\n      } else {\n        parts.push(this._readChar());\n      }\n    }\n    this._endToken([this._processCarriageReturns(parts.join(''))]);\n  }\n  _consumeComment(start) {\n    this._beginToken(10 /* TokenType.COMMENT_START */, start);\n    this._requireCharCode($MINUS);\n    this._endToken([]);\n    this._consumeRawText(false, () => this._attemptStr('-->'));\n    this._beginToken(11 /* TokenType.COMMENT_END */);\n    this._requireStr('-->');\n    this._endToken([]);\n  }\n  _consumeCdata(start) {\n    this._beginToken(12 /* TokenType.CDATA_START */, start);\n    this._requireStr('CDATA[');\n    this._endToken([]);\n    this._consumeRawText(false, () => this._attemptStr(']]>'));\n    this._beginToken(13 /* TokenType.CDATA_END */);\n    this._requireStr(']]>');\n    this._endToken([]);\n  }\n  _consumeDocType(start) {\n    this._beginToken(18 /* TokenType.DOC_TYPE */, start);\n    const contentStart = this._cursor.clone();\n    this._attemptUntilChar($GT);\n    const content = this._cursor.getChars(contentStart);\n    this._cursor.advance();\n    this._endToken([content]);\n  }\n  _consumePrefixAndName() {\n    const nameOrPrefixStart = this._cursor.clone();\n    let prefix = '';\n    while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {\n      this._cursor.advance();\n    }\n    let nameStart;\n    if (this._cursor.peek() === $COLON) {\n      prefix = this._cursor.getChars(nameOrPrefixStart);\n      this._cursor.advance();\n      nameStart = this._cursor.clone();\n    } else {\n      nameStart = nameOrPrefixStart;\n    }\n    this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);\n    const name = this._cursor.getChars(nameStart);\n    return [prefix, name];\n  }\n  _consumeTagOpen(start) {\n    let tagName;\n    let prefix;\n    let openTagToken;\n    try {\n      if (!isAsciiLetter(this._cursor.peek())) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n      }\n      openTagToken = this._consumeTagOpenStart(start);\n      prefix = openTagToken.parts[0];\n      tagName = openTagToken.parts[1];\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT && this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {\n        this._consumeAttributeName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        if (this._attemptCharCode($EQ)) {\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._consumeAttributeValue();\n        }\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n      }\n      this._consumeTagOpenEnd();\n    } catch (e) {\n      if (e instanceof _ControlFlowError) {\n        if (openTagToken) {\n          // We errored before we could close the opening tag, so it is incomplete.\n          openTagToken.type = 4 /* TokenType.INCOMPLETE_TAG_OPEN */;\n        } else {\n          // When the start tag is invalid, assume we want a \"<\" as text.\n          // Back to back text tokens are merged at the end.\n          this._beginToken(5 /* TokenType.TEXT */, start);\n          this._endToken(['<']);\n        }\n        return;\n      }\n      throw e;\n    }\n    const contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);\n    if (contentTokenType === TagContentType.RAW_TEXT) {\n      this._consumeRawTextWithTagClose(prefix, tagName, false);\n    } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n      this._consumeRawTextWithTagClose(prefix, tagName, true);\n    }\n  }\n  _consumeRawTextWithTagClose(prefix, tagName, consumeEntities) {\n    this._consumeRawText(consumeEntities, () => {\n      if (!this._attemptCharCode($LT)) return false;\n      if (!this._attemptCharCode($SLASH)) return false;\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      if (!this._attemptStrCaseInsensitive(tagName)) return false;\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n      return this._attemptCharCode($GT);\n    });\n    this._beginToken(3 /* TokenType.TAG_CLOSE */);\n    this._requireCharCodeUntilFn(code => code === $GT, 3);\n    this._cursor.advance(); // Consume the `>`\n    this._endToken([prefix, tagName]);\n  }\n  _consumeTagOpenStart(start) {\n    this._beginToken(0 /* TokenType.TAG_OPEN_START */, start);\n    const parts = this._consumePrefixAndName();\n    return this._endToken(parts);\n  }\n  _consumeAttributeName() {\n    const attrNameStart = this._cursor.peek();\n    if (attrNameStart === $SQ || attrNameStart === $DQ) {\n      throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());\n    }\n    this._beginToken(14 /* TokenType.ATTR_NAME */);\n    const prefixAndName = this._consumePrefixAndName();\n    this._endToken(prefixAndName);\n  }\n  _consumeAttributeValue() {\n    if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {\n      const quoteChar = this._cursor.peek();\n      this._consumeQuote(quoteChar);\n      // In an attribute then end of the attribute value and the premature end to an interpolation\n      // are both triggered by the `quoteChar`.\n      const endPredicate = () => this._cursor.peek() === quoteChar;\n      this._consumeWithInterpolation(16 /* TokenType.ATTR_VALUE_TEXT */, 17 /* TokenType.ATTR_VALUE_INTERPOLATION */, endPredicate, endPredicate);\n      this._consumeQuote(quoteChar);\n    } else {\n      const endPredicate = () => isNameEnd(this._cursor.peek());\n      this._consumeWithInterpolation(16 /* TokenType.ATTR_VALUE_TEXT */, 17 /* TokenType.ATTR_VALUE_INTERPOLATION */, endPredicate, endPredicate);\n    }\n  }\n  _consumeQuote(quoteChar) {\n    this._beginToken(15 /* TokenType.ATTR_QUOTE */);\n    this._requireCharCode(quoteChar);\n    this._endToken([String.fromCodePoint(quoteChar)]);\n  }\n  _consumeTagOpenEnd() {\n    const tokenType = this._attemptCharCode($SLASH) ? 2 /* TokenType.TAG_OPEN_END_VOID */ : 1 /* TokenType.TAG_OPEN_END */;\n    this._beginToken(tokenType);\n    this._requireCharCode($GT);\n    this._endToken([]);\n  }\n  _consumeTagClose(start) {\n    this._beginToken(3 /* TokenType.TAG_CLOSE */, start);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    const prefixAndName = this._consumePrefixAndName();\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    this._requireCharCode($GT);\n    this._endToken(prefixAndName);\n  }\n  _consumeExpansionFormStart() {\n    this._beginToken(19 /* TokenType.EXPANSION_FORM_START */);\n    this._requireCharCode($LBRACE);\n    this._endToken([]);\n    this._expansionCaseStack.push(19 /* TokenType.EXPANSION_FORM_START */);\n    this._beginToken(7 /* TokenType.RAW_TEXT */);\n    const condition = this._readUntil($COMMA);\n    const normalizedCondition = this._processCarriageReturns(condition);\n    if (this._i18nNormalizeLineEndingsInICUs) {\n      // We explicitly want to normalize line endings for this text.\n      this._endToken([normalizedCondition]);\n    } else {\n      // We are not normalizing line endings.\n      const conditionToken = this._endToken([condition]);\n      if (normalizedCondition !== condition) {\n        this.nonNormalizedIcuExpressions.push(conditionToken);\n      }\n    }\n    this._requireCharCode($COMMA);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    this._beginToken(7 /* TokenType.RAW_TEXT */);\n    const type = this._readUntil($COMMA);\n    this._endToken([type]);\n    this._requireCharCode($COMMA);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n  }\n  _consumeExpansionCaseStart() {\n    this._beginToken(20 /* TokenType.EXPANSION_CASE_VALUE */);\n    const value = this._readUntil($LBRACE).trim();\n    this._endToken([value]);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    this._beginToken(21 /* TokenType.EXPANSION_CASE_EXP_START */);\n    this._requireCharCode($LBRACE);\n    this._endToken([]);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    this._expansionCaseStack.push(21 /* TokenType.EXPANSION_CASE_EXP_START */);\n  }\n  _consumeExpansionCaseEnd() {\n    this._beginToken(22 /* TokenType.EXPANSION_CASE_EXP_END */);\n    this._requireCharCode($RBRACE);\n    this._endToken([]);\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n    this._expansionCaseStack.pop();\n  }\n  _consumeExpansionFormEnd() {\n    this._beginToken(23 /* TokenType.EXPANSION_FORM_END */);\n    this._requireCharCode($RBRACE);\n    this._endToken([]);\n    this._expansionCaseStack.pop();\n  }\n  /**\n   * Consume a string that may contain interpolation expressions.\n   *\n   * The first token consumed will be of `tokenType` and then there will be alternating\n   * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.\n   *\n   * If an interpolation token ends prematurely it will have no end marker in its `parts` array.\n   *\n   * @param textTokenType the kind of tokens to interleave around interpolation tokens.\n   * @param interpolationTokenType the kind of tokens that contain interpolation.\n   * @param endPredicate a function that should return true when we should stop consuming.\n   * @param endInterpolation a function that should return true if there is a premature end to an\n   *     interpolation expression - i.e. before we get to the normal interpolation closing marker.\n   */\n  _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {\n    this._beginToken(textTokenType);\n    const parts = [];\n    while (!endPredicate()) {\n      const current = this._cursor.clone();\n      if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n        this._endToken([this._processCarriageReturns(parts.join(''))], current);\n        parts.length = 0;\n        this._consumeInterpolation(interpolationTokenType, current, endInterpolation);\n        this._beginToken(textTokenType);\n      } else if (this._cursor.peek() === $AMPERSAND) {\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n        parts.length = 0;\n        this._consumeEntity(textTokenType);\n        this._beginToken(textTokenType);\n      } else {\n        parts.push(this._readChar());\n      }\n    }\n    // It is possible that an interpolation was started but not ended inside this text token.\n    // Make sure that we reset the state of the lexer correctly.\n    this._inInterpolation = false;\n    this._endToken([this._processCarriageReturns(parts.join(''))]);\n  }\n  /**\n   * Consume a block of text that has been interpreted as an Angular interpolation.\n   *\n   * @param interpolationTokenType the type of the interpolation token to generate.\n   * @param interpolationStart a cursor that points to the start of this interpolation.\n   * @param prematureEndPredicate a function that should return true if the next characters indicate\n   *     an end to the interpolation before its normal closing marker.\n   */\n  _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {\n    const parts = [];\n    this._beginToken(interpolationTokenType, interpolationStart);\n    parts.push(this._interpolationConfig.start);\n    // Find the end of the interpolation, ignoring content inside quotes.\n    const expressionStart = this._cursor.clone();\n    let inQuote = null;\n    let inComment = false;\n    while (this._cursor.peek() !== $EOF && (prematureEndPredicate === null || !prematureEndPredicate())) {\n      const current = this._cursor.clone();\n      if (this._isTagStart()) {\n        // We are starting what looks like an HTML element in the middle of this interpolation.\n        // Reset the cursor to before the `<` character and end the interpolation token.\n        // (This is actually wrong but here for backward compatibility).\n        this._cursor = current;\n        parts.push(this._getProcessedChars(expressionStart, current));\n        this._endToken(parts);\n        return;\n      }\n      if (inQuote === null) {\n        if (this._attemptStr(this._interpolationConfig.end)) {\n          // We are not in a string, and we hit the end interpolation marker\n          parts.push(this._getProcessedChars(expressionStart, current));\n          parts.push(this._interpolationConfig.end);\n          this._endToken(parts);\n          return;\n        } else if (this._attemptStr('//')) {\n          // Once we are in a comment we ignore any quotes\n          inComment = true;\n        }\n      }\n      const char = this._cursor.peek();\n      this._cursor.advance();\n      if (char === $BACKSLASH) {\n        // Skip the next character because it was escaped.\n        this._cursor.advance();\n      } else if (char === inQuote) {\n        // Exiting the current quoted string\n        inQuote = null;\n      } else if (!inComment && inQuote === null && isQuote(char)) {\n        // Entering a new quoted string\n        inQuote = char;\n      }\n    }\n    // We hit EOF without finding a closing interpolation marker\n    parts.push(this._getProcessedChars(expressionStart, this._cursor));\n    this._endToken(parts);\n  }\n  _getProcessedChars(start, end) {\n    return this._processCarriageReturns(end.getChars(start));\n  }\n  _isTextEnd() {\n    if (this._isTagStart() || this._cursor.peek() === $EOF) {\n      return true;\n    }\n    if (this._tokenizeIcu && !this._inInterpolation) {\n      if (this.isExpansionFormStart()) {\n        // start of an expansion form\n        return true;\n      }\n      if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {\n        // end of and expansion case\n        return true;\n      }\n    }\n    if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansion() && (this._cursor.peek() === $AT || this._cursor.peek() === $RBRACE)) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Returns true if the current cursor is pointing to the start of a tag\n   * (opening/closing/comments/cdata/etc).\n   */\n  _isTagStart() {\n    if (this._cursor.peek() === $LT) {\n      // We assume that `<` followed by whitespace is not the start of an HTML element.\n      const tmp = this._cursor.clone();\n      tmp.advance();\n      // If the next character is alphabetic, ! nor / then it is a tag start\n      const code = tmp.peek();\n      if ($a <= code && code <= $z || $A <= code && code <= $Z || code === $SLASH || code === $BANG) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _readUntil(char) {\n    const start = this._cursor.clone();\n    this._attemptUntilChar(char);\n    return this._cursor.getChars(start);\n  }\n  _isInExpansion() {\n    return this._isInExpansionCase() || this._isInExpansionForm();\n  }\n  _isInExpansionCase() {\n    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 21 /* TokenType.EXPANSION_CASE_EXP_START */;\n  }\n  _isInExpansionForm() {\n    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 19 /* TokenType.EXPANSION_FORM_START */;\n  }\n  isExpansionFormStart() {\n    if (this._cursor.peek() !== $LBRACE) {\n      return false;\n    }\n    if (this._interpolationConfig) {\n      const start = this._cursor.clone();\n      const isInterpolation = this._attemptStr(this._interpolationConfig.start);\n      this._cursor = start;\n      return !isInterpolation;\n    }\n    return true;\n  }\n}\nfunction isNotWhitespace(code) {\n  return !isWhitespace(code) || code === $EOF;\n}\nfunction isNameEnd(code) {\n  return isWhitespace(code) || code === $GT || code === $LT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ || code === $EOF;\n}\nfunction isPrefixEnd(code) {\n  return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);\n}\nfunction isDigitEntityEnd(code) {\n  return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);\n}\nfunction isNamedEntityEnd(code) {\n  return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);\n}\nfunction isExpansionCaseStart(peek) {\n  return peek !== $RBRACE;\n}\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n  return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);\n}\nfunction toUpperCaseCharCode(code) {\n  return code >= $a && code <= $z ? code - $a + $A : code;\n}\nfunction isBlockNameChar(code) {\n  return isAsciiLetter(code) || isDigit(code) || code === $_;\n}\nfunction isBlockParameterChar(code) {\n  return code !== $SEMICOLON && isNotWhitespace(code);\n}\nfunction mergeTextTokens(srcTokens) {\n  const dstTokens = [];\n  let lastDstToken = undefined;\n  for (let i = 0; i < srcTokens.length; i++) {\n    const token = srcTokens[i];\n    if (lastDstToken && lastDstToken.type === 5 /* TokenType.TEXT */ && token.type === 5 /* TokenType.TEXT */ || lastDstToken && lastDstToken.type === 16 /* TokenType.ATTR_VALUE_TEXT */ && token.type === 16 /* TokenType.ATTR_VALUE_TEXT */) {\n      lastDstToken.parts[0] += token.parts[0];\n      lastDstToken.sourceSpan.end = token.sourceSpan.end;\n    } else {\n      lastDstToken = token;\n      dstTokens.push(lastDstToken);\n    }\n  }\n  return dstTokens;\n}\nclass PlainCharacterCursor {\n  constructor(fileOrCursor, range) {\n    if (fileOrCursor instanceof PlainCharacterCursor) {\n      this.file = fileOrCursor.file;\n      this.input = fileOrCursor.input;\n      this.end = fileOrCursor.end;\n      const state = fileOrCursor.state;\n      // Note: avoid using `{...fileOrCursor.state}` here as that has a severe performance penalty.\n      // In ES5 bundles the object spread operator is translated into the `__assign` helper, which\n      // is not optimized by VMs as efficiently as a raw object literal. Since this constructor is\n      // called in tight loops, this difference matters.\n      this.state = {\n        peek: state.peek,\n        offset: state.offset,\n        line: state.line,\n        column: state.column\n      };\n    } else {\n      if (!range) {\n        throw new Error('Programming error: the range argument must be provided with a file argument.');\n      }\n      this.file = fileOrCursor;\n      this.input = fileOrCursor.content;\n      this.end = range.endPos;\n      this.state = {\n        peek: -1,\n        offset: range.startPos,\n        line: range.startLine,\n        column: range.startCol\n      };\n    }\n  }\n  clone() {\n    return new PlainCharacterCursor(this);\n  }\n  peek() {\n    return this.state.peek;\n  }\n  charsLeft() {\n    return this.end - this.state.offset;\n  }\n  diff(other) {\n    return this.state.offset - other.state.offset;\n  }\n  advance() {\n    this.advanceState(this.state);\n  }\n  init() {\n    this.updatePeek(this.state);\n  }\n  getSpan(start, leadingTriviaCodePoints) {\n    start = start || this;\n    let fullStart = start;\n    if (leadingTriviaCodePoints) {\n      while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {\n        if (fullStart === start) {\n          start = start.clone();\n        }\n        start.advance();\n      }\n    }\n    const startLocation = this.locationFromCursor(start);\n    const endLocation = this.locationFromCursor(this);\n    const fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;\n    return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);\n  }\n  getChars(start) {\n    return this.input.substring(start.state.offset, this.state.offset);\n  }\n  charAt(pos) {\n    return this.input.charCodeAt(pos);\n  }\n  advanceState(state) {\n    if (state.offset >= this.end) {\n      this.state = state;\n      throw new CursorError('Unexpected character \"EOF\"', this);\n    }\n    const currentChar = this.charAt(state.offset);\n    if (currentChar === $LF) {\n      state.line++;\n      state.column = 0;\n    } else if (!isNewLine(currentChar)) {\n      state.column++;\n    }\n    state.offset++;\n    this.updatePeek(state);\n  }\n  updatePeek(state) {\n    state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);\n  }\n  locationFromCursor(cursor) {\n    return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);\n  }\n}\nclass EscapedCharacterCursor extends PlainCharacterCursor {\n  constructor(fileOrCursor, range) {\n    if (fileOrCursor instanceof EscapedCharacterCursor) {\n      super(fileOrCursor);\n      this.internalState = {\n        ...fileOrCursor.internalState\n      };\n    } else {\n      super(fileOrCursor, range);\n      this.internalState = this.state;\n    }\n  }\n  advance() {\n    this.state = this.internalState;\n    super.advance();\n    this.processEscapeSequence();\n  }\n  init() {\n    super.init();\n    this.processEscapeSequence();\n  }\n  clone() {\n    return new EscapedCharacterCursor(this);\n  }\n  getChars(start) {\n    const cursor = start.clone();\n    let chars = '';\n    while (cursor.internalState.offset < this.internalState.offset) {\n      chars += String.fromCodePoint(cursor.peek());\n      cursor.advance();\n    }\n    return chars;\n  }\n  /**\n   * Process the escape sequence that starts at the current position in the text.\n   *\n   * This method is called to ensure that `peek` has the unescaped value of escape sequences.\n   */\n  processEscapeSequence() {\n    const peek = () => this.internalState.peek;\n    if (peek() === $BACKSLASH) {\n      // We have hit an escape sequence so we need the internal state to become independent\n      // of the external state.\n      this.internalState = {\n        ...this.state\n      };\n      // Move past the backslash\n      this.advanceState(this.internalState);\n      // First check for standard control char sequences\n      if (peek() === $n) {\n        this.state.peek = $LF;\n      } else if (peek() === $r) {\n        this.state.peek = $CR;\n      } else if (peek() === $v) {\n        this.state.peek = $VTAB;\n      } else if (peek() === $t) {\n        this.state.peek = $TAB;\n      } else if (peek() === $b) {\n        this.state.peek = $BSPACE;\n      } else if (peek() === $f) {\n        this.state.peek = $FF;\n      }\n      // Now consider more complex sequences\n      else if (peek() === $u) {\n        // Unicode code-point sequence\n        this.advanceState(this.internalState); // advance past the `u` char\n        if (peek() === $LBRACE) {\n          // Variable length Unicode, e.g. `\\x{123}`\n          this.advanceState(this.internalState); // advance past the `{` char\n          // Advance past the variable number of hex digits until we hit a `}` char\n          const digitStart = this.clone();\n          let length = 0;\n          while (peek() !== $RBRACE) {\n            this.advanceState(this.internalState);\n            length++;\n          }\n          this.state.peek = this.decodeHexDigits(digitStart, length);\n        } else {\n          // Fixed length Unicode, e.g. `\\u1234`\n          const digitStart = this.clone();\n          this.advanceState(this.internalState);\n          this.advanceState(this.internalState);\n          this.advanceState(this.internalState);\n          this.state.peek = this.decodeHexDigits(digitStart, 4);\n        }\n      } else if (peek() === $x) {\n        // Hex char code, e.g. `\\x2F`\n        this.advanceState(this.internalState); // advance past the `x` char\n        const digitStart = this.clone();\n        this.advanceState(this.internalState);\n        this.state.peek = this.decodeHexDigits(digitStart, 2);\n      } else if (isOctalDigit(peek())) {\n        // Octal char code, e.g. `\\012`,\n        let octal = '';\n        let length = 0;\n        let previous = this.clone();\n        while (isOctalDigit(peek()) && length < 3) {\n          previous = this.clone();\n          octal += String.fromCodePoint(peek());\n          this.advanceState(this.internalState);\n          length++;\n        }\n        this.state.peek = parseInt(octal, 8);\n        // Backup one char\n        this.internalState = previous.internalState;\n      } else if (isNewLine(this.internalState.peek)) {\n        // Line continuation `\\` followed by a new line\n        this.advanceState(this.internalState); // advance over the newline\n        this.state = this.internalState;\n      } else {\n        // If none of the `if` blocks were executed then we just have an escaped normal character.\n        // In that case we just, effectively, skip the backslash from the character.\n        this.state.peek = this.internalState.peek;\n      }\n    }\n  }\n  decodeHexDigits(start, length) {\n    const hex = this.input.slice(start.internalState.offset, start.internalState.offset + length);\n    const charCode = parseInt(hex, 16);\n    if (!isNaN(charCode)) {\n      return charCode;\n    } else {\n      start.state = start.internalState;\n      throw new CursorError('Invalid hexadecimal escape sequence', start);\n    }\n  }\n}\nclass CursorError {\n  constructor(msg, cursor) {\n    this.msg = msg;\n    this.cursor = cursor;\n  }\n}\nclass TreeError extends ParseError {\n  static create(elementName, span, msg) {\n    return new TreeError(elementName, span, msg);\n  }\n  constructor(elementName, span, msg) {\n    super(span, msg);\n    this.elementName = elementName;\n  }\n}\nclass ParseTreeResult {\n  constructor(rootNodes, errors) {\n    this.rootNodes = rootNodes;\n    this.errors = errors;\n  }\n}\nclass Parser {\n  constructor(getTagDefinition) {\n    this.getTagDefinition = getTagDefinition;\n  }\n  parse(source, url, options) {\n    const tokenizeResult = tokenize(source, url, this.getTagDefinition, options);\n    const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);\n    parser.build();\n    return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));\n  }\n}\nclass _TreeBuilder {\n  constructor(tokens, getTagDefinition) {\n    this.tokens = tokens;\n    this.getTagDefinition = getTagDefinition;\n    this._index = -1;\n    this._containerStack = [];\n    this.rootNodes = [];\n    this.errors = [];\n    this._advance();\n  }\n  build() {\n    while (this._peek.type !== 29 /* TokenType.EOF */) {\n      if (this._peek.type === 0 /* TokenType.TAG_OPEN_START */ || this._peek.type === 4 /* TokenType.INCOMPLETE_TAG_OPEN */) {\n        this._consumeStartTag(this._advance());\n      } else if (this._peek.type === 3 /* TokenType.TAG_CLOSE */) {\n        this._consumeEndTag(this._advance());\n      } else if (this._peek.type === 12 /* TokenType.CDATA_START */) {\n        this._closeVoidElement();\n        this._consumeCdata(this._advance());\n      } else if (this._peek.type === 10 /* TokenType.COMMENT_START */) {\n        this._closeVoidElement();\n        this._consumeComment(this._advance());\n      } else if (this._peek.type === 5 /* TokenType.TEXT */ || this._peek.type === 7 /* TokenType.RAW_TEXT */ || this._peek.type === 6 /* TokenType.ESCAPABLE_RAW_TEXT */) {\n        this._closeVoidElement();\n        this._consumeText(this._advance());\n      } else if (this._peek.type === 19 /* TokenType.EXPANSION_FORM_START */) {\n        this._consumeExpansion(this._advance());\n      } else if (this._peek.type === 24 /* TokenType.BLOCK_OPEN_START */) {\n        this._closeVoidElement();\n        this._consumeBlockOpen(this._advance());\n      } else if (this._peek.type === 26 /* TokenType.BLOCK_CLOSE */) {\n        this._closeVoidElement();\n        this._consumeBlockClose(this._advance());\n      } else if (this._peek.type === 28 /* TokenType.INCOMPLETE_BLOCK_OPEN */) {\n        this._closeVoidElement();\n        this._consumeIncompleteBlock(this._advance());\n      } else {\n        // Skip all other tokens...\n        this._advance();\n      }\n    }\n    for (const leftoverContainer of this._containerStack) {\n      // Unlike HTML elements, blocks aren't closed implicitly by the end of the file.\n      if (leftoverContainer instanceof Block) {\n        this.errors.push(TreeError.create(leftoverContainer.name, leftoverContainer.sourceSpan, `Unclosed block \"${leftoverContainer.name}\"`));\n      }\n    }\n  }\n  _advance() {\n    const prev = this._peek;\n    if (this._index < this.tokens.length - 1) {\n      // Note: there is always an EOF token at the end\n      this._index++;\n    }\n    this._peek = this.tokens[this._index];\n    return prev;\n  }\n  _advanceIf(type) {\n    if (this._peek.type === type) {\n      return this._advance();\n    }\n    return null;\n  }\n  _consumeCdata(_startToken) {\n    this._consumeText(this._advance());\n    this._advanceIf(13 /* TokenType.CDATA_END */);\n  }\n  _consumeComment(token) {\n    const text = this._advanceIf(7 /* TokenType.RAW_TEXT */);\n    const endToken = this._advanceIf(11 /* TokenType.COMMENT_END */);\n    const value = text != null ? text.parts[0].trim() : null;\n    const sourceSpan = endToken == null ? token.sourceSpan : new ParseSourceSpan(token.sourceSpan.start, endToken.sourceSpan.end, token.sourceSpan.fullStart);\n    this._addToParent(new Comment(value, sourceSpan));\n  }\n  _consumeExpansion(token) {\n    const switchValue = this._advance();\n    const type = this._advance();\n    const cases = [];\n    // read =\n    while (this._peek.type === 20 /* TokenType.EXPANSION_CASE_VALUE */) {\n      const expCase = this._parseExpansionCase();\n      if (!expCase) return; // error\n      cases.push(expCase);\n    }\n    // read the final }\n    if (this._peek.type !== 23 /* TokenType.EXPANSION_FORM_END */) {\n      this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));\n      return;\n    }\n    const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);\n    this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n    this._advance();\n  }\n  _parseExpansionCase() {\n    const value = this._advance();\n    // read {\n    if (this._peek.type !== 21 /* TokenType.EXPANSION_CASE_EXP_START */) {\n      this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));\n      return null;\n    }\n    // read until }\n    const start = this._advance();\n    const exp = this._collectExpansionExpTokens(start);\n    if (!exp) return null;\n    const end = this._advance();\n    exp.push({\n      type: 29 /* TokenType.EOF */,\n      parts: [],\n      sourceSpan: end.sourceSpan\n    });\n    // parse everything in between { and }\n    const expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);\n    expansionCaseParser.build();\n    if (expansionCaseParser.errors.length > 0) {\n      this.errors = this.errors.concat(expansionCaseParser.errors);\n      return null;\n    }\n    const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);\n    const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);\n    return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n  }\n  _collectExpansionExpTokens(start) {\n    const exp = [];\n    const expansionFormStack = [21 /* TokenType.EXPANSION_CASE_EXP_START */];\n    while (true) {\n      if (this._peek.type === 19 /* TokenType.EXPANSION_FORM_START */ || this._peek.type === 21 /* TokenType.EXPANSION_CASE_EXP_START */) {\n        expansionFormStack.push(this._peek.type);\n      }\n      if (this._peek.type === 22 /* TokenType.EXPANSION_CASE_EXP_END */) {\n        if (lastOnStack(expansionFormStack, 21 /* TokenType.EXPANSION_CASE_EXP_START */)) {\n          expansionFormStack.pop();\n          if (expansionFormStack.length === 0) return exp;\n        } else {\n          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n          return null;\n        }\n      }\n      if (this._peek.type === 23 /* TokenType.EXPANSION_FORM_END */) {\n        if (lastOnStack(expansionFormStack, 19 /* TokenType.EXPANSION_FORM_START */)) {\n          expansionFormStack.pop();\n        } else {\n          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n          return null;\n        }\n      }\n      if (this._peek.type === 29 /* TokenType.EOF */) {\n        this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n        return null;\n      }\n      exp.push(this._advance());\n    }\n  }\n  _consumeText(token) {\n    const tokens = [token];\n    const startSpan = token.sourceSpan;\n    let text = token.parts[0];\n    if (text.length > 0 && text[0] === '\\n') {\n      const parent = this._getContainer();\n      if (parent != null && parent.children.length === 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {\n        text = text.substring(1);\n        tokens[0] = {\n          type: token.type,\n          sourceSpan: token.sourceSpan,\n          parts: [text]\n        };\n      }\n    }\n    while (this._peek.type === 8 /* TokenType.INTERPOLATION */ || this._peek.type === 5 /* TokenType.TEXT */ || this._peek.type === 9 /* TokenType.ENCODED_ENTITY */) {\n      token = this._advance();\n      tokens.push(token);\n      if (token.type === 8 /* TokenType.INTERPOLATION */) {\n        // For backward compatibility we decode HTML entities that appear in interpolation\n        // expressions. This is arguably a bug, but it could be a considerable breaking change to\n        // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n        // chain after View Engine has been removed.\n        text += token.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n      } else if (token.type === 9 /* TokenType.ENCODED_ENTITY */) {\n        text += token.parts[0];\n      } else {\n        text += token.parts.join('');\n      }\n    }\n    if (text.length > 0) {\n      const endSpan = token.sourceSpan;\n      this._addToParent(new Text(text, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));\n    }\n  }\n  _closeVoidElement() {\n    const el = this._getContainer();\n    if (el instanceof Element && this.getTagDefinition(el.name).isVoid) {\n      this._containerStack.pop();\n    }\n  }\n  _consumeStartTag(startTagToken) {\n    const [prefix, name] = startTagToken.parts;\n    const attrs = [];\n    while (this._peek.type === 14 /* TokenType.ATTR_NAME */) {\n      attrs.push(this._consumeAttr(this._advance()));\n    }\n    const fullName = this._getElementFullName(prefix, name, this._getClosestParentElement());\n    let selfClosing = false;\n    // Note: There could have been a tokenizer error\n    // so that we don't get a token for the end tag...\n    if (this._peek.type === 2 /* TokenType.TAG_OPEN_END_VOID */) {\n      this._advance();\n      selfClosing = true;\n      const tagDef = this.getTagDefinition(fullName);\n      if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n        this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void, custom and foreign elements can be self closed \"${startTagToken.parts[1]}\"`));\n      }\n    } else if (this._peek.type === 1 /* TokenType.TAG_OPEN_END */) {\n      this._advance();\n      selfClosing = false;\n    }\n    const end = this._peek.sourceSpan.fullStart;\n    const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n    // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n    const startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n    const el = new Element(fullName, attrs, [], span, startSpan, undefined);\n    const parentEl = this._getContainer();\n    this._pushContainer(el, parentEl instanceof Element && this.getTagDefinition(parentEl.name).isClosedByChild(el.name));\n    if (selfClosing) {\n      // Elements that are self-closed have their `endSourceSpan` set to the full span, as the\n      // element start tag also represents the end tag.\n      this._popContainer(fullName, Element, span);\n    } else if (startTagToken.type === 4 /* TokenType.INCOMPLETE_TAG_OPEN */) {\n      // We already know the opening tag is not complete, so it is unlikely it has a corresponding\n      // close tag. Let's optimistically parse it as a full element and emit an error.\n      this._popContainer(fullName, Element, null);\n      this.errors.push(TreeError.create(fullName, span, `Opening tag \"${fullName}\" not terminated.`));\n    }\n  }\n  _pushContainer(node, isClosedByChild) {\n    if (isClosedByChild) {\n      this._containerStack.pop();\n    }\n    this._addToParent(node);\n    this._containerStack.push(node);\n  }\n  _consumeEndTag(endTagToken) {\n    const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getClosestParentElement());\n    if (this.getTagDefinition(fullName).isVoid) {\n      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags \"${endTagToken.parts[1]}\"`));\n    } else if (!this._popContainer(fullName, Element, endTagToken.sourceSpan)) {\n      const errMsg = `Unexpected closing tag \"${fullName}\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;\n      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n    }\n  }\n  /**\n   * Closes the nearest element with the tag name `fullName` in the parse tree.\n   * `endSourceSpan` is the span of the closing tag, or null if the element does\n   * not have a closing tag (for example, this happens when an incomplete\n   * opening tag is recovered).\n   */\n  _popContainer(expectedName, expectedType, endSourceSpan) {\n    let unexpectedCloseTagDetected = false;\n    for (let stackIndex = this._containerStack.length - 1; stackIndex >= 0; stackIndex--) {\n      const node = this._containerStack[stackIndex];\n      if ((node.name === expectedName || expectedName === null) && node instanceof expectedType) {\n        // Record the parse span with the element that is being closed. Any elements that are\n        // removed from the element stack at this point are closed implicitly, so they won't get\n        // an end source span (as there is no explicit closing element).\n        node.endSourceSpan = endSourceSpan;\n        node.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : node.sourceSpan.end;\n        this._containerStack.splice(stackIndex, this._containerStack.length - stackIndex);\n        return !unexpectedCloseTagDetected;\n      }\n      // Blocks and most elements are not self closing.\n      if (node instanceof Block || node instanceof Element && !this.getTagDefinition(node.name).closedByParent) {\n        // Note that we encountered an unexpected close tag but continue processing the element\n        // stack so we can assign an `endSourceSpan` if there is a corresponding start tag for this\n        // end tag in the stack.\n        unexpectedCloseTagDetected = true;\n      }\n    }\n    return false;\n  }\n  _consumeAttr(attrName) {\n    const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n    let attrEnd = attrName.sourceSpan.end;\n    // Consume any quote\n    if (this._peek.type === 15 /* TokenType.ATTR_QUOTE */) {\n      this._advance();\n    }\n    // Consume the attribute value\n    let value = '';\n    const valueTokens = [];\n    let valueStartSpan = undefined;\n    let valueEnd = undefined;\n    // NOTE: We need to use a new variable `nextTokenType` here to hide the actual type of\n    // `_peek.type` from TS. Otherwise TS will narrow the type of `_peek.type` preventing it from\n    // being able to consider `ATTR_VALUE_INTERPOLATION` as an option. This is because TS is not\n    // able to see that `_advance()` will actually mutate `_peek`.\n    const nextTokenType = this._peek.type;\n    if (nextTokenType === 16 /* TokenType.ATTR_VALUE_TEXT */) {\n      valueStartSpan = this._peek.sourceSpan;\n      valueEnd = this._peek.sourceSpan.end;\n      while (this._peek.type === 16 /* TokenType.ATTR_VALUE_TEXT */ || this._peek.type === 17 /* TokenType.ATTR_VALUE_INTERPOLATION */ || this._peek.type === 9 /* TokenType.ENCODED_ENTITY */) {\n        const valueToken = this._advance();\n        valueTokens.push(valueToken);\n        if (valueToken.type === 17 /* TokenType.ATTR_VALUE_INTERPOLATION */) {\n          // For backward compatibility we decode HTML entities that appear in interpolation\n          // expressions. This is arguably a bug, but it could be a considerable breaking change to\n          // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n          // chain after View Engine has been removed.\n          value += valueToken.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n        } else if (valueToken.type === 9 /* TokenType.ENCODED_ENTITY */) {\n          value += valueToken.parts[0];\n        } else {\n          value += valueToken.parts.join('');\n        }\n        valueEnd = attrEnd = valueToken.sourceSpan.end;\n      }\n    }\n    // Consume any quote\n    if (this._peek.type === 15 /* TokenType.ATTR_QUOTE */) {\n      const quoteToken = this._advance();\n      attrEnd = quoteToken.sourceSpan.end;\n    }\n    const valueSpan = valueStartSpan && valueEnd && new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);\n    return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : undefined, undefined);\n  }\n  _consumeBlockOpen(token) {\n    const parameters = [];\n    while (this._peek.type === 27 /* TokenType.BLOCK_PARAMETER */) {\n      const paramToken = this._advance();\n      parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));\n    }\n    if (this._peek.type === 25 /* TokenType.BLOCK_OPEN_END */) {\n      this._advance();\n    }\n    const end = this._peek.sourceSpan.fullStart;\n    const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);\n    // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n    const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);\n    const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);\n    this._pushContainer(block, false);\n  }\n  _consumeBlockClose(token) {\n    if (!this._popContainer(null, Block, token.sourceSpan)) {\n      this.errors.push(TreeError.create(null, token.sourceSpan, `Unexpected closing block. The block may have been closed earlier. ` + `If you meant to write the } character, you should use the \"&#125;\" ` + `HTML entity instead.`));\n    }\n  }\n  _consumeIncompleteBlock(token) {\n    const parameters = [];\n    while (this._peek.type === 27 /* TokenType.BLOCK_PARAMETER */) {\n      const paramToken = this._advance();\n      parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));\n    }\n    const end = this._peek.sourceSpan.fullStart;\n    const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);\n    // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n    const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);\n    const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);\n    this._pushContainer(block, false);\n    // Incomplete blocks don't have children so we close them immediately and report an error.\n    this._popContainer(null, Block, null);\n    this.errors.push(TreeError.create(token.parts[0], span, `Incomplete block \"${token.parts[0]}\". If you meant to write the @ character, ` + `you should use the \"&#64;\" HTML entity instead.`));\n  }\n  _getContainer() {\n    return this._containerStack.length > 0 ? this._containerStack[this._containerStack.length - 1] : null;\n  }\n  _getClosestParentElement() {\n    for (let i = this._containerStack.length - 1; i > -1; i--) {\n      if (this._containerStack[i] instanceof Element) {\n        return this._containerStack[i];\n      }\n    }\n    return null;\n  }\n  _addToParent(node) {\n    const parent = this._getContainer();\n    if (parent === null) {\n      this.rootNodes.push(node);\n    } else {\n      parent.children.push(node);\n    }\n  }\n  _getElementFullName(prefix, localName, parentElement) {\n    if (prefix === '') {\n      prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';\n      if (prefix === '' && parentElement != null) {\n        const parentTagName = splitNsName(parentElement.name)[1];\n        const parentTagDefinition = this.getTagDefinition(parentTagName);\n        if (!parentTagDefinition.preventNamespaceInheritance) {\n          prefix = getNsPrefix(parentElement.name);\n        }\n      }\n    }\n    return mergeNsAndName(prefix, localName);\n  }\n}\nfunction lastOnStack(stack, element) {\n  return stack.length > 0 && stack[stack.length - 1] === element;\n}\n/**\n * Decode the `entity` string, which we believe is the contents of an HTML entity.\n *\n * If the string is not actually a valid/known entity then just return the original `match` string.\n */\nfunction decodeEntity(match, entity) {\n  if (NAMED_ENTITIES[entity] !== undefined) {\n    return NAMED_ENTITIES[entity] || match;\n  }\n  if (/^#x[a-f0-9]+$/i.test(entity)) {\n    return String.fromCodePoint(parseInt(entity.slice(2), 16));\n  }\n  if (/^#\\d+$/.test(entity)) {\n    return String.fromCodePoint(parseInt(entity.slice(1), 10));\n  }\n  return match;\n}\n\n/**\n * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all\n * tags use '*'.\n *\n * Extracted from, and should be kept in sync with\n * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations\n */\nconst TRUSTED_TYPES_SINKS = new Set([\n// NOTE: All strings in this set *must* be lowercase!\n// TrustedHTML\n'iframe|srcdoc', '*|innerhtml', '*|outerhtml',\n// NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.\n// TrustedScriptURL\n'embed|src', 'object|codebase', 'object|data']);\n/**\n * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types\n * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular\n * Trusted Type is required for values passed to the sink:\n * - SecurityContext.HTML corresponds to TrustedHTML\n * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL\n */\nfunction isTrustedTypesSink(tagName, propName) {\n  // Make sure comparisons are case insensitive, so that case differences between attribute and\n  // property names do not have a security impact.\n  tagName = tagName.toLowerCase();\n  propName = propName.toLowerCase();\n  return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) || TRUSTED_TYPES_SINKS.has('*|' + propName);\n}\nconst setI18nRefs = (htmlNode, i18nNode) => {\n  if (htmlNode instanceof NodeWithI18n) {\n    if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {\n      // This html node represents an ICU but this is a second processing pass, and the legacy id\n      // was computed in the previous pass and stored in the `i18n` property as a message.\n      // We are about to wipe out that property so capture the previous message to be reused when\n      // generating the message for this ICU later. See `_generateI18nMessage()`.\n      i18nNode.previousMessage = htmlNode.i18n;\n    }\n    htmlNode.i18n = i18nNode;\n  }\n  return i18nNode;\n};\n/**\n * This visitor walks over HTML parse tree and converts information stored in\n * i18n-related attributes (\"i18n\" and \"i18n-*\") into i18n meta object that is\n * stored with other element's and attribute's information.\n */\nclass I18nMetaVisitor {\n  constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false, enableI18nLegacyMessageIdFormat = false, containerBlocks = DEFAULT_CONTAINER_BLOCKS) {\n    this.interpolationConfig = interpolationConfig;\n    this.keepI18nAttrs = keepI18nAttrs;\n    this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat;\n    this.containerBlocks = containerBlocks;\n    // whether visited nodes contain i18n information\n    this.hasI18nMeta = false;\n    this._errors = [];\n  }\n  _generateI18nMessage(nodes, meta = '', visitNodeFn) {\n    const {\n      meaning,\n      description,\n      customId\n    } = this._parseMetadata(meta);\n    const createI18nMessage = createI18nMessageFactory(this.interpolationConfig, this.containerBlocks);\n    const message = createI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n    this._setMessageId(message, meta);\n    this._setLegacyIds(message, meta);\n    return message;\n  }\n  visitAllWithErrors(nodes) {\n    const result = nodes.map(node => node.visit(this, null));\n    return new ParseTreeResult(result, this._errors);\n  }\n  visitElement(element) {\n    let message = undefined;\n    if (hasI18nAttrs(element)) {\n      this.hasI18nMeta = true;\n      const attrs = [];\n      const attrsMeta = {};\n      for (const attr of element.attrs) {\n        if (attr.name === I18N_ATTR) {\n          // root 'i18n' node attribute\n          const i18n = element.i18n || attr.value;\n          message = this._generateI18nMessage(element.children, i18n, setI18nRefs);\n          if (message.nodes.length === 0) {\n            // Ignore the message if it is empty.\n            message = undefined;\n          }\n          // Store the message on the element\n          element.i18n = message;\n        } else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {\n          // 'i18n-*' attributes\n          const name = attr.name.slice(I18N_ATTR_PREFIX.length);\n          if (isTrustedTypesSink(element.name, name)) {\n            this._reportError(attr, `Translating attribute '${name}' is disallowed for security reasons.`);\n          } else {\n            attrsMeta[name] = attr.value;\n          }\n        } else {\n          // non-i18n attributes\n          attrs.push(attr);\n        }\n      }\n      // set i18n meta for attributes\n      if (Object.keys(attrsMeta).length) {\n        for (const attr of attrs) {\n          const meta = attrsMeta[attr.name];\n          // do not create translation for empty attributes\n          if (meta !== undefined && attr.value) {\n            attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);\n          }\n        }\n      }\n      if (!this.keepI18nAttrs) {\n        // update element's attributes,\n        // keeping only non-i18n related ones\n        element.attrs = attrs;\n      }\n    }\n    visitAll(this, element.children, message);\n    return element;\n  }\n  visitExpansion(expansion, currentMessage) {\n    let message;\n    const meta = expansion.i18n;\n    this.hasI18nMeta = true;\n    if (meta instanceof IcuPlaceholder) {\n      // set ICU placeholder name (e.g. \"ICU_1\"),\n      // generated while processing root element contents,\n      // so we can reference it when we output translation\n      const name = meta.name;\n      message = this._generateI18nMessage([expansion], meta);\n      const icu = icuFromI18nMessage(message);\n      icu.name = name;\n      if (currentMessage !== null) {\n        // Also update the placeholderToMessage map with this new message\n        currentMessage.placeholderToMessage[name] = message;\n      }\n    } else {\n      // ICU is a top level message, try to use metadata from container element if provided via\n      // `context` argument. Note: context may not be available for standalone ICUs (without\n      // wrapping element), so fallback to ICU metadata in this case.\n      message = this._generateI18nMessage([expansion], currentMessage || meta);\n    }\n    expansion.i18n = message;\n    return expansion;\n  }\n  visitText(text) {\n    return text;\n  }\n  visitAttribute(attribute) {\n    return attribute;\n  }\n  visitComment(comment) {\n    return comment;\n  }\n  visitExpansionCase(expansionCase) {\n    return expansionCase;\n  }\n  visitBlock(block, context) {\n    visitAll(this, block.children, context);\n    return block;\n  }\n  visitBlockParameter(parameter, context) {\n    return parameter;\n  }\n  /**\n   * Parse the general form `meta` passed into extract the explicit metadata needed to create a\n   * `Message`.\n   *\n   * There are three possibilities for the `meta` variable\n   * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.\n   * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.\n   * 4) other: ignore this and just process the message metadata as normal\n   *\n   * @param meta the bucket that holds information about the message\n   * @returns the parsed metadata.\n   */\n  _parseMetadata(meta) {\n    return typeof meta === 'string' ? parseI18nMeta(meta) : meta instanceof Message ? meta : {};\n  }\n  /**\n   * Generate (or restore) message id if not specified already.\n   */\n  _setMessageId(message, meta) {\n    if (!message.id) {\n      message.id = meta instanceof Message && meta.id || decimalDigest(message);\n    }\n  }\n  /**\n   * Update the `message` with a `legacyId` if necessary.\n   *\n   * @param message the message whose legacy id should be set\n   * @param meta information about the message being processed\n   */\n  _setLegacyIds(message, meta) {\n    if (this.enableI18nLegacyMessageIdFormat) {\n      message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];\n    } else if (typeof meta !== 'string') {\n      // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in\n      // `packages/compiler/src/render3/view/template.ts`).\n      // In that case we want to reuse the legacy message generated in the 1st pass (see\n      // `setI18nRefs()`).\n      const previousMessage = meta instanceof Message ? meta : meta instanceof IcuPlaceholder ? meta.previousMessage : undefined;\n      message.legacyIds = previousMessage ? previousMessage.legacyIds : [];\n    }\n  }\n  _reportError(node, msg) {\n    this._errors.push(new I18nError(node.sourceSpan, msg));\n  }\n}\n/** I18n separators for metadata **/\nconst I18N_MEANING_SEPARATOR = '|';\nconst I18N_ID_SEPARATOR = '@@';\n/**\n * Parses i18n metas like:\n *  - \"@@id\",\n *  - \"description[@@id]\",\n *  - \"meaning|description[@@id]\"\n * and returns an object with parsed output.\n *\n * @param meta String that represents i18n meta\n * @returns Object with id, meaning and description fields\n */\nfunction parseI18nMeta(meta = '') {\n  let customId;\n  let meaning;\n  let description;\n  meta = meta.trim();\n  if (meta) {\n    const idIndex = meta.indexOf(I18N_ID_SEPARATOR);\n    const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);\n    let meaningAndDesc;\n    [meaningAndDesc, customId] = idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];\n    [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc];\n  }\n  return {\n    customId,\n    meaning,\n    description\n  };\n}\n// Converts i18n meta information for a message (id, description, meaning)\n// to a JsDoc statement formatted as expected by the Closure compiler.\nfunction i18nMetaToJSDoc(meta) {\n  const tags = [];\n  if (meta.description) {\n    tags.push({\n      tagName: \"desc\" /* o.JSDocTagName.Desc */,\n      text: meta.description\n    });\n  } else {\n    // Suppress the JSCompiler warning that a `@desc` was not given for this message.\n    tags.push({\n      tagName: \"suppress\" /* o.JSDocTagName.Suppress */,\n      text: '{msgDescriptions}'\n    });\n  }\n  if (meta.meaning) {\n    tags.push({\n      tagName: \"meaning\" /* o.JSDocTagName.Meaning */,\n      text: meta.meaning\n    });\n  }\n  return jsDocComment(tags);\n}\n\n/** Closure uses `goog.getMsg(message)` to lookup translations */\nconst GOOG_GET_MSG = 'goog.getMsg';\n/**\n * Generates a `goog.getMsg()` statement and reassignment. The template:\n *\n * ```html\n * <div i18n>Sent from {{ sender }} to <span class=\"receiver\">{{ receiver }}</span></div>\n * ```\n *\n * Generates:\n *\n * ```typescript\n * const MSG_FOO = goog.getMsg(\n *   // Message template.\n *   'Sent from {$interpolation} to {$startTagSpan}{$interpolation_1}{$closeTagSpan}.',\n *   // Placeholder values, set to magic strings which get replaced by the Angular runtime.\n *   {\n *     'interpolation': '\\uFFFD0\\uFFFD',\n *     'startTagSpan': '\\uFFFD1\\uFFFD',\n *     'interpolation_1': '\\uFFFD2\\uFFFD',\n *     'closeTagSpan': '\\uFFFD3\\uFFFD',\n *   },\n *   // Options bag.\n *   {\n *     // Maps each placeholder to the original Angular source code which generates it's value.\n *     original_code: {\n *       'interpolation': '{{ sender }}',\n *       'startTagSpan': '<span class=\"receiver\">',\n *       'interpolation_1': '{{ receiver }}',\n *       'closeTagSpan': '</span>',\n *     },\n *   },\n * );\n * const I18N_0 = MSG_FOO;\n * ```\n */\nfunction createGoogleGetMsgStatements(variable$1, message, closureVar, placeholderValues) {\n  const messageString = serializeI18nMessageForGetMsg(message);\n  const args = [literal(messageString)];\n  if (Object.keys(placeholderValues).length) {\n    // Message template parameters containing the magic strings replaced by the Angular runtime with\n    // real data, e.g. `{'interpolation': '\\uFFFD0\\uFFFD'}`.\n    args.push(mapLiteral(formatI18nPlaceholderNamesInMap(placeholderValues, true /* useCamelCase */), true /* quoted */));\n    // Message options object, which contains original source code for placeholders (as they are\n    // present in a template, e.g.\n    // `{original_code: {'interpolation': '{{ name }}', 'startTagSpan': '<span>'}}`.\n    args.push(mapLiteral({\n      original_code: literalMap(Object.keys(placeholderValues).map(param => ({\n        key: formatI18nPlaceholderName(param),\n        quoted: true,\n        value: message.placeholders[param] ?\n        // Get source span for typical placeholder if it exists.\n        literal(message.placeholders[param].sourceSpan.toString()) :\n        // Otherwise must be an ICU expression, get it's source span.\n        literal(message.placeholderToMessage[param].nodes.map(node => node.sourceSpan.toString()).join(''))\n      })))\n    }));\n  }\n  // /**\n  //  * @desc description of message\n  //  * @meaning meaning of message\n  //  */\n  // const MSG_... = goog.getMsg(..);\n  // I18N_X = MSG_...;\n  const googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();\n  googGetMsgStmt.addLeadingComment(i18nMetaToJSDoc(message));\n  const i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));\n  return [googGetMsgStmt, i18nAssignmentStmt];\n}\n/**\n * This visitor walks over i18n tree and generates its string representation, including ICUs and\n * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.\n */\nclass GetMsgSerializerVisitor {\n  formatPh(value) {\n    return `{$${formatI18nPlaceholderName(value)}}`;\n  }\n  visitText(text) {\n    return text.value;\n  }\n  visitContainer(container) {\n    return container.children.map(child => child.visit(this)).join('');\n  }\n  visitIcu(icu) {\n    return serializeIcuNode(icu);\n  }\n  visitTagPlaceholder(ph) {\n    return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n  }\n  visitPlaceholder(ph) {\n    return this.formatPh(ph.name);\n  }\n  visitBlockPlaceholder(ph) {\n    return `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n  }\n  visitIcuPlaceholder(ph, context) {\n    return this.formatPh(ph.name);\n  }\n}\nconst serializerVisitor = new GetMsgSerializerVisitor();\nfunction serializeI18nMessageForGetMsg(message) {\n  return message.nodes.map(node => node.visit(serializerVisitor, null)).join('');\n}\nfunction createLocalizeStatements(variable, message, params) {\n  const {\n    messageParts,\n    placeHolders\n  } = serializeI18nMessageForLocalize(message);\n  const sourceSpan = getSourceSpan(message);\n  const expressions = placeHolders.map(ph => params[ph.text]);\n  const localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);\n  const variableInitialization = variable.set(localizedString$1);\n  return [new ExpressionStatement(variableInitialization)];\n}\n/**\n * This visitor walks over an i18n tree, capturing literal strings and placeholders.\n *\n * The result can be used for generating the `$localize` tagged template literals.\n */\nclass LocalizeSerializerVisitor {\n  constructor(placeholderToMessage, pieces) {\n    this.placeholderToMessage = placeholderToMessage;\n    this.pieces = pieces;\n  }\n  visitText(text) {\n    if (this.pieces[this.pieces.length - 1] instanceof LiteralPiece) {\n      // Two literal pieces in a row means that there was some comment node in-between.\n      this.pieces[this.pieces.length - 1].text += text.value;\n    } else {\n      const sourceSpan = new ParseSourceSpan(text.sourceSpan.fullStart, text.sourceSpan.end, text.sourceSpan.fullStart, text.sourceSpan.details);\n      this.pieces.push(new LiteralPiece(text.value, sourceSpan));\n    }\n  }\n  visitContainer(container) {\n    container.children.forEach(child => child.visit(this));\n  }\n  visitIcu(icu) {\n    this.pieces.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));\n  }\n  visitTagPlaceholder(ph) {\n    this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));\n    if (!ph.isVoid) {\n      ph.children.forEach(child => child.visit(this));\n      this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));\n    }\n  }\n  visitPlaceholder(ph) {\n    this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));\n  }\n  visitBlockPlaceholder(ph) {\n    this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));\n    ph.children.forEach(child => child.visit(this));\n    this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));\n  }\n  visitIcuPlaceholder(ph) {\n    this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]));\n  }\n  createPlaceholderPiece(name, sourceSpan, associatedMessage) {\n    return new PlaceholderPiece(formatI18nPlaceholderName(name, /* useCamelCase */false), sourceSpan, associatedMessage);\n  }\n}\n/**\n * Serialize an i18n message into two arrays: messageParts and placeholders.\n *\n * These arrays will be used to generate `$localize` tagged template literals.\n *\n * @param message The message to be serialized.\n * @returns an object containing the messageParts and placeholders.\n */\nfunction serializeI18nMessageForLocalize(message) {\n  const pieces = [];\n  const serializerVisitor = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);\n  message.nodes.forEach(node => node.visit(serializerVisitor));\n  return processMessagePieces(pieces);\n}\nfunction getSourceSpan(message) {\n  const startNode = message.nodes[0];\n  const endNode = message.nodes[message.nodes.length - 1];\n  return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);\n}\n/**\n * Convert the list of serialized MessagePieces into two arrays.\n *\n * One contains the literal string pieces and the other the placeholders that will be replaced by\n * expressions when rendering `$localize` tagged template literals.\n *\n * @param pieces The pieces to process.\n * @returns an object containing the messageParts and placeholders.\n */\nfunction processMessagePieces(pieces) {\n  const messageParts = [];\n  const placeHolders = [];\n  if (pieces[0] instanceof PlaceholderPiece) {\n    // The first piece was a placeholder so we need to add an initial empty message part.\n    messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));\n  }\n  for (let i = 0; i < pieces.length; i++) {\n    const part = pieces[i];\n    if (part instanceof LiteralPiece) {\n      messageParts.push(part);\n    } else {\n      placeHolders.push(part);\n      if (pieces[i - 1] instanceof PlaceholderPiece) {\n        // There were two placeholders in a row, so we need to add an empty message part.\n        messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));\n      }\n    }\n  }\n  if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {\n    // The last piece was a placeholder so we need to add a final empty message part.\n    messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));\n  }\n  return {\n    messageParts,\n    placeHolders\n  };\n}\nfunction createEmptyMessagePart(location) {\n  return new LiteralPiece('', new ParseSourceSpan(location, location));\n}\n\n/** Name of the global variable that is used to determine if we use Closure translations or not */\nconst NG_I18N_CLOSURE_MODE$1 = 'ngI18nClosureMode';\n/**\n * Prefix for non-`goog.getMsg` i18n-related vars.\n * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that\n * considers variables like `I18N_0` as constants and throws an error when their value changes.\n */\nconst TRANSLATION_VAR_PREFIX = 'i18n_';\n/** Prefix of ICU expressions for post processing */\nconst I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';\n/**\n * The escape sequence used for message param values.\n */\nconst ESCAPE = '\\uFFFD';\n/**\n * Lifts i18n properties into the consts array.\n * TODO: Can we use `ConstCollectedExpr`?\n * TODO: The way the various attributes are linked together is very complex. Perhaps we could\n * simplify the process, maybe by combining the context and message ops?\n */\nfunction collectI18nConsts(job) {\n  const fileBasedI18nSuffix = job.relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_').toUpperCase() + '_';\n  // Step One: Build up various lookup maps we need to collect all the consts.\n  // Context Xref -> Extracted Attribute Ops\n  const extractedAttributesByI18nContext = new Map();\n  // Element/ElementStart Xref -> I18n Attributes config op\n  const i18nAttributesByElement = new Map();\n  // Element/ElementStart Xref -> All I18n Expression ops for attrs on that target\n  const i18nExpressionsByElement = new Map();\n  // I18n Message Xref -> I18n Message Op (TODO: use a central op map)\n  const messages = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      if (op.kind === OpKind.ExtractedAttribute && op.i18nContext !== null) {\n        const attributes = extractedAttributesByI18nContext.get(op.i18nContext) ?? [];\n        attributes.push(op);\n        extractedAttributesByI18nContext.set(op.i18nContext, attributes);\n      } else if (op.kind === OpKind.I18nAttributes) {\n        i18nAttributesByElement.set(op.target, op);\n      } else if (op.kind === OpKind.I18nExpression && op.usage === I18nExpressionFor.I18nAttribute) {\n        const expressions = i18nExpressionsByElement.get(op.target) ?? [];\n        expressions.push(op);\n        i18nExpressionsByElement.set(op.target, expressions);\n      } else if (op.kind === OpKind.I18nMessage) {\n        messages.set(op.xref, op);\n      }\n    }\n  }\n  // Step Two: Serialize the extracted i18n messages for root i18n blocks and i18n attributes into\n  // the const array.\n  //\n  // Also, each i18n message will have a variable expression that can refer to its\n  // value. Store these expressions in the appropriate place:\n  // 1. For normal i18n content, it also goes in the const array. We save the const index to use\n  // later.\n  // 2. For extracted attributes, it becomes the value of the extracted attribute instruction.\n  // 3. For i18n bindings, it will go in a separate const array instruction below; for now, we just\n  // save it.\n  const i18nValuesByContext = new Map();\n  const messageConstIndices = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.I18nMessage) {\n        if (op.messagePlaceholder === null) {\n          const {\n            mainVar,\n            statements\n          } = collectMessage(job, fileBasedI18nSuffix, messages, op);\n          if (op.i18nBlock !== null) {\n            // This is a regular i18n message with a corresponding i18n block. Collect it into the\n            // const array.\n            const i18nConst = job.addConst(mainVar, statements);\n            messageConstIndices.set(op.i18nBlock, i18nConst);\n          } else {\n            // This is an i18n attribute. Extract the initializers into the const pool.\n            job.constsInitializers.push(...statements);\n            // Save the i18n variable value for later.\n            i18nValuesByContext.set(op.i18nContext, mainVar);\n            // This i18n message may correspond to an individual extracted attribute. If so, The\n            // value of that attribute is updated to read the extracted i18n variable.\n            const attributesForMessage = extractedAttributesByI18nContext.get(op.i18nContext);\n            if (attributesForMessage !== undefined) {\n              for (const attr of attributesForMessage) {\n                attr.expression = mainVar.clone();\n              }\n            }\n          }\n        }\n        OpList.remove(op);\n      }\n    }\n  }\n  // Step Three: Serialize I18nAttributes configurations into the const array. Each I18nAttributes\n  // instruction has a config array, which contains k-v pairs describing each binding name, and the\n  // i18n variable that provides the value.\n  for (const unit of job.units) {\n    for (const elem of unit.create) {\n      if (isElementOrContainerOp(elem)) {\n        const i18nAttributes = i18nAttributesByElement.get(elem.xref);\n        if (i18nAttributes === undefined) {\n          // This element is not associated with an i18n attributes configuration instruction.\n          continue;\n        }\n        let i18nExpressions = i18nExpressionsByElement.get(elem.xref);\n        if (i18nExpressions === undefined) {\n          // Unused i18nAttributes should have already been removed.\n          // TODO: Should the removal of those dead instructions be merged with this phase?\n          throw new Error('AssertionError: Could not find any i18n expressions associated with an I18nAttributes instruction');\n        }\n        // Find expressions for all the unique property names, removing duplicates.\n        const seenPropertyNames = new Set();\n        i18nExpressions = i18nExpressions.filter(i18nExpr => {\n          const seen = seenPropertyNames.has(i18nExpr.name);\n          seenPropertyNames.add(i18nExpr.name);\n          return !seen;\n        });\n        const i18nAttributeConfig = i18nExpressions.flatMap(i18nExpr => {\n          const i18nExprValue = i18nValuesByContext.get(i18nExpr.context);\n          if (i18nExprValue === undefined) {\n            throw new Error('AssertionError: Could not find i18n expression\\'s value');\n          }\n          return [literal(i18nExpr.name), i18nExprValue];\n        });\n        i18nAttributes.i18nAttributesConfig = job.addConst(new LiteralArrayExpr(i18nAttributeConfig));\n      }\n    }\n  }\n  // Step Four: Propagate the extracted const index into i18n ops that messages were extracted from.\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.I18nStart) {\n        const msgIndex = messageConstIndices.get(op.root);\n        if (msgIndex === undefined) {\n          throw new Error('AssertionError: Could not find corresponding i18n block index for an i18n message op; was an i18n message incorrectly assumed to correspond to an attribute?');\n        }\n        op.messageIndex = msgIndex;\n      }\n    }\n  }\n}\n/**\n * Collects the given message into a set of statements that can be added to the const array.\n * This will recursively collect any sub-messages referenced from the parent message as well.\n */\nfunction collectMessage(job, fileBasedI18nSuffix, messages, messageOp) {\n  // Recursively collect any sub-messages, record each sub-message's main variable under its\n  // placeholder so that we can add them to the params for the parent message. It is possible\n  // that multiple sub-messages will share the same placeholder, so we need to track an array of\n  // variables for each placeholder.\n  const statements = [];\n  const subMessagePlaceholders = new Map();\n  for (const subMessageId of messageOp.subMessages) {\n    const subMessage = messages.get(subMessageId);\n    const {\n      mainVar: subMessageVar,\n      statements: subMessageStatements\n    } = collectMessage(job, fileBasedI18nSuffix, messages, subMessage);\n    statements.push(...subMessageStatements);\n    const subMessages = subMessagePlaceholders.get(subMessage.messagePlaceholder) ?? [];\n    subMessages.push(subMessageVar);\n    subMessagePlaceholders.set(subMessage.messagePlaceholder, subMessages);\n  }\n  addSubMessageParams(messageOp, subMessagePlaceholders);\n  // Sort the params for consistency with TemaplateDefinitionBuilder output.\n  messageOp.params = new Map([...messageOp.params.entries()].sort());\n  const mainVar = variable(job.pool.uniqueName(TRANSLATION_VAR_PREFIX));\n  // Closure Compiler requires const names to start with `MSG_` but disallows any other\n  // const to start with `MSG_`. We define a variable starting with `MSG_` just for the\n  // `goog.getMsg` call\n  const closureVar = i18nGenerateClosureVar(job.pool, messageOp.message.id, fileBasedI18nSuffix, job.i18nUseExternalIds);\n  let transformFn = undefined;\n  // If nescessary, add a post-processing step and resolve any placeholder params that are\n  // set in post-processing.\n  if (messageOp.needsPostprocessing || messageOp.postprocessingParams.size > 0) {\n    // Sort the post-processing params for consistency with TemaplateDefinitionBuilder output.\n    const postprocessingParams = Object.fromEntries([...messageOp.postprocessingParams.entries()].sort());\n    const formattedPostprocessingParams = formatI18nPlaceholderNamesInMap(postprocessingParams, /* useCamelCase */false);\n    const extraTransformFnParams = [];\n    if (messageOp.postprocessingParams.size > 0) {\n      extraTransformFnParams.push(mapLiteral(formattedPostprocessingParams, /* quoted */true));\n    }\n    transformFn = expr => importExpr(Identifiers.i18nPostprocess).callFn([expr, ...extraTransformFnParams]);\n  }\n  // Add the message's statements\n  statements.push(...getTranslationDeclStmts$1(messageOp.message, mainVar, closureVar, messageOp.params, transformFn));\n  return {\n    mainVar,\n    statements\n  };\n}\n/**\n * Adds the given subMessage placeholders to the given message op.\n *\n * If a placeholder only corresponds to a single sub-message variable, we just set that variable\n * as the param value. However, if the placeholder corresponds to multiple sub-message\n * variables, we need to add a special placeholder value that is handled by the post-processing\n * step. We then add the array of variables as a post-processing param.\n */\nfunction addSubMessageParams(messageOp, subMessagePlaceholders) {\n  for (const [placeholder, subMessages] of subMessagePlaceholders) {\n    if (subMessages.length === 1) {\n      messageOp.params.set(placeholder, subMessages[0]);\n    } else {\n      messageOp.params.set(placeholder, literal(`${ESCAPE}${I18N_ICU_MAPPING_PREFIX}${placeholder}${ESCAPE}`));\n      messageOp.postprocessingParams.set(placeholder, literalArr(subMessages));\n    }\n  }\n}\n/**\n * Generate statements that define a given translation message.\n *\n * ```\n * var I18N_1;\n * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {\n *     var MSG_EXTERNAL_XXX = goog.getMsg(\n *          \"Some message with {$interpolation}!\",\n *          { \"interpolation\": \"\\uFFFD0\\uFFFD\" }\n *     );\n *     I18N_1 = MSG_EXTERNAL_XXX;\n * }\n * else {\n *     I18N_1 = $localize`Some message with ${'\\uFFFD0\\uFFFD'}!`;\n * }\n * ```\n *\n * @param message The original i18n AST message node\n * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.\n * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.\n * @param params Object mapping placeholder names to their values (e.g.\n * `{ \"interpolation\": \"\\uFFFD0\\uFFFD\" }`).\n * @param transformFn Optional transformation function that will be applied to the translation\n *     (e.g.\n * post-processing).\n * @returns An array of statements that defined a given translation.\n */\nfunction getTranslationDeclStmts$1(message, variable, closureVar, params, transformFn) {\n  const paramsObject = Object.fromEntries(params);\n  const statements = [declareI18nVariable(variable), ifStmt(createClosureModeGuard$1(), createGoogleGetMsgStatements(variable, message, closureVar, paramsObject), createLocalizeStatements(variable, message, formatI18nPlaceholderNamesInMap(paramsObject, /* useCamelCase */false)))];\n  if (transformFn) {\n    statements.push(new ExpressionStatement(variable.set(transformFn(variable))));\n  }\n  return statements;\n}\n/**\n * Create the expression that will be used to guard the closure mode block\n * It is equivalent to:\n *\n * ```\n * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode\n * ```\n */\nfunction createClosureModeGuard$1() {\n  return typeofExpr(variable(NG_I18N_CLOSURE_MODE$1)).notIdentical(literal('undefined', STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE$1));\n}\n/**\n * Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).\n */\nfunction i18nGenerateClosureVar(pool, messageId, fileBasedI18nSuffix, useExternalIds) {\n  let name;\n  const suffix = fileBasedI18nSuffix;\n  if (useExternalIds) {\n    const prefix = getTranslationConstPrefix(`EXTERNAL_`);\n    const uniqueSuffix = pool.uniqueName(suffix);\n    name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;\n  } else {\n    const prefix = getTranslationConstPrefix(suffix);\n    name = pool.uniqueName(prefix);\n  }\n  return variable(name);\n}\n\n/**\n * Removes text nodes within i18n blocks since they are already hardcoded into the i18n message.\n * Also, replaces interpolations on these text nodes with i18n expressions of the non-text portions,\n * which will be applied later.\n */\nfunction convertI18nText(job) {\n  for (const unit of job.units) {\n    // Remove all text nodes within i18n blocks, their content is already captured in the i18n\n    // message.\n    let currentI18n = null;\n    let currentIcu = null;\n    const textNodeI18nBlocks = new Map();\n    const textNodeIcus = new Map();\n    const icuPlaceholderByText = new Map();\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nStart:\n          if (op.context === null) {\n            throw Error('I18n op should have its context set.');\n          }\n          currentI18n = op;\n          break;\n        case OpKind.I18nEnd:\n          currentI18n = null;\n          break;\n        case OpKind.IcuStart:\n          if (op.context === null) {\n            throw Error('Icu op should have its context set.');\n          }\n          currentIcu = op;\n          break;\n        case OpKind.IcuEnd:\n          currentIcu = null;\n          break;\n        case OpKind.Text:\n          if (currentI18n !== null) {\n            textNodeI18nBlocks.set(op.xref, currentI18n);\n            textNodeIcus.set(op.xref, currentIcu);\n            if (op.icuPlaceholder !== null) {\n              // Create an op to represent the ICU placeholder. Initially set its static text to the\n              // value of the text op, though this may be overwritten later if this text op is a\n              // placeholder for an interpolation.\n              const icuPlaceholderOp = createIcuPlaceholderOp(job.allocateXrefId(), op.icuPlaceholder, [op.initialValue]);\n              OpList.replace(op, icuPlaceholderOp);\n              icuPlaceholderByText.set(op.xref, icuPlaceholderOp);\n            } else {\n              // Otherwise just remove the text op, since its value is already accounted for in the\n              // translated message.\n              OpList.remove(op);\n            }\n          }\n          break;\n      }\n    }\n    // Update any interpolations to the removed text, and instead represent them as a series of i18n\n    // expressions that we then apply.\n    for (const op of unit.update) {\n      switch (op.kind) {\n        case OpKind.InterpolateText:\n          if (!textNodeI18nBlocks.has(op.target)) {\n            continue;\n          }\n          const i18nOp = textNodeI18nBlocks.get(op.target);\n          const icuOp = textNodeIcus.get(op.target);\n          const icuPlaceholder = icuPlaceholderByText.get(op.target);\n          const contextId = icuOp ? icuOp.context : i18nOp.context;\n          const resolutionTime = icuOp ? I18nParamResolutionTime.Postproccessing : I18nParamResolutionTime.Creation;\n          const ops = [];\n          for (let i = 0; i < op.interpolation.expressions.length; i++) {\n            const expr = op.interpolation.expressions[i];\n            // For now, this i18nExpression depends on the slot context of the enclosing i18n block.\n            // Later, we will modify this, and advance to a different point.\n            ops.push(createI18nExpressionOp(contextId, i18nOp.xref, i18nOp.xref, i18nOp.handle, expr, icuPlaceholder?.xref ?? null, op.interpolation.i18nPlaceholders[i] ?? null, resolutionTime, I18nExpressionFor.I18nText, '', expr.sourceSpan ?? op.sourceSpan));\n          }\n          OpList.replaceWithMany(op, ops);\n          // If this interpolation is part of an ICU placeholder, add the strings and expressions to\n          // the placeholder.\n          if (icuPlaceholder !== undefined) {\n            icuPlaceholder.strings = op.interpolation.strings;\n          }\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Lifts local reference declarations on element-like structures within each view into an entry in\n * the `consts` array for the whole component.\n */\nfunction liftLocalRefs(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.ElementStart:\n        case OpKind.Template:\n          if (!Array.isArray(op.localRefs)) {\n            throw new Error(`AssertionError: expected localRefs to be an array still`);\n          }\n          op.numSlotsUsed += op.localRefs.length;\n          if (op.localRefs.length > 0) {\n            const localRefs = serializeLocalRefs(op.localRefs);\n            op.localRefs = job.addConst(localRefs);\n          } else {\n            op.localRefs = null;\n          }\n          break;\n      }\n    }\n  }\n}\nfunction serializeLocalRefs(refs) {\n  const constRefs = [];\n  for (const ref of refs) {\n    constRefs.push(literal(ref.name), literal(ref.target));\n  }\n  return literalArr(constRefs);\n}\n\n/**\n * Change namespaces between HTML, SVG and MathML, depending on the next element.\n */\nfunction emitNamespaceChanges(job) {\n  for (const unit of job.units) {\n    let activeNamespace = Namespace.HTML;\n    for (const op of unit.create) {\n      if (op.kind !== OpKind.ElementStart) {\n        continue;\n      }\n      if (op.namespace !== activeNamespace) {\n        OpList.insertBefore(createNamespaceOp(op.namespace), op);\n        activeNamespace = op.namespace;\n      }\n    }\n  }\n}\n\n/**\n * Parses string representation of a style and converts it into object literal.\n *\n * @param value string representation of style as used in the `style` attribute in HTML.\n *   Example: `color: red; height: auto`.\n * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',\n * 'auto']`\n */\nfunction parse(value) {\n  // we use a string array here instead of a string map\n  // because a string-map is not guaranteed to retain the\n  // order of the entries whereas a string array can be\n  // constructed in a [key, value, key, value] format.\n  const styles = [];\n  let i = 0;\n  let parenDepth = 0;\n  let quote = 0 /* Char.QuoteNone */;\n  let valueStart = 0;\n  let propStart = 0;\n  let currentProp = null;\n  while (i < value.length) {\n    const token = value.charCodeAt(i++);\n    switch (token) {\n      case 40 /* Char.OpenParen */:\n        parenDepth++;\n        break;\n      case 41 /* Char.CloseParen */:\n        parenDepth--;\n        break;\n      case 39 /* Char.QuoteSingle */:\n        // valueStart needs to be there since prop values don't\n        // have quotes in CSS\n        if (quote === 0 /* Char.QuoteNone */) {\n          quote = 39 /* Char.QuoteSingle */;\n        } else if (quote === 39 /* Char.QuoteSingle */ && value.charCodeAt(i - 1) !== 92 /* Char.BackSlash */) {\n          quote = 0 /* Char.QuoteNone */;\n        }\n        break;\n      case 34 /* Char.QuoteDouble */:\n        // same logic as above\n        if (quote === 0 /* Char.QuoteNone */) {\n          quote = 34 /* Char.QuoteDouble */;\n        } else if (quote === 34 /* Char.QuoteDouble */ && value.charCodeAt(i - 1) !== 92 /* Char.BackSlash */) {\n          quote = 0 /* Char.QuoteNone */;\n        }\n        break;\n      case 58 /* Char.Colon */:\n        if (!currentProp && parenDepth === 0 && quote === 0 /* Char.QuoteNone */) {\n          // TODO: Do not hyphenate CSS custom property names like: `--intentionallyCamelCase`\n          currentProp = hyphenate(value.substring(propStart, i - 1).trim());\n          valueStart = i;\n        }\n        break;\n      case 59 /* Char.Semicolon */:\n        if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0 /* Char.QuoteNone */) {\n          const styleVal = value.substring(valueStart, i - 1).trim();\n          styles.push(currentProp, styleVal);\n          propStart = i;\n          valueStart = 0;\n          currentProp = null;\n        }\n        break;\n    }\n  }\n  if (currentProp && valueStart) {\n    const styleVal = value.slice(valueStart).trim();\n    styles.push(currentProp, styleVal);\n  }\n  return styles;\n}\nfunction hyphenate(value) {\n  return value.replace(/[a-z][A-Z]/g, v => {\n    return v.charAt(0) + '-' + v.charAt(1);\n  }).toLowerCase();\n}\n\n/**\n * Generate names for functions and variables across all views.\n *\n * This includes propagating those names into any `ir.ReadVariableExpr`s of those variables, so that\n * the reads can be emitted correctly.\n */\nfunction nameFunctionsAndVariables(job) {\n  addNamesToView(job.root, job.componentName, {\n    index: 0\n  }, job.compatibility === CompatibilityMode.TemplateDefinitionBuilder);\n}\nfunction addNamesToView(unit, baseName, state, compatibility) {\n  if (unit.fnName === null) {\n    unit.fnName = sanitizeIdentifier(`${baseName}_${unit.job.fnSuffix}`);\n  }\n  // Keep track of the names we assign to variables in the view. We'll need to propagate these\n  // into reads of those variables afterwards.\n  const varNames = new Map();\n  for (const op of unit.ops()) {\n    switch (op.kind) {\n      case OpKind.Property:\n      case OpKind.HostProperty:\n        if (op.isAnimationTrigger) {\n          op.name = '@' + op.name;\n        }\n        break;\n      case OpKind.Listener:\n        if (op.handlerFnName !== null) {\n          break;\n        }\n        if (!op.hostListener && op.targetSlot.slot === null) {\n          throw new Error(`Expected a slot to be assigned`);\n        }\n        let animation = '';\n        if (op.isAnimationListener) {\n          op.name = `@${op.name}.${op.animationPhase}`;\n          animation = 'animation';\n        }\n        if (op.hostListener) {\n          op.handlerFnName = `${baseName}_${animation}${op.name}_HostBindingHandler`;\n        } else {\n          op.handlerFnName = `${unit.fnName}_${op.tag.replace('-', '_')}_${animation}${op.name}_${op.targetSlot.slot}_listener`;\n        }\n        op.handlerFnName = sanitizeIdentifier(op.handlerFnName);\n        break;\n      case OpKind.Variable:\n        varNames.set(op.xref, getVariableName(unit, op.variable, state));\n        break;\n      case OpKind.RepeaterCreate:\n        if (!(unit instanceof ViewCompilationUnit)) {\n          throw new Error(`AssertionError: must be compiling a component`);\n        }\n        if (op.handle.slot === null) {\n          throw new Error(`Expected slot to be assigned`);\n        }\n        if (op.emptyView !== null) {\n          const emptyView = unit.job.views.get(op.emptyView);\n          // Repeater empty view function is at slot +2 (metadata is in the first slot).\n          addNamesToView(emptyView, `${baseName}_${`${op.functionNameSuffix}Empty`}_${op.handle.slot + 2}`, state, compatibility);\n        }\n        // Repeater primary view function is at slot +1 (metadata is in the first slot).\n        addNamesToView(unit.job.views.get(op.xref), `${baseName}_${op.functionNameSuffix}_${op.handle.slot + 1}`, state, compatibility);\n        break;\n      case OpKind.Template:\n        if (!(unit instanceof ViewCompilationUnit)) {\n          throw new Error(`AssertionError: must be compiling a component`);\n        }\n        const childView = unit.job.views.get(op.xref);\n        if (op.handle.slot === null) {\n          throw new Error(`Expected slot to be assigned`);\n        }\n        const suffix = op.functionNameSuffix.length === 0 ? '' : `_${op.functionNameSuffix}`;\n        addNamesToView(childView, `${baseName}${suffix}_${op.handle.slot}`, state, compatibility);\n        break;\n      case OpKind.StyleProp:\n        op.name = normalizeStylePropName(op.name);\n        if (compatibility) {\n          op.name = stripImportant(op.name);\n        }\n        break;\n      case OpKind.ClassProp:\n        if (compatibility) {\n          op.name = stripImportant(op.name);\n        }\n        break;\n    }\n  }\n  // Having named all variables declared in the view, now we can push those names into the\n  // `ir.ReadVariableExpr` expressions which represent reads of those variables.\n  for (const op of unit.ops()) {\n    visitExpressionsInOp(op, expr => {\n      if (!(expr instanceof ReadVariableExpr) || expr.name !== null) {\n        return;\n      }\n      if (!varNames.has(expr.xref)) {\n        throw new Error(`Variable ${expr.xref} not yet named`);\n      }\n      expr.name = varNames.get(expr.xref);\n    });\n  }\n}\nfunction getVariableName(unit, variable, state) {\n  if (variable.name === null) {\n    switch (variable.kind) {\n      case SemanticVariableKind.Context:\n        variable.name = `ctx_r${state.index++}`;\n        break;\n      case SemanticVariableKind.Identifier:\n        if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {\n          // TODO: Prefix increment and `_r` are for compatiblity with the old naming scheme.\n          // This has the potential to cause collisions when `ctx` is the identifier, so we need a\n          // special check for that as well.\n          const compatPrefix = variable.identifier === 'ctx' ? 'i' : '';\n          variable.name = `${variable.identifier}_${compatPrefix}r${++state.index}`;\n        } else {\n          variable.name = `${variable.identifier}_i${state.index++}`;\n        }\n        break;\n      default:\n        // TODO: Prefix increment for compatibility only.\n        variable.name = `_r${++state.index}`;\n        break;\n    }\n  }\n  return variable.name;\n}\n/**\n * Normalizes a style prop name by hyphenating it (unless its a CSS variable).\n */\nfunction normalizeStylePropName(name) {\n  return name.startsWith('--') ? name : hyphenate(name);\n}\n/**\n * Strips `!important` out of the given style or class name.\n */\nfunction stripImportant(name) {\n  const importantIndex = name.indexOf('!important');\n  if (importantIndex > -1) {\n    return name.substring(0, importantIndex);\n  }\n  return name;\n}\n\n/**\n * Merges logically sequential `NextContextExpr` operations.\n *\n * `NextContextExpr` can be referenced repeatedly, \"popping\" the runtime's context stack each time.\n * When two such expressions appear back-to-back, it's possible to merge them together into a single\n * `NextContextExpr` that steps multiple contexts. This merging is possible if all conditions are\n * met:\n *\n *   * The result of the `NextContextExpr` that's folded into the subsequent one is not stored (that\n *     is, the call is purely side-effectful).\n *   * No operations in between them uses the implicit context.\n */\nfunction mergeNextContextExpressions(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.Listener) {\n        mergeNextContextsInOps(op.handlerOps);\n      }\n    }\n    mergeNextContextsInOps(unit.update);\n  }\n}\nfunction mergeNextContextsInOps(ops) {\n  for (const op of ops) {\n    // Look for a candidate operation to maybe merge.\n    if (op.kind !== OpKind.Statement || !(op.statement instanceof ExpressionStatement) || !(op.statement.expr instanceof NextContextExpr)) {\n      continue;\n    }\n    const mergeSteps = op.statement.expr.steps;\n    // Try to merge this `ir.NextContextExpr`.\n    let tryToMerge = true;\n    for (let candidate = op.next; candidate.kind !== OpKind.ListEnd && tryToMerge; candidate = candidate.next) {\n      visitExpressionsInOp(candidate, (expr, flags) => {\n        if (!isIrExpression(expr)) {\n          return expr;\n        }\n        if (!tryToMerge) {\n          // Either we've already merged, or failed to merge.\n          return;\n        }\n        if (flags & VisitorContextFlag.InChildOperation) {\n          // We cannot merge into child operations.\n          return;\n        }\n        switch (expr.kind) {\n          case ExpressionKind.NextContext:\n            // Merge the previous `ir.NextContextExpr` into this one.\n            expr.steps += mergeSteps;\n            OpList.remove(op);\n            tryToMerge = false;\n            break;\n          case ExpressionKind.GetCurrentView:\n          case ExpressionKind.Reference:\n            // Can't merge past a dependency on the context.\n            tryToMerge = false;\n            break;\n        }\n        return;\n      });\n    }\n  }\n}\nconst CONTAINER_TAG = 'ng-container';\n/**\n * Replace an `Element` or `ElementStart` whose tag is `ng-container` with a specific op.\n */\nfunction generateNgContainerOps(job) {\n  for (const unit of job.units) {\n    const updatedElementXrefs = new Set();\n    for (const op of unit.create) {\n      if (op.kind === OpKind.ElementStart && op.tag === CONTAINER_TAG) {\n        // Transmute the `ElementStart` instruction to `ContainerStart`.\n        op.kind = OpKind.ContainerStart;\n        updatedElementXrefs.add(op.xref);\n      }\n      if (op.kind === OpKind.ElementEnd && updatedElementXrefs.has(op.xref)) {\n        // This `ElementEnd` is associated with an `ElementStart` we already transmuted.\n        op.kind = OpKind.ContainerEnd;\n      }\n    }\n  }\n}\n\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupElement(elements, xref) {\n  const el = elements.get(xref);\n  if (el === undefined) {\n    throw new Error('All attributes should have an element-like target.');\n  }\n  return el;\n}\n/**\n * When a container is marked with `ngNonBindable`, the non-bindable characteristic also applies to\n * all descendants of that container. Therefore, we must emit `disableBindings` and `enableBindings`\n * instructions for every such container.\n */\nfunction disableBindings$1(job) {\n  const elements = new Map();\n  for (const view of job.units) {\n    for (const op of view.create) {\n      if (!isElementOrContainerOp(op)) {\n        continue;\n      }\n      elements.set(op.xref, op);\n    }\n  }\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if ((op.kind === OpKind.ElementStart || op.kind === OpKind.ContainerStart) && op.nonBindable) {\n        OpList.insertAfter(createDisableBindingsOp(op.xref), op);\n      }\n      if ((op.kind === OpKind.ElementEnd || op.kind === OpKind.ContainerEnd) && lookupElement(elements, op.xref).nonBindable) {\n        OpList.insertBefore(createEnableBindingsOp(op.xref), op);\n      }\n    }\n  }\n}\n\n/**\n * Nullish coalescing expressions such as `a ?? b` have different semantics in Angular templates as\n * compared to JavaScript. In particular, they default to `null` instead of `undefined`. Therefore,\n * we replace them with ternary expressions, assigning temporaries as needed to avoid re-evaluating\n * the same sub-expression multiple times.\n */\nfunction generateNullishCoalesceExpressions(job) {\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      transformExpressionsInOp(op, expr => {\n        if (!(expr instanceof BinaryOperatorExpr) || expr.operator !== BinaryOperator.NullishCoalesce) {\n          return expr;\n        }\n        const assignment = new AssignTemporaryExpr(expr.lhs.clone(), job.allocateXrefId());\n        const read = new ReadTemporaryExpr(assignment.xref);\n        // TODO: When not in compatibility mode for TemplateDefinitionBuilder, we can just emit\n        // `t != null` instead of including an undefined check as well.\n        return new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.And, new BinaryOperatorExpr(BinaryOperator.NotIdentical, assignment, NULL_EXPR), new BinaryOperatorExpr(BinaryOperator.NotIdentical, read, new LiteralExpr(undefined))), read.clone(), expr.rhs);\n      }, VisitorContextFlag.None);\n    }\n  }\n}\nfunction kindTest(kind) {\n  return op => op.kind === kind;\n}\nfunction kindWithInterpolationTest(kind, interpolation) {\n  return op => {\n    return op.kind === kind && interpolation === op.expression instanceof Interpolation;\n  };\n}\n/**\n * Defines the groups based on `OpKind` that ops will be divided into, for the various create\n * op kinds. Ops will be collected into groups, then optionally transformed, before recombining\n * the groups in the order defined here.\n */\nconst CREATE_ORDERING = [{\n  test: op => op.kind === OpKind.Listener && op.hostListener && op.isAnimationListener\n}, {\n  test: op => op.kind === OpKind.Listener && !(op.hostListener && op.isAnimationListener)\n}];\n/**\n * Defines the groups based on `OpKind` that ops will be divided into, for the various update\n * op kinds.\n */\nconst UPDATE_ORDERING = [{\n  test: kindTest(OpKind.StyleMap),\n  transform: keepLast\n}, {\n  test: kindTest(OpKind.ClassMap),\n  transform: keepLast\n}, {\n  test: kindTest(OpKind.StyleProp)\n}, {\n  test: kindTest(OpKind.ClassProp)\n}, {\n  test: kindWithInterpolationTest(OpKind.Attribute, true)\n}, {\n  test: kindWithInterpolationTest(OpKind.Property, true)\n}, {\n  test: kindWithInterpolationTest(OpKind.Property, false)\n}, {\n  test: kindWithInterpolationTest(OpKind.Attribute, false)\n}];\n/**\n * Host bindings have their own update ordering.\n */\nconst UPDATE_HOST_ORDERING = [{\n  test: kindWithInterpolationTest(OpKind.HostProperty, true)\n}, {\n  test: kindWithInterpolationTest(OpKind.HostProperty, false)\n}, {\n  test: kindTest(OpKind.Attribute)\n}, {\n  test: kindTest(OpKind.StyleMap),\n  transform: keepLast\n}, {\n  test: kindTest(OpKind.ClassMap),\n  transform: keepLast\n}, {\n  test: kindTest(OpKind.StyleProp)\n}, {\n  test: kindTest(OpKind.ClassProp)\n}];\n/**\n * The set of all op kinds we handle in the reordering phase.\n */\nconst handledOpKinds = new Set([OpKind.Listener, OpKind.StyleMap, OpKind.ClassMap, OpKind.StyleProp, OpKind.ClassProp, OpKind.Property, OpKind.HostProperty, OpKind.Attribute]);\n/**\n * Many type of operations have ordering constraints that must be respected. For example, a\n * `ClassMap` instruction must be ordered after a `StyleMap` instruction, in order to have\n * predictable semantics that match TemplateDefinitionBuilder and don't break applications.\n */\nfunction orderOps(job) {\n  for (const unit of job.units) {\n    // First, we pull out ops that need to be ordered. Then, when we encounter an op that shouldn't\n    // be reordered, put the ones we've pulled so far back in the correct order. Finally, if we\n    // still have ops pulled at the end, put them back in the correct order.\n    // Create mode:\n    orderWithin(unit.create, CREATE_ORDERING);\n    // Update mode:\n    const ordering = unit.job.kind === CompilationJobKind.Host ? UPDATE_HOST_ORDERING : UPDATE_ORDERING;\n    orderWithin(unit.update, ordering);\n  }\n}\n/**\n * Order all the ops within the specified group.\n */\nfunction orderWithin(opList, ordering) {\n  let opsToOrder = [];\n  // Only reorder ops that target the same xref; do not mix ops that target different xrefs.\n  let firstTargetInGroup = null;\n  for (const op of opList) {\n    const currentTarget = hasDependsOnSlotContextTrait(op) ? op.target : null;\n    if (!handledOpKinds.has(op.kind) || currentTarget !== firstTargetInGroup && firstTargetInGroup !== null && currentTarget !== null) {\n      OpList.insertBefore(reorder(opsToOrder, ordering), op);\n      opsToOrder = [];\n      firstTargetInGroup = null;\n    }\n    if (handledOpKinds.has(op.kind)) {\n      opsToOrder.push(op);\n      OpList.remove(op);\n      firstTargetInGroup = currentTarget ?? firstTargetInGroup;\n    }\n  }\n  opList.push(reorder(opsToOrder, ordering));\n}\n/**\n * Reorders the given list of ops according to the ordering defined by `ORDERING`.\n */\nfunction reorder(ops, ordering) {\n  // Break the ops list into groups based on OpKind.\n  const groups = Array.from(ordering, () => new Array());\n  for (const op of ops) {\n    const groupIndex = ordering.findIndex(o => o.test(op));\n    groups[groupIndex].push(op);\n  }\n  // Reassemble the groups into a single list, in the correct order.\n  return groups.flatMap((group, i) => {\n    const transform = ordering[i].transform;\n    return transform ? transform(group) : group;\n  });\n}\n/**\n * Keeps only the last op in a list of ops.\n */\nfunction keepLast(ops) {\n  return ops.slice(ops.length - 1);\n}\n\n/**\n * Parses extracted style and class attributes into separate ExtractedAttributeOps per style or\n * class property.\n */\nfunction parseExtractedStyles(job) {\n  const elements = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (isElementOrContainerOp(op)) {\n        elements.set(op.xref, op);\n      }\n    }\n  }\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind === OpKind.ExtractedAttribute && op.bindingKind === BindingKind.Attribute && isStringLiteral(op.expression)) {\n        const target = elements.get(op.target);\n        if (target !== undefined && target.kind === OpKind.Template && target.templateKind === TemplateKind.Structural) {\n          // TemplateDefinitionBuilder will not apply class and style bindings to structural\n          // directives; instead, it will leave them as attributes.\n          // (It's not clear what that would mean, anyway -- classes and styles on a structural\n          // element should probably be a parse error.)\n          // TODO: We may be able to remove this once Template Pipeline is the default.\n          continue;\n        }\n        if (op.name === 'style') {\n          const parsedStyles = parse(op.expression.value);\n          for (let i = 0; i < parsedStyles.length - 1; i += 2) {\n            OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.StyleProperty, null, parsedStyles[i], literal(parsedStyles[i + 1]), null, null, SecurityContext.STYLE), op);\n          }\n          OpList.remove(op);\n        } else if (op.name === 'class') {\n          const parsedClasses = op.expression.value.trim().split(/\\s+/g);\n          for (const parsedClass of parsedClasses) {\n            OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.ClassName, null, parsedClass, null, null, null, SecurityContext.NONE), op);\n          }\n          OpList.remove(op);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Attributes of `ng-content` named 'select' are specifically removed, because they control which\n * content matches as a property of the `projection`, and are not a plain attribute.\n */\nfunction removeContentSelectors(job) {\n  for (const unit of job.units) {\n    const elements = createOpXrefMap(unit);\n    for (const op of unit.ops()) {\n      switch (op.kind) {\n        case OpKind.Binding:\n          const target = lookupInXrefMap(elements, op.target);\n          if (isSelectAttribute(op.name) && target.kind === OpKind.Projection) {\n            OpList.remove(op);\n          }\n          break;\n      }\n    }\n  }\n}\nfunction isSelectAttribute(name) {\n  return name.toLowerCase() === 'select';\n}\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupInXrefMap(map, xref) {\n  const el = map.get(xref);\n  if (el === undefined) {\n    throw new Error('All attributes should have an slottable target.');\n  }\n  return el;\n}\n\n/**\n * This phase generates pipe creation instructions. We do this based on the pipe bindings found in\n * the update block, in the order we see them.\n *\n * When not in compatibility mode, we can simply group all these creation instructions together, to\n * maximize chaining opportunities.\n */\nfunction createPipes(job) {\n  for (const unit of job.units) {\n    processPipeBindingsInView(unit);\n  }\n}\nfunction processPipeBindingsInView(unit) {\n  for (const updateOp of unit.update) {\n    visitExpressionsInOp(updateOp, (expr, flags) => {\n      if (!isIrExpression(expr)) {\n        return;\n      }\n      if (expr.kind !== ExpressionKind.PipeBinding) {\n        return;\n      }\n      if (flags & VisitorContextFlag.InChildOperation) {\n        throw new Error(`AssertionError: pipe bindings should not appear in child expressions`);\n      }\n      if (unit.job.compatibility) {\n        // TODO: We can delete this cast and check once compatibility mode is removed.\n        const slotHandle = updateOp.target;\n        if (slotHandle == undefined) {\n          throw new Error(`AssertionError: expected slot handle to be assigned for pipe creation`);\n        }\n        addPipeToCreationBlock(unit, updateOp.target, expr);\n      } else {\n        // When not in compatibility mode, we just add the pipe to the end of the create block. This\n        // is not only simpler and faster, but allows more chaining opportunities for other\n        // instructions.\n        unit.create.push(createPipeOp(expr.target, expr.targetSlot, expr.name));\n      }\n    });\n  }\n}\nfunction addPipeToCreationBlock(unit, afterTargetXref, binding) {\n  // Find the appropriate point to insert the Pipe creation operation.\n  // We're looking for `afterTargetXref` (and also want to insert after any other pipe operations\n  // which might be beyond it).\n  for (let op = unit.create.head.next; op.kind !== OpKind.ListEnd; op = op.next) {\n    if (!hasConsumesSlotTrait(op)) {\n      continue;\n    }\n    if (op.xref !== afterTargetXref) {\n      continue;\n    }\n    // We've found a tentative insertion point; however, we also want to skip past any _other_ pipe\n    // operations present.\n    while (op.next.kind === OpKind.Pipe) {\n      op = op.next;\n    }\n    const pipe = createPipeOp(binding.target, binding.targetSlot, binding.name);\n    OpList.insertBefore(pipe, op.next);\n    // This completes adding the pipe to the creation block.\n    return;\n  }\n  // At this point, we've failed to add the pipe to the creation block.\n  throw new Error(`AssertionError: unable to find insertion point for pipe ${binding.name}`);\n}\n\n/**\n * Pipes that accept more than 4 arguments are variadic, and are handled with a different runtime\n * instruction.\n */\nfunction createVariadicPipes(job) {\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      transformExpressionsInOp(op, expr => {\n        if (!(expr instanceof PipeBindingExpr)) {\n          return expr;\n        }\n        // Pipes are variadic if they have more than 4 arguments.\n        if (expr.args.length <= 4) {\n          return expr;\n        }\n        return new PipeBindingVariadicExpr(expr.target, expr.targetSlot, expr.name, literalArr(expr.args), expr.args.length);\n      }, VisitorContextFlag.None);\n    }\n  }\n}\n\n/**\n * Propagate i18n blocks down through child templates that act as placeholders in the root i18n\n * message. Specifically, perform an in-order traversal of all the views, and add i18nStart/i18nEnd\n * op pairs into descending views. Also, assign an increasing sub-template index to each\n * descending view.\n */\nfunction propagateI18nBlocks(job) {\n  propagateI18nBlocksToTemplates(job.root, 0);\n}\n/**\n * Propagates i18n ops in the given view through to any child views recursively.\n */\nfunction propagateI18nBlocksToTemplates(unit, subTemplateIndex) {\n  let i18nBlock = null;\n  for (const op of unit.create) {\n    switch (op.kind) {\n      case OpKind.I18nStart:\n        op.subTemplateIndex = subTemplateIndex === 0 ? null : subTemplateIndex;\n        i18nBlock = op;\n        break;\n      case OpKind.I18nEnd:\n        // When we exit a root-level i18n block, reset the sub-template index counter.\n        if (i18nBlock.subTemplateIndex === null) {\n          subTemplateIndex = 0;\n        }\n        i18nBlock = null;\n        break;\n      case OpKind.Template:\n        subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.xref), i18nBlock, op.i18nPlaceholder, subTemplateIndex);\n        break;\n      case OpKind.RepeaterCreate:\n        // Propagate i18n blocks to the @for template.\n        const forView = unit.job.views.get(op.xref);\n        subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.xref), i18nBlock, op.i18nPlaceholder, subTemplateIndex);\n        // Then if there's an @empty template, propagate the i18n blocks for it as well.\n        if (op.emptyView !== null) {\n          subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.emptyView), i18nBlock, op.emptyI18nPlaceholder, subTemplateIndex);\n        }\n        break;\n    }\n  }\n  return subTemplateIndex;\n}\n/**\n * Propagate i18n blocks for a view.\n */\nfunction propagateI18nBlocksForView(view, i18nBlock, i18nPlaceholder, subTemplateIndex) {\n  // We found an <ng-template> inside an i18n block; increment the sub-template counter and\n  // wrap the template's view in a child i18n block.\n  if (i18nPlaceholder !== undefined) {\n    if (i18nBlock === null) {\n      throw Error('Expected template with i18n placeholder to be in an i18n block.');\n    }\n    subTemplateIndex++;\n    wrapTemplateWithI18n(view, i18nBlock);\n  }\n  // Continue traversing inside the template's view.\n  return propagateI18nBlocksToTemplates(view, subTemplateIndex);\n}\n/**\n * Wraps a template view with i18n start and end ops.\n */\nfunction wrapTemplateWithI18n(unit, parentI18n) {\n  // Only add i18n ops if they have not already been propagated to this template.\n  if (unit.create.head.next?.kind !== OpKind.I18nStart) {\n    const id = unit.job.allocateXrefId();\n    OpList.insertAfter(\n    // Nested ng-template i18n start/end ops should not recieve source spans.\n    createI18nStartOp(id, parentI18n.message, parentI18n.root, null), unit.create.head);\n    OpList.insertBefore(createI18nEndOp(id, null), unit.create.tail);\n  }\n}\nfunction extractPureFunctions(job) {\n  for (const view of job.units) {\n    for (const op of view.ops()) {\n      visitExpressionsInOp(op, expr => {\n        if (!(expr instanceof PureFunctionExpr) || expr.body === null) {\n          return;\n        }\n        const constantDef = new PureFunctionConstant(expr.args.length);\n        expr.fn = job.pool.getSharedConstant(constantDef, expr.body);\n        expr.body = null;\n      });\n    }\n  }\n}\nclass PureFunctionConstant extends GenericKeyFn {\n  constructor(numArgs) {\n    super();\n    this.numArgs = numArgs;\n  }\n  keyOf(expr) {\n    if (expr instanceof PureFunctionParameterExpr) {\n      return `param(${expr.index})`;\n    } else {\n      return super.keyOf(expr);\n    }\n  }\n  // TODO: Use the new pool method `getSharedFunctionReference`\n  toSharedConstantDeclaration(declName, keyExpr) {\n    const fnParams = [];\n    for (let idx = 0; idx < this.numArgs; idx++) {\n      fnParams.push(new FnParam('a' + idx));\n    }\n    // We will never visit `ir.PureFunctionParameterExpr`s that don't belong to us, because this\n    // transform runs inside another visitor which will visit nested pure functions before this one.\n    const returnExpr = transformExpressionsInExpression(keyExpr, expr => {\n      if (!(expr instanceof PureFunctionParameterExpr)) {\n        return expr;\n      }\n      return variable('a' + expr.index);\n    }, VisitorContextFlag.None);\n    return new DeclareVarStmt(declName, new ArrowFunctionExpr(fnParams, returnExpr), undefined, StmtModifier.Final);\n  }\n}\nfunction generatePureLiteralStructures(job) {\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      transformExpressionsInOp(op, (expr, flags) => {\n        if (flags & VisitorContextFlag.InChildOperation) {\n          return expr;\n        }\n        if (expr instanceof LiteralArrayExpr) {\n          return transformLiteralArray(expr);\n        } else if (expr instanceof LiteralMapExpr) {\n          return transformLiteralMap(expr);\n        }\n        return expr;\n      }, VisitorContextFlag.None);\n    }\n  }\n}\nfunction transformLiteralArray(expr) {\n  const derivedEntries = [];\n  const nonConstantArgs = [];\n  for (const entry of expr.entries) {\n    if (entry.isConstant()) {\n      derivedEntries.push(entry);\n    } else {\n      const idx = nonConstantArgs.length;\n      nonConstantArgs.push(entry);\n      derivedEntries.push(new PureFunctionParameterExpr(idx));\n    }\n  }\n  return new PureFunctionExpr(literalArr(derivedEntries), nonConstantArgs);\n}\nfunction transformLiteralMap(expr) {\n  let derivedEntries = [];\n  const nonConstantArgs = [];\n  for (const entry of expr.entries) {\n    if (entry.value.isConstant()) {\n      derivedEntries.push(entry);\n    } else {\n      const idx = nonConstantArgs.length;\n      nonConstantArgs.push(entry.value);\n      derivedEntries.push(new LiteralMapEntry(entry.key, new PureFunctionParameterExpr(idx), entry.quoted));\n    }\n  }\n  return new PureFunctionExpr(literalMap(derivedEntries), nonConstantArgs);\n}\n\n// This file contains helpers for generating calls to Ivy instructions. In particular, each\n// instruction type is represented as a function, which may select a specific instruction variant\n// depending on the exact arguments.\nfunction element(slot, tag, constIndex, localRefIndex, sourceSpan) {\n  return elementOrContainerBase(Identifiers.element, slot, tag, constIndex, localRefIndex, sourceSpan);\n}\nfunction elementStart(slot, tag, constIndex, localRefIndex, sourceSpan) {\n  return elementOrContainerBase(Identifiers.elementStart, slot, tag, constIndex, localRefIndex, sourceSpan);\n}\nfunction elementOrContainerBase(instruction, slot, tag, constIndex, localRefIndex, sourceSpan) {\n  const args = [literal(slot)];\n  if (tag !== null) {\n    args.push(literal(tag));\n  }\n  if (localRefIndex !== null) {\n    args.push(literal(constIndex),\n    // might be null, but that's okay.\n    literal(localRefIndex));\n  } else if (constIndex !== null) {\n    args.push(literal(constIndex));\n  }\n  return call(instruction, args, sourceSpan);\n}\nfunction elementEnd(sourceSpan) {\n  return call(Identifiers.elementEnd, [], sourceSpan);\n}\nfunction elementContainerStart(slot, constIndex, localRefIndex, sourceSpan) {\n  return elementOrContainerBase(Identifiers.elementContainerStart, slot, /* tag */null, constIndex, localRefIndex, sourceSpan);\n}\nfunction elementContainer(slot, constIndex, localRefIndex, sourceSpan) {\n  return elementOrContainerBase(Identifiers.elementContainer, slot, /* tag */null, constIndex, localRefIndex, sourceSpan);\n}\nfunction elementContainerEnd() {\n  return call(Identifiers.elementContainerEnd, [], null);\n}\nfunction template(slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {\n  const args = [literal(slot), templateFnRef, literal(decls), literal(vars), literal(tag), literal(constIndex)];\n  if (localRefs !== null) {\n    args.push(literal(localRefs));\n    args.push(importExpr(Identifiers.templateRefExtractor));\n  }\n  while (args[args.length - 1].isEquivalent(NULL_EXPR)) {\n    args.pop();\n  }\n  return call(Identifiers.templateCreate, args, sourceSpan);\n}\nfunction disableBindings() {\n  return call(Identifiers.disableBindings, [], null);\n}\nfunction enableBindings() {\n  return call(Identifiers.enableBindings, [], null);\n}\nfunction listener(name, handlerFn, eventTargetResolver, syntheticHost, sourceSpan) {\n  const args = [literal(name), handlerFn];\n  if (eventTargetResolver !== null) {\n    args.push(literal(false)); // `useCapture` flag, defaults to `false`\n    args.push(importExpr(eventTargetResolver));\n  }\n  return call(syntheticHost ? Identifiers.syntheticHostListener : Identifiers.listener, args, sourceSpan);\n}\nfunction pipe(slot, name) {\n  return call(Identifiers.pipe, [literal(slot), literal(name)], null);\n}\nfunction namespaceHTML() {\n  return call(Identifiers.namespaceHTML, [], null);\n}\nfunction namespaceSVG() {\n  return call(Identifiers.namespaceSVG, [], null);\n}\nfunction namespaceMath() {\n  return call(Identifiers.namespaceMathML, [], null);\n}\nfunction advance(delta, sourceSpan) {\n  return call(Identifiers.advance, delta > 1 ? [literal(delta)] : [], sourceSpan);\n}\nfunction reference(slot) {\n  return importExpr(Identifiers.reference).callFn([literal(slot)]);\n}\nfunction nextContext(steps) {\n  return importExpr(Identifiers.nextContext).callFn(steps === 1 ? [] : [literal(steps)]);\n}\nfunction getCurrentView() {\n  return importExpr(Identifiers.getCurrentView).callFn([]);\n}\nfunction restoreView(savedView) {\n  return importExpr(Identifiers.restoreView).callFn([savedView]);\n}\nfunction resetView(returnValue) {\n  return importExpr(Identifiers.resetView).callFn([returnValue]);\n}\nfunction text(slot, initialValue, sourceSpan) {\n  const args = [literal(slot, null)];\n  if (initialValue !== '') {\n    args.push(literal(initialValue));\n  }\n  return call(Identifiers.text, args, sourceSpan);\n}\nfunction defer(selfSlot, primarySlot, dependencyResolverFn, loadingSlot, placeholderSlot, errorSlot, loadingConfig, placeholderConfig, enableTimerScheduling, sourceSpan) {\n  const args = [literal(selfSlot), literal(primarySlot), dependencyResolverFn ?? literal(null), literal(loadingSlot), literal(placeholderSlot), literal(errorSlot), loadingConfig ?? literal(null), placeholderConfig ?? literal(null), enableTimerScheduling ? importExpr(Identifiers.deferEnableTimerScheduling) : literal(null)];\n  let expr;\n  while ((expr = args[args.length - 1]) !== null && expr instanceof LiteralExpr && expr.value === null) {\n    args.pop();\n  }\n  return call(Identifiers.defer, args, sourceSpan);\n}\nconst deferTriggerToR3TriggerInstructionsMap = new Map([[DeferTriggerKind.Idle, [Identifiers.deferOnIdle, Identifiers.deferPrefetchOnIdle]], [DeferTriggerKind.Immediate, [Identifiers.deferOnImmediate, Identifiers.deferPrefetchOnImmediate]], [DeferTriggerKind.Timer, [Identifiers.deferOnTimer, Identifiers.deferPrefetchOnTimer]], [DeferTriggerKind.Hover, [Identifiers.deferOnHover, Identifiers.deferPrefetchOnHover]], [DeferTriggerKind.Interaction, [Identifiers.deferOnInteraction, Identifiers.deferPrefetchOnInteraction]], [DeferTriggerKind.Viewport, [Identifiers.deferOnViewport, Identifiers.deferPrefetchOnViewport]]]);\nfunction deferOn(trigger, args, prefetch, sourceSpan) {\n  const instructions = deferTriggerToR3TriggerInstructionsMap.get(trigger);\n  if (instructions === undefined) {\n    throw new Error(`Unable to determine instruction for trigger ${trigger}`);\n  }\n  const instructionToCall = prefetch ? instructions[1] : instructions[0];\n  return call(instructionToCall, args.map(a => literal(a)), sourceSpan);\n}\nfunction projectionDef(def) {\n  return call(Identifiers.projectionDef, def ? [def] : [], null);\n}\nfunction projection(slot, projectionSlotIndex, attributes, sourceSpan) {\n  const args = [literal(slot)];\n  if (projectionSlotIndex !== 0 || attributes !== null) {\n    args.push(literal(projectionSlotIndex));\n    if (attributes !== null) {\n      args.push(attributes);\n    }\n  }\n  return call(Identifiers.projection, args, sourceSpan);\n}\nfunction i18nStart(slot, constIndex, subTemplateIndex, sourceSpan) {\n  const args = [literal(slot), literal(constIndex)];\n  if (subTemplateIndex !== null) {\n    args.push(literal(subTemplateIndex));\n  }\n  return call(Identifiers.i18nStart, args, sourceSpan);\n}\nfunction repeaterCreate(slot, viewFnName, decls, vars, tag, constIndex, trackByFn, trackByUsesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, emptyTag, emptyConstIndex, sourceSpan) {\n  const args = [literal(slot), variable(viewFnName), literal(decls), literal(vars), literal(tag), literal(constIndex), trackByFn];\n  if (trackByUsesComponentInstance || emptyViewFnName !== null) {\n    args.push(literal(trackByUsesComponentInstance));\n    if (emptyViewFnName !== null) {\n      args.push(variable(emptyViewFnName), literal(emptyDecls), literal(emptyVars));\n      if (emptyTag !== null || emptyConstIndex !== null) {\n        args.push(literal(emptyTag));\n      }\n      if (emptyConstIndex !== null) {\n        args.push(literal(emptyConstIndex));\n      }\n    }\n  }\n  return call(Identifiers.repeaterCreate, args, sourceSpan);\n}\nfunction repeater(collection, sourceSpan) {\n  return call(Identifiers.repeater, [collection], sourceSpan);\n}\nfunction deferWhen(prefetch, expr, sourceSpan) {\n  return call(prefetch ? Identifiers.deferPrefetchWhen : Identifiers.deferWhen, [expr], sourceSpan);\n}\nfunction i18n(slot, constIndex, subTemplateIndex, sourceSpan) {\n  const args = [literal(slot), literal(constIndex)];\n  if (subTemplateIndex) {\n    args.push(literal(subTemplateIndex));\n  }\n  return call(Identifiers.i18n, args, sourceSpan);\n}\nfunction i18nEnd(endSourceSpan) {\n  return call(Identifiers.i18nEnd, [], endSourceSpan);\n}\nfunction i18nAttributes(slot, i18nAttributesConfig) {\n  const args = [literal(slot), literal(i18nAttributesConfig)];\n  return call(Identifiers.i18nAttributes, args, null);\n}\nfunction property(name, expression, sanitizer, sourceSpan) {\n  const args = [literal(name), expression];\n  if (sanitizer !== null) {\n    args.push(sanitizer);\n  }\n  return call(Identifiers.property, args, sourceSpan);\n}\nfunction attribute(name, expression, sanitizer, namespace) {\n  const args = [literal(name), expression];\n  if (sanitizer !== null || namespace !== null) {\n    args.push(sanitizer ?? literal(null));\n  }\n  if (namespace !== null) {\n    args.push(literal(namespace));\n  }\n  return call(Identifiers.attribute, args, null);\n}\nfunction styleProp(name, expression, unit, sourceSpan) {\n  const args = [literal(name), expression];\n  if (unit !== null) {\n    args.push(literal(unit));\n  }\n  return call(Identifiers.styleProp, args, sourceSpan);\n}\nfunction classProp(name, expression, sourceSpan) {\n  return call(Identifiers.classProp, [literal(name), expression], sourceSpan);\n}\nfunction styleMap(expression, sourceSpan) {\n  return call(Identifiers.styleMap, [expression], sourceSpan);\n}\nfunction classMap(expression, sourceSpan) {\n  return call(Identifiers.classMap, [expression], sourceSpan);\n}\nconst PIPE_BINDINGS = [Identifiers.pipeBind1, Identifiers.pipeBind2, Identifiers.pipeBind3, Identifiers.pipeBind4];\nfunction pipeBind(slot, varOffset, args) {\n  if (args.length < 1 || args.length > PIPE_BINDINGS.length) {\n    throw new Error(`pipeBind() argument count out of bounds`);\n  }\n  const instruction = PIPE_BINDINGS[args.length - 1];\n  return importExpr(instruction).callFn([literal(slot), literal(varOffset), ...args]);\n}\nfunction pipeBindV(slot, varOffset, args) {\n  return importExpr(Identifiers.pipeBindV).callFn([literal(slot), literal(varOffset), args]);\n}\nfunction textInterpolate(strings, expressions, sourceSpan) {\n  if (strings.length < 1 || expressions.length !== strings.length - 1) {\n    throw new Error(`AssertionError: expected specific shape of args for strings/expressions in interpolation`);\n  }\n  const interpolationArgs = [];\n  if (expressions.length === 1 && strings[0] === '' && strings[1] === '') {\n    interpolationArgs.push(expressions[0]);\n  } else {\n    let idx;\n    for (idx = 0; idx < expressions.length; idx++) {\n      interpolationArgs.push(literal(strings[idx]), expressions[idx]);\n    }\n    // idx points at the last string.\n    interpolationArgs.push(literal(strings[idx]));\n  }\n  return callVariadicInstruction(TEXT_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);\n}\nfunction i18nExp(expr, sourceSpan) {\n  return call(Identifiers.i18nExp, [expr], sourceSpan);\n}\nfunction i18nApply(slot, sourceSpan) {\n  return call(Identifiers.i18nApply, [literal(slot)], sourceSpan);\n}\nfunction propertyInterpolate(name, strings, expressions, sanitizer, sourceSpan) {\n  const interpolationArgs = collateInterpolationArgs(strings, expressions);\n  const extraArgs = [];\n  if (sanitizer !== null) {\n    extraArgs.push(sanitizer);\n  }\n  return callVariadicInstruction(PROPERTY_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);\n}\nfunction attributeInterpolate(name, strings, expressions, sanitizer, sourceSpan) {\n  const interpolationArgs = collateInterpolationArgs(strings, expressions);\n  const extraArgs = [];\n  if (sanitizer !== null) {\n    extraArgs.push(sanitizer);\n  }\n  return callVariadicInstruction(ATTRIBUTE_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);\n}\nfunction stylePropInterpolate(name, strings, expressions, unit, sourceSpan) {\n  const interpolationArgs = collateInterpolationArgs(strings, expressions);\n  const extraArgs = [];\n  if (unit !== null) {\n    extraArgs.push(literal(unit));\n  }\n  return callVariadicInstruction(STYLE_PROP_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);\n}\nfunction styleMapInterpolate(strings, expressions, sourceSpan) {\n  const interpolationArgs = collateInterpolationArgs(strings, expressions);\n  return callVariadicInstruction(STYLE_MAP_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);\n}\nfunction classMapInterpolate(strings, expressions, sourceSpan) {\n  const interpolationArgs = collateInterpolationArgs(strings, expressions);\n  return callVariadicInstruction(CLASS_MAP_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);\n}\nfunction hostProperty(name, expression, sanitizer, sourceSpan) {\n  const args = [literal(name), expression];\n  if (sanitizer !== null) {\n    args.push(sanitizer);\n  }\n  return call(Identifiers.hostProperty, args, sourceSpan);\n}\nfunction syntheticHostProperty(name, expression, sourceSpan) {\n  return call(Identifiers.syntheticHostProperty, [literal(name), expression], sourceSpan);\n}\nfunction pureFunction(varOffset, fn, args) {\n  return callVariadicInstructionExpr(PURE_FUNCTION_CONFIG, [literal(varOffset), fn], args, [], null);\n}\n/**\n * Collates the string an expression arguments for an interpolation instruction.\n */\nfunction collateInterpolationArgs(strings, expressions) {\n  if (strings.length < 1 || expressions.length !== strings.length - 1) {\n    throw new Error(`AssertionError: expected specific shape of args for strings/expressions in interpolation`);\n  }\n  const interpolationArgs = [];\n  if (expressions.length === 1 && strings[0] === '' && strings[1] === '') {\n    interpolationArgs.push(expressions[0]);\n  } else {\n    let idx;\n    for (idx = 0; idx < expressions.length; idx++) {\n      interpolationArgs.push(literal(strings[idx]), expressions[idx]);\n    }\n    // idx points at the last string.\n    interpolationArgs.push(literal(strings[idx]));\n  }\n  return interpolationArgs;\n}\nfunction call(instruction, args, sourceSpan) {\n  const expr = importExpr(instruction).callFn(args, sourceSpan);\n  return createStatementOp(new ExpressionStatement(expr, sourceSpan));\n}\nfunction conditional(slot, condition, contextValue, sourceSpan) {\n  const args = [literal(slot), condition];\n  if (contextValue !== null) {\n    args.push(contextValue);\n  }\n  return call(Identifiers.conditional, args, sourceSpan);\n}\n/**\n * `InterpolationConfig` for the `textInterpolate` instruction.\n */\nconst TEXT_INTERPOLATE_CONFIG = {\n  constant: [Identifiers.textInterpolate, Identifiers.textInterpolate1, Identifiers.textInterpolate2, Identifiers.textInterpolate3, Identifiers.textInterpolate4, Identifiers.textInterpolate5, Identifiers.textInterpolate6, Identifiers.textInterpolate7, Identifiers.textInterpolate8],\n  variable: Identifiers.textInterpolateV,\n  mapping: n => {\n    if (n % 2 === 0) {\n      throw new Error(`Expected odd number of arguments`);\n    }\n    return (n - 1) / 2;\n  }\n};\n/**\n * `InterpolationConfig` for the `propertyInterpolate` instruction.\n */\nconst PROPERTY_INTERPOLATE_CONFIG = {\n  constant: [Identifiers.propertyInterpolate, Identifiers.propertyInterpolate1, Identifiers.propertyInterpolate2, Identifiers.propertyInterpolate3, Identifiers.propertyInterpolate4, Identifiers.propertyInterpolate5, Identifiers.propertyInterpolate6, Identifiers.propertyInterpolate7, Identifiers.propertyInterpolate8],\n  variable: Identifiers.propertyInterpolateV,\n  mapping: n => {\n    if (n % 2 === 0) {\n      throw new Error(`Expected odd number of arguments`);\n    }\n    return (n - 1) / 2;\n  }\n};\n/**\n * `InterpolationConfig` for the `stylePropInterpolate` instruction.\n */\nconst STYLE_PROP_INTERPOLATE_CONFIG = {\n  constant: [Identifiers.styleProp, Identifiers.stylePropInterpolate1, Identifiers.stylePropInterpolate2, Identifiers.stylePropInterpolate3, Identifiers.stylePropInterpolate4, Identifiers.stylePropInterpolate5, Identifiers.stylePropInterpolate6, Identifiers.stylePropInterpolate7, Identifiers.stylePropInterpolate8],\n  variable: Identifiers.stylePropInterpolateV,\n  mapping: n => {\n    if (n % 2 === 0) {\n      throw new Error(`Expected odd number of arguments`);\n    }\n    return (n - 1) / 2;\n  }\n};\n/**\n * `InterpolationConfig` for the `attributeInterpolate` instruction.\n */\nconst ATTRIBUTE_INTERPOLATE_CONFIG = {\n  constant: [Identifiers.attribute, Identifiers.attributeInterpolate1, Identifiers.attributeInterpolate2, Identifiers.attributeInterpolate3, Identifiers.attributeInterpolate4, Identifiers.attributeInterpolate5, Identifiers.attributeInterpolate6, Identifiers.attributeInterpolate7, Identifiers.attributeInterpolate8],\n  variable: Identifiers.attributeInterpolateV,\n  mapping: n => {\n    if (n % 2 === 0) {\n      throw new Error(`Expected odd number of arguments`);\n    }\n    return (n - 1) / 2;\n  }\n};\n/**\n * `InterpolationConfig` for the `styleMapInterpolate` instruction.\n */\nconst STYLE_MAP_INTERPOLATE_CONFIG = {\n  constant: [Identifiers.styleMap, Identifiers.styleMapInterpolate1, Identifiers.styleMapInterpolate2, Identifiers.styleMapInterpolate3, Identifiers.styleMapInterpolate4, Identifiers.styleMapInterpolate5, Identifiers.styleMapInterpolate6, Identifiers.styleMapInterpolate7, Identifiers.styleMapInterpolate8],\n  variable: Identifiers.styleMapInterpolateV,\n  mapping: n => {\n    if (n % 2 === 0) {\n      throw new Error(`Expected odd number of arguments`);\n    }\n    return (n - 1) / 2;\n  }\n};\n/**\n * `InterpolationConfig` for the `classMapInterpolate` instruction.\n */\nconst CLASS_MAP_INTERPOLATE_CONFIG = {\n  constant: [Identifiers.classMap, Identifiers.classMapInterpolate1, Identifiers.classMapInterpolate2, Identifiers.classMapInterpolate3, Identifiers.classMapInterpolate4, Identifiers.classMapInterpolate5, Identifiers.classMapInterpolate6, Identifiers.classMapInterpolate7, Identifiers.classMapInterpolate8],\n  variable: Identifiers.classMapInterpolateV,\n  mapping: n => {\n    if (n % 2 === 0) {\n      throw new Error(`Expected odd number of arguments`);\n    }\n    return (n - 1) / 2;\n  }\n};\nconst PURE_FUNCTION_CONFIG = {\n  constant: [Identifiers.pureFunction0, Identifiers.pureFunction1, Identifiers.pureFunction2, Identifiers.pureFunction3, Identifiers.pureFunction4, Identifiers.pureFunction5, Identifiers.pureFunction6, Identifiers.pureFunction7, Identifiers.pureFunction8],\n  variable: Identifiers.pureFunctionV,\n  mapping: n => n\n};\nfunction callVariadicInstructionExpr(config, baseArgs, interpolationArgs, extraArgs, sourceSpan) {\n  const n = config.mapping(interpolationArgs.length);\n  if (n < config.constant.length) {\n    // Constant calling pattern.\n    return importExpr(config.constant[n]).callFn([...baseArgs, ...interpolationArgs, ...extraArgs], sourceSpan);\n  } else if (config.variable !== null) {\n    // Variable calling pattern.\n    return importExpr(config.variable).callFn([...baseArgs, literalArr(interpolationArgs), ...extraArgs], sourceSpan);\n  } else {\n    throw new Error(`AssertionError: unable to call variadic function`);\n  }\n}\nfunction callVariadicInstruction(config, baseArgs, interpolationArgs, extraArgs, sourceSpan) {\n  return createStatementOp(callVariadicInstructionExpr(config, baseArgs, interpolationArgs, extraArgs, sourceSpan).toStmt());\n}\n\n/**\n * Map of target resolvers for event listeners.\n */\nconst GLOBAL_TARGET_RESOLVERS$1 = new Map([['window', Identifiers.resolveWindow], ['document', Identifiers.resolveDocument], ['body', Identifiers.resolveBody]]);\n/**\n * Compiles semantic operations across all views and generates output `o.Statement`s with actual\n * runtime calls in their place.\n *\n * Reification replaces semantic operations with selected Ivy instructions and other generated code\n * structures. After reification, the create/update operation lists of all views should only contain\n * `ir.StatementOp`s (which wrap generated `o.Statement`s).\n */\nfunction reify(job) {\n  for (const unit of job.units) {\n    reifyCreateOperations(unit, unit.create);\n    reifyUpdateOperations(unit, unit.update);\n  }\n}\n/**\n * This function can be used a sanity check -- it walks every expression in the const pool, and\n * every expression reachable from an op, and makes sure that there are no IR expressions\n * left. This is nice to use for debugging mysterious failures where an IR expression cannot be\n * output from the output AST code.\n */\nfunction ensureNoIrForDebug(job) {\n  for (const stmt of job.pool.statements) {\n    transformExpressionsInStatement(stmt, expr => {\n      if (isIrExpression(expr)) {\n        throw new Error(`AssertionError: IR expression found during reify: ${ExpressionKind[expr.kind]}`);\n      }\n      return expr;\n    }, VisitorContextFlag.None);\n  }\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      visitExpressionsInOp(op, expr => {\n        if (isIrExpression(expr)) {\n          throw new Error(`AssertionError: IR expression found during reify: ${ExpressionKind[expr.kind]}`);\n        }\n      });\n    }\n  }\n}\nfunction reifyCreateOperations(unit, ops) {\n  for (const op of ops) {\n    transformExpressionsInOp(op, reifyIrExpression, VisitorContextFlag.None);\n    switch (op.kind) {\n      case OpKind.Text:\n        OpList.replace(op, text(op.handle.slot, op.initialValue, op.sourceSpan));\n        break;\n      case OpKind.ElementStart:\n        OpList.replace(op, elementStart(op.handle.slot, op.tag, op.attributes, op.localRefs, op.startSourceSpan));\n        break;\n      case OpKind.Element:\n        OpList.replace(op, element(op.handle.slot, op.tag, op.attributes, op.localRefs, op.wholeSourceSpan));\n        break;\n      case OpKind.ElementEnd:\n        OpList.replace(op, elementEnd(op.sourceSpan));\n        break;\n      case OpKind.ContainerStart:\n        OpList.replace(op, elementContainerStart(op.handle.slot, op.attributes, op.localRefs, op.startSourceSpan));\n        break;\n      case OpKind.Container:\n        OpList.replace(op, elementContainer(op.handle.slot, op.attributes, op.localRefs, op.wholeSourceSpan));\n        break;\n      case OpKind.ContainerEnd:\n        OpList.replace(op, elementContainerEnd());\n        break;\n      case OpKind.I18nStart:\n        OpList.replace(op, i18nStart(op.handle.slot, op.messageIndex, op.subTemplateIndex, op.sourceSpan));\n        break;\n      case OpKind.I18nEnd:\n        OpList.replace(op, i18nEnd(op.sourceSpan));\n        break;\n      case OpKind.I18n:\n        OpList.replace(op, i18n(op.handle.slot, op.messageIndex, op.subTemplateIndex, op.sourceSpan));\n        break;\n      case OpKind.I18nAttributes:\n        if (op.i18nAttributesConfig === null) {\n          throw new Error(`AssertionError: i18nAttributesConfig was not set`);\n        }\n        OpList.replace(op, i18nAttributes(op.handle.slot, op.i18nAttributesConfig));\n        break;\n      case OpKind.Template:\n        if (!(unit instanceof ViewCompilationUnit)) {\n          throw new Error(`AssertionError: must be compiling a component`);\n        }\n        if (Array.isArray(op.localRefs)) {\n          throw new Error(`AssertionError: local refs array should have been extracted into a constant`);\n        }\n        const childView = unit.job.views.get(op.xref);\n        OpList.replace(op, template(op.handle.slot, variable(childView.fnName), childView.decls, childView.vars, op.tag, op.attributes, op.localRefs, op.startSourceSpan));\n        break;\n      case OpKind.DisableBindings:\n        OpList.replace(op, disableBindings());\n        break;\n      case OpKind.EnableBindings:\n        OpList.replace(op, enableBindings());\n        break;\n      case OpKind.Pipe:\n        OpList.replace(op, pipe(op.handle.slot, op.name));\n        break;\n      case OpKind.Listener:\n        const listenerFn = reifyListenerHandler(unit, op.handlerFnName, op.handlerOps, op.consumesDollarEvent);\n        const eventTargetResolver = op.eventTarget ? GLOBAL_TARGET_RESOLVERS$1.get(op.eventTarget) : null;\n        if (eventTargetResolver === undefined) {\n          throw new Error(`Unexpected global target '${op.eventTarget}' defined for '${op.name}' event. Supported list of global targets: window,document,body.`);\n        }\n        OpList.replace(op, listener(op.name, listenerFn, eventTargetResolver, op.hostListener && op.isAnimationListener, op.sourceSpan));\n        break;\n      case OpKind.Variable:\n        if (op.variable.name === null) {\n          throw new Error(`AssertionError: unnamed variable ${op.xref}`);\n        }\n        OpList.replace(op, createStatementOp(new DeclareVarStmt(op.variable.name, op.initializer, undefined, StmtModifier.Final)));\n        break;\n      case OpKind.Namespace:\n        switch (op.active) {\n          case Namespace.HTML:\n            OpList.replace(op, namespaceHTML());\n            break;\n          case Namespace.SVG:\n            OpList.replace(op, namespaceSVG());\n            break;\n          case Namespace.Math:\n            OpList.replace(op, namespaceMath());\n            break;\n        }\n        break;\n      case OpKind.Defer:\n        const timerScheduling = !!op.loadingMinimumTime || !!op.loadingAfterTime || !!op.placeholderMinimumTime;\n        OpList.replace(op, defer(op.handle.slot, op.mainSlot.slot, op.resolverFn, op.loadingSlot?.slot ?? null, op.placeholderSlot?.slot ?? null, op.errorSlot?.slot ?? null, op.loadingConfig, op.placeholderConfig, timerScheduling, op.sourceSpan));\n        break;\n      case OpKind.DeferOn:\n        let args = [];\n        switch (op.trigger.kind) {\n          case DeferTriggerKind.Idle:\n          case DeferTriggerKind.Immediate:\n            break;\n          case DeferTriggerKind.Timer:\n            args = [op.trigger.delay];\n            break;\n          case DeferTriggerKind.Interaction:\n          case DeferTriggerKind.Hover:\n          case DeferTriggerKind.Viewport:\n            if (op.trigger.targetSlot?.slot == null || op.trigger.targetSlotViewSteps === null) {\n              throw new Error(`Slot or view steps not set in trigger reification for trigger kind ${op.trigger.kind}`);\n            }\n            args = [op.trigger.targetSlot.slot];\n            if (op.trigger.targetSlotViewSteps !== 0) {\n              args.push(op.trigger.targetSlotViewSteps);\n            }\n            break;\n          default:\n            throw new Error(`AssertionError: Unsupported reification of defer trigger kind ${op.trigger.kind}`);\n        }\n        OpList.replace(op, deferOn(op.trigger.kind, args, op.prefetch, op.sourceSpan));\n        break;\n      case OpKind.ProjectionDef:\n        OpList.replace(op, projectionDef(op.def));\n        break;\n      case OpKind.Projection:\n        if (op.handle.slot === null) {\n          throw new Error('No slot was assigned for project instruction');\n        }\n        OpList.replace(op, projection(op.handle.slot, op.projectionSlotIndex, op.attributes, op.sourceSpan));\n        break;\n      case OpKind.RepeaterCreate:\n        if (op.handle.slot === null) {\n          throw new Error('No slot was assigned for repeater instruction');\n        }\n        if (!(unit instanceof ViewCompilationUnit)) {\n          throw new Error(`AssertionError: must be compiling a component`);\n        }\n        const repeaterView = unit.job.views.get(op.xref);\n        if (repeaterView.fnName === null) {\n          throw new Error(`AssertionError: expected repeater primary view to have been named`);\n        }\n        let emptyViewFnName = null;\n        let emptyDecls = null;\n        let emptyVars = null;\n        if (op.emptyView !== null) {\n          const emptyView = unit.job.views.get(op.emptyView);\n          if (emptyView === undefined) {\n            throw new Error('AssertionError: repeater had empty view xref, but empty view was not found');\n          }\n          if (emptyView.fnName === null || emptyView.decls === null || emptyView.vars === null) {\n            throw new Error(`AssertionError: expected repeater empty view to have been named and counted`);\n          }\n          emptyViewFnName = emptyView.fnName;\n          emptyDecls = emptyView.decls;\n          emptyVars = emptyView.vars;\n        }\n        OpList.replace(op, repeaterCreate(op.handle.slot, repeaterView.fnName, op.decls, op.vars, op.tag, op.attributes, op.trackByFn, op.usesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, op.emptyTag, op.emptyAttributes, op.wholeSourceSpan));\n        break;\n      case OpKind.Statement:\n        // Pass statement operations directly through.\n        break;\n      default:\n        throw new Error(`AssertionError: Unsupported reification of create op ${OpKind[op.kind]}`);\n    }\n  }\n}\nfunction reifyUpdateOperations(_unit, ops) {\n  for (const op of ops) {\n    transformExpressionsInOp(op, reifyIrExpression, VisitorContextFlag.None);\n    switch (op.kind) {\n      case OpKind.Advance:\n        OpList.replace(op, advance(op.delta, op.sourceSpan));\n        break;\n      case OpKind.Property:\n        if (op.expression instanceof Interpolation) {\n          OpList.replace(op, propertyInterpolate(op.name, op.expression.strings, op.expression.expressions, op.sanitizer, op.sourceSpan));\n        } else {\n          OpList.replace(op, property(op.name, op.expression, op.sanitizer, op.sourceSpan));\n        }\n        break;\n      case OpKind.StyleProp:\n        if (op.expression instanceof Interpolation) {\n          OpList.replace(op, stylePropInterpolate(op.name, op.expression.strings, op.expression.expressions, op.unit, op.sourceSpan));\n        } else {\n          OpList.replace(op, styleProp(op.name, op.expression, op.unit, op.sourceSpan));\n        }\n        break;\n      case OpKind.ClassProp:\n        OpList.replace(op, classProp(op.name, op.expression, op.sourceSpan));\n        break;\n      case OpKind.StyleMap:\n        if (op.expression instanceof Interpolation) {\n          OpList.replace(op, styleMapInterpolate(op.expression.strings, op.expression.expressions, op.sourceSpan));\n        } else {\n          OpList.replace(op, styleMap(op.expression, op.sourceSpan));\n        }\n        break;\n      case OpKind.ClassMap:\n        if (op.expression instanceof Interpolation) {\n          OpList.replace(op, classMapInterpolate(op.expression.strings, op.expression.expressions, op.sourceSpan));\n        } else {\n          OpList.replace(op, classMap(op.expression, op.sourceSpan));\n        }\n        break;\n      case OpKind.I18nExpression:\n        OpList.replace(op, i18nExp(op.expression, op.sourceSpan));\n        break;\n      case OpKind.I18nApply:\n        OpList.replace(op, i18nApply(op.handle.slot, op.sourceSpan));\n        break;\n      case OpKind.InterpolateText:\n        OpList.replace(op, textInterpolate(op.interpolation.strings, op.interpolation.expressions, op.sourceSpan));\n        break;\n      case OpKind.Attribute:\n        if (op.expression instanceof Interpolation) {\n          OpList.replace(op, attributeInterpolate(op.name, op.expression.strings, op.expression.expressions, op.sanitizer, op.sourceSpan));\n        } else {\n          OpList.replace(op, attribute(op.name, op.expression, op.sanitizer, op.namespace));\n        }\n        break;\n      case OpKind.HostProperty:\n        if (op.expression instanceof Interpolation) {\n          throw new Error('not yet handled');\n        } else {\n          if (op.isAnimationTrigger) {\n            OpList.replace(op, syntheticHostProperty(op.name, op.expression, op.sourceSpan));\n          } else {\n            OpList.replace(op, hostProperty(op.name, op.expression, op.sanitizer, op.sourceSpan));\n          }\n        }\n        break;\n      case OpKind.Variable:\n        if (op.variable.name === null) {\n          throw new Error(`AssertionError: unnamed variable ${op.xref}`);\n        }\n        OpList.replace(op, createStatementOp(new DeclareVarStmt(op.variable.name, op.initializer, undefined, StmtModifier.Final)));\n        break;\n      case OpKind.Conditional:\n        if (op.processed === null) {\n          throw new Error(`Conditional test was not set.`);\n        }\n        if (op.targetSlot.slot === null) {\n          throw new Error(`Conditional slot was not set.`);\n        }\n        OpList.replace(op, conditional(op.targetSlot.slot, op.processed, op.contextValue, op.sourceSpan));\n        break;\n      case OpKind.Repeater:\n        OpList.replace(op, repeater(op.collection, op.sourceSpan));\n        break;\n      case OpKind.DeferWhen:\n        OpList.replace(op, deferWhen(op.prefetch, op.expr, op.sourceSpan));\n        break;\n      case OpKind.Statement:\n        // Pass statement operations directly through.\n        break;\n      default:\n        throw new Error(`AssertionError: Unsupported reification of update op ${OpKind[op.kind]}`);\n    }\n  }\n}\nfunction reifyIrExpression(expr) {\n  if (!isIrExpression(expr)) {\n    return expr;\n  }\n  switch (expr.kind) {\n    case ExpressionKind.NextContext:\n      return nextContext(expr.steps);\n    case ExpressionKind.Reference:\n      return reference(expr.targetSlot.slot + 1 + expr.offset);\n    case ExpressionKind.LexicalRead:\n      throw new Error(`AssertionError: unresolved LexicalRead of ${expr.name}`);\n    case ExpressionKind.RestoreView:\n      if (typeof expr.view === 'number') {\n        throw new Error(`AssertionError: unresolved RestoreView`);\n      }\n      return restoreView(expr.view);\n    case ExpressionKind.ResetView:\n      return resetView(expr.expr);\n    case ExpressionKind.GetCurrentView:\n      return getCurrentView();\n    case ExpressionKind.ReadVariable:\n      if (expr.name === null) {\n        throw new Error(`Read of unnamed variable ${expr.xref}`);\n      }\n      return variable(expr.name);\n    case ExpressionKind.ReadTemporaryExpr:\n      if (expr.name === null) {\n        throw new Error(`Read of unnamed temporary ${expr.xref}`);\n      }\n      return variable(expr.name);\n    case ExpressionKind.AssignTemporaryExpr:\n      if (expr.name === null) {\n        throw new Error(`Assign of unnamed temporary ${expr.xref}`);\n      }\n      return variable(expr.name).set(expr.expr);\n    case ExpressionKind.PureFunctionExpr:\n      if (expr.fn === null) {\n        throw new Error(`AssertionError: expected PureFunctions to have been extracted`);\n      }\n      return pureFunction(expr.varOffset, expr.fn, expr.args);\n    case ExpressionKind.PureFunctionParameterExpr:\n      throw new Error(`AssertionError: expected PureFunctionParameterExpr to have been extracted`);\n    case ExpressionKind.PipeBinding:\n      return pipeBind(expr.targetSlot.slot, expr.varOffset, expr.args);\n    case ExpressionKind.PipeBindingVariadic:\n      return pipeBindV(expr.targetSlot.slot, expr.varOffset, expr.args);\n    case ExpressionKind.SlotLiteralExpr:\n      return literal(expr.slot.slot);\n    default:\n      throw new Error(`AssertionError: Unsupported reification of ir.Expression kind: ${ExpressionKind[expr.kind]}`);\n  }\n}\n/**\n * Listeners get turned into a function expression, which may or may not have the `$event`\n * parameter defined.\n */\nfunction reifyListenerHandler(unit, name, handlerOps, consumesDollarEvent) {\n  // First, reify all instruction calls within `handlerOps`.\n  reifyUpdateOperations(unit, handlerOps);\n  // Next, extract all the `o.Statement`s from the reified operations. We can expect that at this\n  // point, all operations have been converted to statements.\n  const handlerStmts = [];\n  for (const op of handlerOps) {\n    if (op.kind !== OpKind.Statement) {\n      throw new Error(`AssertionError: expected reified statements, but found op ${OpKind[op.kind]}`);\n    }\n    handlerStmts.push(op.statement);\n  }\n  // If `$event` is referenced, we need to generate it as a parameter.\n  const params = [];\n  if (consumesDollarEvent) {\n    // We need the `$event` parameter.\n    params.push(new FnParam('$event'));\n  }\n  return fn(params, handlerStmts, undefined, undefined, name);\n}\n\n/**\n * Bidningd with no content can be safely deleted.\n */\nfunction removeEmptyBindings(job) {\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      switch (op.kind) {\n        case OpKind.Attribute:\n        case OpKind.Binding:\n        case OpKind.ClassProp:\n        case OpKind.ClassMap:\n        case OpKind.Property:\n        case OpKind.StyleProp:\n        case OpKind.StyleMap:\n          if (op.expression instanceof EmptyExpr) {\n            OpList.remove(op);\n          }\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Remove the i18n context ops after they are no longer needed, and null out references to them to\n * be safe.\n */\nfunction removeI18nContexts(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nContext:\n          OpList.remove(op);\n          break;\n        case OpKind.I18nStart:\n          op.context = null;\n          break;\n      }\n    }\n  }\n}\n\n/**\n * i18nAttributes ops will be generated for each i18n attribute. However, not all i18n attribues\n * will contain dynamic content, and so some of these i18nAttributes ops may be unnecessary.\n */\nfunction removeUnusedI18nAttributesOps(job) {\n  for (const unit of job.units) {\n    const ownersWithI18nExpressions = new Set();\n    for (const op of unit.update) {\n      switch (op.kind) {\n        case OpKind.I18nExpression:\n          ownersWithI18nExpressions.add(op.i18nOwner);\n      }\n    }\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nAttributes:\n          if (ownersWithI18nExpressions.has(op.xref)) {\n            continue;\n          }\n          OpList.remove(op);\n      }\n    }\n  }\n}\n\n/**\n * Resolves `ir.ContextExpr` expressions (which represent embedded view or component contexts) to\n * either the `ctx` parameter to component functions (for the current view context) or to variables\n * that store those contexts (for contexts accessed via the `nextContext()` instruction).\n */\nfunction resolveContexts(job) {\n  for (const unit of job.units) {\n    processLexicalScope$1(unit, unit.create);\n    processLexicalScope$1(unit, unit.update);\n  }\n}\nfunction processLexicalScope$1(view, ops) {\n  // Track the expressions used to access all available contexts within the current view, by the\n  // view `ir.XrefId`.\n  const scope = new Map();\n  // The current view's context is accessible via the `ctx` parameter.\n  scope.set(view.xref, variable('ctx'));\n  for (const op of ops) {\n    switch (op.kind) {\n      case OpKind.Variable:\n        switch (op.variable.kind) {\n          case SemanticVariableKind.Context:\n            scope.set(op.variable.view, new ReadVariableExpr(op.xref));\n            break;\n        }\n        break;\n      case OpKind.Listener:\n        processLexicalScope$1(view, op.handlerOps);\n        break;\n    }\n  }\n  if (view === view.job.root) {\n    // Prefer `ctx` of the root view to any variables which happen to contain the root context.\n    scope.set(view.xref, variable('ctx'));\n  }\n  for (const op of ops) {\n    transformExpressionsInOp(op, expr => {\n      if (expr instanceof ContextExpr) {\n        if (!scope.has(expr.view)) {\n          throw new Error(`No context found for reference to view ${expr.view} from view ${view.xref}`);\n        }\n        return scope.get(expr.view);\n      } else {\n        return expr;\n      }\n    }, VisitorContextFlag.None);\n  }\n}\n\n/**\n * Any variable inside a listener with the name `$event` will be transformed into a output lexical\n * read immediately, and does not participate in any of the normal logic for handling variables.\n */\nfunction resolveDollarEvent(job) {\n  for (const unit of job.units) {\n    transformDollarEvent(unit, unit.create);\n    transformDollarEvent(unit, unit.update);\n  }\n}\nfunction transformDollarEvent(unit, ops) {\n  for (const op of ops) {\n    if (op.kind === OpKind.Listener) {\n      transformExpressionsInOp(op, expr => {\n        if (expr instanceof LexicalReadExpr && expr.name === '$event') {\n          op.consumesDollarEvent = true;\n          return new ReadVarExpr(expr.name);\n        }\n        return expr;\n      }, VisitorContextFlag.InChildOperation);\n    }\n  }\n}\n\n/**\n * Resolve the element placeholders in i18n messages.\n */\nfunction resolveI18nElementPlaceholders(job) {\n  // Record all of the element and i18n context ops for use later.\n  const i18nContexts = new Map();\n  const elements = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nContext:\n          i18nContexts.set(op.xref, op);\n          break;\n        case OpKind.ElementStart:\n          elements.set(op.xref, op);\n          break;\n      }\n    }\n  }\n  resolvePlaceholdersForView(job, job.root, i18nContexts, elements);\n}\n/**\n * Recursively resolves element and template tag placeholders in the given view.\n */\nfunction resolvePlaceholdersForView(job, unit, i18nContexts, elements, pendingStructuralDirective) {\n  // Track the current i18n op and corresponding i18n context op as we step through the creation\n  // IR.\n  let currentOps = null;\n  let pendingStructuralDirectiveCloses = new Map();\n  for (const op of unit.create) {\n    switch (op.kind) {\n      case OpKind.I18nStart:\n        if (!op.context) {\n          throw Error('Could not find i18n context for i18n op');\n        }\n        currentOps = {\n          i18nBlock: op,\n          i18nContext: i18nContexts.get(op.context)\n        };\n        break;\n      case OpKind.I18nEnd:\n        currentOps = null;\n        break;\n      case OpKind.ElementStart:\n        // For elements with i18n placeholders, record its slot value in the params map under the\n        // corresponding tag start placeholder.\n        if (op.i18nPlaceholder !== undefined) {\n          if (currentOps === null) {\n            throw Error('i18n tag placeholder should only occur inside an i18n block');\n          }\n          recordElementStart(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n          // If there is a separate close tag placeholder for this element, save the pending\n          // structural directive so we can pass it to the closing tag as well.\n          if (pendingStructuralDirective && op.i18nPlaceholder.closeName) {\n            pendingStructuralDirectiveCloses.set(op.xref, pendingStructuralDirective);\n          }\n          // Clear out the pending structural directive now that its been accounted for.\n          pendingStructuralDirective = undefined;\n        }\n        break;\n      case OpKind.ElementEnd:\n        // For elements with i18n placeholders, record its slot value in the params map under the\n        // corresponding tag close placeholder.\n        const startOp = elements.get(op.xref);\n        if (startOp && startOp.i18nPlaceholder !== undefined) {\n          if (currentOps === null) {\n            throw Error('AssertionError: i18n tag placeholder should only occur inside an i18n block');\n          }\n          recordElementClose(startOp, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirectiveCloses.get(op.xref));\n          // Clear out the pending structural directive close that was accounted for.\n          pendingStructuralDirectiveCloses.delete(op.xref);\n        }\n        break;\n      case OpKind.Projection:\n        // For content projections with i18n placeholders, record its slot value in the params map\n        // under the corresponding tag start and close placeholders.\n        if (op.i18nPlaceholder !== undefined) {\n          if (currentOps === null) {\n            throw Error('i18n tag placeholder should only occur inside an i18n block');\n          }\n          recordElementStart(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n          recordElementClose(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n          // Clear out the pending structural directive now that its been accounted for.\n          pendingStructuralDirective = undefined;\n        }\n        break;\n      case OpKind.Template:\n        const view = job.views.get(op.xref);\n        if (op.i18nPlaceholder === undefined) {\n          // If there is no i18n placeholder, just recurse into the view in case it contains i18n\n          // blocks.\n          resolvePlaceholdersForView(job, view, i18nContexts, elements);\n        } else {\n          if (currentOps === null) {\n            throw Error('i18n tag placeholder should only occur inside an i18n block');\n          }\n          if (op.templateKind === TemplateKind.Structural) {\n            // If this is a structural directive template, don't record anything yet. Instead pass\n            // the current template as a pending structural directive to be recorded when we find\n            // the element, content, or template it belongs to. This allows us to create combined\n            // values that represent, e.g. the start of a template and element at the same time.\n            resolvePlaceholdersForView(job, view, i18nContexts, elements, op);\n          } else {\n            // If this is some other kind of template, we can record its start, recurse into its\n            // view, and then record its end.\n            recordTemplateStart(job, view, op.handle.slot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n            resolvePlaceholdersForView(job, view, i18nContexts, elements);\n            recordTemplateClose(job, view, op.handle.slot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n            pendingStructuralDirective = undefined;\n          }\n        }\n        break;\n      case OpKind.RepeaterCreate:\n        if (pendingStructuralDirective !== undefined) {\n          throw Error('AssertionError: Unexpected structural directive associated with @for block');\n        }\n        // RepeaterCreate has 3 slots: the first is for the op itself, the second is for the @for\n        // template and the (optional) third is for the @empty template.\n        const forSlot = op.handle.slot + 1;\n        const forView = job.views.get(op.xref);\n        // First record all of the placeholders for the @for template.\n        if (op.i18nPlaceholder === undefined) {\n          // If there is no i18n placeholder, just recurse into the view in case it contains i18n\n          // blocks.\n          resolvePlaceholdersForView(job, forView, i18nContexts, elements);\n        } else {\n          if (currentOps === null) {\n            throw Error('i18n tag placeholder should only occur inside an i18n block');\n          }\n          recordTemplateStart(job, forView, forSlot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n          resolvePlaceholdersForView(job, forView, i18nContexts, elements);\n          recordTemplateClose(job, forView, forSlot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n          pendingStructuralDirective = undefined;\n        }\n        // Then if there's an @empty template, add its placeholders as well.\n        if (op.emptyView !== null) {\n          // RepeaterCreate has 3 slots: the first is for the op itself, the second is for the @for\n          // template and the (optional) third is for the @empty template.\n          const emptySlot = op.handle.slot + 2;\n          const emptyView = job.views.get(op.emptyView);\n          if (op.emptyI18nPlaceholder === undefined) {\n            // If there is no i18n placeholder, just recurse into the view in case it contains i18n\n            // blocks.\n            resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);\n          } else {\n            if (currentOps === null) {\n              throw Error('i18n tag placeholder should only occur inside an i18n block');\n            }\n            recordTemplateStart(job, emptyView, emptySlot, op.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n            resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);\n            recordTemplateClose(job, emptyView, emptySlot, op.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n            pendingStructuralDirective = undefined;\n          }\n        }\n        break;\n    }\n  }\n}\n/**\n * Records an i18n param value for the start of an element.\n */\nfunction recordElementStart(op, i18nContext, i18nBlock, structuralDirective) {\n  const {\n    startName,\n    closeName\n  } = op.i18nPlaceholder;\n  let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.OpenTag;\n  let value = op.handle.slot;\n  // If the element is associated with a structural directive, start it as well.\n  if (structuralDirective !== undefined) {\n    flags |= I18nParamValueFlags.TemplateTag;\n    value = {\n      element: value,\n      template: structuralDirective.handle.slot\n    };\n  }\n  // For self-closing tags, there is no close tag placeholder. Instead, the start tag\n  // placeholder accounts for the start and close of the element.\n  if (!closeName) {\n    flags |= I18nParamValueFlags.CloseTag;\n  }\n  addParam(i18nContext.params, startName, value, i18nBlock.subTemplateIndex, flags);\n}\n/**\n * Records an i18n param value for the closing of an element.\n */\nfunction recordElementClose(op, i18nContext, i18nBlock, structuralDirective) {\n  const {\n    closeName\n  } = op.i18nPlaceholder;\n  // Self-closing tags don't have a closing tag placeholder, instead the element closing is\n  // recorded via an additional flag on the element start value.\n  if (closeName) {\n    let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.CloseTag;\n    let value = op.handle.slot;\n    // If the element is associated with a structural directive, close it as well.\n    if (structuralDirective !== undefined) {\n      flags |= I18nParamValueFlags.TemplateTag;\n      value = {\n        element: value,\n        template: structuralDirective.handle.slot\n      };\n    }\n    addParam(i18nContext.params, closeName, value, i18nBlock.subTemplateIndex, flags);\n  }\n}\n/**\n * Records an i18n param value for the start of a template.\n */\nfunction recordTemplateStart(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {\n  let {\n    startName,\n    closeName\n  } = i18nPlaceholder;\n  let flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.OpenTag;\n  // For self-closing tags, there is no close tag placeholder. Instead, the start tag\n  // placeholder accounts for the start and close of the element.\n  if (!closeName) {\n    flags |= I18nParamValueFlags.CloseTag;\n  }\n  // If the template is associated with a structural directive, record the structural directive's\n  // start first. Since this template must be in the structural directive's view, we can just\n  // directly use the current i18n block's sub-template index.\n  if (structuralDirective !== undefined) {\n    addParam(i18nContext.params, startName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);\n  }\n  // Record the start of the template. For the sub-template index, pass the index for the template's\n  // view, rather than the current i18n block's index.\n  addParam(i18nContext.params, startName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);\n}\n/**\n * Records an i18n param value for the closing of a template.\n */\nfunction recordTemplateClose(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {\n  const {\n    startName,\n    closeName\n  } = i18nPlaceholder;\n  const flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.CloseTag;\n  // Self-closing tags don't have a closing tag placeholder, instead the template's closing is\n  // recorded via an additional flag on the template start value.\n  if (closeName) {\n    // Record the closing of the template. For the sub-template index, pass the index for the\n    // template's view, rather than the current i18n block's index.\n    addParam(i18nContext.params, closeName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);\n    // If the template is associated with a structural directive, record the structural directive's\n    // closing after. Since this template must be in the structural directive's view, we can just\n    // directly use the current i18n block's sub-template index.\n    if (structuralDirective !== undefined) {\n      addParam(i18nContext.params, closeName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);\n    }\n  }\n}\n/**\n * Get the subTemplateIndex for the given template op. For template ops, use the subTemplateIndex of\n * the child i18n block inside the template.\n */\nfunction getSubTemplateIndexForTemplateTag(job, i18nOp, view) {\n  for (const childOp of view.create) {\n    if (childOp.kind === OpKind.I18nStart) {\n      return childOp.subTemplateIndex;\n    }\n  }\n  return i18nOp.subTemplateIndex;\n}\n/**\n * Add a param value to the given params map.\n */\nfunction addParam(params, placeholder, value, subTemplateIndex, flags) {\n  const values = params.get(placeholder) ?? [];\n  values.push({\n    value,\n    subTemplateIndex,\n    flags\n  });\n  params.set(placeholder, values);\n}\n\n/**\n * Resolve the i18n expression placeholders in i18n messages.\n */\nfunction resolveI18nExpressionPlaceholders(job) {\n  // Record all of the i18n context ops, and the sub-template index for each i18n op.\n  const subTemplateIndicies = new Map();\n  const i18nContexts = new Map();\n  const icuPlaceholders = new Map();\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nStart:\n          subTemplateIndicies.set(op.xref, op.subTemplateIndex);\n          break;\n        case OpKind.I18nContext:\n          i18nContexts.set(op.xref, op);\n          break;\n        case OpKind.IcuPlaceholder:\n          icuPlaceholders.set(op.xref, op);\n          break;\n      }\n    }\n  }\n  // Keep track of the next available expression index for each i18n message.\n  const expressionIndices = new Map();\n  // Keep track of a reference index for each expression.\n  // We use different references for normal i18n expressio and attribute i18n expressions. This is\n  // because child i18n blocks in templates don't get their own context, since they're rolled into\n  // the translated message of the parent, but they may target a different slot.\n  const referenceIndex = op => op.usage === I18nExpressionFor.I18nText ? op.i18nOwner : op.context;\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      if (op.kind === OpKind.I18nExpression) {\n        const index = expressionIndices.get(referenceIndex(op)) || 0;\n        const subTemplateIndex = subTemplateIndicies.get(op.i18nOwner) ?? null;\n        const value = {\n          value: index,\n          subTemplateIndex: subTemplateIndex,\n          flags: I18nParamValueFlags.ExpressionIndex\n        };\n        updatePlaceholder(op, value, i18nContexts, icuPlaceholders);\n        expressionIndices.set(referenceIndex(op), index + 1);\n      }\n    }\n  }\n}\nfunction updatePlaceholder(op, value, i18nContexts, icuPlaceholders) {\n  if (op.i18nPlaceholder !== null) {\n    const i18nContext = i18nContexts.get(op.context);\n    const params = op.resolutionTime === I18nParamResolutionTime.Creation ? i18nContext.params : i18nContext.postprocessingParams;\n    const values = params.get(op.i18nPlaceholder) || [];\n    values.push(value);\n    params.set(op.i18nPlaceholder, values);\n  }\n  if (op.icuPlaceholder !== null) {\n    const icuPlaceholderOp = icuPlaceholders.get(op.icuPlaceholder);\n    icuPlaceholderOp?.expressionPlaceholders.push(value);\n  }\n}\n\n/**\n * Resolves lexical references in views (`ir.LexicalReadExpr`) to either a target variable or to\n * property reads on the top-level component context.\n *\n * Also matches `ir.RestoreViewExpr` expressions with the variables of their corresponding saved\n * views.\n */\nfunction resolveNames(job) {\n  for (const unit of job.units) {\n    processLexicalScope(unit, unit.create, null);\n    processLexicalScope(unit, unit.update, null);\n  }\n}\nfunction processLexicalScope(unit, ops, savedView) {\n  // Maps names defined in the lexical scope of this template to the `ir.XrefId`s of the variable\n  // declarations which represent those values.\n  //\n  // Since variables are generated in each view for the entire lexical scope (including any\n  // identifiers from parent templates) only local variables need be considered here.\n  const scope = new Map();\n  // First, step through the operations list and:\n  // 1) build up the `scope` mapping\n  // 2) recurse into any listener functions\n  for (const op of ops) {\n    switch (op.kind) {\n      case OpKind.Variable:\n        switch (op.variable.kind) {\n          case SemanticVariableKind.Identifier:\n          case SemanticVariableKind.Alias:\n            // This variable represents some kind of identifier which can be used in the template.\n            if (scope.has(op.variable.identifier)) {\n              continue;\n            }\n            scope.set(op.variable.identifier, op.xref);\n            break;\n          case SemanticVariableKind.SavedView:\n            // This variable represents a snapshot of the current view context, and can be used to\n            // restore that context within listener functions.\n            savedView = {\n              view: op.variable.view,\n              variable: op.xref\n            };\n            break;\n        }\n        break;\n      case OpKind.Listener:\n        // Listener functions have separate variable declarations, so process them as a separate\n        // lexical scope.\n        processLexicalScope(unit, op.handlerOps, savedView);\n        break;\n    }\n  }\n  // Next, use the `scope` mapping to match `ir.LexicalReadExpr` with defined names in the lexical\n  // scope. Also, look for `ir.RestoreViewExpr`s and match them with the snapshotted view context\n  // variable.\n  for (const op of ops) {\n    if (op.kind == OpKind.Listener) {\n      // Listeners were already processed above with their own scopes.\n      continue;\n    }\n    transformExpressionsInOp(op, (expr, flags) => {\n      if (expr instanceof LexicalReadExpr) {\n        // `expr` is a read of a name within the lexical scope of this view.\n        // Either that name is defined within the current view, or it represents a property from the\n        // main component context.\n        if (scope.has(expr.name)) {\n          // This was a defined variable in the current scope.\n          return new ReadVariableExpr(scope.get(expr.name));\n        } else {\n          // Reading from the component context.\n          return new ReadPropExpr(new ContextExpr(unit.job.root.xref), expr.name);\n        }\n      } else if (expr instanceof RestoreViewExpr && typeof expr.view === 'number') {\n        // `ir.RestoreViewExpr` happens in listener functions and restores a saved view from the\n        // parent creation list. We expect to find that we captured the `savedView` previously, and\n        // that it matches the expected view to be restored.\n        if (savedView === null || savedView.view !== expr.view) {\n          throw new Error(`AssertionError: no saved view ${expr.view} from view ${unit.xref}`);\n        }\n        expr.view = new ReadVariableExpr(savedView.variable);\n        return expr;\n      } else {\n        return expr;\n      }\n    }, VisitorContextFlag.None);\n  }\n  for (const op of ops) {\n    visitExpressionsInOp(op, expr => {\n      if (expr instanceof LexicalReadExpr) {\n        throw new Error(`AssertionError: no lexical reads should remain, but found read of ${expr.name}`);\n      }\n    });\n  }\n}\n\n/**\n * Map of security contexts to their sanitizer function.\n */\nconst sanitizerFns = new Map([[SecurityContext.HTML, Identifiers.sanitizeHtml], [SecurityContext.RESOURCE_URL, Identifiers.sanitizeResourceUrl], [SecurityContext.SCRIPT, Identifiers.sanitizeScript], [SecurityContext.STYLE, Identifiers.sanitizeStyle], [SecurityContext.URL, Identifiers.sanitizeUrl]]);\n/**\n * Map of security contexts to their trusted value function.\n */\nconst trustedValueFns = new Map([[SecurityContext.HTML, Identifiers.trustConstantHtml], [SecurityContext.RESOURCE_URL, Identifiers.trustConstantResourceUrl]]);\n/**\n * Resolves sanitization functions for ops that need them.\n */\nfunction resolveSanitizers(job) {\n  for (const unit of job.units) {\n    const elements = createOpXrefMap(unit);\n    // For normal element bindings we create trusted values for security sensitive constant\n    // attributes. However, for host bindings we skip this step (this matches what\n    // TemplateDefinitionBuilder does).\n    // TODO: Is the TDB behavior correct here?\n    if (job.kind !== CompilationJobKind.Host) {\n      for (const op of unit.create) {\n        if (op.kind === OpKind.ExtractedAttribute) {\n          const trustedValueFn = trustedValueFns.get(getOnlySecurityContext(op.securityContext)) ?? null;\n          op.trustedValueFn = trustedValueFn !== null ? importExpr(trustedValueFn) : null;\n        }\n      }\n    }\n    for (const op of unit.update) {\n      switch (op.kind) {\n        case OpKind.Property:\n        case OpKind.Attribute:\n        case OpKind.HostProperty:\n          let sanitizerFn = null;\n          if (Array.isArray(op.securityContext) && op.securityContext.length === 2 && op.securityContext.indexOf(SecurityContext.URL) > -1 && op.securityContext.indexOf(SecurityContext.RESOURCE_URL) > -1) {\n            // When the host element isn't known, some URL attributes (such as \"src\" and \"href\") may\n            // be part of multiple different security contexts. In this case we use special\n            // sanitization function and select the actual sanitizer at runtime based on a tag name\n            // that is provided while invoking sanitization function.\n            sanitizerFn = Identifiers.sanitizeUrlOrResourceUrl;\n          } else {\n            sanitizerFn = sanitizerFns.get(getOnlySecurityContext(op.securityContext)) ?? null;\n          }\n          op.sanitizer = sanitizerFn !== null ? importExpr(sanitizerFn) : null;\n          // If there was no sanitization function found based on the security context of an\n          // attribute/property, check whether this attribute/property is one of the\n          // security-sensitive <iframe> attributes (and that the current element is actually an\n          // <iframe>).\n          if (op.sanitizer === null) {\n            let isIframe = false;\n            if (job.kind === CompilationJobKind.Host || op.kind === OpKind.HostProperty) {\n              // Note: for host bindings defined on a directive, we do not try to find all\n              // possible places where it can be matched, so we can not determine whether\n              // the host element is an <iframe>. In this case, we just assume it is and append a\n              // validation function, which is invoked at runtime and would have access to the\n              // underlying DOM element to check if it's an <iframe> and if so - run extra checks.\n              isIframe = true;\n            } else {\n              // For a normal binding we can just check if the element its on is an iframe.\n              const ownerOp = elements.get(op.target);\n              if (ownerOp === undefined || !isElementOrContainerOp(ownerOp)) {\n                throw Error('Property should have an element-like owner');\n              }\n              isIframe = isIframeElement$1(ownerOp);\n            }\n            if (isIframe && isIframeSecuritySensitiveAttr(op.name)) {\n              op.sanitizer = importExpr(Identifiers.validateIframeAttribute);\n            }\n          }\n          break;\n      }\n    }\n  }\n}\n/**\n * Checks whether the given op represents an iframe element.\n */\nfunction isIframeElement$1(op) {\n  return op.kind === OpKind.ElementStart && op.tag?.toLowerCase() === 'iframe';\n}\n/**\n * Asserts that there is only a single security context and returns it.\n */\nfunction getOnlySecurityContext(securityContext) {\n  if (Array.isArray(securityContext)) {\n    if (securityContext.length > 1) {\n      // TODO: What should we do here? TDB just took the first one, but this feels like something we\n      // would want to know about and create a special case for like we did for Url/ResourceUrl. My\n      // guess is that, outside of the Url/ResourceUrl case, this never actually happens. If there\n      // do turn out to be other cases, throwing an error until we can address it feels safer.\n      throw Error(`AssertionError: Ambiguous security context`);\n    }\n    return securityContext[0] || SecurityContext.NONE;\n  }\n  return securityContext;\n}\n\n/**\n * When inside of a listener, we may need access to one or more enclosing views. Therefore, each\n * view should save the current view, and each listener must have the ability to restore the\n * appropriate view. We eagerly generate all save view variables; they will be optimized away later.\n */\nfunction saveAndRestoreView(job) {\n  for (const unit of job.units) {\n    unit.create.prepend([createVariableOp(unit.job.allocateXrefId(), {\n      kind: SemanticVariableKind.SavedView,\n      name: null,\n      view: unit.xref\n    }, new GetCurrentViewExpr(), VariableFlags.None)]);\n    for (const op of unit.create) {\n      if (op.kind !== OpKind.Listener) {\n        continue;\n      }\n      // Embedded views always need the save/restore view operation.\n      let needsRestoreView = unit !== job.root;\n      if (!needsRestoreView) {\n        for (const handlerOp of op.handlerOps) {\n          visitExpressionsInOp(handlerOp, expr => {\n            if (expr instanceof ReferenceExpr) {\n              // Listeners that reference() a local ref need the save/restore view operation.\n              needsRestoreView = true;\n            }\n          });\n        }\n      }\n      if (needsRestoreView) {\n        addSaveRestoreViewOperationToListener(unit, op);\n      }\n    }\n  }\n}\nfunction addSaveRestoreViewOperationToListener(unit, op) {\n  op.handlerOps.prepend([createVariableOp(unit.job.allocateXrefId(), {\n    kind: SemanticVariableKind.Context,\n    name: null,\n    view: unit.xref\n  }, new RestoreViewExpr(unit.xref), VariableFlags.None)]);\n  // The \"restore view\" operation in listeners requires a call to `resetView` to reset the\n  // context prior to returning from the listener operation. Find any `return` statements in\n  // the listener body and wrap them in a call to reset the view.\n  for (const handlerOp of op.handlerOps) {\n    if (handlerOp.kind === OpKind.Statement && handlerOp.statement instanceof ReturnStatement) {\n      handlerOp.statement.value = new ResetViewExpr(handlerOp.statement.value);\n    }\n  }\n}\n\n/**\n * Assign data slots for all operations which implement `ConsumesSlotOpTrait`, and propagate the\n * assigned data slots of those operations to any expressions which reference them via\n * `UsesSlotIndexTrait`.\n *\n * This phase is also responsible for counting the number of slots used for each view (its `decls`)\n * and propagating that number into the `Template` operations which declare embedded views.\n */\nfunction allocateSlots(job) {\n  // Map of all declarations in all views within the component which require an assigned slot index.\n  // This map needs to be global (across all views within the component) since it's possible to\n  // reference a slot from one view from an expression within another (e.g. local references work\n  // this way).\n  const slotMap = new Map();\n  // Process all views in the component and assign slot indexes.\n  for (const unit of job.units) {\n    // Slot indices start at 0 for each view (and are not unique between views).\n    let slotCount = 0;\n    for (const op of unit.create) {\n      // Only consider declarations which consume data slots.\n      if (!hasConsumesSlotTrait(op)) {\n        continue;\n      }\n      // Assign slots to this declaration starting at the current `slotCount`.\n      op.handle.slot = slotCount;\n      // And track its assigned slot in the `slotMap`.\n      slotMap.set(op.xref, op.handle.slot);\n      // Each declaration may use more than 1 slot, so increment `slotCount` to reserve the number\n      // of slots required.\n      slotCount += op.numSlotsUsed;\n    }\n    // Record the total number of slots used on the view itself. This will later be propagated into\n    // `ir.TemplateOp`s which declare those views (except for the root view).\n    unit.decls = slotCount;\n  }\n  // After slot assignment, `slotMap` now contains slot assignments for every declaration in the\n  // whole template, across all views. Next, look for expressions which implement\n  // `UsesSlotIndexExprTrait` and propagate the assigned slot indexes into them.\n  // Additionally, this second scan allows us to find `ir.TemplateOp`s which declare views and\n  // propagate the number of slots used for each view into the operation which declares it.\n  for (const unit of job.units) {\n    for (const op of unit.ops()) {\n      if (op.kind === OpKind.Template || op.kind === OpKind.RepeaterCreate) {\n        // Record the number of slots used by the view this `ir.TemplateOp` declares in the\n        // operation itself, so it can be emitted later.\n        const childView = job.views.get(op.xref);\n        op.decls = childView.decls;\n        // TODO: currently we handle the decls for the RepeaterCreate empty template in the reify\n        // phase. We should handle that here instead.\n      }\n    }\n  }\n}\n\n/**\n * Transforms special-case bindings with 'style' or 'class' in their names. Must run before the\n * main binding specialization pass.\n */\nfunction specializeStyleBindings(job) {\n  for (const unit of job.units) {\n    for (const op of unit.update) {\n      if (op.kind !== OpKind.Binding) {\n        continue;\n      }\n      switch (op.bindingKind) {\n        case BindingKind.ClassName:\n          if (op.expression instanceof Interpolation) {\n            throw new Error(`Unexpected interpolation in ClassName binding`);\n          }\n          OpList.replace(op, createClassPropOp(op.target, op.name, op.expression, op.sourceSpan));\n          break;\n        case BindingKind.StyleProperty:\n          OpList.replace(op, createStylePropOp(op.target, op.name, op.expression, op.unit, op.sourceSpan));\n          break;\n        case BindingKind.Property:\n        case BindingKind.Template:\n          if (op.name === 'style') {\n            OpList.replace(op, createStyleMapOp(op.target, op.expression, op.sourceSpan));\n          } else if (op.name === 'class') {\n            OpList.replace(op, createClassMapOp(op.target, op.expression, op.sourceSpan));\n          }\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Find all assignments and usages of temporary variables, which are linked to each other with cross\n * references. Generate names for each cross-reference, and add a `DeclareVarStmt` to initialize\n * them at the beginning of the update block.\n *\n * TODO: Sometimes, it will be possible to reuse names across different subexpressions. For example,\n * in the double keyed read `a?.[f()]?.[f()]`, the two function calls have non-overlapping scopes.\n * Implement an algorithm for reuse.\n */\nfunction generateTemporaryVariables(job) {\n  for (const unit of job.units) {\n    unit.create.prepend(generateTemporaries(unit.create));\n    unit.update.prepend(generateTemporaries(unit.update));\n  }\n}\nfunction generateTemporaries(ops) {\n  let opCount = 0;\n  let generatedStatements = [];\n  // For each op, search for any variables that are assigned or read. For each variable, generate a\n  // name and produce a `DeclareVarStmt` to the beginning of the block.\n  for (const op of ops) {\n    // Identify the final time each temp var is read.\n    const finalReads = new Map();\n    visitExpressionsInOp(op, (expr, flag) => {\n      if (flag & VisitorContextFlag.InChildOperation) {\n        return;\n      }\n      if (expr instanceof ReadTemporaryExpr) {\n        finalReads.set(expr.xref, expr);\n      }\n    });\n    // Name the temp vars, accounting for the fact that a name can be reused after it has been\n    // read for the final time.\n    let count = 0;\n    const assigned = new Set();\n    const released = new Set();\n    const defs = new Map();\n    visitExpressionsInOp(op, (expr, flag) => {\n      if (flag & VisitorContextFlag.InChildOperation) {\n        return;\n      }\n      if (expr instanceof AssignTemporaryExpr) {\n        if (!assigned.has(expr.xref)) {\n          assigned.add(expr.xref);\n          // TODO: Exactly replicate the naming scheme used by `TemplateDefinitionBuilder`.\n          // It seems to rely on an expression index instead of an op index.\n          defs.set(expr.xref, `tmp_${opCount}_${count++}`);\n        }\n        assignName(defs, expr);\n      } else if (expr instanceof ReadTemporaryExpr) {\n        if (finalReads.get(expr.xref) === expr) {\n          released.add(expr.xref);\n          count--;\n        }\n        assignName(defs, expr);\n      }\n    });\n    // Add declarations for the temp vars.\n    generatedStatements.push(...Array.from(new Set(defs.values())).map(name => createStatementOp(new DeclareVarStmt(name))));\n    opCount++;\n    if (op.kind === OpKind.Listener) {\n      op.handlerOps.prepend(generateTemporaries(op.handlerOps));\n    }\n  }\n  return generatedStatements;\n}\n/**\n * Assigns a name to the temporary variable in the given temporary variable expression.\n */\nfunction assignName(names, expr) {\n  const name = names.get(expr.xref);\n  if (name === undefined) {\n    throw new Error(`Found xref with unassigned name: ${expr.xref}`);\n  }\n  expr.name = name;\n}\n\n/**\n * Generate track functions that need to be extracted to the constant pool. This entails wrapping\n * them in an arrow (or traditional) function, replacing context reads with `this.`, and storing\n * them in the constant pool.\n *\n * Note that, if a track function was previously optimized, it will not need to be extracted, and\n * this phase is a no-op.\n */\nfunction generateTrackFns(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind !== OpKind.RepeaterCreate) {\n        continue;\n      }\n      if (op.trackByFn !== null) {\n        // The final track function was already set, probably because it was optimized.\n        continue;\n      }\n      // Find all component context reads.\n      let usesComponentContext = false;\n      op.track = transformExpressionsInExpression(op.track, expr => {\n        if (expr instanceof PipeBindingExpr || expr instanceof PipeBindingVariadicExpr) {\n          throw new Error(`Illegal State: Pipes are not allowed in this context`);\n        }\n        if (expr instanceof TrackContextExpr) {\n          usesComponentContext = true;\n          return variable('this');\n        }\n        return expr;\n      }, VisitorContextFlag.None);\n      let fn;\n      const fnParams = [new FnParam('$index'), new FnParam('$item')];\n      if (usesComponentContext) {\n        fn = new FunctionExpr(fnParams, [new ReturnStatement(op.track)]);\n      } else {\n        fn = arrowFn(fnParams, op.track);\n      }\n      op.trackByFn = job.pool.getSharedFunctionReference(fn, '_forTrack');\n    }\n  }\n}\n\n/**\n * `track` functions in `for` repeaters can sometimes be \"optimized,\" i.e. transformed into inline\n * expressions, in lieu of an external function call. For example, tracking by `$index` can be be\n * optimized into an inline `trackByIndex` reference. This phase checks track expressions for\n * optimizable cases.\n */\nfunction optimizeTrackFns(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind !== OpKind.RepeaterCreate) {\n        continue;\n      }\n      if (op.track instanceof ReadVarExpr && op.track.name === '$index') {\n        // Top-level access of `$index` uses the built in `repeaterTrackByIndex`.\n        op.trackByFn = importExpr(Identifiers.repeaterTrackByIndex);\n      } else if (op.track instanceof ReadVarExpr && op.track.name === '$item') {\n        // Top-level access of the item uses the built in `repeaterTrackByIdentity`.\n        op.trackByFn = importExpr(Identifiers.repeaterTrackByIdentity);\n      } else if (isTrackByFunctionCall(job.root.xref, op.track)) {\n        // Top-level method calls in the form of `fn($index, item)` can be passed in directly.\n        if (op.track.receiver.receiver.view === unit.xref) {\n          // TODO: this may be wrong\n          op.trackByFn = op.track.receiver;\n        } else {\n          // This is a plain method call, but not in the component's root view.\n          // We need to get the component instance, and then call the method on it.\n          op.trackByFn = importExpr(Identifiers.componentInstance).callFn([]).prop(op.track.receiver.name);\n          // Because the context is not avaiable (without a special function), we don't want to\n          // try to resolve it later. Let's get rid of it by overwriting the original track\n          // expression (which won't be used anyway).\n          op.track = op.trackByFn;\n        }\n      } else {\n        // The track function could not be optimized.\n        // Replace context reads with a special IR expression, since context reads in a track\n        // function are emitted specially.\n        op.track = transformExpressionsInExpression(op.track, expr => {\n          if (expr instanceof ContextExpr) {\n            op.usesComponentInstance = true;\n            return new TrackContextExpr(expr.view);\n          }\n          return expr;\n        }, VisitorContextFlag.None);\n      }\n    }\n  }\n}\nfunction isTrackByFunctionCall(rootView, expr) {\n  if (!(expr instanceof InvokeFunctionExpr) || expr.args.length !== 2) {\n    return false;\n  }\n  if (!(expr.receiver instanceof ReadPropExpr && expr.receiver.receiver instanceof ContextExpr) || expr.receiver.receiver.view !== rootView) {\n    return false;\n  }\n  const [arg0, arg1] = expr.args;\n  if (!(arg0 instanceof ReadVarExpr) || arg0.name !== '$index') {\n    return false;\n  }\n  if (!(arg1 instanceof ReadVarExpr) || arg1.name !== '$item') {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Inside the `track` expression on a `for` repeater, the `$index` and `$item` variables are\n * ambiently available. In this phase, we find those variable usages, and replace them with the\n * appropriate output read.\n */\nfunction generateTrackVariables(job) {\n  for (const unit of job.units) {\n    for (const op of unit.create) {\n      if (op.kind !== OpKind.RepeaterCreate) {\n        continue;\n      }\n      op.track = transformExpressionsInExpression(op.track, expr => {\n        if (expr instanceof LexicalReadExpr) {\n          if (expr.name === op.varNames.$index) {\n            return variable('$index');\n          } else if (expr.name === op.varNames.$implicit) {\n            return variable('$item');\n          }\n          // TODO: handle prohibited context variables (emit as globals?)\n        }\n        return expr;\n      }, VisitorContextFlag.None);\n    }\n  }\n}\n\n/**\n * Counts the number of variable slots used within each view, and stores that on the view itself, as\n * well as propagates it to the `ir.TemplateOp` for embedded views.\n */\nfunction countVariables(job) {\n  // First, count the vars used in each view, and update the view-level counter.\n  for (const unit of job.units) {\n    let varCount = 0;\n    // Count variables on top-level ops first. Don't explore nested expressions just yet.\n    for (const op of unit.ops()) {\n      if (hasConsumesVarsTrait(op)) {\n        varCount += varsUsedByOp(op);\n      }\n    }\n    // Count variables on expressions inside ops. We do this later because some of these expressions\n    // might be conditional (e.g. `pipeBinding` inside of a ternary), and we don't want to interfere\n    // with indices for top-level binding slots (e.g. `property`).\n    for (const op of unit.ops()) {\n      visitExpressionsInOp(op, expr => {\n        if (!isIrExpression(expr)) {\n          return;\n        }\n        // TemplateDefinitionBuilder assigns variable offsets for everything but pure functions\n        // first, and then assigns offsets to pure functions lazily. We emulate that behavior by\n        // assigning offsets in two passes instead of one, only in compatibility mode.\n        if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder && expr instanceof PureFunctionExpr) {\n          return;\n        }\n        // Some expressions require knowledge of the number of variable slots consumed.\n        if (hasUsesVarOffsetTrait(expr)) {\n          expr.varOffset = varCount;\n        }\n        if (hasConsumesVarsTrait(expr)) {\n          varCount += varsUsedByIrExpression(expr);\n        }\n      });\n    }\n    // Compatiblity mode pass for pure function offsets (as explained above).\n    if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {\n      for (const op of unit.ops()) {\n        visitExpressionsInOp(op, expr => {\n          if (!isIrExpression(expr) || !(expr instanceof PureFunctionExpr)) {\n            return;\n          }\n          // Some expressions require knowledge of the number of variable slots consumed.\n          if (hasUsesVarOffsetTrait(expr)) {\n            expr.varOffset = varCount;\n          }\n          if (hasConsumesVarsTrait(expr)) {\n            varCount += varsUsedByIrExpression(expr);\n          }\n        });\n      }\n    }\n    unit.vars = varCount;\n  }\n  if (job instanceof ComponentCompilationJob) {\n    // Add var counts for each view to the `ir.TemplateOp` which declares that view (if the view is\n    // an embedded view).\n    for (const unit of job.units) {\n      for (const op of unit.create) {\n        if (op.kind !== OpKind.Template && op.kind !== OpKind.RepeaterCreate) {\n          continue;\n        }\n        const childView = job.views.get(op.xref);\n        op.vars = childView.vars;\n        // TODO: currently we handle the vars for the RepeaterCreate empty template in the reify\n        // phase. We should handle that here instead.\n      }\n    }\n  }\n}\n/**\n * Different operations that implement `ir.UsesVarsTrait` use different numbers of variables, so\n * count the variables used by any particular `op`.\n */\nfunction varsUsedByOp(op) {\n  let slots;\n  switch (op.kind) {\n    case OpKind.Property:\n    case OpKind.HostProperty:\n    case OpKind.Attribute:\n      // All of these bindings use 1 variable slot, plus 1 slot for every interpolated expression,\n      // if any.\n      slots = 1;\n      if (op.expression instanceof Interpolation && !isSingletonInterpolation(op.expression)) {\n        slots += op.expression.expressions.length;\n      }\n      return slots;\n    case OpKind.StyleProp:\n    case OpKind.ClassProp:\n    case OpKind.StyleMap:\n    case OpKind.ClassMap:\n      // Style & class bindings use 2 variable slots, plus 1 slot for every interpolated expression,\n      // if any.\n      slots = 2;\n      if (op.expression instanceof Interpolation) {\n        slots += op.expression.expressions.length;\n      }\n      return slots;\n    case OpKind.InterpolateText:\n      // `ir.InterpolateTextOp`s use a variable slot for each dynamic expression.\n      return op.interpolation.expressions.length;\n    case OpKind.I18nExpression:\n    case OpKind.Conditional:\n    case OpKind.DeferWhen:\n      return 1;\n    case OpKind.RepeaterCreate:\n      // Repeaters may require an extra variable binding slot, if they have an empty view, for the\n      // empty block tracking.\n      // TODO: It's a bit odd to have a create mode instruction consume variable slots. Maybe we can\n      // find a way to use the Repeater update op instead.\n      return op.emptyView ? 1 : 0;\n    default:\n      throw new Error(`Unhandled op: ${OpKind[op.kind]}`);\n  }\n}\nfunction varsUsedByIrExpression(expr) {\n  switch (expr.kind) {\n    case ExpressionKind.PureFunctionExpr:\n      return 1 + expr.args.length;\n    case ExpressionKind.PipeBinding:\n      return 1 + expr.args.length;\n    case ExpressionKind.PipeBindingVariadic:\n      return 1 + expr.numArgs;\n    default:\n      throw new Error(`AssertionError: unhandled ConsumesVarsTrait expression ${expr.constructor.name}`);\n  }\n}\nfunction isSingletonInterpolation(expr) {\n  if (expr.expressions.length !== 1 || expr.strings.length !== 2) {\n    return false;\n  }\n  if (expr.strings[0] !== '' || expr.strings[1] !== '') {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Optimize variables declared and used in the IR.\n *\n * Variables are eagerly generated by pipeline stages for all possible values that could be\n * referenced. This stage processes the list of declared variables and all variable usages,\n * and optimizes where possible. It performs 3 main optimizations:\n *\n *   * It transforms variable declarations to side effectful expressions when the\n *     variable is not used, but its initializer has global effects which other\n *     operations rely upon.\n *   * It removes variable declarations if those variables are not referenced and\n *     either they do not have global effects, or nothing relies on them.\n *   * It inlines variable declarations when those variables are only used once\n *     and the inlining is semantically safe.\n *\n * To guarantee correctness, analysis of \"fences\" in the instruction lists is used to determine\n * which optimizations are safe to perform.\n */\nfunction optimizeVariables(job) {\n  for (const unit of job.units) {\n    inlineAlwaysInlineVariables(unit.create);\n    inlineAlwaysInlineVariables(unit.update);\n    for (const op of unit.create) {\n      if (op.kind === OpKind.Listener) {\n        inlineAlwaysInlineVariables(op.handlerOps);\n      }\n    }\n    optimizeVariablesInOpList(unit.create, job.compatibility);\n    optimizeVariablesInOpList(unit.update, job.compatibility);\n    for (const op of unit.create) {\n      if (op.kind === OpKind.Listener) {\n        optimizeVariablesInOpList(op.handlerOps, job.compatibility);\n      }\n    }\n  }\n}\n/**\n * A [fence](https://en.wikipedia.org/wiki/Memory_barrier) flag for an expression which indicates\n * how that expression can be optimized in relation to other expressions or instructions.\n *\n * `Fence`s are a bitfield, so multiple flags may be set on a single expression.\n */\nvar Fence;\n(function (Fence) {\n  /**\n   * Empty flag (no fence exists).\n   */\n  Fence[Fence[\"None\"] = 0] = \"None\";\n  /**\n   * A context read fence, meaning that the expression in question reads from the \"current view\"\n   * context of the runtime.\n   */\n  Fence[Fence[\"ViewContextRead\"] = 1] = \"ViewContextRead\";\n  /**\n   * A context write fence, meaning that the expression in question writes to the \"current view\"\n   * context of the runtime.\n   *\n   * Note that all `ContextWrite` fences are implicitly `ContextRead` fences as operations which\n   * change the view context do so based on the current one.\n   */\n  Fence[Fence[\"ViewContextWrite\"] = 2] = \"ViewContextWrite\";\n  /**\n   * Indicates that a call is required for its side-effects, even if nothing reads its result.\n   *\n   * This is also true of `ViewContextWrite` operations **if** they are followed by a\n   * `ViewContextRead`.\n   */\n  Fence[Fence[\"SideEffectful\"] = 4] = \"SideEffectful\";\n})(Fence || (Fence = {}));\nfunction inlineAlwaysInlineVariables(ops) {\n  const vars = new Map();\n  for (const op of ops) {\n    if (op.kind === OpKind.Variable && op.flags & VariableFlags.AlwaysInline) {\n      visitExpressionsInOp(op, expr => {\n        if (isIrExpression(expr) && fencesForIrExpression(expr) !== Fence.None) {\n          throw new Error(`AssertionError: A context-sensitive variable was marked AlwaysInline`);\n        }\n      });\n      vars.set(op.xref, op);\n    }\n    transformExpressionsInOp(op, expr => {\n      if (expr instanceof ReadVariableExpr && vars.has(expr.xref)) {\n        const varOp = vars.get(expr.xref);\n        // Inline by cloning, because we might inline into multiple places.\n        return varOp.initializer.clone();\n      }\n      return expr;\n    }, VisitorContextFlag.None);\n  }\n  for (const op of vars.values()) {\n    OpList.remove(op);\n  }\n}\n/**\n * Process a list of operations and optimize variables within that list.\n */\nfunction optimizeVariablesInOpList(ops, compatibility) {\n  const varDecls = new Map();\n  const varUsages = new Map();\n  // Track variables that are used outside of the immediate operation list. For example, within\n  // `ListenerOp` handler operations of listeners in the current operation list.\n  const varRemoteUsages = new Set();\n  const opMap = new Map();\n  // First, extract information about variables declared or used within the whole list.\n  for (const op of ops) {\n    if (op.kind === OpKind.Variable) {\n      if (varDecls.has(op.xref) || varUsages.has(op.xref)) {\n        throw new Error(`Should not see two declarations of the same variable: ${op.xref}`);\n      }\n      varDecls.set(op.xref, op);\n      varUsages.set(op.xref, 0);\n    }\n    opMap.set(op, collectOpInfo(op));\n    countVariableUsages(op, varUsages, varRemoteUsages);\n  }\n  // The next step is to remove any variable declarations for variables that aren't used. The\n  // variable initializer expressions may be side-effectful, so they may need to be retained as\n  // expression statements.\n  // Track whether we've seen an operation which reads from the view context yet. This is used to\n  // determine whether a write to the view context in a variable initializer can be observed.\n  let contextIsUsed = false;\n  // Note that iteration through the list happens in reverse, which guarantees that we'll process\n  // all reads of a variable prior to processing its declaration.\n  for (const op of ops.reversed()) {\n    const opInfo = opMap.get(op);\n    if (op.kind === OpKind.Variable && varUsages.get(op.xref) === 0) {\n      // This variable is unused and can be removed. We might need to keep the initializer around,\n      // though, if something depends on it running.\n      if (contextIsUsed && opInfo.fences & Fence.ViewContextWrite || opInfo.fences & Fence.SideEffectful) {\n        // This variable initializer has a side effect which must be retained. Either:\n        //  * it writes to the view context, and we know there is a future operation which depends\n        //    on that write, or\n        //  * it's an operation which is inherently side-effectful.\n        // We can't remove the initializer, but we can remove the variable declaration itself and\n        // replace it with a side-effectful statement.\n        const stmtOp = createStatementOp(op.initializer.toStmt());\n        opMap.set(stmtOp, opInfo);\n        OpList.replace(op, stmtOp);\n      } else {\n        // It's safe to delete this entire variable declaration as nothing depends on it, even\n        // side-effectfully. Note that doing this might make other variables unused. Since we're\n        // iterating in reverse order, we should always be processing usages before declarations\n        // and therefore by the time we get to a declaration, all removable usages will have been\n        // removed.\n        uncountVariableUsages(op, varUsages);\n        OpList.remove(op);\n      }\n      opMap.delete(op);\n      varDecls.delete(op.xref);\n      varUsages.delete(op.xref);\n      continue;\n    }\n    // Does this operation depend on the view context?\n    if (opInfo.fences & Fence.ViewContextRead) {\n      contextIsUsed = true;\n    }\n  }\n  // Next, inline any remaining variables with exactly one usage.\n  const toInline = [];\n  for (const [id, count] of varUsages) {\n    const decl = varDecls.get(id);\n    const varInfo = opMap.get(decl);\n    // We can inline variables that:\n    //  - are used exactly once, and\n    //  - are not used remotely\n    // OR\n    //  - are marked for always inlining\n    const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);\n    if (count !== 1 || isAlwaysInline) {\n      // We can't inline this variable as it's used more than once.\n      continue;\n    }\n    if (varRemoteUsages.has(id)) {\n      // This variable is used once, but across an operation boundary, so it can't be inlined.\n      continue;\n    }\n    toInline.push(id);\n  }\n  let candidate;\n  while (candidate = toInline.pop()) {\n    // We will attempt to inline this variable. If inlining fails (due to fences for example),\n    // no future operation will make inlining legal.\n    const decl = varDecls.get(candidate);\n    const varInfo = opMap.get(decl);\n    const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);\n    if (isAlwaysInline) {\n      throw new Error(`AssertionError: Found an 'AlwaysInline' variable after the always inlining pass.`);\n    }\n    // Scan operations following the variable declaration and look for the point where that variable\n    // is used. There should only be one usage given the precondition above.\n    for (let targetOp = decl.next; targetOp.kind !== OpKind.ListEnd; targetOp = targetOp.next) {\n      const opInfo = opMap.get(targetOp);\n      // Is the variable used in this operation?\n      if (opInfo.variablesUsed.has(candidate)) {\n        if (compatibility === CompatibilityMode.TemplateDefinitionBuilder && !allowConservativeInlining(decl, targetOp)) {\n          // We're in conservative mode, and this variable is not eligible for inlining into the\n          // target operation in this mode.\n          break;\n        }\n        // Yes, try to inline it. Inlining may not be successful if fences in this operation before\n        // the variable's usage cannot be safely crossed.\n        if (tryInlineVariableInitializer(candidate, decl.initializer, targetOp, varInfo.fences)) {\n          // Inlining was successful! Update the tracking structures to reflect the inlined\n          // variable.\n          opInfo.variablesUsed.delete(candidate);\n          // Add all variables used in the variable's initializer to its new usage site.\n          for (const id of varInfo.variablesUsed) {\n            opInfo.variablesUsed.add(id);\n          }\n          // Merge fences in the variable's initializer into its new usage site.\n          opInfo.fences |= varInfo.fences;\n          // Delete tracking info related to the declaration.\n          varDecls.delete(candidate);\n          varUsages.delete(candidate);\n          opMap.delete(decl);\n          // And finally, delete the original declaration from the operation list.\n          OpList.remove(decl);\n        }\n        // Whether inlining succeeded or failed, we're done processing this variable.\n        break;\n      }\n      // If the variable is not used in this operation, then we'd need to inline across it. Check if\n      // that's safe to do.\n      if (!safeToInlinePastFences(opInfo.fences, varInfo.fences)) {\n        // We can't safely inline this variable beyond this operation, so don't proceed with\n        // inlining this variable.\n        break;\n      }\n    }\n  }\n}\n/**\n * Given an `ir.Expression`, returns the `Fence` flags for that expression type.\n */\nfunction fencesForIrExpression(expr) {\n  switch (expr.kind) {\n    case ExpressionKind.NextContext:\n      return Fence.ViewContextRead | Fence.ViewContextWrite;\n    case ExpressionKind.RestoreView:\n      return Fence.ViewContextRead | Fence.ViewContextWrite | Fence.SideEffectful;\n    case ExpressionKind.Reference:\n      return Fence.ViewContextRead;\n    default:\n      return Fence.None;\n  }\n}\n/**\n * Build the `OpInfo` structure for the given `op`. This performs two operations:\n *\n *  * It tracks which variables are used in the operation's expressions.\n *  * It rolls up fence flags for expressions within the operation.\n */\nfunction collectOpInfo(op) {\n  let fences = Fence.None;\n  const variablesUsed = new Set();\n  visitExpressionsInOp(op, expr => {\n    if (!isIrExpression(expr)) {\n      return;\n    }\n    switch (expr.kind) {\n      case ExpressionKind.ReadVariable:\n        variablesUsed.add(expr.xref);\n        break;\n      default:\n        fences |= fencesForIrExpression(expr);\n    }\n  });\n  return {\n    fences,\n    variablesUsed\n  };\n}\n/**\n * Count the number of usages of each variable, being careful to track whether those usages are\n * local or remote.\n */\nfunction countVariableUsages(op, varUsages, varRemoteUsage) {\n  visitExpressionsInOp(op, (expr, flags) => {\n    if (!isIrExpression(expr)) {\n      return;\n    }\n    if (expr.kind !== ExpressionKind.ReadVariable) {\n      return;\n    }\n    const count = varUsages.get(expr.xref);\n    if (count === undefined) {\n      // This variable is declared outside the current scope of optimization.\n      return;\n    }\n    varUsages.set(expr.xref, count + 1);\n    if (flags & VisitorContextFlag.InChildOperation) {\n      varRemoteUsage.add(expr.xref);\n    }\n  });\n}\n/**\n * Remove usages of a variable in `op` from the `varUsages` tracking.\n */\nfunction uncountVariableUsages(op, varUsages) {\n  visitExpressionsInOp(op, expr => {\n    if (!isIrExpression(expr)) {\n      return;\n    }\n    if (expr.kind !== ExpressionKind.ReadVariable) {\n      return;\n    }\n    const count = varUsages.get(expr.xref);\n    if (count === undefined) {\n      // This variable is declared outside the current scope of optimization.\n      return;\n    } else if (count === 0) {\n      throw new Error(`Inaccurate variable count: ${expr.xref} - found another read but count is already 0`);\n    }\n    varUsages.set(expr.xref, count - 1);\n  });\n}\n/**\n * Checks whether it's safe to inline a variable across a particular operation.\n *\n * @param fences the fences of the operation which the inlining will cross\n * @param declFences the fences of the variable being inlined.\n */\nfunction safeToInlinePastFences(fences, declFences) {\n  if (fences & Fence.ViewContextWrite) {\n    // It's not safe to inline context reads across context writes.\n    if (declFences & Fence.ViewContextRead) {\n      return false;\n    }\n  } else if (fences & Fence.ViewContextRead) {\n    // It's not safe to inline context writes across context reads.\n    if (declFences & Fence.ViewContextWrite) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Attempt to inline the initializer of a variable into a target operation's expressions.\n *\n * This may or may not be safe to do. For example, the variable could be read following the\n * execution of an expression with fences that don't permit the variable to be inlined across them.\n */\nfunction tryInlineVariableInitializer(id, initializer, target, declFences) {\n  // We use `ir.transformExpressionsInOp` to walk the expressions and inline the variable if\n  // possible. Since this operation is callback-based, once inlining succeeds or fails we can't\n  // \"stop\" the expression processing, and have to keep track of whether inlining has succeeded or\n  // is no longer allowed.\n  let inlined = false;\n  let inliningAllowed = true;\n  transformExpressionsInOp(target, (expr, flags) => {\n    if (!isIrExpression(expr)) {\n      return expr;\n    }\n    if (inlined || !inliningAllowed) {\n      // Either the inlining has already succeeded, or we've passed a fence that disallows inlining\n      // at this point, so don't try.\n      return expr;\n    } else if (flags & VisitorContextFlag.InChildOperation && declFences & Fence.ViewContextRead) {\n      // We cannot inline variables that are sensitive to the current context across operation\n      // boundaries.\n      return expr;\n    }\n    switch (expr.kind) {\n      case ExpressionKind.ReadVariable:\n        if (expr.xref === id) {\n          // This is the usage site of the variable. Since nothing has disallowed inlining, it's\n          // safe to inline the initializer here.\n          inlined = true;\n          return initializer;\n        }\n        break;\n      default:\n        // For other types of `ir.Expression`s, whether inlining is allowed depends on their fences.\n        const exprFences = fencesForIrExpression(expr);\n        inliningAllowed = inliningAllowed && safeToInlinePastFences(exprFences, declFences);\n        break;\n    }\n    return expr;\n  }, VisitorContextFlag.None);\n  return inlined;\n}\n/**\n * Determines whether inlining of `decl` should be allowed in \"conservative\" mode.\n *\n * In conservative mode, inlining behavior is limited to those operations which the\n * `TemplateDefinitionBuilder` supported, with the goal of producing equivalent output.\n */\nfunction allowConservativeInlining(decl, target) {\n  // TODO(alxhub): understand exactly how TemplateDefinitionBuilder approaches inlining, and record\n  // that behavior here.\n  switch (decl.variable.kind) {\n    case SemanticVariableKind.Identifier:\n      if (decl.initializer instanceof ReadVarExpr && decl.initializer.name === 'ctx') {\n        // Although TemplateDefinitionBuilder is cautious about inlining, we still want to do so\n        // when the variable is the context, to imitate its behavior with aliases in control flow\n        // blocks. This quirky behavior will become dead code once compatibility mode is no longer\n        // supported.\n        return true;\n      }\n      return false;\n    case SemanticVariableKind.Context:\n      // Context can only be inlined into other variables.\n      return target.kind === OpKind.Variable;\n    default:\n      return true;\n  }\n}\n\n/**\n * Wraps ICUs that do not already belong to an i18n block in a new i18n block.\n */\nfunction wrapI18nIcus(job) {\n  for (const unit of job.units) {\n    let currentI18nOp = null;\n    let addedI18nId = null;\n    for (const op of unit.create) {\n      switch (op.kind) {\n        case OpKind.I18nStart:\n          currentI18nOp = op;\n          break;\n        case OpKind.I18nEnd:\n          currentI18nOp = null;\n          break;\n        case OpKind.IcuStart:\n          if (currentI18nOp === null) {\n            addedI18nId = job.allocateXrefId();\n            // ICU i18n start/end ops should not recieve source spans.\n            OpList.insertBefore(createI18nStartOp(addedI18nId, op.message, undefined, null), op);\n          }\n          break;\n        case OpKind.IcuEnd:\n          if (addedI18nId !== null) {\n            OpList.insertAfter(createI18nEndOp(addedI18nId, null), op);\n            addedI18nId = null;\n          }\n          break;\n      }\n    }\n  }\n}\n\n/**\n *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst phases = [{\n  kind: CompilationJobKind.Tmpl,\n  fn: removeContentSelectors\n}, {\n  kind: CompilationJobKind.Host,\n  fn: parseHostStyleProperties\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: emitNamespaceChanges\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: propagateI18nBlocks\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: wrapI18nIcus\n}, {\n  kind: CompilationJobKind.Both,\n  fn: deduplicateTextBindings\n}, {\n  kind: CompilationJobKind.Both,\n  fn: specializeStyleBindings\n}, {\n  kind: CompilationJobKind.Both,\n  fn: specializeBindings\n}, {\n  kind: CompilationJobKind.Both,\n  fn: extractAttributes\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: createI18nContexts\n}, {\n  kind: CompilationJobKind.Both,\n  fn: parseExtractedStyles\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: removeEmptyBindings\n}, {\n  kind: CompilationJobKind.Both,\n  fn: collapseSingletonInterpolations\n}, {\n  kind: CompilationJobKind.Both,\n  fn: orderOps\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: generateConditionalExpressions\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: createPipes\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: configureDeferInstructions\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: convertI18nText\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: convertI18nBindings\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: removeUnusedI18nAttributesOps\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: assignI18nSlotDependencies\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: applyI18nExpressions\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: createVariadicPipes\n}, {\n  kind: CompilationJobKind.Both,\n  fn: generatePureLiteralStructures\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: generateProjectionDefs\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: generateVariables\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: saveAndRestoreView\n}, {\n  kind: CompilationJobKind.Both,\n  fn: deleteAnyCasts\n}, {\n  kind: CompilationJobKind.Both,\n  fn: resolveDollarEvent\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: generateTrackVariables\n}, {\n  kind: CompilationJobKind.Both,\n  fn: resolveNames\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: resolveDeferTargetNames\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: optimizeTrackFns\n}, {\n  kind: CompilationJobKind.Both,\n  fn: resolveContexts\n}, {\n  kind: CompilationJobKind.Both,\n  fn: resolveSanitizers\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: liftLocalRefs\n}, {\n  kind: CompilationJobKind.Both,\n  fn: generateNullishCoalesceExpressions\n}, {\n  kind: CompilationJobKind.Both,\n  fn: expandSafeReads\n}, {\n  kind: CompilationJobKind.Both,\n  fn: generateTemporaryVariables\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: allocateSlots\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: createDeferDepsFns\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: resolveI18nElementPlaceholders\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: resolveI18nExpressionPlaceholders\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: extractI18nMessages\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: generateTrackFns\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: collectI18nConsts\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: collectConstExpressions\n}, {\n  kind: CompilationJobKind.Both,\n  fn: collectElementConsts\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: removeI18nContexts\n}, {\n  kind: CompilationJobKind.Both,\n  fn: countVariables\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: generateAdvance\n}, {\n  kind: CompilationJobKind.Both,\n  fn: optimizeVariables\n}, {\n  kind: CompilationJobKind.Both,\n  fn: nameFunctionsAndVariables\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: mergeNextContextExpressions\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: generateNgContainerOps\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: collapseEmptyInstructions\n}, {\n  kind: CompilationJobKind.Tmpl,\n  fn: disableBindings$1\n}, {\n  kind: CompilationJobKind.Both,\n  fn: extractPureFunctions\n}, {\n  kind: CompilationJobKind.Both,\n  fn: reify\n}, {\n  kind: CompilationJobKind.Both,\n  fn: chain\n}];\n/**\n * Run all transformation phases in the correct order against a compilation job. After this\n * processing, the compilation should be in a state where it can be emitted.\n */\nfunction transform(job, kind) {\n  for (const phase of phases) {\n    if (phase.kind === kind || phase.kind === CompilationJobKind.Both) {\n      // The type of `Phase` above ensures it is impossible to call a phase that doesn't support the\n      // job kind.\n      phase.fn(job);\n    }\n  }\n}\n/**\n * Compile all views in the given `ComponentCompilation` into the final template function, which may\n * reference constants defined in a `ConstantPool`.\n */\nfunction emitTemplateFn(tpl, pool) {\n  const rootFn = emitView(tpl.root);\n  emitChildViews(tpl.root, pool);\n  return rootFn;\n}\nfunction emitChildViews(parent, pool) {\n  for (const unit of parent.job.units) {\n    if (unit.parent !== parent.xref) {\n      continue;\n    }\n    // Child views are emitted depth-first.\n    emitChildViews(unit, pool);\n    const viewFn = emitView(unit);\n    pool.statements.push(viewFn.toDeclStmt(viewFn.name));\n  }\n}\n/**\n * Emit a template function for an individual `ViewCompilation` (which may be either the root view\n * or an embedded view).\n */\nfunction emitView(view) {\n  if (view.fnName === null) {\n    throw new Error(`AssertionError: view ${view.xref} is unnamed`);\n  }\n  const createStatements = [];\n  for (const op of view.create) {\n    if (op.kind !== OpKind.Statement) {\n      throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op.kind]}`);\n    }\n    createStatements.push(op.statement);\n  }\n  const updateStatements = [];\n  for (const op of view.update) {\n    if (op.kind !== OpKind.Statement) {\n      throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op.kind]}`);\n    }\n    updateStatements.push(op.statement);\n  }\n  const createCond = maybeGenerateRfBlock(1, createStatements);\n  const updateCond = maybeGenerateRfBlock(2, updateStatements);\n  return fn([new FnParam('rf'), new FnParam('ctx')], [...createCond, ...updateCond], /* type */undefined, /* sourceSpan */undefined, view.fnName);\n}\nfunction maybeGenerateRfBlock(flag, statements) {\n  if (statements.length === 0) {\n    return [];\n  }\n  return [ifStmt(new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, variable('rf'), literal(flag)), statements)];\n}\nfunction emitHostBindingFunction(job) {\n  if (job.root.fnName === null) {\n    throw new Error(`AssertionError: host binding function is unnamed`);\n  }\n  const createStatements = [];\n  for (const op of job.root.create) {\n    if (op.kind !== OpKind.Statement) {\n      throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op.kind]}`);\n    }\n    createStatements.push(op.statement);\n  }\n  const updateStatements = [];\n  for (const op of job.root.update) {\n    if (op.kind !== OpKind.Statement) {\n      throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op.kind]}`);\n    }\n    updateStatements.push(op.statement);\n  }\n  if (createStatements.length === 0 && updateStatements.length === 0) {\n    return null;\n  }\n  const createCond = maybeGenerateRfBlock(1, createStatements);\n  const updateCond = maybeGenerateRfBlock(2, updateStatements);\n  return fn([new FnParam('rf'), new FnParam('ctx')], [...createCond, ...updateCond], /* type */undefined, /* sourceSpan */undefined, job.root.fnName);\n}\nconst compatibilityMode = CompatibilityMode.TemplateDefinitionBuilder;\n// Schema containing DOM elements and their properties.\nconst domSchema = new DomElementSchemaRegistry();\n// Tag name of the `ng-template` element.\nconst NG_TEMPLATE_TAG_NAME$1 = 'ng-template';\n/**\n * Process a template AST and convert it into a `ComponentCompilation` in the intermediate\n * representation.\n * TODO: Refactor more of the ingestion code into phases.\n */\nfunction ingestComponent(componentName, template, constantPool, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta) {\n  const job = new ComponentCompilationJob(componentName, constantPool, compatibilityMode, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta);\n  ingestNodes(job.root, template);\n  return job;\n}\n/**\n * Process a host binding AST and convert it into a `HostBindingCompilationJob` in the intermediate\n * representation.\n */\nfunction ingestHostBinding(input, bindingParser, constantPool) {\n  const job = new HostBindingCompilationJob(input.componentName, constantPool, compatibilityMode);\n  for (const property of input.properties ?? []) {\n    let bindingKind = BindingKind.Property;\n    // TODO: this should really be handled in the parser.\n    if (property.name.startsWith('attr.')) {\n      property.name = property.name.substring('attr.'.length);\n      bindingKind = BindingKind.Attribute;\n    }\n    if (property.isAnimation) {\n      bindingKind = BindingKind.Animation;\n    }\n    const securityContexts = bindingParser.calcPossibleSecurityContexts(input.componentSelector, property.name, bindingKind === BindingKind.Attribute).filter(context => context !== SecurityContext.NONE);\n    ingestHostProperty(job, property, bindingKind, securityContexts);\n  }\n  for (const [name, expr] of Object.entries(input.attributes) ?? []) {\n    const securityContexts = bindingParser.calcPossibleSecurityContexts(input.componentSelector, name, true).filter(context => context !== SecurityContext.NONE);\n    ingestHostAttribute(job, name, expr, securityContexts);\n  }\n  for (const event of input.events ?? []) {\n    ingestHostEvent(job, event);\n  }\n  return job;\n}\n// TODO: We should refactor the parser to use the same types and structures for host bindings as\n// with ordinary components. This would allow us to share a lot more ingestion code.\nfunction ingestHostProperty(job, property, bindingKind, securityContexts) {\n  let expression;\n  const ast = property.expression.ast;\n  if (ast instanceof Interpolation$1) {\n    expression = new Interpolation(ast.strings, ast.expressions.map(expr => convertAst(expr, job, property.sourceSpan)), []);\n  } else {\n    expression = convertAst(ast, job, property.sourceSpan);\n  }\n  job.root.update.push(createBindingOp(job.root.xref, bindingKind, property.name, expression, null, securityContexts, false, false, null, /* TODO: How do Host bindings handle i18n attrs? */null, property.sourceSpan));\n}\nfunction ingestHostAttribute(job, name, value, securityContexts) {\n  const attrBinding = createBindingOp(job.root.xref, BindingKind.Attribute, name, value, null, securityContexts,\n  /* Host attributes should always be extracted to const hostAttrs, even if they are not\n   *strictly* text literals */\n  true, false, null, /* TODO */null, /** TODO: May be null? */value.sourceSpan);\n  job.root.update.push(attrBinding);\n}\nfunction ingestHostEvent(job, event) {\n  const [phase, target] = event.type === 0 /* e.ParsedEventType.Regular */ ? [null, event.targetOrPhase] : [event.targetOrPhase, null];\n  const eventBinding = createListenerOp(job.root.xref, new SlotHandle(), event.name, null, makeListenerHandlerOps(job.root, event.handler, event.handlerSpan), phase, target, true, event.sourceSpan);\n  job.root.create.push(eventBinding);\n}\n/**\n * Ingest the nodes of a template AST into the given `ViewCompilation`.\n */\nfunction ingestNodes(unit, template) {\n  for (const node of template) {\n    if (node instanceof Element$1) {\n      ingestElement(unit, node);\n    } else if (node instanceof Template) {\n      ingestTemplate(unit, node);\n    } else if (node instanceof Content) {\n      ingestContent(unit, node);\n    } else if (node instanceof Text$3) {\n      ingestText(unit, node, null);\n    } else if (node instanceof BoundText) {\n      ingestBoundText(unit, node, null);\n    } else if (node instanceof IfBlock) {\n      ingestIfBlock(unit, node);\n    } else if (node instanceof SwitchBlock) {\n      ingestSwitchBlock(unit, node);\n    } else if (node instanceof DeferredBlock) {\n      ingestDeferBlock(unit, node);\n    } else if (node instanceof Icu$1) {\n      ingestIcu(unit, node);\n    } else if (node instanceof ForLoopBlock) {\n      ingestForBlock(unit, node);\n    } else {\n      throw new Error(`Unsupported template node: ${node.constructor.name}`);\n    }\n  }\n}\n/**\n * Ingest an element AST from the template into the given `ViewCompilation`.\n */\nfunction ingestElement(unit, element) {\n  if (element.i18n !== undefined && !(element.i18n instanceof Message || element.i18n instanceof TagPlaceholder)) {\n    throw Error(`Unhandled i18n metadata type for element: ${element.i18n.constructor.name}`);\n  }\n  const id = unit.job.allocateXrefId();\n  const [namespaceKey, elementName] = splitNsName(element.name);\n  const startOp = createElementStartOp(elementName, id, namespaceForKey(namespaceKey), element.i18n instanceof TagPlaceholder ? element.i18n : undefined, element.startSourceSpan, element.sourceSpan);\n  unit.create.push(startOp);\n  ingestElementBindings(unit, startOp, element);\n  ingestReferences(startOp, element);\n  // Start i18n, if needed, goes after the element create and bindings, but before the nodes\n  let i18nBlockId = null;\n  if (element.i18n instanceof Message) {\n    i18nBlockId = unit.job.allocateXrefId();\n    unit.create.push(createI18nStartOp(i18nBlockId, element.i18n, undefined, element.startSourceSpan));\n  }\n  ingestNodes(unit, element.children);\n  // The source span for the end op is typically the element closing tag. However, if no closing tag\n  // exists, such as in `<input>`, we use the start source span instead. Usually the start and end\n  // instructions will be collapsed into one `element` instruction, negating the purpose of this\n  // fallback, but in cases when it is not collapsed (such as an input with a binding), we still\n  // want to map the end instruction to the main element.\n  const endOp = createElementEndOp(id, element.endSourceSpan ?? element.startSourceSpan);\n  unit.create.push(endOp);\n  // If there is an i18n message associated with this element, insert i18n start and end ops.\n  if (i18nBlockId !== null) {\n    OpList.insertBefore(createI18nEndOp(i18nBlockId, element.endSourceSpan ?? element.startSourceSpan), endOp);\n  }\n}\n/**\n * Ingest an `ng-template` node from the AST into the given `ViewCompilation`.\n */\nfunction ingestTemplate(unit, tmpl) {\n  if (tmpl.i18n !== undefined && !(tmpl.i18n instanceof Message || tmpl.i18n instanceof TagPlaceholder)) {\n    throw Error(`Unhandled i18n metadata type for template: ${tmpl.i18n.constructor.name}`);\n  }\n  const childView = unit.job.allocateView(unit.xref);\n  let tagNameWithoutNamespace = tmpl.tagName;\n  let namespacePrefix = '';\n  if (tmpl.tagName) {\n    [namespacePrefix, tagNameWithoutNamespace] = splitNsName(tmpl.tagName);\n  }\n  const i18nPlaceholder = tmpl.i18n instanceof TagPlaceholder ? tmpl.i18n : undefined;\n  const namespace = namespaceForKey(namespacePrefix);\n  const functionNameSuffix = tagNameWithoutNamespace === null ? '' : prefixWithNamespace(tagNameWithoutNamespace, namespace);\n  const templateKind = isPlainTemplate(tmpl) ? TemplateKind.NgTemplate : TemplateKind.Structural;\n  const templateOp = createTemplateOp(childView.xref, templateKind, tagNameWithoutNamespace, functionNameSuffix, namespace, i18nPlaceholder, tmpl.startSourceSpan, tmpl.sourceSpan);\n  unit.create.push(templateOp);\n  ingestTemplateBindings(unit, templateOp, tmpl, templateKind);\n  ingestReferences(templateOp, tmpl);\n  ingestNodes(childView, tmpl.children);\n  for (const {\n    name,\n    value\n  } of tmpl.variables) {\n    childView.contextVariables.set(name, value !== '' ? value : '$implicit');\n  }\n  // If this is a plain template and there is an i18n message associated with it, insert i18n start\n  // and end ops. For structural directive templates, the i18n ops will be added when ingesting the\n  // element/template the directive is placed on.\n  if (templateKind === TemplateKind.NgTemplate && tmpl.i18n instanceof Message) {\n    const id = unit.job.allocateXrefId();\n    OpList.insertAfter(createI18nStartOp(id, tmpl.i18n, undefined, tmpl.startSourceSpan), childView.create.head);\n    OpList.insertBefore(createI18nEndOp(id, tmpl.endSourceSpan ?? tmpl.startSourceSpan), childView.create.tail);\n  }\n}\n/**\n * Ingest a content node from the AST into the given `ViewCompilation`.\n */\nfunction ingestContent(unit, content) {\n  if (content.i18n !== undefined && !(content.i18n instanceof TagPlaceholder)) {\n    throw Error(`Unhandled i18n metadata type for element: ${content.i18n.constructor.name}`);\n  }\n  const op = createProjectionOp(unit.job.allocateXrefId(), content.selector, content.i18n, content.sourceSpan);\n  for (const attr of content.attributes) {\n    const securityContext = domSchema.securityContext(content.name, attr.name, true);\n    unit.update.push(createBindingOp(op.xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));\n  }\n  unit.create.push(op);\n}\n/**\n * Ingest a literal text node from the AST into the given `ViewCompilation`.\n */\nfunction ingestText(unit, text, icuPlaceholder) {\n  unit.create.push(createTextOp(unit.job.allocateXrefId(), text.value, icuPlaceholder, text.sourceSpan));\n}\n/**\n * Ingest an interpolated text node from the AST into the given `ViewCompilation`.\n */\nfunction ingestBoundText(unit, text, icuPlaceholder) {\n  let value = text.value;\n  if (value instanceof ASTWithSource) {\n    value = value.ast;\n  }\n  if (!(value instanceof Interpolation$1)) {\n    throw new Error(`AssertionError: expected Interpolation for BoundText node, got ${value.constructor.name}`);\n  }\n  if (text.i18n !== undefined && !(text.i18n instanceof Container)) {\n    throw Error(`Unhandled i18n metadata type for text interpolation: ${text.i18n?.constructor.name}`);\n  }\n  const i18nPlaceholders = text.i18n instanceof Container ? text.i18n.children.filter(node => node instanceof Placeholder).map(placeholder => placeholder.name) : [];\n  if (i18nPlaceholders.length > 0 && i18nPlaceholders.length !== value.expressions.length) {\n    throw Error(`Unexpected number of i18n placeholders (${value.expressions.length}) for BoundText with ${value.expressions.length} expressions`);\n  }\n  const textXref = unit.job.allocateXrefId();\n  unit.create.push(createTextOp(textXref, '', icuPlaceholder, text.sourceSpan));\n  // TemplateDefinitionBuilder does not generate source maps for sub-expressions inside an\n  // interpolation. We copy that behavior in compatibility mode.\n  // TODO: is it actually correct to generate these extra maps in modern mode?\n  const baseSourceSpan = unit.job.compatibility ? null : text.sourceSpan;\n  unit.update.push(createInterpolateTextOp(textXref, new Interpolation(value.strings, value.expressions.map(expr => convertAst(expr, unit.job, baseSourceSpan)), i18nPlaceholders), text.sourceSpan));\n}\n/**\n * Ingest an `@if` block into the given `ViewCompilation`.\n */\nfunction ingestIfBlock(unit, ifBlock) {\n  let firstXref = null;\n  let firstSlotHandle = null;\n  let conditions = [];\n  for (let i = 0; i < ifBlock.branches.length; i++) {\n    const ifCase = ifBlock.branches[i];\n    const cView = unit.job.allocateView(unit.xref);\n    let tagName = null;\n    // Only the first branch can be used for projection, because the conditional\n    // uses the container of the first branch as the insertion point for all branches.\n    if (i === 0) {\n      tagName = ingestControlFlowInsertionPoint(unit, cView.xref, ifCase);\n    }\n    if (ifCase.expressionAlias !== null) {\n      cView.contextVariables.set(ifCase.expressionAlias.name, CTX_REF);\n    }\n    let ifCaseI18nMeta = undefined;\n    if (ifCase.i18n !== undefined) {\n      if (!(ifCase.i18n instanceof BlockPlaceholder)) {\n        throw Error(`Unhandled i18n metadata type for if block: ${ifCase.i18n?.constructor.name}`);\n      }\n      ifCaseI18nMeta = ifCase.i18n;\n    }\n    const templateOp = createTemplateOp(cView.xref, TemplateKind.Block, tagName, 'Conditional', Namespace.HTML, ifCaseI18nMeta, ifCase.startSourceSpan, ifCase.sourceSpan);\n    unit.create.push(templateOp);\n    if (firstXref === null) {\n      firstXref = cView.xref;\n      firstSlotHandle = templateOp.handle;\n    }\n    const caseExpr = ifCase.expression ? convertAst(ifCase.expression, unit.job, null) : null;\n    const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, templateOp.xref, templateOp.handle, ifCase.expressionAlias);\n    conditions.push(conditionalCaseExpr);\n    ingestNodes(cView, ifCase.children);\n  }\n  const conditional = createConditionalOp(firstXref, firstSlotHandle, null, conditions, ifBlock.sourceSpan);\n  unit.update.push(conditional);\n}\n/**\n * Ingest an `@switch` block into the given `ViewCompilation`.\n */\nfunction ingestSwitchBlock(unit, switchBlock) {\n  // Don't ingest empty switches since they won't render anything.\n  if (switchBlock.cases.length === 0) {\n    return;\n  }\n  let firstXref = null;\n  let firstSlotHandle = null;\n  let conditions = [];\n  for (const switchCase of switchBlock.cases) {\n    const cView = unit.job.allocateView(unit.xref);\n    let switchCaseI18nMeta = undefined;\n    if (switchCase.i18n !== undefined) {\n      if (!(switchCase.i18n instanceof BlockPlaceholder)) {\n        throw Error(`Unhandled i18n metadata type for switch block: ${switchCase.i18n?.constructor.name}`);\n      }\n      switchCaseI18nMeta = switchCase.i18n;\n    }\n    const templateOp = createTemplateOp(cView.xref, TemplateKind.Block, null, 'Case', Namespace.HTML, switchCaseI18nMeta, switchCase.startSourceSpan, switchCase.sourceSpan);\n    unit.create.push(templateOp);\n    if (firstXref === null) {\n      firstXref = cView.xref;\n      firstSlotHandle = templateOp.handle;\n    }\n    const caseExpr = switchCase.expression ? convertAst(switchCase.expression, unit.job, switchBlock.startSourceSpan) : null;\n    const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, templateOp.xref, templateOp.handle);\n    conditions.push(conditionalCaseExpr);\n    ingestNodes(cView, switchCase.children);\n  }\n  const conditional = createConditionalOp(firstXref, firstSlotHandle, convertAst(switchBlock.expression, unit.job, null), conditions, switchBlock.sourceSpan);\n  unit.update.push(conditional);\n}\nfunction ingestDeferView(unit, suffix, i18nMeta, children, sourceSpan) {\n  if (i18nMeta !== undefined && !(i18nMeta instanceof BlockPlaceholder)) {\n    throw Error('Unhandled i18n metadata type for defer block');\n  }\n  if (children === undefined) {\n    return null;\n  }\n  const secondaryView = unit.job.allocateView(unit.xref);\n  ingestNodes(secondaryView, children);\n  const templateOp = createTemplateOp(secondaryView.xref, TemplateKind.Block, null, `Defer${suffix}`, Namespace.HTML, i18nMeta, sourceSpan, sourceSpan);\n  unit.create.push(templateOp);\n  return templateOp;\n}\nfunction ingestDeferBlock(unit, deferBlock) {\n  const blockMeta = unit.job.deferBlocksMeta.get(deferBlock);\n  if (blockMeta === undefined) {\n    throw new Error(`AssertionError: unable to find metadata for deferred block`);\n  }\n  // Generate the defer main view and all secondary views.\n  const main = ingestDeferView(unit, '', deferBlock.i18n, deferBlock.children, deferBlock.sourceSpan);\n  const loading = ingestDeferView(unit, 'Loading', deferBlock.loading?.i18n, deferBlock.loading?.children, deferBlock.loading?.sourceSpan);\n  const placeholder = ingestDeferView(unit, 'Placeholder', deferBlock.placeholder?.i18n, deferBlock.placeholder?.children, deferBlock.placeholder?.sourceSpan);\n  const error = ingestDeferView(unit, 'Error', deferBlock.error?.i18n, deferBlock.error?.children, deferBlock.error?.sourceSpan);\n  // Create the main defer op, and ops for all secondary views.\n  const deferXref = unit.job.allocateXrefId();\n  const deferOp = createDeferOp(deferXref, main.xref, main.handle, blockMeta, deferBlock.sourceSpan);\n  deferOp.placeholderView = placeholder?.xref ?? null;\n  deferOp.placeholderSlot = placeholder?.handle ?? null;\n  deferOp.loadingSlot = loading?.handle ?? null;\n  deferOp.errorSlot = error?.handle ?? null;\n  deferOp.placeholderMinimumTime = deferBlock.placeholder?.minimumTime ?? null;\n  deferOp.loadingMinimumTime = deferBlock.loading?.minimumTime ?? null;\n  deferOp.loadingAfterTime = deferBlock.loading?.afterTime ?? null;\n  unit.create.push(deferOp);\n  // Configure all defer `on` conditions.\n  // TODO: refactor prefetch triggers to use a separate op type, with a shared superclass. This will\n  // make it easier to refactor prefetch behavior in the future.\n  let prefetch = false;\n  let deferOnOps = [];\n  let deferWhenOps = [];\n  for (const triggers of [deferBlock.triggers, deferBlock.prefetchTriggers]) {\n    if (triggers.idle !== undefined) {\n      const deferOnOp = createDeferOnOp(deferXref, {\n        kind: DeferTriggerKind.Idle\n      }, prefetch, triggers.idle.sourceSpan);\n      deferOnOps.push(deferOnOp);\n    }\n    if (triggers.immediate !== undefined) {\n      const deferOnOp = createDeferOnOp(deferXref, {\n        kind: DeferTriggerKind.Immediate\n      }, prefetch, triggers.immediate.sourceSpan);\n      deferOnOps.push(deferOnOp);\n    }\n    if (triggers.timer !== undefined) {\n      const deferOnOp = createDeferOnOp(deferXref, {\n        kind: DeferTriggerKind.Timer,\n        delay: triggers.timer.delay\n      }, prefetch, triggers.timer.sourceSpan);\n      deferOnOps.push(deferOnOp);\n    }\n    if (triggers.hover !== undefined) {\n      const deferOnOp = createDeferOnOp(deferXref, {\n        kind: DeferTriggerKind.Hover,\n        targetName: triggers.hover.reference,\n        targetXref: null,\n        targetSlot: null,\n        targetView: null,\n        targetSlotViewSteps: null\n      }, prefetch, triggers.hover.sourceSpan);\n      deferOnOps.push(deferOnOp);\n    }\n    if (triggers.interaction !== undefined) {\n      const deferOnOp = createDeferOnOp(deferXref, {\n        kind: DeferTriggerKind.Interaction,\n        targetName: triggers.interaction.reference,\n        targetXref: null,\n        targetSlot: null,\n        targetView: null,\n        targetSlotViewSteps: null\n      }, prefetch, triggers.interaction.sourceSpan);\n      deferOnOps.push(deferOnOp);\n    }\n    if (triggers.viewport !== undefined) {\n      const deferOnOp = createDeferOnOp(deferXref, {\n        kind: DeferTriggerKind.Viewport,\n        targetName: triggers.viewport.reference,\n        targetXref: null,\n        targetSlot: null,\n        targetView: null,\n        targetSlotViewSteps: null\n      }, prefetch, triggers.viewport.sourceSpan);\n      deferOnOps.push(deferOnOp);\n    }\n    if (triggers.when !== undefined) {\n      if (triggers.when.value instanceof Interpolation$1) {\n        // TemplateDefinitionBuilder supports this case, but it's very strange to me. What would it\n        // even mean?\n        throw new Error(`Unexpected interpolation in defer block when trigger`);\n      }\n      const deferOnOp = createDeferWhenOp(deferXref, convertAst(triggers.when.value, unit.job, triggers.when.sourceSpan), prefetch, triggers.when.sourceSpan);\n      deferWhenOps.push(deferOnOp);\n    }\n    // If no (non-prefetching) defer triggers were provided, default to `idle`.\n    if (deferOnOps.length === 0 && deferWhenOps.length === 0) {\n      deferOnOps.push(createDeferOnOp(deferXref, {\n        kind: DeferTriggerKind.Idle\n      }, false, null));\n    }\n    prefetch = true;\n  }\n  unit.create.push(deferOnOps);\n  unit.update.push(deferWhenOps);\n}\nfunction ingestIcu(unit, icu) {\n  if (icu.i18n instanceof Message && isSingleI18nIcu(icu.i18n)) {\n    const xref = unit.job.allocateXrefId();\n    const icuNode = icu.i18n.nodes[0];\n    unit.create.push(createIcuStartOp(xref, icu.i18n, icuFromI18nMessage(icu.i18n).name, null));\n    for (const [placeholder, text] of Object.entries({\n      ...icu.vars,\n      ...icu.placeholders\n    })) {\n      if (text instanceof BoundText) {\n        ingestBoundText(unit, text, placeholder);\n      } else {\n        ingestText(unit, text, placeholder);\n      }\n    }\n    unit.create.push(createIcuEndOp(xref));\n  } else {\n    throw Error(`Unhandled i18n metadata type for ICU: ${icu.i18n?.constructor.name}`);\n  }\n}\n/**\n * Ingest an `@for` block into the given `ViewCompilation`.\n */\nfunction ingestForBlock(unit, forBlock) {\n  const repeaterView = unit.job.allocateView(unit.xref);\n  // Set all the context variables and aliases available in the repeater.\n  repeaterView.contextVariables.set(forBlock.item.name, forBlock.item.value);\n  repeaterView.contextVariables.set(forBlock.contextVariables.$index.name, forBlock.contextVariables.$index.value);\n  repeaterView.contextVariables.set(forBlock.contextVariables.$count.name, forBlock.contextVariables.$count.value);\n  // We copy TemplateDefinitionBuilder's scheme of creating names for `$count` and `$index` that are\n  // suffixed with special information, to disambiguate which level of nested loop the below aliases\n  // refer to.\n  // TODO: We should refactor Template Pipeline's variable phases to gracefully handle shadowing,\n  // and arbitrarily many levels of variables depending on each other.\n  const indexName = `ɵ${forBlock.contextVariables.$index.name}_${repeaterView.xref}`;\n  const countName = `ɵ${forBlock.contextVariables.$count.name}_${repeaterView.xref}`;\n  repeaterView.contextVariables.set(indexName, forBlock.contextVariables.$index.value);\n  repeaterView.contextVariables.set(countName, forBlock.contextVariables.$count.value);\n  repeaterView.aliases.add({\n    kind: SemanticVariableKind.Alias,\n    name: null,\n    identifier: forBlock.contextVariables.$first.name,\n    expression: new LexicalReadExpr(indexName).identical(literal(0))\n  });\n  repeaterView.aliases.add({\n    kind: SemanticVariableKind.Alias,\n    name: null,\n    identifier: forBlock.contextVariables.$last.name,\n    expression: new LexicalReadExpr(indexName).identical(new LexicalReadExpr(countName).minus(literal(1)))\n  });\n  repeaterView.aliases.add({\n    kind: SemanticVariableKind.Alias,\n    name: null,\n    identifier: forBlock.contextVariables.$even.name,\n    expression: new LexicalReadExpr(indexName).modulo(literal(2)).identical(literal(0))\n  });\n  repeaterView.aliases.add({\n    kind: SemanticVariableKind.Alias,\n    name: null,\n    identifier: forBlock.contextVariables.$odd.name,\n    expression: new LexicalReadExpr(indexName).modulo(literal(2)).notIdentical(literal(0))\n  });\n  const sourceSpan = convertSourceSpan(forBlock.trackBy.span, forBlock.sourceSpan);\n  const track = convertAst(forBlock.trackBy, unit.job, sourceSpan);\n  ingestNodes(repeaterView, forBlock.children);\n  let emptyView = null;\n  let emptyTagName = null;\n  if (forBlock.empty !== null) {\n    emptyView = unit.job.allocateView(unit.xref);\n    ingestNodes(emptyView, forBlock.empty.children);\n    emptyTagName = ingestControlFlowInsertionPoint(unit, emptyView.xref, forBlock.empty);\n  }\n  const varNames = {\n    $index: forBlock.contextVariables.$index.name,\n    $count: forBlock.contextVariables.$count.name,\n    $first: forBlock.contextVariables.$first.name,\n    $last: forBlock.contextVariables.$last.name,\n    $even: forBlock.contextVariables.$even.name,\n    $odd: forBlock.contextVariables.$odd.name,\n    $implicit: forBlock.item.name\n  };\n  if (forBlock.i18n !== undefined && !(forBlock.i18n instanceof BlockPlaceholder)) {\n    throw Error('AssertionError: Unhandled i18n metadata type or @for');\n  }\n  if (forBlock.empty?.i18n !== undefined && !(forBlock.empty.i18n instanceof BlockPlaceholder)) {\n    throw Error('AssertionError: Unhandled i18n metadata type or @empty');\n  }\n  const i18nPlaceholder = forBlock.i18n;\n  const emptyI18nPlaceholder = forBlock.empty?.i18n;\n  const tagName = ingestControlFlowInsertionPoint(unit, repeaterView.xref, forBlock);\n  const repeaterCreate = createRepeaterCreateOp(repeaterView.xref, emptyView?.xref ?? null, tagName, track, varNames, emptyTagName, i18nPlaceholder, emptyI18nPlaceholder, forBlock.startSourceSpan, forBlock.sourceSpan);\n  unit.create.push(repeaterCreate);\n  const expression = convertAst(forBlock.expression, unit.job, convertSourceSpan(forBlock.expression.span, forBlock.sourceSpan));\n  const repeater = createRepeaterOp(repeaterCreate.xref, repeaterCreate.handle, expression, forBlock.sourceSpan);\n  unit.update.push(repeater);\n}\n/**\n * Convert a template AST expression into an output AST expression.\n */\nfunction convertAst(ast, job, baseSourceSpan) {\n  if (ast instanceof ASTWithSource) {\n    return convertAst(ast.ast, job, baseSourceSpan);\n  } else if (ast instanceof PropertyRead) {\n    const isThisReceiver = ast.receiver instanceof ThisReceiver;\n    // Whether this is an implicit receiver, *excluding* explicit reads of `this`.\n    const isImplicitReceiver = ast.receiver instanceof ImplicitReceiver && !(ast.receiver instanceof ThisReceiver);\n    // Whether the  name of the read is a node that should be never retain its explicit this\n    // receiver.\n    const isSpecialNode = ast.name === '$any' || ast.name === '$event';\n    // TODO: The most sensible condition here would be simply `isImplicitReceiver`, to convert only\n    // actual implicit `this` reads, and not explicit ones. However, TemplateDefinitionBuilder (and\n    // the Typecheck block!) both have the same bug, in which they also consider explicit `this`\n    // reads to be implicit. This causes problems when the explicit `this` read is inside a\n    // template with a context that also provides the variable name being read:\n    // ```\n    // <ng-template let-a>{{this.a}}</ng-template>\n    // ```\n    // The whole point of the explicit `this` was to access the class property, but TDB and the\n    // current TCB treat the read as implicit, and give you the context property instead!\n    //\n    // For now, we emulate this old behvaior by aggressively converting explicit reads to to\n    // implicit reads, except for the special cases that TDB and the current TCB protect. However,\n    // it would be an improvement to fix this.\n    //\n    // See also the corresponding comment for the TCB, in `type_check_block.ts`.\n    if (isImplicitReceiver || isThisReceiver && !isSpecialNode) {\n      return new LexicalReadExpr(ast.name);\n    } else {\n      return new ReadPropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, null, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n  } else if (ast instanceof PropertyWrite) {\n    if (ast.receiver instanceof ImplicitReceiver) {\n      return new WritePropExpr(\n      // TODO: Is it correct to always use the root context in place of the implicit receiver?\n      new ContextExpr(job.root.xref), ast.name, convertAst(ast.value, job, baseSourceSpan), null, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    return new WritePropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, convertAst(ast.value, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof KeyedWrite) {\n    return new WriteKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertAst(ast.value, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof Call) {\n    if (ast.receiver instanceof ImplicitReceiver) {\n      throw new Error(`Unexpected ImplicitReceiver`);\n    } else {\n      return new InvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map(arg => convertAst(arg, job, baseSourceSpan)), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n  } else if (ast instanceof LiteralPrimitive) {\n    return literal(ast.value, undefined, convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof Unary) {\n    switch (ast.operator) {\n      case '+':\n        return new UnaryOperatorExpr(UnaryOperator.Plus, convertAst(ast.expr, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n      case '-':\n        return new UnaryOperatorExpr(UnaryOperator.Minus, convertAst(ast.expr, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n      default:\n        throw new Error(`AssertionError: unknown unary operator ${ast.operator}`);\n    }\n  } else if (ast instanceof Binary) {\n    const operator = BINARY_OPERATORS.get(ast.operation);\n    if (operator === undefined) {\n      throw new Error(`AssertionError: unknown binary operator ${ast.operation}`);\n    }\n    return new BinaryOperatorExpr(operator, convertAst(ast.left, job, baseSourceSpan), convertAst(ast.right, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof ThisReceiver) {\n    // TODO: should context expressions have source maps?\n    return new ContextExpr(job.root.xref);\n  } else if (ast instanceof KeyedRead) {\n    return new ReadKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof Chain) {\n    throw new Error(`AssertionError: Chain in unknown context`);\n  } else if (ast instanceof LiteralMap) {\n    const entries = ast.keys.map((key, idx) => {\n      const value = ast.values[idx];\n      // TODO: should literals have source maps, or do we just map the whole surrounding\n      // expression?\n      return new LiteralMapEntry(key.key, convertAst(value, job, baseSourceSpan), key.quoted);\n    });\n    return new LiteralMapExpr(entries, undefined, convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof LiteralArray) {\n    // TODO: should literals have source maps, or do we just map the whole surrounding expression?\n    return new LiteralArrayExpr(ast.expressions.map(expr => convertAst(expr, job, baseSourceSpan)));\n  } else if (ast instanceof Conditional) {\n    return new ConditionalExpr(convertAst(ast.condition, job, baseSourceSpan), convertAst(ast.trueExp, job, baseSourceSpan), convertAst(ast.falseExp, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof NonNullAssert) {\n    // A non-null assertion shouldn't impact generated instructions, so we can just drop it.\n    return convertAst(ast.expression, job, baseSourceSpan);\n  } else if (ast instanceof BindingPipe) {\n    // TODO: pipes should probably have source maps; figure out details.\n    return new PipeBindingExpr(job.allocateXrefId(), new SlotHandle(), ast.name, [convertAst(ast.exp, job, baseSourceSpan), ...ast.args.map(arg => convertAst(arg, job, baseSourceSpan))]);\n  } else if (ast instanceof SafeKeyedRead) {\n    return new SafeKeyedReadExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof SafePropertyRead) {\n    // TODO: source span\n    return new SafePropertyReadExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name);\n  } else if (ast instanceof SafeCall) {\n    // TODO: source span\n    return new SafeInvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map(a => convertAst(a, job, baseSourceSpan)));\n  } else if (ast instanceof EmptyExpr$1) {\n    return new EmptyExpr(convertSourceSpan(ast.span, baseSourceSpan));\n  } else if (ast instanceof PrefixNot) {\n    return not(convertAst(ast.expression, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));\n  } else {\n    throw new Error(`Unhandled expression type \"${ast.constructor.name}\" in file \"${baseSourceSpan?.start.file.url}\"`);\n  }\n}\nfunction convertAstWithInterpolation(job, value, i18nMeta, sourceSpan) {\n  let expression;\n  if (value instanceof Interpolation$1) {\n    expression = new Interpolation(value.strings, value.expressions.map(e => convertAst(e, job, sourceSpan ?? null)), Object.keys(asMessage(i18nMeta)?.placeholders ?? {}));\n  } else if (value instanceof AST) {\n    expression = convertAst(value, job, sourceSpan ?? null);\n  } else {\n    expression = literal(value);\n  }\n  return expression;\n}\n// TODO: Can we populate Template binding kinds in ingest?\nconst BINDING_KINDS = new Map([[0 /* e.BindingType.Property */, BindingKind.Property], [1 /* e.BindingType.Attribute */, BindingKind.Attribute], [2 /* e.BindingType.Class */, BindingKind.ClassName], [3 /* e.BindingType.Style */, BindingKind.StyleProperty], [4 /* e.BindingType.Animation */, BindingKind.Animation]]);\n/**\n * Checks whether the given template is a plain ng-template (as opposed to another kind of template\n * such as a structural directive template or control flow template). This is checked based on the\n * tagName. We can expect that only plain ng-templates will come through with a tagName of\n * 'ng-template'.\n *\n * Here are some of the cases we expect:\n *\n * | Angular HTML                       | Template tagName   |\n * | ---------------------------------- | ------------------ |\n * | `<ng-template>`                    | 'ng-template'      |\n * | `<div *ngIf=\"true\">`               | 'div'              |\n * | `<svg><ng-template>`               | 'svg:ng-template'  |\n * | `@if (true) {`                     | 'Conditional'      |\n * | `<ng-template *ngIf>` (plain)      | 'ng-template'      |\n * | `<ng-template *ngIf>` (structural) | null               |\n */\nfunction isPlainTemplate(tmpl) {\n  return splitNsName(tmpl.tagName ?? '')[1] === NG_TEMPLATE_TAG_NAME$1;\n}\n/**\n * Ensures that the i18nMeta, if provided, is an i18n.Message.\n */\nfunction asMessage(i18nMeta) {\n  if (i18nMeta == null) {\n    return null;\n  }\n  if (!(i18nMeta instanceof Message)) {\n    throw Error(`Expected i18n meta to be a Message, but got: ${i18nMeta.constructor.name}`);\n  }\n  return i18nMeta;\n}\n/**\n * Process all of the bindings on an element in the template AST and convert them to their IR\n * representation.\n */\nfunction ingestElementBindings(unit, op, element) {\n  let bindings = new Array();\n  for (const attr of element.attributes) {\n    // Attribute literal bindings, such as `attr.foo=\"bar\"`.\n    const securityContext = domSchema.securityContext(element.name, attr.name, true);\n    bindings.push(createBindingOp(op.xref, BindingKind.Attribute, attr.name, convertAstWithInterpolation(unit.job, attr.value, attr.i18n), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));\n  }\n  for (const input of element.inputs) {\n    // All dynamic bindings (both attribute and property bindings).\n    bindings.push(createBindingOp(op.xref, BINDING_KINDS.get(input.type), input.name, convertAstWithInterpolation(unit.job, astOf(input.value), input.i18n), input.unit, input.securityContext, false, false, null, asMessage(input.i18n) ?? null, input.sourceSpan));\n  }\n  unit.create.push(bindings.filter(b => b?.kind === OpKind.ExtractedAttribute));\n  unit.update.push(bindings.filter(b => b?.kind === OpKind.Binding));\n  for (const output of element.outputs) {\n    if (output.type === 1 /* e.ParsedEventType.Animation */ && output.phase === null) {\n      throw Error('Animation listener should have a phase');\n    }\n    unit.create.push(createListenerOp(op.xref, op.handle, output.name, op.tag, makeListenerHandlerOps(unit, output.handler, output.handlerSpan), output.phase, output.target, false, output.sourceSpan));\n  }\n  // If any of the bindings on this element have an i18n message, then an i18n attrs configuration\n  // op is also required.\n  if (bindings.some(b => b?.i18nMessage) !== null) {\n    unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op.xref));\n  }\n}\n/**\n * Process all of the bindings on a template in the template AST and convert them to their IR\n * representation.\n */\nfunction ingestTemplateBindings(unit, op, template, templateKind) {\n  let bindings = new Array();\n  for (const attr of template.templateAttrs) {\n    if (attr instanceof TextAttribute) {\n      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);\n      bindings.push(createTemplateBinding(unit, op.xref, 1 /* e.BindingType.Attribute */, attr.name, attr.value, null, securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));\n    } else {\n      bindings.push(createTemplateBinding(unit, op.xref, attr.type, attr.name, astOf(attr.value), attr.unit, attr.securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));\n    }\n  }\n  for (const attr of template.attributes) {\n    // Attribute literal bindings, such as `attr.foo=\"bar\"`.\n    const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);\n    bindings.push(createTemplateBinding(unit, op.xref, 1 /* e.BindingType.Attribute */, attr.name, attr.value, null, securityContext, false, templateKind, asMessage(attr.i18n), attr.sourceSpan));\n  }\n  for (const input of template.inputs) {\n    // Dynamic bindings (both attribute and property bindings).\n    bindings.push(createTemplateBinding(unit, op.xref, input.type, input.name, astOf(input.value), input.unit, input.securityContext, false, templateKind, asMessage(input.i18n), input.sourceSpan));\n  }\n  unit.create.push(bindings.filter(b => b?.kind === OpKind.ExtractedAttribute));\n  unit.update.push(bindings.filter(b => b?.kind === OpKind.Binding));\n  for (const output of template.outputs) {\n    if (output.type === 1 /* e.ParsedEventType.Animation */ && output.phase === null) {\n      throw Error('Animation listener should have a phase');\n    }\n    if (templateKind === TemplateKind.NgTemplate) {\n      unit.create.push(createListenerOp(op.xref, op.handle, output.name, op.tag, makeListenerHandlerOps(unit, output.handler, output.handlerSpan), output.phase, output.target, false, output.sourceSpan));\n    }\n    if (templateKind === TemplateKind.Structural && output.type !== 1 /* e.ParsedEventType.Animation */) {\n      // Animation bindings are excluded from the structural template's const array.\n      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, output.name, false);\n      unit.create.push(createExtractedAttributeOp(op.xref, BindingKind.Property, null, output.name, null, null, null, securityContext));\n    }\n  }\n  // TODO: Perhaps we could do this in a phase? (It likely wouldn't change the slot indices.)\n  if (bindings.some(b => b?.i18nMessage) !== null) {\n    unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op.xref));\n  }\n}\n/**\n * Helper to ingest an individual binding on a template, either an explicit `ng-template`, or an\n * implicit template created via structural directive.\n *\n * Bindings on templates are *extremely* tricky. I have tried to isolate all of the confusing edge\n * cases into this function, and to comment it well to document the behavior.\n *\n * Some of this behavior is intuitively incorrect, and we should consider changing it in the future.\n *\n * @param view The compilation unit for the view containing the template.\n * @param xref The xref of the template op.\n * @param type The binding type, according to the parser. This is fairly reasonable, e.g. both\n *     dynamic and static attributes have e.BindingType.Attribute.\n * @param name The binding's name.\n * @param value The bindings's value, which will either be an input AST expression, or a string\n *     literal. Note that the input AST expression may or may not be const -- it will only be a\n *     string literal if the parser considered it a text binding.\n * @param unit If the binding has a unit (e.g. `px` for style bindings), then this is the unit.\n * @param securityContext The security context of the binding.\n * @param isStructuralTemplateAttribute Whether this binding actually applies to the structural\n *     ng-template. For example, an `ngFor` would actually apply to the structural template. (Most\n *     bindings on structural elements target the inner element, not the template.)\n * @param templateKind Whether this is an explicit `ng-template` or an implicit template created by\n *     a structural directive. This should never be a block template.\n * @param i18nMessage The i18n metadata for the binding, if any.\n * @param sourceSpan The source span of the binding.\n * @returns An IR binding op, or null if the binding should be skipped.\n */\nfunction createTemplateBinding(view, xref, type, name, value, unit, securityContext, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {\n  const isTextBinding = typeof value === 'string';\n  // If this is a structural template, then several kinds of bindings should not result in an\n  // update instruction.\n  if (templateKind === TemplateKind.Structural) {\n    if (!isStructuralTemplateAttribute && (type === 0 /* e.BindingType.Property */ || type === 2 /* e.BindingType.Class */ || type === 3 /* e.BindingType.Style */)) {\n      // Because this binding doesn't really target the ng-template, it must be a binding on an\n      // inner node of a structural template. We can't skip it entirely, because we still need it on\n      // the ng-template's consts (e.g. for the purposes of directive matching). However, we should\n      // not generate an update instruction for it.\n      return createExtractedAttributeOp(xref, BindingKind.Property, null, name, null, null, i18nMessage, securityContext);\n    }\n    if (!isTextBinding && (type === 1 /* e.BindingType.Attribute */ || type === 4 /* e.BindingType.Animation */)) {\n      // Again, this binding doesn't really target the ng-template; it actually targets the element\n      // inside the structural template. In the case of non-text attribute or animation bindings,\n      // the binding doesn't even show up on the ng-template const array, so we just skip it\n      // entirely.\n      return null;\n    }\n  }\n  let bindingType = BINDING_KINDS.get(type);\n  if (templateKind === TemplateKind.NgTemplate) {\n    // We know we are dealing with bindings directly on an explicit ng-template.\n    // Static attribute bindings should be collected into the const array as k/v pairs. Property\n    // bindings should result in a `property` instruction, and `AttributeMarker.Bindings` const\n    // entries.\n    //\n    // The difficulty is with dynamic attribute, style, and class bindings. These don't really make\n    // sense on an `ng-template` and should probably be parser errors. However,\n    // TemplateDefinitionBuilder generates `property` instructions for them, and so we do that as\n    // well.\n    //\n    // Note that we do have a slight behavior difference with TemplateDefinitionBuilder: although\n    // TDB emits `property` instructions for dynamic attributes, styles, and classes, only styles\n    // and classes also get const collected into the `AttributeMarker.Bindings` field. Dynamic\n    // attribute bindings are missing from the consts entirely. We choose to emit them into the\n    // consts field anyway, to avoid creating special cases for something so arcane and nonsensical.\n    if (type === 2 /* e.BindingType.Class */ || type === 3 /* e.BindingType.Style */ || type === 1 /* e.BindingType.Attribute */ && !isTextBinding) {\n      // TODO: These cases should be parse errors.\n      bindingType = BindingKind.Property;\n    }\n  }\n  return createBindingOp(xref, bindingType, name, convertAstWithInterpolation(view.job, value, i18nMessage), unit, securityContext, isTextBinding, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan);\n}\nfunction makeListenerHandlerOps(unit, handler, handlerSpan) {\n  handler = astOf(handler);\n  const handlerOps = new Array();\n  let handlerExprs = handler instanceof Chain ? handler.expressions : [handler];\n  if (handlerExprs.length === 0) {\n    throw new Error('Expected listener to have non-empty expression list.');\n  }\n  const expressions = handlerExprs.map(expr => convertAst(expr, unit.job, handlerSpan));\n  const returnExpr = expressions.pop();\n  handlerOps.push(...expressions.map(e => createStatementOp(new ExpressionStatement(e, e.sourceSpan))));\n  handlerOps.push(createStatementOp(new ReturnStatement(returnExpr, returnExpr.sourceSpan)));\n  return handlerOps;\n}\nfunction astOf(ast) {\n  return ast instanceof ASTWithSource ? ast.ast : ast;\n}\n/**\n * Process all of the local references on an element-like structure in the template AST and\n * convert them to their IR representation.\n */\nfunction ingestReferences(op, element) {\n  assertIsArray(op.localRefs);\n  for (const {\n    name,\n    value\n  } of element.references) {\n    op.localRefs.push({\n      name,\n      target: value\n    });\n  }\n}\n/**\n * Assert that the given value is an array.\n */\nfunction assertIsArray(value) {\n  if (!Array.isArray(value)) {\n    throw new Error(`AssertionError: expected an array`);\n  }\n}\n/**\n * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.\n *\n * `ParseSpan` objects are relative to the start of the expression.\n * This method converts these to full `ParseSourceSpan` objects that\n * show where the span is within the overall source file.\n *\n * @param span the relative span to convert.\n * @param baseSourceSpan a span corresponding to the base of the expression tree.\n * @returns a `ParseSourceSpan` for the given span or null if no `baseSourceSpan` was provided.\n */\nfunction convertSourceSpan(span, baseSourceSpan) {\n  if (baseSourceSpan === null) {\n    return null;\n  }\n  const start = baseSourceSpan.start.moveBy(span.start);\n  const end = baseSourceSpan.start.moveBy(span.end);\n  const fullStart = baseSourceSpan.fullStart.moveBy(span.start);\n  return new ParseSourceSpan(start, end, fullStart);\n}\n/**\n * With the directive-based control flow users were able to conditionally project content using\n * the `*` syntax. E.g. `<div *ngIf=\"expr\" projectMe></div>` will be projected into\n * `<ng-content select=\"[projectMe]\"/>`, because the attributes and tag name from the `div` are\n * copied to the template via the template creation instruction. With `@if` and `@for` that is\n * not the case, because the conditional is placed *around* elements, rather than *on* them.\n * The result is that content projection won't work in the same way if a user converts from\n * `*ngIf` to `@if`.\n *\n * This function aims to cover the most common case by doing the same copying when a control flow\n * node has *one and only one* root element or template node.\n *\n * This approach comes with some caveats:\n * 1. As soon as any other node is added to the root, the copying behavior won't work anymore.\n *    A diagnostic will be added to flag cases like this and to explain how to work around it.\n * 2. If `preserveWhitespaces` is enabled, it's very likely that indentation will break this\n *    workaround, because it'll include an additional text node as the first child. We can work\n *    around it here, but in a discussion it was decided not to, because the user explicitly opted\n *    into preserving the whitespace and we would have to drop it from the generated code.\n *    The diagnostic mentioned point #1 will flag such cases to users.\n *\n * @returns Tag name to be used for the control flow template.\n */\nfunction ingestControlFlowInsertionPoint(unit, xref, node) {\n  let root = null;\n  for (const child of node.children) {\n    // Skip over comment nodes.\n    if (child instanceof Comment$1) {\n      continue;\n    }\n    // We can only infer the tag name/attributes if there's a single root node.\n    if (root !== null) {\n      return null;\n    }\n    // Root nodes can only elements or templates with a tag name (e.g. `<div *foo></div>`).\n    if (child instanceof Element$1 || child instanceof Template && child.tagName !== null) {\n      root = child;\n    }\n  }\n  // If we've found a single root node, its tag name and *static* attributes can be copied\n  // to the surrounding template to be used for content projection. Note that it's important\n  // that we don't copy any bound attributes since they don't participate in content projection\n  // and they can be used in directive matching (in the case of `Template.templateAttrs`).\n  if (root !== null) {\n    for (const attr of root.attributes) {\n      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);\n      unit.update.push(createBindingOp(xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));\n    }\n    const tagName = root instanceof Element$1 ? root.name : root.tagName;\n    // Don't pass along `ng-template` tag name since it enables directive matching.\n    return tagName === NG_TEMPLATE_TAG_NAME$1 ? null : tagName;\n  }\n  return null;\n}\nconst USE_TEMPLATE_PIPELINE = false;\nconst IMPORTANT_FLAG = '!important';\n/**\n * Minimum amount of binding slots required in the runtime for style/class bindings.\n *\n * Styling in Angular uses up two slots in the runtime LView/TData data structures to\n * record binding data, property information and metadata.\n *\n * When a binding is registered it will place the following information in the `LView`:\n *\n * slot 1) binding value\n * slot 2) cached value (all other values collected before it in string form)\n *\n * When a binding is registered it will place the following information in the `TData`:\n *\n * slot 1) prop name\n * slot 2) binding index that points to the previous style/class binding (and some extra config\n * values)\n *\n * Let's imagine we have a binding that looks like so:\n *\n * ```\n * <div [style.width]=\"x\" [style.height]=\"y\">\n * ```\n *\n * Our `LView` and `TData` data-structures look like so:\n *\n * ```typescript\n * LView = [\n *   // ...\n *   x, // value of x\n *   \"width: x\",\n *\n *   y, // value of y\n *   \"width: x; height: y\",\n *   // ...\n * ];\n *\n * TData = [\n *   // ...\n *   \"width\", // binding slot 20\n *   0,\n *\n *   \"height\",\n *   20,\n *   // ...\n * ];\n * ```\n *\n * */\nconst MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;\n/**\n * Produces creation/update instructions for all styling bindings (class and style)\n *\n * It also produces the creation instruction to register all initial styling values\n * (which are all the static class=\"...\" and style=\"...\" attribute values that exist\n * on an element within a template).\n *\n * The builder class below handles producing instructions for the following cases:\n *\n * - Static style/class attributes (style=\"...\" and class=\"...\")\n * - Dynamic style/class map bindings ([style]=\"map\" and [class]=\"map|string\")\n * - Dynamic style/class property bindings ([style.prop]=\"exp\" and [class.name]=\"exp\")\n *\n * Due to the complex relationship of all of these cases, the instructions generated\n * for these attributes/properties/bindings must be done so in the correct order. The\n * order which these must be generated is as follows:\n *\n * if (createMode) {\n *   styling(...)\n * }\n * if (updateMode) {\n *   styleMap(...)\n *   classMap(...)\n *   styleProp(...)\n *   classProp(...)\n * }\n *\n * The creation/update methods within the builder class produce these instructions.\n */\nclass StylingBuilder {\n  constructor(_directiveExpr) {\n    this._directiveExpr = _directiveExpr;\n    /** Whether or not there are any static styling values present */\n    this._hasInitialValues = false;\n    /**\n     *  Whether or not there are any styling bindings present\n     *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)\n     */\n    this.hasBindings = false;\n    this.hasBindingsWithPipes = false;\n    /** the input for [class] (if it exists) */\n    this._classMapInput = null;\n    /** the input for [style] (if it exists) */\n    this._styleMapInput = null;\n    /** an array of each [style.prop] input */\n    this._singleStyleInputs = null;\n    /** an array of each [class.name] input */\n    this._singleClassInputs = null;\n    this._lastStylingInput = null;\n    this._firstStylingInput = null;\n    // maps are used instead of hash maps because a Map will\n    // retain the ordering of the keys\n    /**\n     * Represents the location of each style binding in the template\n     * (e.g. `<div [style.width]=\"w\" [style.height]=\"h\">` implies\n     * that `width=0` and `height=1`)\n     */\n    this._stylesIndex = new Map();\n    /**\n     * Represents the location of each class binding in the template\n     * (e.g. `<div [class.big]=\"b\" [class.hidden]=\"h\">` implies\n     * that `big=0` and `hidden=1`)\n     */\n    this._classesIndex = new Map();\n    this._initialStyleValues = [];\n    this._initialClassValues = [];\n  }\n  /**\n   * Registers a given input to the styling builder to be later used when producing AOT code.\n   *\n   * The code below will only accept the input if it is somehow tied to styling (whether it be\n   * style/class bindings or static style/class attributes).\n   */\n  registerBoundInput(input) {\n    // [attr.style] or [attr.class] are skipped in the code below,\n    // they should not be treated as styling-based bindings since\n    // they are intended to be written directly to the attr and\n    // will therefore skip all style/class resolution that is present\n    // with style=\"\", [style]=\"\" and [style.prop]=\"\", class=\"\",\n    // [class.prop]=\"\". [class]=\"\" assignments\n    let binding = null;\n    let name = input.name;\n    switch (input.type) {\n      case 0 /* BindingType.Property */:\n        binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);\n        break;\n      case 3 /* BindingType.Style */:\n        binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);\n        break;\n      case 2 /* BindingType.Class */:\n        binding = this.registerClassInput(name, false, input.value, input.sourceSpan);\n        break;\n    }\n    return binding ? true : false;\n  }\n  registerInputBasedOnName(name, expression, sourceSpan) {\n    let binding = null;\n    const prefix = name.substring(0, 6);\n    const isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';\n    const isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');\n    if (isStyle || isClass) {\n      const isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no\n      const property = name.slice(isMapBased ? 5 : 6); // the dot explains why there's a +1\n      if (isStyle) {\n        binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);\n      } else {\n        binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);\n      }\n    }\n    return binding;\n  }\n  registerStyleInput(name, isMapBased, value, sourceSpan, suffix) {\n    if (isEmptyExpression(value)) {\n      return null;\n    }\n    // CSS custom properties are case-sensitive so we shouldn't normalize them.\n    // See: https://www.w3.org/TR/css-variables-1/#defining-variables\n    if (!isCssCustomProperty(name)) {\n      name = hyphenate(name);\n    }\n    const {\n      property,\n      hasOverrideFlag,\n      suffix: bindingSuffix\n    } = parseProperty(name);\n    suffix = typeof suffix === 'string' && suffix.length !== 0 ? suffix : bindingSuffix;\n    const entry = {\n      name: property,\n      suffix: suffix,\n      value,\n      sourceSpan,\n      hasOverrideFlag\n    };\n    if (isMapBased) {\n      this._styleMapInput = entry;\n    } else {\n      (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);\n      registerIntoMap(this._stylesIndex, property);\n    }\n    this._lastStylingInput = entry;\n    this._firstStylingInput = this._firstStylingInput || entry;\n    this._checkForPipes(value);\n    this.hasBindings = true;\n    return entry;\n  }\n  registerClassInput(name, isMapBased, value, sourceSpan) {\n    if (isEmptyExpression(value)) {\n      return null;\n    }\n    const {\n      property,\n      hasOverrideFlag\n    } = parseProperty(name);\n    const entry = {\n      name: property,\n      value,\n      sourceSpan,\n      hasOverrideFlag,\n      suffix: null\n    };\n    if (isMapBased) {\n      this._classMapInput = entry;\n    } else {\n      (this._singleClassInputs = this._singleClassInputs || []).push(entry);\n      registerIntoMap(this._classesIndex, property);\n    }\n    this._lastStylingInput = entry;\n    this._firstStylingInput = this._firstStylingInput || entry;\n    this._checkForPipes(value);\n    this.hasBindings = true;\n    return entry;\n  }\n  _checkForPipes(value) {\n    if (value instanceof ASTWithSource && value.ast instanceof BindingPipe) {\n      this.hasBindingsWithPipes = true;\n    }\n  }\n  /**\n   * Registers the element's static style string value to the builder.\n   *\n   * @param value the style string (e.g. `width:100px; height:200px;`)\n   */\n  registerStyleAttr(value) {\n    this._initialStyleValues = parse(value);\n    this._hasInitialValues = true;\n  }\n  /**\n   * Registers the element's static class string value to the builder.\n   *\n   * @param value the className string (e.g. `disabled gold zoom`)\n   */\n  registerClassAttr(value) {\n    this._initialClassValues = value.trim().split(/\\s+/g);\n    this._hasInitialValues = true;\n  }\n  /**\n   * Appends all styling-related expressions to the provided attrs array.\n   *\n   * @param attrs an existing array where each of the styling expressions\n   * will be inserted into.\n   */\n  populateInitialStylingAttrs(attrs) {\n    // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]\n    if (this._initialClassValues.length) {\n      attrs.push(literal(1 /* AttributeMarker.Classes */));\n      for (let i = 0; i < this._initialClassValues.length; i++) {\n        attrs.push(literal(this._initialClassValues[i]));\n      }\n    }\n    // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]\n    if (this._initialStyleValues.length) {\n      attrs.push(literal(2 /* AttributeMarker.Styles */));\n      for (let i = 0; i < this._initialStyleValues.length; i += 2) {\n        attrs.push(literal(this._initialStyleValues[i]), literal(this._initialStyleValues[i + 1]));\n      }\n    }\n  }\n  /**\n   * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.\n   *\n   * The instruction generation code below is used for producing the AOT statement code which is\n   * responsible for registering initial styles (within a directive hostBindings' creation block),\n   * as well as any of the provided attribute values, to the directive host element.\n   */\n  assignHostAttrs(attrs, definitionMap) {\n    if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {\n      this.populateInitialStylingAttrs(attrs);\n      definitionMap.set('hostAttrs', literalArr(attrs));\n    }\n  }\n  /**\n   * Builds an instruction with all the expressions and parameters for `classMap`.\n   *\n   * The instruction data will contain all expressions for `classMap` to function\n   * which includes the `[class]` expression params.\n   */\n  buildClassMapInstruction(valueConverter) {\n    if (this._classMapInput) {\n      return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);\n    }\n    return null;\n  }\n  /**\n   * Builds an instruction with all the expressions and parameters for `styleMap`.\n   *\n   * The instruction data will contain all expressions for `styleMap` to function\n   * which includes the `[style]` expression params.\n   */\n  buildStyleMapInstruction(valueConverter) {\n    if (this._styleMapInput) {\n      return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);\n    }\n    return null;\n  }\n  _buildMapBasedInstruction(valueConverter, isClassBased, stylingInput) {\n    // each styling binding value is stored in the LView\n    // map-based bindings allocate two slots: one for the\n    // previous binding value and another for the previous\n    // className or style attribute value.\n    let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;\n    // these values must be outside of the update block so that they can\n    // be evaluated (the AST visit call) during creation time so that any\n    // pipes can be picked up in time before the template is built\n    const mapValue = stylingInput.value.visit(valueConverter);\n    let reference;\n    if (mapValue instanceof Interpolation$1) {\n      totalBindingSlotsRequired += mapValue.expressions.length;\n      reference = isClassBased ? getClassMapInterpolationExpression(mapValue) : getStyleMapInterpolationExpression(mapValue);\n    } else {\n      reference = isClassBased ? Identifiers.classMap : Identifiers.styleMap;\n    }\n    return {\n      reference,\n      calls: [{\n        supportsInterpolation: true,\n        sourceSpan: stylingInput.sourceSpan,\n        allocateBindingSlots: totalBindingSlotsRequired,\n        params: convertFn => {\n          const convertResult = convertFn(mapValue);\n          const params = Array.isArray(convertResult) ? convertResult : [convertResult];\n          return params;\n        }\n      }]\n    };\n  }\n  _buildSingleInputs(reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {\n    const instructions = [];\n    inputs.forEach(input => {\n      const previousInstruction = instructions[instructions.length - 1];\n      const value = input.value.visit(valueConverter);\n      let referenceForCall = reference;\n      // each styling binding value is stored in the LView\n      // but there are two values stored for each binding:\n      //   1) the value itself\n      //   2) an intermediate value (concatenation of style up to this point).\n      //      We need to store the intermediate value so that we don't allocate\n      //      the strings on each CD.\n      let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;\n      if (value instanceof Interpolation$1) {\n        totalBindingSlotsRequired += value.expressions.length;\n        if (getInterpolationExpressionFn) {\n          referenceForCall = getInterpolationExpressionFn(value);\n        }\n      }\n      const call = {\n        sourceSpan: input.sourceSpan,\n        allocateBindingSlots: totalBindingSlotsRequired,\n        supportsInterpolation: !!getInterpolationExpressionFn,\n        params: convertFn => {\n          // params => stylingProp(propName, value, suffix)\n          const params = [];\n          params.push(literal(input.name));\n          const convertResult = convertFn(value);\n          if (Array.isArray(convertResult)) {\n            params.push(...convertResult);\n          } else {\n            params.push(convertResult);\n          }\n          // [style.prop] bindings may use suffix values (e.g. px, em, etc...), therefore,\n          // if that is detected then we need to pass that in as an optional param.\n          if (!isClassBased && input.suffix !== null) {\n            params.push(literal(input.suffix));\n          }\n          return params;\n        }\n      };\n      // If we ended up generating a call to the same instruction as the previous styling property\n      // we can chain the calls together safely to save some bytes, otherwise we have to generate\n      // a separate instruction call. This is primarily a concern with interpolation instructions\n      // where we may start off with one `reference`, but end up using another based on the\n      // number of interpolations.\n      if (previousInstruction && previousInstruction.reference === referenceForCall) {\n        previousInstruction.calls.push(call);\n      } else {\n        instructions.push({\n          reference: referenceForCall,\n          calls: [call]\n        });\n      }\n    });\n    return instructions;\n  }\n  _buildClassInputs(valueConverter) {\n    if (this._singleClassInputs) {\n      return this._buildSingleInputs(Identifiers.classProp, this._singleClassInputs, valueConverter, null, true);\n    }\n    return [];\n  }\n  _buildStyleInputs(valueConverter) {\n    if (this._singleStyleInputs) {\n      return this._buildSingleInputs(Identifiers.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);\n    }\n    return [];\n  }\n  /**\n   * Constructs all instructions which contain the expressions that will be placed\n   * into the update block of a template function or a directive hostBindings function.\n   */\n  buildUpdateLevelInstructions(valueConverter) {\n    const instructions = [];\n    if (this.hasBindings) {\n      const styleMapInstruction = this.buildStyleMapInstruction(valueConverter);\n      if (styleMapInstruction) {\n        instructions.push(styleMapInstruction);\n      }\n      const classMapInstruction = this.buildClassMapInstruction(valueConverter);\n      if (classMapInstruction) {\n        instructions.push(classMapInstruction);\n      }\n      instructions.push(...this._buildStyleInputs(valueConverter));\n      instructions.push(...this._buildClassInputs(valueConverter));\n    }\n    return instructions;\n  }\n}\nfunction registerIntoMap(map, key) {\n  if (!map.has(key)) {\n    map.set(key, map.size);\n  }\n}\nfunction parseProperty(name) {\n  let hasOverrideFlag = false;\n  const overrideIndex = name.indexOf(IMPORTANT_FLAG);\n  if (overrideIndex !== -1) {\n    name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';\n    hasOverrideFlag = true;\n  }\n  let suffix = null;\n  let property = name;\n  const unitIndex = name.lastIndexOf('.');\n  if (unitIndex > 0) {\n    suffix = name.slice(unitIndex + 1);\n    property = name.substring(0, unitIndex);\n  }\n  return {\n    property,\n    suffix,\n    hasOverrideFlag\n  };\n}\n/**\n * Gets the instruction to generate for an interpolated class map.\n * @param interpolation An Interpolation AST\n */\nfunction getClassMapInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.classMap;\n    case 3:\n      return Identifiers.classMapInterpolate1;\n    case 5:\n      return Identifiers.classMapInterpolate2;\n    case 7:\n      return Identifiers.classMapInterpolate3;\n    case 9:\n      return Identifiers.classMapInterpolate4;\n    case 11:\n      return Identifiers.classMapInterpolate5;\n    case 13:\n      return Identifiers.classMapInterpolate6;\n    case 15:\n      return Identifiers.classMapInterpolate7;\n    case 17:\n      return Identifiers.classMapInterpolate8;\n    default:\n      return Identifiers.classMapInterpolateV;\n  }\n}\n/**\n * Gets the instruction to generate for an interpolated style map.\n * @param interpolation An Interpolation AST\n */\nfunction getStyleMapInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.styleMap;\n    case 3:\n      return Identifiers.styleMapInterpolate1;\n    case 5:\n      return Identifiers.styleMapInterpolate2;\n    case 7:\n      return Identifiers.styleMapInterpolate3;\n    case 9:\n      return Identifiers.styleMapInterpolate4;\n    case 11:\n      return Identifiers.styleMapInterpolate5;\n    case 13:\n      return Identifiers.styleMapInterpolate6;\n    case 15:\n      return Identifiers.styleMapInterpolate7;\n    case 17:\n      return Identifiers.styleMapInterpolate8;\n    default:\n      return Identifiers.styleMapInterpolateV;\n  }\n}\n/**\n * Gets the instruction to generate for an interpolated style prop.\n * @param interpolation An Interpolation AST\n */\nfunction getStylePropInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.styleProp;\n    case 3:\n      return Identifiers.stylePropInterpolate1;\n    case 5:\n      return Identifiers.stylePropInterpolate2;\n    case 7:\n      return Identifiers.stylePropInterpolate3;\n    case 9:\n      return Identifiers.stylePropInterpolate4;\n    case 11:\n      return Identifiers.stylePropInterpolate5;\n    case 13:\n      return Identifiers.stylePropInterpolate6;\n    case 15:\n      return Identifiers.stylePropInterpolate7;\n    case 17:\n      return Identifiers.stylePropInterpolate8;\n    default:\n      return Identifiers.stylePropInterpolateV;\n  }\n}\n/**\n * Checks whether property name is a custom CSS property.\n * See: https://www.w3.org/TR/css-variables-1\n */\nfunction isCssCustomProperty(name) {\n  return name.startsWith('--');\n}\nfunction isEmptyExpression(ast) {\n  if (ast instanceof ASTWithSource) {\n    ast = ast.ast;\n  }\n  return ast instanceof EmptyExpr$1;\n}\nclass HtmlParser extends Parser {\n  constructor() {\n    super(getHtmlTagDefinition);\n  }\n  parse(source, url, options) {\n    return super.parse(source, url, options);\n  }\n}\nconst PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\nfunction hasPreserveWhitespacesAttr(attrs) {\n  return attrs.some(attr => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n/**\n * &ngsp; is a placeholder for non-removable space\n * &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space.\n */\nfunction replaceNgsp(value) {\n  // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n  return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nclass WhitespaceVisitor {\n  visitElement(element, context) {\n    if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n      // don't descent into elements where we need to preserve whitespaces\n      // but still visit all attributes to eliminate one used as a market to preserve WS\n      return new Element(element.name, visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n    return new Element(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n  }\n  visitAttribute(attribute, context) {\n    return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n  }\n  visitText(text, context) {\n    const isNotBlank = text.value.match(NO_WS_REGEXP);\n    const hasExpansionSibling = context && (context.prev instanceof Expansion || context.next instanceof Expansion);\n    if (isNotBlank || hasExpansionSibling) {\n      // Process the whitespace in the tokens of this Text node\n      const tokens = text.tokens.map(token => token.type === 5 /* TokenType.TEXT */ ? createWhitespaceProcessedTextToken(token) : token);\n      // Process the whitespace of the value of this Text node\n      const value = processWhitespace(text.value);\n      return new Text(value, text.sourceSpan, tokens, text.i18n);\n    }\n    return null;\n  }\n  visitComment(comment, context) {\n    return comment;\n  }\n  visitExpansion(expansion, context) {\n    return expansion;\n  }\n  visitExpansionCase(expansionCase, context) {\n    return expansionCase;\n  }\n  visitBlock(block, context) {\n    return new Block(block.name, block.parameters, visitAllWithSiblings(this, block.children), block.sourceSpan, block.nameSpan, block.startSourceSpan, block.endSourceSpan);\n  }\n  visitBlockParameter(parameter, context) {\n    return parameter;\n  }\n}\nfunction createWhitespaceProcessedTextToken({\n  type,\n  parts,\n  sourceSpan\n}) {\n  return {\n    type,\n    parts: [processWhitespace(parts[0])],\n    sourceSpan\n  };\n}\nfunction processWhitespace(text) {\n  return replaceNgsp(text).replace(WS_REPLACE_REGEXP, ' ');\n}\nfunction removeWhitespaces(htmlAstWithErrors) {\n  return new ParseTreeResult(visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n}\nfunction visitAllWithSiblings(visitor, nodes) {\n  const result = [];\n  nodes.forEach((ast, i) => {\n    const context = {\n      prev: nodes[i - 1],\n      next: nodes[i + 1]\n    };\n    const astResult = ast.visit(visitor, context);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\nconst PROPERTY_PARTS_SEPARATOR = '.';\nconst ATTRIBUTE_PREFIX = 'attr';\nconst CLASS_PREFIX = 'class';\nconst STYLE_PREFIX = 'style';\nconst TEMPLATE_ATTR_PREFIX$1 = '*';\nconst ANIMATE_PROP_PREFIX = 'animate-';\n/**\n * Parses bindings in templates and in the directive host area.\n */\nclass BindingParser {\n  constructor(_exprParser, _interpolationConfig, _schemaRegistry, errors) {\n    this._exprParser = _exprParser;\n    this._interpolationConfig = _interpolationConfig;\n    this._schemaRegistry = _schemaRegistry;\n    this.errors = errors;\n  }\n  get interpolationConfig() {\n    return this._interpolationConfig;\n  }\n  createBoundHostProperties(properties, sourceSpan) {\n    const boundProps = [];\n    for (const propName of Object.keys(properties)) {\n      const expression = properties[propName];\n      if (typeof expression === 'string') {\n        this.parsePropertyBinding(propName, expression, true, sourceSpan, sourceSpan.start.offset, undefined, [],\n        // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the\n        // sourceSpan, as it represents the sourceSpan of the host itself rather than the\n        // source of the host binding (which doesn't exist in the template). Regardless,\n        // neither of these values are used in Ivy but are only here to satisfy the function\n        // signature. This should likely be refactored in the future so that `sourceSpan`\n        // isn't being used inaccurately.\n        boundProps, sourceSpan);\n      } else {\n        this._reportError(`Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n      }\n    }\n    return boundProps;\n  }\n  createDirectiveHostEventAsts(hostListeners, sourceSpan) {\n    const targetEvents = [];\n    for (const propName of Object.keys(hostListeners)) {\n      const expression = hostListeners[propName];\n      if (typeof expression === 'string') {\n        // Use the `sourceSpan` for  `keySpan` and `handlerSpan`. This isn't really accurate, but\n        // neither is the `sourceSpan`, as it represents the `sourceSpan` of the host itself\n        // rather than the source of the host binding (which doesn't exist in the template).\n        // Regardless, neither of these values are used in Ivy but are only here to satisfy the\n        // function signature. This should likely be refactored in the future so that `sourceSpan`\n        // isn't being used inaccurately.\n        this.parseEvent(propName, expression, /* isAssignmentEvent */false, sourceSpan, sourceSpan, [], targetEvents, sourceSpan);\n      } else {\n        this._reportError(`Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n      }\n    }\n    return targetEvents;\n  }\n  parseInterpolation(value, sourceSpan, interpolatedTokens) {\n    const sourceInfo = sourceSpan.start.toString();\n    const absoluteOffset = sourceSpan.fullStart.offset;\n    try {\n      const ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, interpolatedTokens, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      return ast;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n    }\n  }\n  /**\n   * Similar to `parseInterpolation`, but treats the provided string as a single expression\n   * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n   * This is used for parsing the switch expression in ICUs.\n   */\n  parseInterpolationExpression(expression, sourceSpan) {\n    const sourceInfo = sourceSpan.start.toString();\n    const absoluteOffset = sourceSpan.start.offset;\n    try {\n      const ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      return ast;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n    }\n  }\n  /**\n   * Parses the bindings in a microsyntax expression, and converts them to\n   * `ParsedProperty` or `ParsedVariable`.\n   *\n   * @param tplKey template binding name\n   * @param tplValue template binding value\n   * @param sourceSpan span of template binding relative to entire the template\n   * @param absoluteValueOffset start of the tplValue relative to the entire template\n   * @param targetMatchableAttrs potential attributes to match in the template\n   * @param targetProps target property bindings in the template\n   * @param targetVars target variables in the template\n   */\n  parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {\n    const absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX$1.length;\n    const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);\n    for (const binding of bindings) {\n      // sourceSpan is for the entire HTML attribute. bindingSpan is for a particular\n      // binding within the microsyntax expression so it's more narrow than sourceSpan.\n      const bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);\n      const key = binding.key.source;\n      const keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);\n      if (binding instanceof VariableBinding) {\n        const value = binding.value ? binding.value.source : '$implicit';\n        const valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : undefined;\n        targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));\n      } else if (binding.value) {\n        const srcSpan = isIvyAst ? bindingSpan : sourceSpan;\n        const valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);\n        this._parsePropertyAst(key, binding.value, srcSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n      } else {\n        targetMatchableAttrs.push([key, '' /* value */]);\n        // Since this is a literal attribute with no RHS, source span should be\n        // just the key span.\n        this.parseLiteralAttr(key, null /* value */, keySpan, absoluteValueOffset, undefined /* valueSpan */, targetMatchableAttrs, targetProps, keySpan);\n      }\n    }\n  }\n  /**\n   * Parses the bindings in a microsyntax expression, e.g.\n   * ```\n   *    <tag *tplKey=\"let value1 = prop; let value2 = localVar\">\n   * ```\n   *\n   * @param tplKey template binding name\n   * @param tplValue template binding value\n   * @param sourceSpan span of template binding relative to entire the template\n   * @param absoluteKeyOffset start of the `tplKey`\n   * @param absoluteValueOffset start of the `tplValue`\n   */\n  _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {\n    const sourceInfo = sourceSpan.start.toString();\n    try {\n      const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);\n      this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n      bindingsResult.warnings.forEach(warning => {\n        this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);\n      });\n      return bindingsResult.templateBindings;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n      return [];\n    }\n  }\n  parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {\n    if (isAnimationLabel(name)) {\n      name = name.substring(1);\n      if (keySpan !== undefined) {\n        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n      }\n      if (value) {\n        this._reportError(`Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` + ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);\n      }\n      this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n    } else {\n      targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, '', absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));\n    }\n  }\n  parsePropertyBinding(name, expression, isHost, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {\n    if (name.length === 0) {\n      this._reportError(`Property name is missing in binding`, sourceSpan);\n    }\n    let isAnimationProp = false;\n    if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n      isAnimationProp = true;\n      name = name.substring(ANIMATE_PROP_PREFIX.length);\n      if (keySpan !== undefined) {\n        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));\n      }\n    } else if (isAnimationLabel(name)) {\n      isAnimationProp = true;\n      name = name.substring(1);\n      if (keySpan !== undefined) {\n        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n      }\n    }\n    if (isAnimationProp) {\n      this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n    } else {\n      this._parsePropertyAst(name, this.parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n    }\n  }\n  parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, targetProps, keySpan, interpolatedTokens) {\n    const expr = this.parseInterpolation(value, valueSpan || sourceSpan, interpolatedTokens);\n    if (expr) {\n      this._parsePropertyAst(name, expr, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n      return true;\n    }\n    return false;\n  }\n  _parsePropertyAst(name, ast, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));\n  }\n  _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n    if (name.length === 0) {\n      this._reportError('Animation trigger is missing', sourceSpan);\n    }\n    // This will occur when a @trigger is not paired with an expression.\n    // For animations it is valid to not have an expression since */void\n    // states will be applied by angular when the element is attached/detached\n    const ast = this.parseBinding(expression || 'undefined', false, valueSpan || sourceSpan, absoluteOffset);\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));\n  }\n  parseBinding(value, isHostBinding, sourceSpan, absoluteOffset) {\n    const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();\n    try {\n      const ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      return ast;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n    }\n  }\n  createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {\n    if (boundProp.isAnimation) {\n      return new BoundElementProperty(boundProp.name, 4 /* BindingType.Animation */, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n    }\n    let unit = null;\n    let bindingType = undefined;\n    let boundPropertyName = null;\n    const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n    let securityContexts = undefined;\n    // Check for special cases (prefix style, attr, class)\n    if (parts.length > 1) {\n      if (parts[0] == ATTRIBUTE_PREFIX) {\n        boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);\n        if (!skipValidation) {\n          this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n        }\n        securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n        const nsSeparatorIdx = boundPropertyName.indexOf(':');\n        if (nsSeparatorIdx > -1) {\n          const ns = boundPropertyName.substring(0, nsSeparatorIdx);\n          const name = boundPropertyName.substring(nsSeparatorIdx + 1);\n          boundPropertyName = mergeNsAndName(ns, name);\n        }\n        bindingType = 1 /* BindingType.Attribute */;\n      } else if (parts[0] == CLASS_PREFIX) {\n        boundPropertyName = parts[1];\n        bindingType = 2 /* BindingType.Class */;\n        securityContexts = [SecurityContext.NONE];\n      } else if (parts[0] == STYLE_PREFIX) {\n        unit = parts.length > 2 ? parts[2] : null;\n        boundPropertyName = parts[1];\n        bindingType = 3 /* BindingType.Style */;\n        securityContexts = [SecurityContext.STYLE];\n      }\n    }\n    // If not a special case, use the full property name\n    if (boundPropertyName === null) {\n      const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);\n      boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;\n      securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);\n      bindingType = 0 /* BindingType.Property */;\n      if (!skipValidation) {\n        this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);\n      }\n    }\n    return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n  }\n  // TODO: keySpan should be required but was made optional to avoid changing VE parser.\n  parseEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n    if (name.length === 0) {\n      this._reportError(`Event name is missing in binding`, sourceSpan);\n    }\n    if (isAnimationLabel(name)) {\n      name = name.slice(1);\n      if (keySpan !== undefined) {\n        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n      }\n      this._parseAnimationEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetEvents, keySpan);\n    } else {\n      this._parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);\n    }\n  }\n  calcPossibleSecurityContexts(selector, propName, isAttribute) {\n    const prop = this._schemaRegistry.getMappedPropName(propName);\n    return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);\n  }\n  _parseAnimationEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetEvents, keySpan) {\n    const matches = splitAtPeriod(name, [name, '']);\n    const eventName = matches[0];\n    const phase = matches[1].toLowerCase();\n    const ast = this._parseAction(expression, isAssignmentEvent, handlerSpan);\n    targetEvents.push(new ParsedEvent(eventName, phase, 1 /* ParsedEventType.Animation */, ast, sourceSpan, handlerSpan, keySpan));\n    if (eventName.length === 0) {\n      this._reportError(`Animation event name is missing in binding`, sourceSpan);\n    }\n    if (phase) {\n      if (phase !== 'start' && phase !== 'done') {\n        this._reportError(`The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`, sourceSpan);\n      }\n    } else {\n      this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);\n    }\n  }\n  _parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n    // long format: 'target: eventName'\n    const [target, eventName] = splitAtColon(name, [null, name]);\n    const ast = this._parseAction(expression, isAssignmentEvent, handlerSpan);\n    targetMatchableAttrs.push([name, ast.source]);\n    targetEvents.push(new ParsedEvent(eventName, target, 0 /* ParsedEventType.Regular */, ast, sourceSpan, handlerSpan, keySpan));\n    // Don't detect directives for event names for now,\n    // so don't add the event name to the matchableAttrs\n  }\n  _parseAction(value, isAssignmentEvent, sourceSpan) {\n    const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();\n    const absoluteOffset = sourceSpan && sourceSpan.start ? sourceSpan.start.offset : 0;\n    try {\n      const ast = this._exprParser.parseAction(value, isAssignmentEvent, sourceInfo, absoluteOffset, this._interpolationConfig);\n      if (ast) {\n        this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      }\n      if (!ast || ast.ast instanceof EmptyExpr$1) {\n        this._reportError(`Empty expressions are not allowed`, sourceSpan);\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n      }\n      return ast;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n    }\n  }\n  _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n    this.errors.push(new ParseError(sourceSpan, message, level));\n  }\n  _reportExpressionParserErrors(errors, sourceSpan) {\n    for (const error of errors) {\n      this._reportError(error.message, sourceSpan);\n    }\n  }\n  /**\n   * @param propName the name of the property / attribute\n   * @param sourceSpan\n   * @param isAttr true when binding to an attribute\n   */\n  _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {\n    const report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);\n    if (report.error) {\n      this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);\n    }\n  }\n}\nclass PipeCollector extends RecursiveAstVisitor {\n  constructor() {\n    super(...arguments);\n    this.pipes = new Map();\n  }\n  visitPipe(ast, context) {\n    this.pipes.set(ast.name, ast);\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n}\nfunction isAnimationLabel(name) {\n  return name[0] == '@';\n}\nfunction calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n  const ctxs = [];\n  CssSelector.parse(selector).forEach(selector => {\n    const elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n    const notElementNames = new Set(selector.notSelectors.filter(selector => selector.isElementSelector()).map(selector => selector.element));\n    const possibleElementNames = elementNames.filter(elementName => !notElementNames.has(elementName));\n    ctxs.push(...possibleElementNames.map(elementName => registry.securityContext(elementName, propName, isAttribute)));\n  });\n  return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n/**\n * Compute a new ParseSourceSpan based off an original `sourceSpan` by using\n * absolute offsets from the specified `absoluteSpan`.\n *\n * @param sourceSpan original source span\n * @param absoluteSpan absolute source span to move to\n */\nfunction moveParseSourceSpan(sourceSpan, absoluteSpan) {\n  // The difference of two absolute offsets provide the relative offset\n  const startDiff = absoluteSpan.start - sourceSpan.start.offset;\n  const endDiff = absoluteSpan.end - sourceSpan.end.offset;\n  return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);\n}\n\n// Some of the code comes from WebComponents.JS\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js\nfunction isStyleUrlResolvable(url) {\n  if (url == null || url.length === 0 || url[0] == '/') return false;\n  const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n  return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\nconst URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\nconst NG_CONTENT_SELECT_ATTR$1 = 'select';\nconst LINK_ELEMENT = 'link';\nconst LINK_STYLE_REL_ATTR = 'rel';\nconst LINK_STYLE_HREF_ATTR = 'href';\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\nconst STYLE_ELEMENT = 'style';\nconst SCRIPT_ELEMENT = 'script';\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nconst NG_PROJECT_AS = 'ngProjectAs';\nfunction preparseElement(ast) {\n  let selectAttr = null;\n  let hrefAttr = null;\n  let relAttr = null;\n  let nonBindable = false;\n  let projectAs = '';\n  ast.attrs.forEach(attr => {\n    const lcAttrName = attr.name.toLowerCase();\n    if (lcAttrName == NG_CONTENT_SELECT_ATTR$1) {\n      selectAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n      hrefAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n      relAttr = attr.value;\n    } else if (attr.name == NG_NON_BINDABLE_ATTR) {\n      nonBindable = true;\n    } else if (attr.name == NG_PROJECT_AS) {\n      if (attr.value.length > 0) {\n        projectAs = attr.value;\n      }\n    }\n  });\n  selectAttr = normalizeNgContentSelect(selectAttr);\n  const nodeName = ast.name.toLowerCase();\n  let type = PreparsedElementType.OTHER;\n  if (isNgContent(nodeName)) {\n    type = PreparsedElementType.NG_CONTENT;\n  } else if (nodeName == STYLE_ELEMENT) {\n    type = PreparsedElementType.STYLE;\n  } else if (nodeName == SCRIPT_ELEMENT) {\n    type = PreparsedElementType.SCRIPT;\n  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n    type = PreparsedElementType.STYLESHEET;\n  }\n  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\nvar PreparsedElementType;\n(function (PreparsedElementType) {\n  PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n  PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n  PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n  PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n})(PreparsedElementType || (PreparsedElementType = {}));\nclass PreparsedElement {\n  constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n    this.type = type;\n    this.selectAttr = selectAttr;\n    this.hrefAttr = hrefAttr;\n    this.nonBindable = nonBindable;\n    this.projectAs = projectAs;\n  }\n}\nfunction normalizeNgContentSelect(selectAttr) {\n  if (selectAttr === null || selectAttr.length === 0) {\n    return '*';\n  }\n  return selectAttr;\n}\n\n/** Pattern for the expression in a for loop block. */\nconst FOR_LOOP_EXPRESSION_PATTERN = /^\\s*([0-9A-Za-z_$]*)\\s+of\\s+([\\S\\s]*)/;\n/** Pattern for the tracking expression in a for loop block. */\nconst FOR_LOOP_TRACK_PATTERN = /^track\\s+([\\S\\s]*)/;\n/** Pattern for the `as` expression in a conditional block. */\nconst CONDITIONAL_ALIAS_PATTERN = /^as\\s+(.*)/;\n/** Pattern used to identify an `else if` block. */\nconst ELSE_IF_PATTERN = /^else[^\\S\\r\\n]+if/;\n/** Pattern used to identify a `let` parameter. */\nconst FOR_LOOP_LET_PATTERN = /^let\\s+([\\S\\s]*)/;\n/** Names of variables that are allowed to be used in the `let` expression of a `for` loop. */\nconst ALLOWED_FOR_LOOP_LET_VARIABLES = new Set(['$index', '$first', '$last', '$even', '$odd', '$count']);\n/**\n * Predicate function that determines if a block with\n * a specific name cam be connected to a `for` block.\n */\nfunction isConnectedForLoopBlock(name) {\n  return name === 'empty';\n}\n/**\n * Predicate function that determines if a block with\n * a specific name cam be connected to an `if` block.\n */\nfunction isConnectedIfLoopBlock(name) {\n  return name === 'else' || ELSE_IF_PATTERN.test(name);\n}\n/** Creates an `if` loop block from an HTML AST node. */\nfunction createIfBlock(ast, connectedBlocks, visitor, bindingParser) {\n  const errors = validateIfConnectedBlocks(connectedBlocks);\n  const branches = [];\n  const mainBlockParams = parseConditionalBlockParameters(ast, errors, bindingParser);\n  if (mainBlockParams !== null) {\n    branches.push(new IfBlockBranch(mainBlockParams.expression, visitAll(visitor, ast.children, ast.children), mainBlockParams.expressionAlias, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan, ast.i18n));\n  }\n  for (const block of connectedBlocks) {\n    if (ELSE_IF_PATTERN.test(block.name)) {\n      const params = parseConditionalBlockParameters(block, errors, bindingParser);\n      if (params !== null) {\n        const children = visitAll(visitor, block.children, block.children);\n        branches.push(new IfBlockBranch(params.expression, children, params.expressionAlias, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));\n      }\n    } else if (block.name === 'else') {\n      const children = visitAll(visitor, block.children, block.children);\n      branches.push(new IfBlockBranch(null, children, null, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));\n    }\n  }\n  // The outer IfBlock should have a span that encapsulates all branches.\n  const ifBlockStartSourceSpan = branches.length > 0 ? branches[0].startSourceSpan : ast.startSourceSpan;\n  const ifBlockEndSourceSpan = branches.length > 0 ? branches[branches.length - 1].endSourceSpan : ast.endSourceSpan;\n  let wholeSourceSpan = ast.sourceSpan;\n  const lastBranch = branches[branches.length - 1];\n  if (lastBranch !== undefined) {\n    wholeSourceSpan = new ParseSourceSpan(ifBlockStartSourceSpan.start, lastBranch.sourceSpan.end);\n  }\n  return {\n    node: new IfBlock(branches, wholeSourceSpan, ast.startSourceSpan, ifBlockEndSourceSpan, ast.nameSpan),\n    errors\n  };\n}\n/** Creates a `for` loop block from an HTML AST node. */\nfunction createForLoop(ast, connectedBlocks, visitor, bindingParser) {\n  const errors = [];\n  const params = parseForLoopParameters(ast, errors, bindingParser);\n  let node = null;\n  let empty = null;\n  for (const block of connectedBlocks) {\n    if (block.name === 'empty') {\n      if (empty !== null) {\n        errors.push(new ParseError(block.sourceSpan, '@for loop can only have one @empty block'));\n      } else if (block.parameters.length > 0) {\n        errors.push(new ParseError(block.sourceSpan, '@empty block cannot have parameters'));\n      } else {\n        empty = new ForLoopBlockEmpty(visitAll(visitor, block.children, block.children), block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n);\n      }\n    } else {\n      errors.push(new ParseError(block.sourceSpan, `Unrecognized @for loop block \"${block.name}\"`));\n    }\n  }\n  if (params !== null) {\n    if (params.trackBy === null) {\n      // TODO: We should not fail here, and instead try to produce some AST for the language\n      // service.\n      errors.push(new ParseError(ast.sourceSpan, '@for loop must have a \"track\" expression'));\n    } else {\n      // The `for` block has a main span that includes the `empty` branch. For only the span of the\n      // main `for` body, use `mainSourceSpan`.\n      const endSpan = empty?.endSourceSpan ?? ast.endSourceSpan;\n      const sourceSpan = new ParseSourceSpan(ast.sourceSpan.start, endSpan?.end ?? ast.sourceSpan.end);\n      node = new ForLoopBlock(params.itemName, params.expression, params.trackBy.expression, params.trackBy.keywordSpan, params.context, visitAll(visitor, ast.children, ast.children), empty, sourceSpan, ast.sourceSpan, ast.startSourceSpan, endSpan, ast.nameSpan, ast.i18n);\n    }\n  }\n  return {\n    node,\n    errors\n  };\n}\n/** Creates a switch block from an HTML AST node. */\nfunction createSwitchBlock(ast, visitor, bindingParser) {\n  const errors = validateSwitchBlock(ast);\n  const primaryExpression = ast.parameters.length > 0 ? parseBlockParameterToBinding(ast.parameters[0], bindingParser) : bindingParser.parseBinding('', false, ast.sourceSpan, 0);\n  const cases = [];\n  const unknownBlocks = [];\n  let defaultCase = null;\n  // Here we assume that all the blocks are valid given that we validated them above.\n  for (const node of ast.children) {\n    if (!(node instanceof Block)) {\n      continue;\n    }\n    if ((node.name !== 'case' || node.parameters.length === 0) && node.name !== 'default') {\n      unknownBlocks.push(new UnknownBlock(node.name, node.sourceSpan, node.nameSpan));\n      continue;\n    }\n    const expression = node.name === 'case' ? parseBlockParameterToBinding(node.parameters[0], bindingParser) : null;\n    const ast = new SwitchBlockCase(expression, visitAll(visitor, node.children, node.children), node.sourceSpan, node.startSourceSpan, node.endSourceSpan, node.nameSpan, node.i18n);\n    if (expression === null) {\n      defaultCase = ast;\n    } else {\n      cases.push(ast);\n    }\n  }\n  // Ensure that the default case is last in the array.\n  if (defaultCase !== null) {\n    cases.push(defaultCase);\n  }\n  return {\n    node: new SwitchBlock(primaryExpression, cases, unknownBlocks, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan),\n    errors\n  };\n}\n/** Parses the parameters of a `for` loop block. */\nfunction parseForLoopParameters(block, errors, bindingParser) {\n  if (block.parameters.length === 0) {\n    errors.push(new ParseError(block.sourceSpan, '@for loop does not have an expression'));\n    return null;\n  }\n  const [expressionParam, ...secondaryParams] = block.parameters;\n  const match = stripOptionalParentheses(expressionParam, errors)?.match(FOR_LOOP_EXPRESSION_PATTERN);\n  if (!match || match[2].trim().length === 0) {\n    errors.push(new ParseError(expressionParam.sourceSpan, 'Cannot parse expression. @for loop expression must match the pattern \"<identifier> of <expression>\"'));\n    return null;\n  }\n  const [, itemName, rawExpression] = match;\n  const result = {\n    itemName: new Variable(itemName, '$implicit', expressionParam.sourceSpan, expressionParam.sourceSpan),\n    trackBy: null,\n    expression: parseBlockParameterToBinding(expressionParam, bindingParser, rawExpression),\n    context: {}\n  };\n  for (const param of secondaryParams) {\n    const letMatch = param.expression.match(FOR_LOOP_LET_PATTERN);\n    if (letMatch !== null) {\n      parseLetParameter(param.sourceSpan, letMatch[1], param.sourceSpan, result.context, errors);\n      continue;\n    }\n    const trackMatch = param.expression.match(FOR_LOOP_TRACK_PATTERN);\n    if (trackMatch !== null) {\n      if (result.trackBy !== null) {\n        errors.push(new ParseError(param.sourceSpan, '@for loop can only have one \"track\" expression'));\n      } else {\n        const expression = parseBlockParameterToBinding(param, bindingParser, trackMatch[1]);\n        const keywordSpan = new ParseSourceSpan(param.sourceSpan.start, param.sourceSpan.start.moveBy('track'.length));\n        result.trackBy = {\n          expression,\n          keywordSpan\n        };\n      }\n      continue;\n    }\n    errors.push(new ParseError(param.sourceSpan, `Unrecognized @for loop paramater \"${param.expression}\"`));\n  }\n  // Fill out any variables that haven't been defined explicitly.\n  for (const variableName of ALLOWED_FOR_LOOP_LET_VARIABLES) {\n    if (!result.context.hasOwnProperty(variableName)) {\n      // Give ambiently-available context variables empty spans at the end of the start of the `for`\n      // block, since they are not explicitly defined.\n      const emptySpanAfterForBlockStart = new ParseSourceSpan(block.startSourceSpan.end, block.startSourceSpan.end);\n      result.context[variableName] = new Variable(variableName, variableName, emptySpanAfterForBlockStart, emptySpanAfterForBlockStart);\n    }\n  }\n  return result;\n}\n/** Parses the `let` parameter of a `for` loop block. */\nfunction parseLetParameter(sourceSpan, expression, span, context, errors) {\n  const parts = expression.split(',');\n  for (const part of parts) {\n    const expressionParts = part.split('=');\n    const name = expressionParts.length === 2 ? expressionParts[0].trim() : '';\n    const variableName = expressionParts.length === 2 ? expressionParts[1].trim() : '';\n    if (name.length === 0 || variableName.length === 0) {\n      errors.push(new ParseError(sourceSpan, `Invalid @for loop \"let\" parameter. Parameter should match the pattern \"<name> = <variable name>\"`));\n    } else if (!ALLOWED_FOR_LOOP_LET_VARIABLES.has(variableName)) {\n      errors.push(new ParseError(sourceSpan, `Unknown \"let\" parameter variable \"${variableName}\". The allowed variables are: ${Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES).join(', ')}`));\n    } else if (context.hasOwnProperty(variableName)) {\n      errors.push(new ParseError(sourceSpan, `Duplicate \"let\" parameter variable \"${variableName}\"`));\n    } else {\n      context[variableName] = new Variable(name, variableName, span, span);\n    }\n  }\n}\n/**\n * Checks that the shape of the blocks connected to an\n * `@if` block is correct. Returns an array of errors.\n */\nfunction validateIfConnectedBlocks(connectedBlocks) {\n  const errors = [];\n  let hasElse = false;\n  for (let i = 0; i < connectedBlocks.length; i++) {\n    const block = connectedBlocks[i];\n    if (block.name === 'else') {\n      if (hasElse) {\n        errors.push(new ParseError(block.sourceSpan, 'Conditional can only have one @else block'));\n      } else if (connectedBlocks.length > 1 && i < connectedBlocks.length - 1) {\n        errors.push(new ParseError(block.sourceSpan, '@else block must be last inside the conditional'));\n      } else if (block.parameters.length > 0) {\n        errors.push(new ParseError(block.sourceSpan, '@else block cannot have parameters'));\n      }\n      hasElse = true;\n    } else if (!ELSE_IF_PATTERN.test(block.name)) {\n      errors.push(new ParseError(block.sourceSpan, `Unrecognized conditional block @${block.name}`));\n    }\n  }\n  return errors;\n}\n/** Checks that the shape of a `switch` block is valid. Returns an array of errors. */\nfunction validateSwitchBlock(ast) {\n  const errors = [];\n  let hasDefault = false;\n  if (ast.parameters.length !== 1) {\n    errors.push(new ParseError(ast.sourceSpan, '@switch block must have exactly one parameter'));\n    return errors;\n  }\n  for (const node of ast.children) {\n    // Skip over comments and empty text nodes inside the switch block.\n    // Empty text nodes can be used for formatting while comments don't affect the runtime.\n    if (node instanceof Comment || node instanceof Text && node.value.trim().length === 0) {\n      continue;\n    }\n    if (!(node instanceof Block) || node.name !== 'case' && node.name !== 'default') {\n      errors.push(new ParseError(node.sourceSpan, '@switch block can only contain @case and @default blocks'));\n      continue;\n    }\n    if (node.name === 'default') {\n      if (hasDefault) {\n        errors.push(new ParseError(node.sourceSpan, '@switch block can only have one @default block'));\n      } else if (node.parameters.length > 0) {\n        errors.push(new ParseError(node.sourceSpan, '@default block cannot have parameters'));\n      }\n      hasDefault = true;\n    } else if (node.name === 'case' && node.parameters.length !== 1) {\n      errors.push(new ParseError(node.sourceSpan, '@case block must have exactly one parameter'));\n    }\n  }\n  return errors;\n}\n/**\n * Parses a block parameter into a binding AST.\n * @param ast Block parameter that should be parsed.\n * @param bindingParser Parser that the expression should be parsed with.\n * @param part Specific part of the expression that should be parsed.\n */\nfunction parseBlockParameterToBinding(ast, bindingParser, part) {\n  let start;\n  let end;\n  if (typeof part === 'string') {\n    // Note: `lastIndexOf` here should be enough to know the start index of the expression,\n    // because we know that it'll be at the end of the param. Ideally we could use the `d`\n    // flag when matching via regex and get the index from `match.indices`, but it's unclear\n    // if we can use it yet since it's a relatively new feature. See:\n    // https://github.com/tc39/proposal-regexp-match-indices\n    start = Math.max(0, ast.expression.lastIndexOf(part));\n    end = start + part.length;\n  } else {\n    start = 0;\n    end = ast.expression.length;\n  }\n  return bindingParser.parseBinding(ast.expression.slice(start, end), false, ast.sourceSpan, ast.sourceSpan.start.offset + start);\n}\n/** Parses the parameter of a conditional block (`if` or `else if`). */\nfunction parseConditionalBlockParameters(block, errors, bindingParser) {\n  if (block.parameters.length === 0) {\n    errors.push(new ParseError(block.sourceSpan, 'Conditional block does not have an expression'));\n    return null;\n  }\n  const expression = parseBlockParameterToBinding(block.parameters[0], bindingParser);\n  let expressionAlias = null;\n  // Start from 1 since we processed the first parameter already.\n  for (let i = 1; i < block.parameters.length; i++) {\n    const param = block.parameters[i];\n    const aliasMatch = param.expression.match(CONDITIONAL_ALIAS_PATTERN);\n    // For now conditionals can only have an `as` parameter.\n    // We may want to rework this later if we add more.\n    if (aliasMatch === null) {\n      errors.push(new ParseError(param.sourceSpan, `Unrecognized conditional paramater \"${param.expression}\"`));\n    } else if (block.name !== 'if') {\n      errors.push(new ParseError(param.sourceSpan, '\"as\" expression is only allowed on the primary @if block'));\n    } else if (expressionAlias !== null) {\n      errors.push(new ParseError(param.sourceSpan, 'Conditional can only have one \"as\" expression'));\n    } else {\n      const name = aliasMatch[1].trim();\n      expressionAlias = new Variable(name, name, param.sourceSpan, param.sourceSpan);\n    }\n  }\n  return {\n    expression,\n    expressionAlias\n  };\n}\n/** Strips optional parentheses around from a control from expression parameter. */\nfunction stripOptionalParentheses(param, errors) {\n  const expression = param.expression;\n  const spaceRegex = /^\\s$/;\n  let openParens = 0;\n  let start = 0;\n  let end = expression.length - 1;\n  for (let i = 0; i < expression.length; i++) {\n    const char = expression[i];\n    if (char === '(') {\n      start = i + 1;\n      openParens++;\n    } else if (spaceRegex.test(char)) {\n      continue;\n    } else {\n      break;\n    }\n  }\n  if (openParens === 0) {\n    return expression;\n  }\n  for (let i = expression.length - 1; i > -1; i--) {\n    const char = expression[i];\n    if (char === ')') {\n      end = i;\n      openParens--;\n      if (openParens === 0) {\n        break;\n      }\n    } else if (spaceRegex.test(char)) {\n      continue;\n    } else {\n      break;\n    }\n  }\n  if (openParens !== 0) {\n    errors.push(new ParseError(param.sourceSpan, 'Unclosed parentheses in expression'));\n    return null;\n  }\n  return expression.slice(start, end);\n}\n\n/** Pattern for a timing value in a trigger. */\nconst TIME_PATTERN = /^\\d+\\.?\\d*(ms|s)?$/;\n/** Pattern for a separator between keywords in a trigger expression. */\nconst SEPARATOR_PATTERN = /^\\s$/;\n/** Pairs of characters that form syntax that is comma-delimited. */\nconst COMMA_DELIMITED_SYNTAX = new Map([[$LBRACE, $RBRACE],\n// Object literals\n[$LBRACKET, $RBRACKET],\n// Array literals\n[$LPAREN, $RPAREN] // Function calls\n]);\n/** Possible types of `on` triggers. */\nvar OnTriggerType;\n(function (OnTriggerType) {\n  OnTriggerType[\"IDLE\"] = \"idle\";\n  OnTriggerType[\"TIMER\"] = \"timer\";\n  OnTriggerType[\"INTERACTION\"] = \"interaction\";\n  OnTriggerType[\"IMMEDIATE\"] = \"immediate\";\n  OnTriggerType[\"HOVER\"] = \"hover\";\n  OnTriggerType[\"VIEWPORT\"] = \"viewport\";\n})(OnTriggerType || (OnTriggerType = {}));\n/** Parses a `when` deferred trigger. */\nfunction parseWhenTrigger({\n  expression,\n  sourceSpan\n}, bindingParser, triggers, errors) {\n  const whenIndex = expression.indexOf('when');\n  const whenSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(whenIndex), sourceSpan.start.moveBy(whenIndex + 'when'.length));\n  const prefetchSpan = getPrefetchSpan(expression, sourceSpan);\n  // This is here just to be safe, we shouldn't enter this function\n  // in the first place if a block doesn't have the \"when\" keyword.\n  if (whenIndex === -1) {\n    errors.push(new ParseError(sourceSpan, `Could not find \"when\" keyword in expression`));\n  } else {\n    const start = getTriggerParametersStart(expression, whenIndex + 1);\n    const parsed = bindingParser.parseBinding(expression.slice(start), false, sourceSpan, sourceSpan.start.offset + start);\n    trackTrigger('when', triggers, errors, new BoundDeferredTrigger(parsed, sourceSpan, prefetchSpan, whenSourceSpan));\n  }\n}\n/** Parses an `on` trigger */\nfunction parseOnTrigger({\n  expression,\n  sourceSpan\n}, triggers, errors, placeholder) {\n  const onIndex = expression.indexOf('on');\n  const onSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(onIndex), sourceSpan.start.moveBy(onIndex + 'on'.length));\n  const prefetchSpan = getPrefetchSpan(expression, sourceSpan);\n  // This is here just to be safe, we shouldn't enter this function\n  // in the first place if a block doesn't have the \"on\" keyword.\n  if (onIndex === -1) {\n    errors.push(new ParseError(sourceSpan, `Could not find \"on\" keyword in expression`));\n  } else {\n    const start = getTriggerParametersStart(expression, onIndex + 1);\n    const parser = new OnTriggerParser(expression, start, sourceSpan, triggers, errors, placeholder, prefetchSpan, onSourceSpan);\n    parser.parse();\n  }\n}\nfunction getPrefetchSpan(expression, sourceSpan) {\n  if (!expression.startsWith('prefetch')) {\n    return null;\n  }\n  return new ParseSourceSpan(sourceSpan.start, sourceSpan.start.moveBy('prefetch'.length));\n}\nclass OnTriggerParser {\n  constructor(expression, start, span, triggers, errors, placeholder, prefetchSpan, onSourceSpan) {\n    this.expression = expression;\n    this.start = start;\n    this.span = span;\n    this.triggers = triggers;\n    this.errors = errors;\n    this.placeholder = placeholder;\n    this.prefetchSpan = prefetchSpan;\n    this.onSourceSpan = onSourceSpan;\n    this.index = 0;\n    this.tokens = new Lexer().tokenize(expression.slice(start));\n  }\n  parse() {\n    while (this.tokens.length > 0 && this.index < this.tokens.length) {\n      const token = this.token();\n      if (!token.isIdentifier()) {\n        this.unexpectedToken(token);\n        break;\n      }\n      // An identifier immediately followed by a comma or the end of\n      // the expression cannot have parameters so we can exit early.\n      if (this.isFollowedByOrLast($COMMA)) {\n        this.consumeTrigger(token, []);\n        this.advance();\n      } else if (this.isFollowedByOrLast($LPAREN)) {\n        this.advance(); // Advance to the opening paren.\n        const prevErrors = this.errors.length;\n        const parameters = this.consumeParameters();\n        if (this.errors.length !== prevErrors) {\n          break;\n        }\n        this.consumeTrigger(token, parameters);\n        this.advance(); // Advance past the closing paren.\n      } else if (this.index < this.tokens.length - 1) {\n        this.unexpectedToken(this.tokens[this.index + 1]);\n      }\n      this.advance();\n    }\n  }\n  advance() {\n    this.index++;\n  }\n  isFollowedByOrLast(char) {\n    if (this.index === this.tokens.length - 1) {\n      return true;\n    }\n    return this.tokens[this.index + 1].isCharacter(char);\n  }\n  token() {\n    return this.tokens[Math.min(this.index, this.tokens.length - 1)];\n  }\n  consumeTrigger(identifier, parameters) {\n    const triggerNameStartSpan = this.span.start.moveBy(this.start + identifier.index - this.tokens[0].index);\n    const nameSpan = new ParseSourceSpan(triggerNameStartSpan, triggerNameStartSpan.moveBy(identifier.strValue.length));\n    const endSpan = triggerNameStartSpan.moveBy(this.token().end - identifier.index);\n    // Put the prefetch and on spans with the first trigger\n    // This should maybe be refactored to have something like an outer OnGroup AST\n    // Since triggers can be grouped with commas \"on hover(x), interaction(y)\"\n    const isFirstTrigger = identifier.index === 0;\n    const onSourceSpan = isFirstTrigger ? this.onSourceSpan : null;\n    const prefetchSourceSpan = isFirstTrigger ? this.prefetchSpan : null;\n    const sourceSpan = new ParseSourceSpan(isFirstTrigger ? this.span.start : triggerNameStartSpan, endSpan);\n    try {\n      switch (identifier.toString()) {\n        case OnTriggerType.IDLE:\n          this.trackTrigger('idle', createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSourceSpan, onSourceSpan));\n          break;\n        case OnTriggerType.TIMER:\n          this.trackTrigger('timer', createTimerTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan));\n          break;\n        case OnTriggerType.INTERACTION:\n          this.trackTrigger('interaction', createInteractionTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));\n          break;\n        case OnTriggerType.IMMEDIATE:\n          this.trackTrigger('immediate', createImmediateTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan));\n          break;\n        case OnTriggerType.HOVER:\n          this.trackTrigger('hover', createHoverTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));\n          break;\n        case OnTriggerType.VIEWPORT:\n          this.trackTrigger('viewport', createViewportTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));\n          break;\n        default:\n          throw new Error(`Unrecognized trigger type \"${identifier}\"`);\n      }\n    } catch (e) {\n      this.error(identifier, e.message);\n    }\n  }\n  consumeParameters() {\n    const parameters = [];\n    if (!this.token().isCharacter($LPAREN)) {\n      this.unexpectedToken(this.token());\n      return parameters;\n    }\n    this.advance();\n    const commaDelimStack = [];\n    let current = '';\n    while (this.index < this.tokens.length) {\n      const token = this.token();\n      // Stop parsing if we've hit the end character and we're outside of a comma-delimited syntax.\n      // Note that we don't need to account for strings here since the lexer already parsed them\n      // into string tokens.\n      if (token.isCharacter($RPAREN) && commaDelimStack.length === 0) {\n        if (current.length) {\n          parameters.push(current);\n        }\n        break;\n      }\n      // In the `on` microsyntax \"top-level\" commas (e.g. ones outside of an parameters) separate\n      // the different triggers (e.g. `on idle,timer(500)`). This is problematic, because the\n      // function-like syntax also implies that multiple parameters can be passed into the\n      // individual trigger (e.g. `on foo(a, b)`). To avoid tripping up the parser with commas that\n      // are part of other sorts of syntax (object literals, arrays), we treat anything inside\n      // a comma-delimited syntax block as plain text.\n      if (token.type === TokenType.Character && COMMA_DELIMITED_SYNTAX.has(token.numValue)) {\n        commaDelimStack.push(COMMA_DELIMITED_SYNTAX.get(token.numValue));\n      }\n      if (commaDelimStack.length > 0 && token.isCharacter(commaDelimStack[commaDelimStack.length - 1])) {\n        commaDelimStack.pop();\n      }\n      // If we hit a comma outside of a comma-delimited syntax, it means\n      // that we're at the top level and we're starting a new parameter.\n      if (commaDelimStack.length === 0 && token.isCharacter($COMMA) && current.length > 0) {\n        parameters.push(current);\n        current = '';\n        this.advance();\n        continue;\n      }\n      // Otherwise treat the token as a plain text character in the current parameter.\n      current += this.tokenText();\n      this.advance();\n    }\n    if (!this.token().isCharacter($RPAREN) || commaDelimStack.length > 0) {\n      this.error(this.token(), 'Unexpected end of expression');\n    }\n    if (this.index < this.tokens.length - 1 && !this.tokens[this.index + 1].isCharacter($COMMA)) {\n      this.unexpectedToken(this.tokens[this.index + 1]);\n    }\n    return parameters;\n  }\n  tokenText() {\n    // Tokens have a toString already which we could use, but for string tokens it omits the quotes.\n    // Eventually we could expose this information on the token directly.\n    return this.expression.slice(this.start + this.token().index, this.start + this.token().end);\n  }\n  trackTrigger(name, trigger) {\n    trackTrigger(name, this.triggers, this.errors, trigger);\n  }\n  error(token, message) {\n    const newStart = this.span.start.moveBy(this.start + token.index);\n    const newEnd = newStart.moveBy(token.end - token.index);\n    this.errors.push(new ParseError(new ParseSourceSpan(newStart, newEnd), message));\n  }\n  unexpectedToken(token) {\n    this.error(token, `Unexpected token \"${token}\"`);\n  }\n}\n/** Adds a trigger to a map of triggers. */\nfunction trackTrigger(name, allTriggers, errors, trigger) {\n  if (allTriggers[name]) {\n    errors.push(new ParseError(trigger.sourceSpan, `Duplicate \"${name}\" trigger is not allowed`));\n  } else {\n    allTriggers[name] = trigger;\n  }\n}\nfunction createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n  if (parameters.length > 0) {\n    throw new Error(`\"${OnTriggerType.IDLE}\" trigger cannot have parameters`);\n  }\n  return new IdleDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createTimerTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n  if (parameters.length !== 1) {\n    throw new Error(`\"${OnTriggerType.TIMER}\" trigger must have exactly one parameter`);\n  }\n  const delay = parseDeferredTime(parameters[0]);\n  if (delay === null) {\n    throw new Error(`Could not parse time value of trigger \"${OnTriggerType.TIMER}\"`);\n  }\n  return new TimerDeferredTrigger(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createImmediateTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n  if (parameters.length > 0) {\n    throw new Error(`\"${OnTriggerType.IMMEDIATE}\" trigger cannot have parameters`);\n  }\n  return new ImmediateDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createHoverTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {\n  validateReferenceBasedTrigger(OnTriggerType.HOVER, parameters, placeholder);\n  return new HoverDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createInteractionTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {\n  validateReferenceBasedTrigger(OnTriggerType.INTERACTION, parameters, placeholder);\n  return new InteractionDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createViewportTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {\n  validateReferenceBasedTrigger(OnTriggerType.VIEWPORT, parameters, placeholder);\n  return new ViewportDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction validateReferenceBasedTrigger(type, parameters, placeholder) {\n  if (parameters.length > 1) {\n    throw new Error(`\"${type}\" trigger can only have zero or one parameters`);\n  }\n  if (parameters.length === 0) {\n    if (placeholder === null) {\n      throw new Error(`\"${type}\" trigger with no parameters can only be placed on an @defer that has a @placeholder block`);\n    }\n    if (placeholder.children.length !== 1 || !(placeholder.children[0] instanceof Element$1)) {\n      throw new Error(`\"${type}\" trigger with no parameters can only be placed on an @defer that has a ` + `@placeholder block with exactly one root element node`);\n    }\n  }\n}\n/** Gets the index within an expression at which the trigger parameters start. */\nfunction getTriggerParametersStart(value, startPosition = 0) {\n  let hasFoundSeparator = false;\n  for (let i = startPosition; i < value.length; i++) {\n    if (SEPARATOR_PATTERN.test(value[i])) {\n      hasFoundSeparator = true;\n    } else if (hasFoundSeparator) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Parses a time expression from a deferred trigger to\n * milliseconds. Returns null if it cannot be parsed.\n */\nfunction parseDeferredTime(value) {\n  const match = value.match(TIME_PATTERN);\n  if (!match) {\n    return null;\n  }\n  const [time, units] = match;\n  return parseFloat(time) * (units === 's' ? 1000 : 1);\n}\n\n/** Pattern to identify a `prefetch when` trigger. */\nconst PREFETCH_WHEN_PATTERN = /^prefetch\\s+when\\s/;\n/** Pattern to identify a `prefetch on` trigger. */\nconst PREFETCH_ON_PATTERN = /^prefetch\\s+on\\s/;\n/** Pattern to identify a `minimum` parameter in a block. */\nconst MINIMUM_PARAMETER_PATTERN = /^minimum\\s/;\n/** Pattern to identify a `after` parameter in a block. */\nconst AFTER_PARAMETER_PATTERN = /^after\\s/;\n/** Pattern to identify a `when` parameter in a block. */\nconst WHEN_PARAMETER_PATTERN = /^when\\s/;\n/** Pattern to identify a `on` parameter in a block. */\nconst ON_PARAMETER_PATTERN = /^on\\s/;\n/**\n * Predicate function that determines if a block with\n * a specific name cam be connected to a `defer` block.\n */\nfunction isConnectedDeferLoopBlock(name) {\n  return name === 'placeholder' || name === 'loading' || name === 'error';\n}\n/** Creates a deferred block from an HTML AST node. */\nfunction createDeferredBlock(ast, connectedBlocks, visitor, bindingParser) {\n  const errors = [];\n  const {\n    placeholder,\n    loading,\n    error\n  } = parseConnectedBlocks(connectedBlocks, errors, visitor);\n  const {\n    triggers,\n    prefetchTriggers\n  } = parsePrimaryTriggers(ast.parameters, bindingParser, errors, placeholder);\n  // The `defer` block has a main span encompassing all of the connected branches as well.\n  let lastEndSourceSpan = ast.endSourceSpan;\n  let endOfLastSourceSpan = ast.sourceSpan.end;\n  if (connectedBlocks.length > 0) {\n    const lastConnectedBlock = connectedBlocks[connectedBlocks.length - 1];\n    lastEndSourceSpan = lastConnectedBlock.endSourceSpan;\n    endOfLastSourceSpan = lastConnectedBlock.sourceSpan.end;\n  }\n  const sourceSpanWithConnectedBlocks = new ParseSourceSpan(ast.sourceSpan.start, endOfLastSourceSpan);\n  const node = new DeferredBlock(visitAll(visitor, ast.children, ast.children), triggers, prefetchTriggers, placeholder, loading, error, ast.nameSpan, sourceSpanWithConnectedBlocks, ast.sourceSpan, ast.startSourceSpan, lastEndSourceSpan, ast.i18n);\n  return {\n    node,\n    errors\n  };\n}\nfunction parseConnectedBlocks(connectedBlocks, errors, visitor) {\n  let placeholder = null;\n  let loading = null;\n  let error = null;\n  for (const block of connectedBlocks) {\n    try {\n      if (!isConnectedDeferLoopBlock(block.name)) {\n        errors.push(new ParseError(block.startSourceSpan, `Unrecognized block \"@${block.name}\"`));\n        break;\n      }\n      switch (block.name) {\n        case 'placeholder':\n          if (placeholder !== null) {\n            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @placeholder block`));\n          } else {\n            placeholder = parsePlaceholderBlock(block, visitor);\n          }\n          break;\n        case 'loading':\n          if (loading !== null) {\n            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @loading block`));\n          } else {\n            loading = parseLoadingBlock(block, visitor);\n          }\n          break;\n        case 'error':\n          if (error !== null) {\n            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @error block`));\n          } else {\n            error = parseErrorBlock(block, visitor);\n          }\n          break;\n      }\n    } catch (e) {\n      errors.push(new ParseError(block.startSourceSpan, e.message));\n    }\n  }\n  return {\n    placeholder,\n    loading,\n    error\n  };\n}\nfunction parsePlaceholderBlock(ast, visitor) {\n  let minimumTime = null;\n  for (const param of ast.parameters) {\n    if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {\n      if (minimumTime != null) {\n        throw new Error(`@placeholder block can only have one \"minimum\" parameter`);\n      }\n      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));\n      if (parsedTime === null) {\n        throw new Error(`Could not parse time value of parameter \"minimum\"`);\n      }\n      minimumTime = parsedTime;\n    } else {\n      throw new Error(`Unrecognized parameter in @placeholder block: \"${param.expression}\"`);\n    }\n  }\n  return new DeferredBlockPlaceholder(visitAll(visitor, ast.children, ast.children), minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);\n}\nfunction parseLoadingBlock(ast, visitor) {\n  let afterTime = null;\n  let minimumTime = null;\n  for (const param of ast.parameters) {\n    if (AFTER_PARAMETER_PATTERN.test(param.expression)) {\n      if (afterTime != null) {\n        throw new Error(`@loading block can only have one \"after\" parameter`);\n      }\n      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));\n      if (parsedTime === null) {\n        throw new Error(`Could not parse time value of parameter \"after\"`);\n      }\n      afterTime = parsedTime;\n    } else if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {\n      if (minimumTime != null) {\n        throw new Error(`@loading block can only have one \"minimum\" parameter`);\n      }\n      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));\n      if (parsedTime === null) {\n        throw new Error(`Could not parse time value of parameter \"minimum\"`);\n      }\n      minimumTime = parsedTime;\n    } else {\n      throw new Error(`Unrecognized parameter in @loading block: \"${param.expression}\"`);\n    }\n  }\n  return new DeferredBlockLoading(visitAll(visitor, ast.children, ast.children), afterTime, minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);\n}\nfunction parseErrorBlock(ast, visitor) {\n  if (ast.parameters.length > 0) {\n    throw new Error(`@error block cannot have parameters`);\n  }\n  return new DeferredBlockError(visitAll(visitor, ast.children, ast.children), ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);\n}\nfunction parsePrimaryTriggers(params, bindingParser, errors, placeholder) {\n  const triggers = {};\n  const prefetchTriggers = {};\n  for (const param of params) {\n    // The lexer ignores the leading spaces so we can assume\n    // that the expression starts with a keyword.\n    if (WHEN_PARAMETER_PATTERN.test(param.expression)) {\n      parseWhenTrigger(param, bindingParser, triggers, errors);\n    } else if (ON_PARAMETER_PATTERN.test(param.expression)) {\n      parseOnTrigger(param, triggers, errors, placeholder);\n    } else if (PREFETCH_WHEN_PATTERN.test(param.expression)) {\n      parseWhenTrigger(param, bindingParser, prefetchTriggers, errors);\n    } else if (PREFETCH_ON_PATTERN.test(param.expression)) {\n      parseOnTrigger(param, prefetchTriggers, errors, placeholder);\n    } else {\n      errors.push(new ParseError(param.sourceSpan, 'Unrecognized trigger'));\n    }\n  }\n  return {\n    triggers,\n    prefetchTriggers\n  };\n}\nconst BIND_NAME_REGEXP = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/;\n// Group 1 = \"bind-\"\nconst KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nconst KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nconst KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nconst KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nconst KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nconst KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nconst IDENT_KW_IDX = 7;\nconst BINDING_DELIMS = {\n  BANANA_BOX: {\n    start: '[(',\n    end: ')]'\n  },\n  PROPERTY: {\n    start: '[',\n    end: ']'\n  },\n  EVENT: {\n    start: '(',\n    end: ')'\n  }\n};\nconst TEMPLATE_ATTR_PREFIX = '*';\nfunction htmlAstToRender3Ast(htmlNodes, bindingParser, options) {\n  const transformer = new HtmlAstToIvyAst(bindingParser, options);\n  const ivyNodes = visitAll(transformer, htmlNodes, htmlNodes);\n  // Errors might originate in either the binding parser or the html to ivy transformer\n  const allErrors = bindingParser.errors.concat(transformer.errors);\n  const result = {\n    nodes: ivyNodes,\n    errors: allErrors,\n    styleUrls: transformer.styleUrls,\n    styles: transformer.styles,\n    ngContentSelectors: transformer.ngContentSelectors\n  };\n  if (options.collectCommentNodes) {\n    result.commentNodes = transformer.commentNodes;\n  }\n  return result;\n}\nclass HtmlAstToIvyAst {\n  constructor(bindingParser, options) {\n    this.bindingParser = bindingParser;\n    this.options = options;\n    this.errors = [];\n    this.styles = [];\n    this.styleUrls = [];\n    this.ngContentSelectors = [];\n    // This array will be populated if `Render3ParseOptions['collectCommentNodes']` is true\n    this.commentNodes = [];\n    this.inI18nBlock = false;\n    /**\n     * Keeps track of the nodes that have been processed already when previous nodes were visited.\n     * These are typically blocks connected to other blocks or text nodes between connected blocks.\n     */\n    this.processedNodes = new Set();\n  }\n  // HTML visitor\n  visitElement(element) {\n    const isI18nRootElement = isI18nRootNode(element.i18n);\n    if (isI18nRootElement) {\n      if (this.inI18nBlock) {\n        this.reportError('Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.', element.sourceSpan);\n      }\n      this.inI18nBlock = true;\n    }\n    const preparsedElement = preparseElement(element);\n    if (preparsedElement.type === PreparsedElementType.SCRIPT) {\n      return null;\n    } else if (preparsedElement.type === PreparsedElementType.STYLE) {\n      const contents = textContents(element);\n      if (contents !== null) {\n        this.styles.push(contents);\n      }\n      return null;\n    } else if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n      this.styleUrls.push(preparsedElement.hrefAttr);\n      return null;\n    }\n    // Whether the element is a `<ng-template>`\n    const isTemplateElement = isNgTemplate(element.name);\n    const parsedProperties = [];\n    const boundEvents = [];\n    const variables = [];\n    const references = [];\n    const attributes = [];\n    const i18nAttrsMeta = {};\n    const templateParsedProperties = [];\n    const templateVariables = [];\n    // Whether the element has any *-attribute\n    let elementHasInlineTemplate = false;\n    for (const attribute of element.attrs) {\n      let hasBinding = false;\n      const normalizedName = normalizeAttributeName(attribute.name);\n      // `*attr` defines template bindings\n      let isTemplateBinding = false;\n      if (attribute.i18n) {\n        i18nAttrsMeta[attribute.name] = attribute.i18n;\n      }\n      if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n        // *-attributes\n        if (elementHasInlineTemplate) {\n          this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute.sourceSpan);\n        }\n        isTemplateBinding = true;\n        elementHasInlineTemplate = true;\n        const templateValue = attribute.value;\n        const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);\n        const parsedVariables = [];\n        const absoluteValueOffset = attribute.valueSpan ? attribute.valueSpan.start.offset :\n        // If there is no value span the attribute does not have a value, like `attr` in\n        //`<div attr></div>`. In this case, point to one character beyond the last character of\n        // the attribute name.\n        attribute.sourceSpan.start.offset + attribute.name.length;\n        this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, absoluteValueOffset, [], templateParsedProperties, parsedVariables, true /* isIvyAst */);\n        templateVariables.push(...parsedVariables.map(v => new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan)));\n      } else {\n        // Check for variables, events, property bindings, interpolation\n        hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);\n      }\n      if (!hasBinding && !isTemplateBinding) {\n        // don't include the bindings as attributes as well in the AST\n        attributes.push(this.visitAttribute(attribute));\n      }\n    }\n    let children;\n    if (preparsedElement.nonBindable) {\n      // The `NonBindableVisitor` may need to return an array of nodes for blocks so we need\n      // to flatten the array here. Avoid doing this for the `HtmlAstToIvyAst` since `flat` creates\n      // a new array.\n      children = visitAll(NON_BINDABLE_VISITOR, element.children).flat(Infinity);\n    } else {\n      children = visitAll(this, element.children, element.children);\n    }\n    let parsedElement;\n    if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n      // `<ng-content>`\n      if (element.children && !element.children.every(node => isEmptyTextNode(node) || isCommentNode(node))) {\n        this.reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n      }\n      const selector = preparsedElement.selectAttr;\n      const attrs = element.attrs.map(attr => this.visitAttribute(attr));\n      parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);\n      this.ngContentSelectors.push(selector);\n    } else if (isTemplateElement) {\n      // `<ng-template>`\n      const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n      parsedElement = new Template(element.name, attributes, attrs.bound, boundEvents, [/* no template attributes */], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    } else {\n      const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n      parsedElement = new Element$1(element.name, attributes, attrs.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n    if (elementHasInlineTemplate) {\n      // If this node is an inline-template (e.g. has *ngFor) then we need to create a template\n      // node that contains this node.\n      // Moreover, if the node is an element, then we need to hoist its attributes to the template\n      // node for matching against content projection selectors.\n      const attrs = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);\n      const templateAttrs = [];\n      attrs.literal.forEach(attr => templateAttrs.push(attr));\n      attrs.bound.forEach(attr => templateAttrs.push(attr));\n      const hoistedAttrs = parsedElement instanceof Element$1 ? {\n        attributes: parsedElement.attributes,\n        inputs: parsedElement.inputs,\n        outputs: parsedElement.outputs\n      } : {\n        attributes: [],\n        inputs: [],\n        outputs: []\n      };\n      // For <ng-template>s with structural directives on them, avoid passing i18n information to\n      // the wrapping template to prevent unnecessary i18n instructions from being generated. The\n      // necessary i18n meta information will be extracted from child elements.\n      const i18n = isTemplateElement && isI18nRootElement ? undefined : element.i18n;\n      const name = parsedElement instanceof Template ? null : parsedElement.name;\n      parsedElement = new Template(name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [/* no references */], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, i18n);\n    }\n    if (isI18nRootElement) {\n      this.inI18nBlock = false;\n    }\n    return parsedElement;\n  }\n  visitAttribute(attribute) {\n    return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n  }\n  visitText(text) {\n    return this.processedNodes.has(text) ? null : this._visitTextWithInterpolation(text.value, text.sourceSpan, text.tokens, text.i18n);\n  }\n  visitExpansion(expansion) {\n    if (!expansion.i18n) {\n      // do not generate Icu in case it was created\n      // outside of i18n block in a template\n      return null;\n    }\n    if (!isI18nRootNode(expansion.i18n)) {\n      throw new Error(`Invalid type \"${expansion.i18n.constructor}\" for \"i18n\" property of ${expansion.sourceSpan.toString()}. Expected a \"Message\"`);\n    }\n    const message = expansion.i18n;\n    const vars = {};\n    const placeholders = {};\n    // extract VARs from ICUs - we process them separately while\n    // assembling resulting message via goog.getMsg function, since\n    // we need to pass them to top-level goog.getMsg call\n    Object.keys(message.placeholders).forEach(key => {\n      const value = message.placeholders[key];\n      if (key.startsWith(I18N_ICU_VAR_PREFIX)) {\n        // Currently when the `plural` or `select` keywords in an ICU contain trailing spaces (e.g.\n        // `{count, select , ...}`), these spaces are also included into the key names in ICU vars\n        // (e.g. \"VAR_SELECT \"). These trailing spaces are not desirable, since they will later be\n        // converted into `_` symbols while normalizing placeholder names, which might lead to\n        // mismatches at runtime (i.e. placeholder will not be replaced with the correct value).\n        const formattedKey = key.trim();\n        const ast = this.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);\n        vars[formattedKey] = new BoundText(ast, value.sourceSpan);\n      } else {\n        placeholders[key] = this._visitTextWithInterpolation(value.text, value.sourceSpan, null);\n      }\n    });\n    return new Icu$1(vars, placeholders, expansion.sourceSpan, message);\n  }\n  visitExpansionCase(expansionCase) {\n    return null;\n  }\n  visitComment(comment) {\n    if (this.options.collectCommentNodes) {\n      this.commentNodes.push(new Comment$1(comment.value || '', comment.sourceSpan));\n    }\n    return null;\n  }\n  visitBlockParameter() {\n    return null;\n  }\n  visitBlock(block, context) {\n    const index = Array.isArray(context) ? context.indexOf(block) : -1;\n    if (index === -1) {\n      throw new Error('Visitor invoked incorrectly. Expecting visitBlock to be invoked siblings array as its context');\n    }\n    // Connected blocks may have been processed as a part of the previous block.\n    if (this.processedNodes.has(block)) {\n      return null;\n    }\n    let result = null;\n    switch (block.name) {\n      case 'defer':\n        result = createDeferredBlock(block, this.findConnectedBlocks(index, context, isConnectedDeferLoopBlock), this, this.bindingParser);\n        break;\n      case 'switch':\n        result = createSwitchBlock(block, this, this.bindingParser);\n        break;\n      case 'for':\n        result = createForLoop(block, this.findConnectedBlocks(index, context, isConnectedForLoopBlock), this, this.bindingParser);\n        break;\n      case 'if':\n        result = createIfBlock(block, this.findConnectedBlocks(index, context, isConnectedIfLoopBlock), this, this.bindingParser);\n        break;\n      default:\n        let errorMessage;\n        if (isConnectedDeferLoopBlock(block.name)) {\n          errorMessage = `@${block.name} block can only be used after an @defer block.`;\n          this.processedNodes.add(block);\n        } else if (isConnectedForLoopBlock(block.name)) {\n          errorMessage = `@${block.name} block can only be used after an @for block.`;\n          this.processedNodes.add(block);\n        } else if (isConnectedIfLoopBlock(block.name)) {\n          errorMessage = `@${block.name} block can only be used after an @if or @else if block.`;\n          this.processedNodes.add(block);\n        } else {\n          errorMessage = `Unrecognized block @${block.name}.`;\n        }\n        result = {\n          node: new UnknownBlock(block.name, block.sourceSpan, block.nameSpan),\n          errors: [new ParseError(block.sourceSpan, errorMessage)]\n        };\n        break;\n    }\n    this.errors.push(...result.errors);\n    return result.node;\n  }\n  findConnectedBlocks(primaryBlockIndex, siblings, predicate) {\n    const relatedBlocks = [];\n    for (let i = primaryBlockIndex + 1; i < siblings.length; i++) {\n      const node = siblings[i];\n      // Ignore empty text nodes between blocks.\n      if (node instanceof Text && node.value.trim().length === 0) {\n        // Add the text node to the processed nodes since we don't want\n        // it to be generated between the connected nodes.\n        this.processedNodes.add(node);\n        continue;\n      }\n      // Stop searching as soon as we hit a non-block node or a block that is unrelated.\n      if (!(node instanceof Block) || !predicate(node.name)) {\n        break;\n      }\n      relatedBlocks.push(node);\n      this.processedNodes.add(node);\n    }\n    return relatedBlocks;\n  }\n  // convert view engine `ParsedProperty` to a format suitable for IVY\n  extractAttributes(elementName, properties, i18nPropsMeta) {\n    const bound = [];\n    const literal = [];\n    properties.forEach(prop => {\n      const i18n = i18nPropsMeta[prop.name];\n      if (prop.isLiteral) {\n        literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n));\n      } else {\n        // Note that validation is skipped and property mapping is disabled\n        // due to the fact that we need to make sure a given prop is not an\n        // input of a directive and directive matching happens at runtime.\n        const bep = this.bindingParser.createBoundElementProperty(elementName, prop, /* skipValidation */true, /* mapPropertyName */false);\n        bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));\n      }\n    });\n    return {\n      bound,\n      literal\n    };\n  }\n  parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {\n    const name = normalizeAttributeName(attribute.name);\n    const value = attribute.value;\n    const srcSpan = attribute.sourceSpan;\n    const absoluteOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : srcSpan.start.offset;\n    function createKeySpan(srcSpan, prefix, identifier) {\n      // We need to adjust the start location for the keySpan to account for the removed 'data-'\n      // prefix from `normalizeAttributeName`.\n      const normalizationAdjustment = attribute.name.length - name.length;\n      const keySpanStart = srcSpan.start.moveBy(prefix.length + normalizationAdjustment);\n      const keySpanEnd = keySpanStart.moveBy(identifier.length);\n      return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);\n    }\n    const bindParts = name.match(BIND_NAME_REGEXP);\n    if (bindParts) {\n      if (bindParts[KW_BIND_IDX] != null) {\n        const identifier = bindParts[IDENT_KW_IDX];\n        const keySpan = createKeySpan(srcSpan, bindParts[KW_BIND_IDX], identifier);\n        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n      } else if (bindParts[KW_LET_IDX]) {\n        if (isTemplateElement) {\n          const identifier = bindParts[IDENT_KW_IDX];\n          const keySpan = createKeySpan(srcSpan, bindParts[KW_LET_IDX], identifier);\n          this.parseVariable(identifier, value, srcSpan, keySpan, attribute.valueSpan, variables);\n        } else {\n          this.reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n        }\n      } else if (bindParts[KW_REF_IDX]) {\n        const identifier = bindParts[IDENT_KW_IDX];\n        const keySpan = createKeySpan(srcSpan, bindParts[KW_REF_IDX], identifier);\n        this.parseReference(identifier, value, srcSpan, keySpan, attribute.valueSpan, references);\n      } else if (bindParts[KW_ON_IDX]) {\n        const events = [];\n        const identifier = bindParts[IDENT_KW_IDX];\n        const keySpan = createKeySpan(srcSpan, bindParts[KW_ON_IDX], identifier);\n        this.bindingParser.parseEvent(identifier, value, /* isAssignmentEvent */false, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);\n        addEvents(events, boundEvents);\n      } else if (bindParts[KW_BINDON_IDX]) {\n        const identifier = bindParts[IDENT_KW_IDX];\n        const keySpan = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX], identifier);\n        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n        this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);\n      } else if (bindParts[KW_AT_IDX]) {\n        const keySpan = createKeySpan(srcSpan, '', name);\n        this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n      }\n      return true;\n    }\n    // We didn't see a kw-prefixed property binding, but we have not yet checked\n    // for the []/()/[()] syntax.\n    let delims = null;\n    if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {\n      delims = BINDING_DELIMS.BANANA_BOX;\n    } else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {\n      delims = BINDING_DELIMS.PROPERTY;\n    } else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {\n      delims = BINDING_DELIMS.EVENT;\n    }\n    if (delims !== null &&\n    // NOTE: older versions of the parser would match a start/end delimited\n    // binding iff the property name was terminated by the ending delimiter\n    // and the identifier in the binding was non-empty.\n    // TODO(ayazhafiz): update this to handle malformed bindings.\n    name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {\n      const identifier = name.substring(delims.start.length, name.length - delims.end.length);\n      const keySpan = createKeySpan(srcSpan, delims.start, identifier);\n      if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {\n        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n        this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);\n      } else if (delims.start === BINDING_DELIMS.PROPERTY.start) {\n        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n      } else {\n        const events = [];\n        this.bindingParser.parseEvent(identifier, value, /* isAssignmentEvent */false, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);\n        addEvents(events, boundEvents);\n      }\n      return true;\n    }\n    // No explicit binding found.\n    const keySpan = createKeySpan(srcSpan, '' /* prefix */, name);\n    const hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan, attribute.valueTokens ?? null);\n    return hasBinding;\n  }\n  _visitTextWithInterpolation(value, sourceSpan, interpolatedTokens, i18n) {\n    const valueNoNgsp = replaceNgsp(value);\n    const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan, interpolatedTokens);\n    return expr ? new BoundText(expr, sourceSpan, i18n) : new Text$3(valueNoNgsp, sourceSpan);\n  }\n  parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {\n    if (identifier.indexOf('-') > -1) {\n      this.reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n    } else if (identifier.length === 0) {\n      this.reportError(`Variable does not have a name`, sourceSpan);\n    }\n    variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));\n  }\n  parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {\n    if (identifier.indexOf('-') > -1) {\n      this.reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n    } else if (identifier.length === 0) {\n      this.reportError(`Reference does not have a name`, sourceSpan);\n    } else if (references.some(reference => reference.name === identifier)) {\n      this.reportError(`Reference \"#${identifier}\" is defined more than once`, sourceSpan);\n    }\n    references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));\n  }\n  parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {\n    const events = [];\n    this.bindingParser.parseEvent(`${name}Change`, `${expression} =$event`, /* isAssignmentEvent */true, sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events, keySpan);\n    addEvents(events, boundEvents);\n  }\n  reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n    this.errors.push(new ParseError(sourceSpan, message, level));\n  }\n}\nclass NonBindableVisitor {\n  visitElement(ast) {\n    const preparsedElement = preparseElement(ast);\n    if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {\n      // Skipping <script> for security reasons\n      // Skipping <style> and stylesheets as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n    const children = visitAll(this, ast.children, null);\n    return new Element$1(ast.name, visitAll(this, ast.attrs), /* inputs */[], /* outputs */[], children, /* references */[], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);\n  }\n  visitComment(comment) {\n    return null;\n  }\n  visitAttribute(attribute) {\n    return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n  }\n  visitText(text) {\n    return new Text$3(text.value, text.sourceSpan);\n  }\n  visitExpansion(expansion) {\n    return null;\n  }\n  visitExpansionCase(expansionCase) {\n    return null;\n  }\n  visitBlock(block, context) {\n    const nodes = [\n    // In an ngNonBindable context we treat the opening/closing tags of block as plain text.\n    // This is the as if the `tokenizeBlocks` option was disabled.\n    new Text$3(block.startSourceSpan.toString(), block.startSourceSpan), ...visitAll(this, block.children)];\n    if (block.endSourceSpan !== null) {\n      nodes.push(new Text$3(block.endSourceSpan.toString(), block.endSourceSpan));\n    }\n    return nodes;\n  }\n  visitBlockParameter(parameter, context) {\n    return null;\n  }\n}\nconst NON_BINDABLE_VISITOR = new NonBindableVisitor();\nfunction normalizeAttributeName(attrName) {\n  return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n}\nfunction addEvents(events, boundEvents) {\n  boundEvents.push(...events.map(e => BoundEvent.fromParsedEvent(e)));\n}\nfunction isEmptyTextNode(node) {\n  return node instanceof Text && node.value.trim().length == 0;\n}\nfunction isCommentNode(node) {\n  return node instanceof Comment;\n}\nfunction textContents(node) {\n  if (node.children.length !== 1 || !(node.children[0] instanceof Text)) {\n    return null;\n  } else {\n    return node.children[0].value;\n  }\n}\nvar TagType;\n(function (TagType) {\n  TagType[TagType[\"ELEMENT\"] = 0] = \"ELEMENT\";\n  TagType[TagType[\"TEMPLATE\"] = 1] = \"TEMPLATE\";\n})(TagType || (TagType = {}));\n/**\n * Generates an object that is used as a shared state between parent and all child contexts.\n */\nfunction setupRegistry() {\n  return {\n    getUniqueId: getSeqNumberGenerator(),\n    icus: new Map()\n  };\n}\n/**\n * I18nContext is a helper class which keeps track of all i18n-related aspects\n * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.\n *\n * When we enter a nested template, the top-level context is being passed down\n * to the nested component, which uses this context to generate a child instance\n * of I18nContext class (to handle nested template) and at the end, reconciles it back\n * with the parent context.\n *\n * @param index Instruction index of i18nStart, which initiates this context\n * @param ref Reference to a translation const that represents the content if thus context\n * @param level Nesting level defined for child contexts\n * @param templateIndex Instruction index of a template which this context belongs to\n * @param meta Meta information (id, meaning, description, etc) associated with this context\n */\nclass I18nContext {\n  constructor(index, ref, level = 0, templateIndex = null, meta, registry) {\n    this.index = index;\n    this.ref = ref;\n    this.level = level;\n    this.templateIndex = templateIndex;\n    this.meta = meta;\n    this.registry = registry;\n    this.bindings = new Set();\n    this.placeholders = new Map();\n    this.isEmitted = false;\n    this._unresolvedCtxCount = 0;\n    this._registry = registry || setupRegistry();\n    this.id = this._registry.getUniqueId();\n  }\n  appendTag(type, node, index, closed) {\n    if (node.isVoid && closed) {\n      return; // ignore \"close\" for void tags\n    }\n    const ph = node.isVoid || !closed ? node.startName : node.closeName;\n    const content = {\n      type,\n      index,\n      ctx: this.id,\n      isVoid: node.isVoid,\n      closed\n    };\n    updatePlaceholderMap(this.placeholders, ph, content);\n  }\n  appendBlockPart(node, index, closed) {\n    const ph = closed ? node.closeName : node.startName;\n    const content = {\n      type: TagType.TEMPLATE,\n      index,\n      ctx: this.id,\n      closed\n    };\n    updatePlaceholderMap(this.placeholders, ph, content);\n  }\n  get icus() {\n    return this._registry.icus;\n  }\n  get isRoot() {\n    return this.level === 0;\n  }\n  get isResolved() {\n    return this._unresolvedCtxCount === 0;\n  }\n  getSerializedPlaceholders() {\n    const result = new Map();\n    this.placeholders.forEach((values, key) => result.set(key, values.map(serializePlaceholderValue)));\n    return result;\n  }\n  // public API to accumulate i18n-related content\n  appendBinding(binding) {\n    this.bindings.add(binding);\n  }\n  appendIcu(name, ref) {\n    updatePlaceholderMap(this._registry.icus, name, ref);\n  }\n  appendBoundText(node) {\n    const phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);\n    phs.forEach((values, key) => updatePlaceholderMap(this.placeholders, key, ...values));\n  }\n  appendTemplate(node, index) {\n    // add open and close tags at the same time,\n    // since we process nested templates separately\n    this.appendTag(TagType.TEMPLATE, node, index, false);\n    this.appendTag(TagType.TEMPLATE, node, index, true);\n    this._unresolvedCtxCount++;\n  }\n  appendBlock(node, index) {\n    // add open and close tags at the same time,\n    // since we process nested templates separately\n    this.appendBlockPart(node, index, false);\n    this.appendBlockPart(node, index, true);\n    this._unresolvedCtxCount++;\n  }\n  appendElement(node, index, closed) {\n    this.appendTag(TagType.ELEMENT, node, index, closed);\n  }\n  appendProjection(node, index) {\n    // Add open and close tags at the same time, since `<ng-content>` has no content,\n    // so when we come across `<ng-content>` we can register both open and close tags.\n    // Note: runtime i18n logic doesn't distinguish `<ng-content>` tag placeholders and\n    // regular element tag placeholders, so we generate element placeholders for both types.\n    this.appendTag(TagType.ELEMENT, node, index, false);\n    this.appendTag(TagType.ELEMENT, node, index, true);\n  }\n  /**\n   * Generates an instance of a child context based on the root one,\n   * when we enter a nested template within I18n section.\n   *\n   * @param index Instruction index of corresponding i18nStart, which initiates this context\n   * @param templateIndex Instruction index of a template which this context belongs to\n   * @param meta Meta information (id, meaning, description, etc) associated with this context\n   *\n   * @returns I18nContext instance\n   */\n  forkChildContext(index, templateIndex, meta) {\n    return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);\n  }\n  /**\n   * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).\n   *\n   * @param context Child I18nContext instance to be reconciled with parent context.\n   */\n  reconcileChildContext(context) {\n    // set the right context id for open and close\n    // template tags, so we can use it as sub-block ids\n    ['start', 'close'].forEach(op => {\n      const key = context.meta[`${op}Name`];\n      const phs = this.placeholders.get(key) || [];\n      const tag = phs.find(findTemplateFn(this.id, context.templateIndex));\n      if (tag) {\n        tag.ctx = context.id;\n      }\n    });\n    // reconcile placeholders\n    const childPhs = context.placeholders;\n    childPhs.forEach((values, key) => {\n      const phs = this.placeholders.get(key);\n      if (!phs) {\n        this.placeholders.set(key, values);\n        return;\n      }\n      // try to find matching template...\n      const tmplIdx = phs.findIndex(findTemplateFn(context.id, context.templateIndex));\n      if (tmplIdx >= 0) {\n        // ... if found - replace it with nested template content\n        const isCloseTag = key.startsWith('CLOSE');\n        const isTemplateTag = key.endsWith('NG-TEMPLATE');\n        if (isTemplateTag) {\n          // current template's content is placed before or after\n          // parent template tag, depending on the open/close attribute\n          phs.splice(tmplIdx + (isCloseTag ? 0 : 1), 0, ...values);\n        } else {\n          const idx = isCloseTag ? values.length - 1 : 0;\n          values[idx].tmpl = phs[tmplIdx];\n          phs.splice(tmplIdx, 1, ...values);\n        }\n      } else {\n        // ... otherwise just append content to placeholder value\n        phs.push(...values);\n      }\n      this.placeholders.set(key, phs);\n    });\n    this._unresolvedCtxCount--;\n  }\n}\n//\n// Helper methods\n//\nfunction wrap(symbol, index, contextId, closed) {\n  const state = closed ? '/' : '';\n  return wrapI18nPlaceholder(`${state}${symbol}${index}`, contextId);\n}\nfunction wrapTag(symbol, {\n  index,\n  ctx,\n  isVoid\n}, closed) {\n  return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) : wrap(symbol, index, ctx, closed);\n}\nfunction findTemplateFn(ctx, templateIndex) {\n  return token => typeof token === 'object' && token.type === TagType.TEMPLATE && token.index === templateIndex && token.ctx === ctx;\n}\nfunction serializePlaceholderValue(value) {\n  const element = (data, closed) => wrapTag('#', data, closed);\n  const template = (data, closed) => wrapTag('*', data, closed);\n  switch (value.type) {\n    case TagType.ELEMENT:\n      // close element tag\n      if (value.closed) {\n        return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');\n      }\n      // open element tag that also initiates a template\n      if (value.tmpl) {\n        return template(value.tmpl) + element(value) + (value.isVoid ? template(value.tmpl, true) : '');\n      }\n      return element(value);\n    case TagType.TEMPLATE:\n      return template(value, value.closed);\n    default:\n      return value;\n  }\n}\n\n// Selector attribute name of `<ng-content>`\nconst NG_CONTENT_SELECT_ATTR = 'select';\n// Attribute name of `ngProjectAs`.\nconst NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n// Global symbols available only inside event bindings.\nconst EVENT_BINDING_SCOPE_GLOBALS = new Set(['$event']);\n// Tag name of the `ng-template` element.\nconst NG_TEMPLATE_TAG_NAME = 'ng-template';\n// List of supported global targets for event listeners\nconst GLOBAL_TARGET_RESOLVERS = new Map([['window', Identifiers.resolveWindow], ['document', Identifiers.resolveDocument], ['body', Identifiers.resolveBody]]);\nconst LEADING_TRIVIA_CHARS = [' ', '\\n', '\\r', '\\t'];\n//  if (rf & flags) { .. }\nfunction renderFlagCheckIfStmt(flags, statements) {\n  return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);\n}\nfunction prepareEventListenerParameters(eventAst, handlerName = null, scope = null) {\n  const {\n    type,\n    name,\n    target,\n    phase,\n    handler\n  } = eventAst;\n  if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {\n    throw new Error(`Unexpected global target '${target}' defined for '${name}' event.\n        Supported list of global targets: ${Array.from(GLOBAL_TARGET_RESOLVERS.keys())}.`);\n  }\n  const eventArgumentName = '$event';\n  const implicitReceiverAccesses = new Set();\n  const implicitReceiverExpr = scope === null || scope.bindingLevel === 0 ? variable(CONTEXT_NAME) : scope.getOrCreateSharedContextVar(0);\n  const bindingStatements = convertActionBinding(scope, implicitReceiverExpr, handler, 'b', eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);\n  const statements = [];\n  const variableDeclarations = scope?.variableDeclarations();\n  const restoreViewStatement = scope?.restoreViewStatement();\n  if (variableDeclarations) {\n    // `variableDeclarations` needs to run first, because\n    // `restoreViewStatement` depends on the result.\n    statements.push(...variableDeclarations);\n  }\n  statements.push(...bindingStatements);\n  if (restoreViewStatement) {\n    statements.unshift(restoreViewStatement);\n    // If there's a `restoreView` call, we need to reset the view at the end of the listener\n    // in order to avoid a leak. If there's a `return` statement already, we wrap it in the\n    // call, e.g. `return resetView(ctx.foo())`. Otherwise we add the call as the last statement.\n    const lastStatement = statements[statements.length - 1];\n    if (lastStatement instanceof ReturnStatement) {\n      statements[statements.length - 1] = new ReturnStatement(invokeInstruction(lastStatement.value.sourceSpan, Identifiers.resetView, [lastStatement.value]));\n    } else {\n      statements.push(new ExpressionStatement(invokeInstruction(null, Identifiers.resetView, [])));\n    }\n  }\n  const eventName = type === 1 /* ParsedEventType.Animation */ ? prepareSyntheticListenerName(name, phase) : name;\n  const fnName = handlerName && sanitizeIdentifier(handlerName);\n  const fnArgs = [];\n  if (implicitReceiverAccesses.has(eventArgumentName)) {\n    fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));\n  }\n  const handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);\n  const params = [literal(eventName), handlerFn];\n  if (target) {\n    params.push(literal(false),\n    // `useCapture` flag, defaults to `false`\n    importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));\n  }\n  return params;\n}\nfunction createComponentDefConsts() {\n  return {\n    prepareStatements: [],\n    constExpressions: [],\n    i18nVarRefsCache: new Map()\n  };\n}\nclass TemplateData {\n  constructor(name, index, scope, visitor) {\n    this.name = name;\n    this.index = index;\n    this.scope = scope;\n    this.visitor = visitor;\n  }\n  getConstCount() {\n    return this.visitor.getConstCount();\n  }\n  getVarCount() {\n    return this.visitor.getVarCount();\n  }\n}\nclass TemplateDefinitionBuilder {\n  constructor(constantPool, parentBindingScope, level = 0, contextName, i18nContext, templateIndex, templateName, _namespace, relativeContextFilePath, i18nUseExternalIds, deferBlocks, elementLocations, allDeferrableDepsFn, _constants = createComponentDefConsts()) {\n    this.constantPool = constantPool;\n    this.level = level;\n    this.contextName = contextName;\n    this.i18nContext = i18nContext;\n    this.templateIndex = templateIndex;\n    this.templateName = templateName;\n    this._namespace = _namespace;\n    this.i18nUseExternalIds = i18nUseExternalIds;\n    this.deferBlocks = deferBlocks;\n    this.elementLocations = elementLocations;\n    this.allDeferrableDepsFn = allDeferrableDepsFn;\n    this._constants = _constants;\n    this._dataIndex = 0;\n    this._bindingContext = 0;\n    this._prefixCode = [];\n    /**\n     * List of callbacks to generate creation mode instructions. We store them here as we process\n     * the template so bindings in listeners are resolved only once all nodes have been visited.\n     * This ensures all local refs and context variables are available for matching.\n     */\n    this._creationCodeFns = [];\n    /**\n     * List of callbacks to generate update mode instructions. We store them here as we process\n     * the template so bindings are resolved only once all nodes have been visited. This ensures\n     * all local refs and context variables are available for matching.\n     */\n    this._updateCodeFns = [];\n    /** Index of the currently-selected node. */\n    this._currentIndex = 0;\n    /** Temporary variable declarations generated from visiting pipes, literals, etc. */\n    this._tempVariables = [];\n    /**\n     * Temporary variable used to store state between control flow instructions.\n     * Should be accessed via the `allocateControlFlowTempVariable` method.\n     */\n    this._controlFlowTempVariable = null;\n    /**\n     * List of callbacks to build nested templates. Nested templates must not be visited until\n     * after the parent template has finished visiting all of its nodes. This ensures that all\n     * local ref bindings in nested templates are able to find local ref values if the refs\n     * are defined after the template declaration.\n     */\n    this._nestedTemplateFns = [];\n    // i18n context local to this template\n    this.i18n = null;\n    // Number of slots to reserve for pureFunctions\n    this._pureFunctionSlots = 0;\n    // Number of binding slots\n    this._bindingSlots = 0;\n    // Projection slots found in the template. Projection slots can distribute projected\n    // nodes based on a selector, or can just use the wildcard selector to match\n    // all nodes which aren't matching any selector.\n    this._ngContentReservedSlots = [];\n    // Number of non-default selectors found in all parent templates of this template. We need to\n    // track it to properly adjust projection slot index in the `projection` instruction.\n    this._ngContentSelectorsOffset = 0;\n    // Expression that should be used as implicit receiver when converting template\n    // expressions to output AST.\n    this._implicitReceiverExpr = null;\n    // These should be handled in the template or element directly.\n    this.visitReference = invalid;\n    this.visitVariable = invalid;\n    this.visitTextAttribute = invalid;\n    this.visitBoundAttribute = invalid;\n    this.visitBoundEvent = invalid;\n    this.visitDeferredTrigger = invalid;\n    this.visitDeferredBlockError = invalid;\n    this.visitDeferredBlockLoading = invalid;\n    this.visitDeferredBlockPlaceholder = invalid;\n    this.visitIfBlockBranch = invalid;\n    this.visitSwitchBlockCase = invalid;\n    this.visitForLoopBlockEmpty = invalid;\n    this.visitUnknownBlock = invalid;\n    this._bindingScope = parentBindingScope.nestedScope(level);\n    // Turn the relative context file path into an identifier by replacing non-alphanumeric\n    // characters with underscores.\n    this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';\n    this._valueConverter = new ValueConverter(constantPool, () => this.allocateDataSlot(), numSlots => this.allocatePureFunctionSlots(numSlots), (name, localName, slot, value) => {\n      this._bindingScope.set(this.level, localName, value);\n      this.creationInstruction(null, Identifiers.pipe, [literal(slot), literal(name)]);\n    });\n  }\n  buildTemplateFunction(nodes, variables, ngContentSelectorsOffset = 0, i18n, variableAliases) {\n    this._ngContentSelectorsOffset = ngContentSelectorsOffset;\n    if (this._namespace !== Identifiers.namespaceHTML) {\n      this.creationInstruction(null, this._namespace);\n    }\n    // Create variable bindings\n    variables.forEach(v => {\n      const alias = variableAliases?.[v.name];\n      this.registerContextVariables(v.name, v.value);\n      if (alias) {\n        this.registerContextVariables(alias, v.value);\n      }\n    });\n    // Initiate i18n context in case:\n    // - this template has parent i18n context\n    // - or the template has i18n meta associated with it,\n    //   but it's not initiated by the Element (e.g. <ng-template i18n>)\n    const initI18nContext = this.i18nContext || isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) && !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n);\n    const selfClosingI18nInstruction = hasTextChildrenOnly(nodes);\n    if (initI18nContext) {\n      this.i18nStart(null, i18n, selfClosingI18nInstruction);\n    }\n    // This is the initial pass through the nodes of this template. In this pass, we\n    // queue all creation mode and update mode instructions for generation in the second\n    // pass. It's necessary to separate the passes to ensure local refs are defined before\n    // resolving bindings. We also count bindings in this pass as we walk bound expressions.\n    visitAll$1(this, nodes);\n    // Add total binding count to pure function count so pure function instructions are\n    // generated with the correct slot offset when update instructions are processed.\n    this._pureFunctionSlots += this._bindingSlots;\n    // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and\n    // `pipeBind` update instructions), so we have to update the slot offsets manually\n    // to account for bindings.\n    this._valueConverter.updatePipeSlotOffsets(this._bindingSlots);\n    // Nested templates must be processed before creation instructions so template()\n    // instructions can be generated with the correct internal const count.\n    this._nestedTemplateFns.forEach(buildTemplateFn => buildTemplateFn());\n    // Output the `projectionDef` instruction when some `<ng-content>` tags are present.\n    // The `projectionDef` instruction is only emitted for the component template and\n    // is skipped for nested templates (<ng-template> tags).\n    if (this.level === 0 && this._ngContentReservedSlots.length) {\n      const parameters = [];\n      // By default the `projectionDef` instructions creates one slot for the wildcard\n      // selector if no parameters are passed. Therefore we only want to allocate a new\n      // array for the projection slots if the default projection slot is not sufficient.\n      if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {\n        const r3ReservedSlots = this._ngContentReservedSlots.map(s => s !== '*' ? parseSelectorToR3Selector(s) : s);\n        parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));\n      }\n      // Since we accumulate ngContent selectors while processing template elements,\n      // we *prepend* `projectionDef` to creation instructions block, to put it before\n      // any `projection` instructions\n      this.creationInstruction(null, Identifiers.projectionDef, parameters, /* prepend */true);\n    }\n    if (initI18nContext) {\n      this.i18nEnd(null, selfClosingI18nInstruction);\n    }\n    // Generate all the creation mode instructions (e.g. resolve bindings in listeners)\n    const creationStatements = getInstructionStatements(this._creationCodeFns);\n    // Generate all the update mode instructions (e.g. resolve property or text bindings)\n    const updateStatements = getInstructionStatements(this._updateCodeFns);\n    //  Variable declaration must occur after binding resolution so we can generate context\n    //  instructions that build on each other.\n    // e.g. const b = nextContext().$implicit(); const b = nextContext();\n    const creationVariables = this._bindingScope.viewSnapshotStatements();\n    const updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);\n    const creationBlock = creationStatements.length > 0 ? [renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, creationVariables.concat(creationStatements))] : [];\n    const updateBlock = updateStatements.length > 0 ? [renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateVariables.concat(updateStatements))] : [];\n    return fn(\n    // i.e. (rf: RenderFlags, ctx: any)\n    [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [\n    // Temporary variable declarations for query refresh (i.e. let _t: any;)\n    ...this._prefixCode,\n    // Creating mode (i.e. if (rf & RenderFlags.Create) { ... })\n    ...creationBlock,\n    // Binding and refresh mode (i.e. if (rf & RenderFlags.Update) {...})\n    ...updateBlock], INFERRED_TYPE, null, this.templateName);\n  }\n  // LocalResolver\n  getLocal(name) {\n    return this._bindingScope.get(name);\n  }\n  // LocalResolver\n  notifyImplicitReceiverUse() {\n    this._bindingScope.notifyImplicitReceiverUse();\n  }\n  // LocalResolver\n  maybeRestoreView() {\n    this._bindingScope.maybeRestoreView();\n  }\n  i18nTranslate(message, params = {}, ref, transformFn) {\n    const _ref = ref || this.i18nGenerateMainBlockVar();\n    // Closure Compiler requires const names to start with `MSG_` but disallows any other const to\n    // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call\n    const closureVar = this.i18nGenerateClosureVar(message.id);\n    const statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);\n    this._constants.prepareStatements.push(...statements);\n    return _ref;\n  }\n  registerContextVariables(name, value) {\n    const scopedName = this._bindingScope.freshReferenceName();\n    const retrievalLevel = this.level;\n    const isDirect = value === DIRECT_CONTEXT_REFERENCE;\n    const lhs = variable(name + scopedName);\n    this._bindingScope.set(retrievalLevel, name, scope => {\n      // If we're at the top level and we're referring to the context variable directly, we\n      // can do so through the implicit receiver, instead of renaming it. Note that this does\n      // not apply to listeners, because they need to restore the context.\n      return isDirect && scope.bindingLevel === retrievalLevel && !scope.isListenerScope() ? variable(CONTEXT_NAME) : lhs;\n    }, 1 /* DeclarationPriority.CONTEXT */, (scope, relativeLevel) => {\n      let rhs;\n      if (scope.bindingLevel === retrievalLevel) {\n        if (scope.isListenerScope() && scope.hasRestoreViewVariable()) {\n          // e.g. restoredCtx.\n          // We have to get the context from a view reference, if one is available, because\n          // the context that was passed in during creation may not be correct anymore.\n          // For more information see: https://github.com/angular/angular/pull/40360.\n          rhs = variable(RESTORED_VIEW_CONTEXT_NAME);\n          scope.notifyRestoredViewContextUse();\n        } else if (isDirect) {\n          // If we have a direct read of the context at the top level we don't need to\n          // declare any variables and we can refer to it directly.\n          return [];\n        } else {\n          // e.g. ctx\n          rhs = variable(CONTEXT_NAME);\n        }\n      } else {\n        const sharedCtxVar = scope.getSharedContextName(retrievalLevel);\n        // e.g. ctx_r0   OR  x(2);\n        rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);\n      }\n      return [\n      // e.g. const $items$ = x(2) for direct context references and\n      // const $item$ = x(2).$implicit for indirect ones.\n      lhs.set(isDirect ? rhs : rhs.prop(value || IMPLICIT_REFERENCE)).toConstDecl()];\n    });\n  }\n  i18nAppendBindings(expressions) {\n    if (expressions.length > 0) {\n      expressions.forEach(expression => this.i18n.appendBinding(expression));\n    }\n  }\n  i18nBindProps(props) {\n    const bound = {};\n    Object.keys(props).forEach(key => {\n      const prop = props[key];\n      if (prop instanceof Text$3) {\n        bound[key] = literal(prop.value);\n      } else {\n        const value = prop.value.visit(this._valueConverter);\n        this.allocateBindingSlots(value);\n        if (value instanceof Interpolation$1) {\n          const {\n            strings,\n            expressions\n          } = value;\n          const {\n            id,\n            bindings\n          } = this.i18n;\n          const label = assembleI18nBoundString(strings, bindings.size, id);\n          this.i18nAppendBindings(expressions);\n          bound[key] = literal(label);\n        }\n      }\n    });\n    return bound;\n  }\n  // Generates top level vars for i18n blocks (i.e. `i18n_N`).\n  i18nGenerateMainBlockVar() {\n    return variable(this.constantPool.uniqueName(TRANSLATION_VAR_PREFIX$1));\n  }\n  // Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).\n  i18nGenerateClosureVar(messageId) {\n    let name;\n    const suffix = this.fileBasedI18nSuffix.toUpperCase();\n    if (this.i18nUseExternalIds) {\n      const prefix = getTranslationConstPrefix(`EXTERNAL_`);\n      const uniqueSuffix = this.constantPool.uniqueName(suffix);\n      name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;\n    } else {\n      const prefix = getTranslationConstPrefix(suffix);\n      name = this.constantPool.uniqueName(prefix);\n    }\n    return variable(name);\n  }\n  i18nUpdateRef(context) {\n    const {\n      icus,\n      meta,\n      isRoot,\n      isResolved,\n      isEmitted\n    } = context;\n    if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {\n      context.isEmitted = true;\n      const placeholders = context.getSerializedPlaceholders();\n      let icuMapping = {};\n      let params = placeholders.size ? placeholdersToParams(placeholders) : {};\n      if (icus.size) {\n        icus.forEach((refs, key) => {\n          if (refs.length === 1) {\n            // if we have one ICU defined for a given\n            // placeholder - just output its reference\n            params[key] = refs[0];\n          } else {\n            // ... otherwise we need to activate post-processing\n            // to replace ICU placeholders with proper values\n            const placeholder = wrapI18nPlaceholder(`${I18N_ICU_MAPPING_PREFIX$1}${key}`);\n            params[key] = literal(placeholder);\n            icuMapping[key] = literalArr(refs);\n          }\n        });\n      }\n      // translation requires post processing in 2 cases:\n      // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])\n      // - if we have multiple ICUs that refer to the same placeholder name\n      const needsPostprocessing = Array.from(placeholders.values()).some(value => value.length > 1) || Object.keys(icuMapping).length;\n      let transformFn;\n      if (needsPostprocessing) {\n        transformFn = raw => {\n          const args = [raw];\n          if (Object.keys(icuMapping).length) {\n            args.push(mapLiteral(icuMapping, true));\n          }\n          return invokeInstruction(null, Identifiers.i18nPostprocess, args);\n        };\n      }\n      this.i18nTranslate(meta, params, context.ref, transformFn);\n    }\n  }\n  i18nStart(span = null, meta, selfClosing) {\n    const index = this.allocateDataSlot();\n    this.i18n = this.i18nContext ? this.i18nContext.forkChildContext(index, this.templateIndex, meta) : new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta);\n    // generate i18nStart instruction\n    const {\n      id,\n      ref\n    } = this.i18n;\n    const params = [literal(index), this.addToConsts(ref)];\n    if (id > 0) {\n      // do not push 3rd argument (sub-block id)\n      // into i18nStart call for top level i18n context\n      params.push(literal(id));\n    }\n    this.creationInstruction(span, selfClosing ? Identifiers.i18n : Identifiers.i18nStart, params);\n  }\n  i18nEnd(span = null, selfClosing) {\n    if (!this.i18n) {\n      throw new Error('i18nEnd is executed with no i18n context present');\n    }\n    if (this.i18nContext) {\n      this.i18nContext.reconcileChildContext(this.i18n);\n      this.i18nUpdateRef(this.i18nContext);\n    } else {\n      this.i18nUpdateRef(this.i18n);\n    }\n    // setup accumulated bindings\n    const {\n      index,\n      bindings\n    } = this.i18n;\n    if (bindings.size) {\n      for (const binding of bindings) {\n        // for i18n block, advance to the most recent element index (by taking the current number of\n        // elements and subtracting one) before invoking `i18nExp` instructions, to make sure the\n        // necessary lifecycle hooks of components/directives are properly flushed.\n        this.updateInstructionWithAdvance(this.getConstCount() - 1, span, Identifiers.i18nExp, () => this.convertPropertyBinding(binding));\n      }\n      this.updateInstruction(span, Identifiers.i18nApply, [literal(index)]);\n    }\n    if (!selfClosing) {\n      this.creationInstruction(span, Identifiers.i18nEnd);\n    }\n    this.i18n = null; // reset local i18n context\n  }\n  i18nAttributesInstruction(nodeIndex, attrs, sourceSpan) {\n    let hasBindings = false;\n    const i18nAttrArgs = [];\n    attrs.forEach(attr => {\n      const message = attr.i18n;\n      const converted = attr.value.visit(this._valueConverter);\n      this.allocateBindingSlots(converted);\n      if (converted instanceof Interpolation$1) {\n        const placeholders = assembleBoundTextPlaceholders(message);\n        const params = placeholdersToParams(placeholders);\n        i18nAttrArgs.push(literal(attr.name), this.i18nTranslate(message, params));\n        converted.expressions.forEach(expression => {\n          hasBindings = true;\n          this.updateInstructionWithAdvance(nodeIndex, sourceSpan, Identifiers.i18nExp, () => this.convertPropertyBinding(expression));\n        });\n      }\n    });\n    if (i18nAttrArgs.length > 0) {\n      const index = literal(this.allocateDataSlot());\n      const constIndex = this.addToConsts(literalArr(i18nAttrArgs));\n      this.creationInstruction(sourceSpan, Identifiers.i18nAttributes, [index, constIndex]);\n      if (hasBindings) {\n        this.updateInstruction(sourceSpan, Identifiers.i18nApply, [index]);\n      }\n    }\n  }\n  getNamespaceInstruction(namespaceKey) {\n    switch (namespaceKey) {\n      case 'math':\n        return Identifiers.namespaceMathML;\n      case 'svg':\n        return Identifiers.namespaceSVG;\n      default:\n        return Identifiers.namespaceHTML;\n    }\n  }\n  addNamespaceInstruction(nsInstruction, element) {\n    this._namespace = nsInstruction;\n    this.creationInstruction(element.startSourceSpan, nsInstruction);\n  }\n  /**\n   * Adds an update instruction for an interpolated property or attribute, such as\n   * `prop=\"{{value}}\"` or `attr.title=\"{{value}}\"`\n   */\n  interpolatedUpdateInstruction(instruction, elementIndex, attrName, input, value, params) {\n    this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, () => [literal(attrName), ...this.getUpdateInstructionArguments(value), ...params]);\n  }\n  visitContent(ngContent) {\n    const slot = this.allocateDataSlot();\n    const projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;\n    const parameters = [literal(slot)];\n    this._ngContentReservedSlots.push(ngContent.selector);\n    const nonContentSelectAttributes = ngContent.attributes.filter(attr => attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR);\n    const attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);\n    if (attributes.length > 0) {\n      parameters.push(literal(projectionSlotIdx), literalArr(attributes));\n    } else if (projectionSlotIdx !== 0) {\n      parameters.push(literal(projectionSlotIdx));\n    }\n    this.creationInstruction(ngContent.sourceSpan, Identifiers.projection, parameters);\n    if (this.i18n) {\n      this.i18n.appendProjection(ngContent.i18n, slot);\n    }\n  }\n  visitElement(element) {\n    const elementIndex = this.allocateDataSlot();\n    const stylingBuilder = new StylingBuilder(null);\n    this.elementLocations.set(element, {\n      index: elementIndex,\n      level: this.level\n    });\n    let isNonBindableMode = false;\n    const isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);\n    const outputAttrs = [];\n    const [namespaceKey, elementName] = splitNsName(element.name);\n    const isNgContainer$1 = isNgContainer(element.name);\n    // Handle styling, i18n, ngNonBindable attributes\n    for (const attr of element.attributes) {\n      const {\n        name,\n        value\n      } = attr;\n      if (name === NON_BINDABLE_ATTR) {\n        isNonBindableMode = true;\n      } else if (name === 'style') {\n        stylingBuilder.registerStyleAttr(value);\n      } else if (name === 'class') {\n        stylingBuilder.registerClassAttr(value);\n      } else {\n        outputAttrs.push(attr);\n      }\n    }\n    // Regular element or ng-container creation mode\n    const parameters = [literal(elementIndex)];\n    if (!isNgContainer$1) {\n      parameters.push(literal(elementName));\n    }\n    // Add the attributes\n    const allOtherInputs = [];\n    const boundI18nAttrs = [];\n    element.inputs.forEach(input => {\n      const stylingInputWasSet = stylingBuilder.registerBoundInput(input);\n      if (!stylingInputWasSet) {\n        if (input.type === 0 /* BindingType.Property */ && input.i18n) {\n          boundI18nAttrs.push(input);\n        } else {\n          allOtherInputs.push(input);\n        }\n      }\n    });\n    // add attributes for directive and projection matching purposes\n    const attributes = this.getAttributeExpressions(element.name, outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], boundI18nAttrs);\n    parameters.push(this.addAttrsToConsts(attributes));\n    // local refs (ex.: <div #foo #bar=\"baz\">)\n    const refs = this.prepareRefsArray(element.references);\n    parameters.push(this.addToConsts(refs));\n    const wasInNamespace = this._namespace;\n    const currentNamespace = this.getNamespaceInstruction(namespaceKey);\n    // If the namespace is changing now, include an instruction to change it\n    // during element creation.\n    if (currentNamespace !== wasInNamespace) {\n      this.addNamespaceInstruction(currentNamespace, element);\n    }\n    if (this.i18n) {\n      this.i18n.appendElement(element.i18n, elementIndex);\n    }\n    // Note that we do not append text node instructions and ICUs inside i18n section,\n    // so we exclude them while calculating whether current element has children\n    const hasChildren = !isI18nRootElement && this.i18n ? !hasTextChildrenOnly(element.children) : element.children.length > 0;\n    const createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes && element.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;\n    const createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);\n    if (createSelfClosingInstruction) {\n      this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers.elementContainer : Identifiers.element, trimTrailingNulls(parameters));\n    } else {\n      this.creationInstruction(element.startSourceSpan, isNgContainer$1 ? Identifiers.elementContainerStart : Identifiers.elementStart, trimTrailingNulls(parameters));\n      if (isNonBindableMode) {\n        this.creationInstruction(element.startSourceSpan, Identifiers.disableBindings);\n      }\n      if (boundI18nAttrs.length > 0) {\n        this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, element.startSourceSpan ?? element.sourceSpan);\n      }\n      // Generate Listeners (outputs)\n      if (element.outputs.length > 0) {\n        for (const outputAst of element.outputs) {\n          this.creationInstruction(outputAst.sourceSpan, Identifiers.listener, this.prepareListenerParameter(element.name, outputAst, elementIndex));\n        }\n      }\n      // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and\n      // listeners, to make sure i18nAttributes instruction targets current element at runtime.\n      if (isI18nRootElement) {\n        this.i18nStart(element.startSourceSpan, element.i18n, createSelfClosingI18nInstruction);\n      }\n    }\n    // the code here will collect all update-level styling instructions and add them to the\n    // update block of the template function AOT code. Instructions like `styleProp`,\n    // `styleMap`, `classMap`, `classProp`\n    // are all generated and assigned in the code below.\n    const stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);\n    const limit = stylingInstructions.length - 1;\n    for (let i = 0; i <= limit; i++) {\n      const instruction = stylingInstructions[i];\n      this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, instruction);\n    }\n    // the reason why `undefined` is used is because the renderer understands this as a\n    // special value to symbolize that there is no RHS to this binding\n    // TODO (matsko): revisit this once FW-959 is approached\n    const emptyValueBindInstruction = literal(undefined);\n    const propertyBindings = [];\n    const attributeBindings = [];\n    // Generate element input bindings\n    allOtherInputs.forEach(input => {\n      const inputType = input.type;\n      if (inputType === 4 /* BindingType.Animation */) {\n        const value = input.value.visit(this._valueConverter);\n        // animation bindings can be presented in the following formats:\n        // 1. [@binding]=\"fooExp\"\n        // 2. [@binding]=\"{value:fooExp, params:{...}}\"\n        // 3. [@binding]\n        // 4. @binding\n        // All formats will be valid for when a synthetic binding is created.\n        // The reasoning for this is because the renderer should get each\n        // synthetic binding value in the order of the array that they are\n        // defined in...\n        const hasValue = value instanceof LiteralPrimitive ? !!value.value : true;\n        this.allocateBindingSlots(value);\n        propertyBindings.push({\n          span: input.sourceSpan,\n          paramsOrFn: getBindingFunctionParams(() => hasValue ? this.convertPropertyBinding(value) : emptyValueBindInstruction, prepareSyntheticPropertyName(input.name))\n        });\n      } else {\n        // we must skip attributes with associated i18n context, since these attributes are handled\n        // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated\n        if (input.i18n) return;\n        const value = input.value.visit(this._valueConverter);\n        if (value !== undefined) {\n          const params = [];\n          const [attrNamespace, attrName] = splitNsName(input.name);\n          const isAttributeBinding = inputType === 1 /* BindingType.Attribute */;\n          let sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);\n          if (!sanitizationRef) {\n            // If there was no sanitization function found based on the security context\n            // of an attribute/property - check whether this attribute/property is\n            // one of the security-sensitive <iframe> attributes (and that the current\n            // element is actually an <iframe>).\n            if (isIframeElement(element.name) && isIframeSecuritySensitiveAttr(input.name)) {\n              sanitizationRef = importExpr(Identifiers.validateIframeAttribute);\n            }\n          }\n          if (sanitizationRef) {\n            params.push(sanitizationRef);\n          }\n          if (attrNamespace) {\n            const namespaceLiteral = literal(attrNamespace);\n            if (sanitizationRef) {\n              params.push(namespaceLiteral);\n            } else {\n              // If there wasn't a sanitization ref, we need to add\n              // an extra param so that we can pass in the namespace.\n              params.push(literal(null), namespaceLiteral);\n            }\n          }\n          this.allocateBindingSlots(value);\n          if (inputType === 0 /* BindingType.Property */) {\n            if (value instanceof Interpolation$1) {\n              // prop=\"{{value}}\" and friends\n              this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), elementIndex, attrName, input, value, params);\n            } else {\n              // [prop]=\"value\"\n              // Collect all the properties so that we can chain into a single function at the end.\n              propertyBindings.push({\n                span: input.sourceSpan,\n                paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(value), attrName, params)\n              });\n            }\n          } else if (inputType === 1 /* BindingType.Attribute */) {\n            if (value instanceof Interpolation$1 && getInterpolationArgsLength(value) > 1) {\n              // attr.name=\"text{{value}}\" and friends\n              this.interpolatedUpdateInstruction(getAttributeInterpolationExpression(value), elementIndex, attrName, input, value, params);\n            } else {\n              const boundValue = value instanceof Interpolation$1 ? value.expressions[0] : value;\n              // [attr.name]=\"value\" or attr.name=\"{{value}}\"\n              // Collect the attribute bindings so that they can be chained at the end.\n              attributeBindings.push({\n                span: input.sourceSpan,\n                paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(boundValue), attrName, params)\n              });\n            }\n          } else {\n            // class prop\n            this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, Identifiers.classProp, () => {\n              return [literal(elementIndex), literal(attrName), this.convertPropertyBinding(value), ...params];\n            });\n          }\n        }\n      }\n    });\n    for (const propertyBinding of propertyBindings) {\n      this.updateInstructionWithAdvance(elementIndex, propertyBinding.span, Identifiers.property, propertyBinding.paramsOrFn);\n    }\n    for (const attributeBinding of attributeBindings) {\n      this.updateInstructionWithAdvance(elementIndex, attributeBinding.span, Identifiers.attribute, attributeBinding.paramsOrFn);\n    }\n    // Traverse element child nodes\n    visitAll$1(this, element.children);\n    if (!isI18nRootElement && this.i18n) {\n      this.i18n.appendElement(element.i18n, elementIndex, true);\n    }\n    if (!createSelfClosingInstruction) {\n      // Finish element construction mode.\n      const span = element.endSourceSpan ?? element.sourceSpan;\n      if (isI18nRootElement) {\n        this.i18nEnd(span, createSelfClosingI18nInstruction);\n      }\n      if (isNonBindableMode) {\n        this.creationInstruction(span, Identifiers.enableBindings);\n      }\n      this.creationInstruction(span, isNgContainer$1 ? Identifiers.elementContainerEnd : Identifiers.elementEnd);\n    }\n  }\n  prepareEmbeddedTemplateFn(children, contextNameSuffix, variables = [], i18nMeta, variableAliases) {\n    const index = this.allocateDataSlot();\n    if (this.i18n && i18nMeta) {\n      if (i18nMeta instanceof BlockPlaceholder) {\n        this.i18n.appendBlock(i18nMeta, index);\n      } else {\n        this.i18n.appendTemplate(i18nMeta, index);\n      }\n    }\n    const contextName = `${this.contextName}${contextNameSuffix}_${index}`;\n    const name = `${contextName}_Template`;\n    // Create the template function\n    const visitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, index, name, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this.deferBlocks, this.elementLocations, this.allDeferrableDepsFn, this._constants);\n    // Nested templates must not be visited until after their parent templates have completed\n    // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't\n    // be able to support bindings in nested templates to local refs that occur after the\n    // template definition. e.g. <div *ngIf=\"showing\">{{ foo }}</div>  <div #foo></div>\n    this._nestedTemplateFns.push(() => {\n      const templateFunctionExpr = visitor.buildTemplateFunction(children, variables, this._ngContentReservedSlots.length + this._ngContentSelectorsOffset, i18nMeta, variableAliases);\n      this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(name));\n      if (visitor._ngContentReservedSlots.length) {\n        this._ngContentReservedSlots.push(...visitor._ngContentReservedSlots);\n      }\n    });\n    return new TemplateData(name, index, visitor._bindingScope, visitor);\n  }\n  createEmbeddedTemplateFn(tagName, children, contextNameSuffix, sourceSpan, variables = [], attrsExprs, references, i18n) {\n    const data = this.prepareEmbeddedTemplateFn(children, contextNameSuffix, variables, i18n);\n    const parameters = [literal(data.index), variable(data.name), literal(tagName), this.addAttrsToConsts(attrsExprs || null)];\n    // local refs (ex.: <ng-template #foo>)\n    if (references && references.length > 0) {\n      const refs = this.prepareRefsArray(references);\n      parameters.push(this.addToConsts(refs));\n      parameters.push(importExpr(Identifiers.templateRefExtractor));\n    }\n    // e.g. template(1, MyComp_Template_1)\n    this.creationInstruction(sourceSpan, Identifiers.templateCreate, () => {\n      parameters.splice(2, 0, literal(data.getConstCount()), literal(data.getVarCount()));\n      return trimTrailingNulls(parameters);\n    });\n    return data.index;\n  }\n  visitTemplate(template) {\n    // We don't care about the tag's namespace here, because we infer\n    // it based on the parent nodes inside the template instruction.\n    const tagNameWithoutNamespace = template.tagName ? splitNsName(template.tagName)[1] : template.tagName;\n    const contextNameSuffix = template.tagName ? '_' + sanitizeIdentifier(template.tagName) : '';\n    // prepare attributes parameter (including attributes used for directive matching)\n    const attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template.attributes, template.inputs, template.outputs, undefined /* styles */, template.templateAttrs);\n    const templateIndex = this.createEmbeddedTemplateFn(tagNameWithoutNamespace, template.children, contextNameSuffix, template.sourceSpan, template.variables, attrsExprs, template.references, template.i18n);\n    // handle property bindings e.g. ɵɵproperty('ngForOf', ctx.items), et al;\n    this.templatePropertyBindings(templateIndex, template.templateAttrs);\n    // Only add normal input/output binding instructions on explicit <ng-template> elements.\n    if (tagNameWithoutNamespace === NG_TEMPLATE_TAG_NAME) {\n      const [i18nInputs, inputs] = partitionArray(template.inputs, hasI18nMeta);\n      // Add i18n attributes that may act as inputs to directives. If such attributes are present,\n      // generate `i18nAttributes` instruction. Note: we generate it only for explicit <ng-template>\n      // elements, in case of inline templates, corresponding instructions will be generated in the\n      // nested template function.\n      if (i18nInputs.length > 0) {\n        this.i18nAttributesInstruction(templateIndex, i18nInputs, template.startSourceSpan ?? template.sourceSpan);\n      }\n      // Add the input bindings\n      if (inputs.length > 0) {\n        this.templatePropertyBindings(templateIndex, inputs);\n      }\n      // Generate listeners for directive output\n      for (const outputAst of template.outputs) {\n        this.creationInstruction(outputAst.sourceSpan, Identifiers.listener, this.prepareListenerParameter('ng_template', outputAst, templateIndex));\n      }\n    }\n  }\n  visitBoundText(text) {\n    if (this.i18n) {\n      const value = text.value.visit(this._valueConverter);\n      this.allocateBindingSlots(value);\n      if (value instanceof Interpolation$1) {\n        this.i18n.appendBoundText(text.i18n);\n        this.i18nAppendBindings(value.expressions);\n      }\n      return;\n    }\n    const nodeIndex = this.allocateDataSlot();\n    this.creationInstruction(text.sourceSpan, Identifiers.text, [literal(nodeIndex)]);\n    const value = text.value.visit(this._valueConverter);\n    this.allocateBindingSlots(value);\n    if (value instanceof Interpolation$1) {\n      this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), () => this.getUpdateInstructionArguments(value));\n    } else {\n      error('Text nodes should be interpolated and never bound directly.');\n    }\n  }\n  visitText(text) {\n    // when a text element is located within a translatable\n    // block, we exclude this text element from instructions set,\n    // since it will be captured in i18n content and processed at runtime\n    if (!this.i18n) {\n      this.creationInstruction(text.sourceSpan, Identifiers.text, [literal(this.allocateDataSlot()), literal(text.value)]);\n    }\n  }\n  visitIcu(icu) {\n    let initWasInvoked = false;\n    // if an ICU was created outside of i18n block, we still treat\n    // it as a translatable entity and invoke i18nStart and i18nEnd\n    // to generate i18n context and the necessary instructions\n    if (!this.i18n) {\n      initWasInvoked = true;\n      this.i18nStart(null, icu.i18n, true);\n    }\n    const i18n = this.i18n;\n    const vars = this.i18nBindProps(icu.vars);\n    const placeholders = this.i18nBindProps(icu.placeholders);\n    // output ICU directly and keep ICU reference in context\n    const message = icu.i18n;\n    // we always need post-processing function for ICUs, to make sure that:\n    // - all placeholders in a form of {PLACEHOLDER} are replaced with actual values (note:\n    // `goog.getMsg` does not process ICUs and uses the `{PLACEHOLDER}` format for placeholders\n    // inside ICUs)\n    // - all ICU vars (such as `VAR_SELECT` or `VAR_PLURAL`) are replaced with correct values\n    const transformFn = raw => {\n      // Sort the map entries in the compiled output. This makes it easy to acheive identical output\n      // in the template pipeline compiler.\n      const params = Object.fromEntries(Object.entries({\n        ...vars,\n        ...placeholders\n      }).sort());\n      const formatted = formatI18nPlaceholderNamesInMap(params, /* useCamelCase */false);\n      return invokeInstruction(null, Identifiers.i18nPostprocess, [raw, mapLiteral(formatted, true)]);\n    };\n    // in case the whole i18n message is a single ICU - we do not need to\n    // create a separate top-level translation, we can use the root ref instead\n    // and make this ICU a top-level translation\n    // note: ICU placeholders are replaced with actual values in `i18nPostprocess` function\n    // separately, so we do not pass placeholders into `i18nTranslate` function.\n    if (isSingleI18nIcu(i18n.meta)) {\n      this.i18nTranslate(message, /* placeholders */{}, i18n.ref, transformFn);\n    } else {\n      // output ICU directly and keep ICU reference in context\n      const ref = this.i18nTranslate(message, /* placeholders */{}, /* ref */undefined, transformFn);\n      i18n.appendIcu(icuFromI18nMessage(message).name, ref);\n    }\n    if (initWasInvoked) {\n      this.i18nEnd(null, true);\n    }\n    return null;\n  }\n  visitIfBlock(block) {\n    // Allocate one slot for the result of the expression.\n    this.allocateBindingSlots(null);\n    // We have to process the block in two steps: once here and again in the update instruction\n    // callback in order to generate the correct expressions when pipes or pure functions are\n    // used inside the branch expressions.\n    const branchData = block.branches.map((branch, branchIndex) => {\n      const {\n        expression,\n        expressionAlias,\n        children,\n        sourceSpan\n      } = branch;\n      // If the branch has an alias, it'll be assigned directly to the container's context.\n      // We define a variable referring directly to the context so that any nested usages can be\n      // rewritten to refer to it.\n      const variables = expressionAlias !== null ? [new Variable(expressionAlias.name, DIRECT_CONTEXT_REFERENCE, expressionAlias.sourceSpan, expressionAlias.keySpan)] : undefined;\n      let tagName = null;\n      let attrsExprs;\n      // Only the first branch can be used for projection, because the conditional\n      // uses the container of the first branch as the insertion point for all branches.\n      if (branchIndex === 0) {\n        const inferredData = this.inferProjectionDataFromInsertionPoint(branch);\n        tagName = inferredData.tagName;\n        attrsExprs = inferredData.attrsExprs;\n      }\n      // Note: the template needs to be created *before* we process the expression,\n      // otherwise pipes injecting some symbols won't work (see #52102).\n      const templateIndex = this.createEmbeddedTemplateFn(tagName, children, '_Conditional', sourceSpan, variables, attrsExprs, undefined, branch.i18n);\n      const processedExpression = expression === null ? null : expression.visit(this._valueConverter);\n      return {\n        index: templateIndex,\n        expression: processedExpression,\n        alias: expressionAlias\n      };\n    });\n    // Use the index of the first block as the index for the entire container.\n    const containerIndex = branchData[0].index;\n    const paramsCallback = () => {\n      let contextVariable = null;\n      const generateBranch = branchIndex => {\n        // If we've gone beyond the last branch, return the special -1 value which means that no\n        // view will be rendered. Note that we don't need to reset the context here, because -1\n        // won't render a view so the passed-in context won't be captured.\n        if (branchIndex > branchData.length - 1) {\n          return literal(-1);\n        }\n        const {\n          index,\n          expression,\n          alias\n        } = branchData[branchIndex];\n        // If the branch has no expression, it means that it's the final `else`.\n        // Return its index and stop the recursion. Assumes that there's only one\n        // `else` condition and that it's the last branch.\n        if (expression === null) {\n          return literal(index);\n        }\n        let comparisonTarget;\n        if (alias) {\n          // If the branch is aliased, we need to assign the expression value to the temporary\n          // variable and then pass it into `conditional`. E.g. for the expression:\n          // `@if (foo(); as alias) {...}` we have to generate:\n          // ```\n          // let temp;\n          // conditional(0, (temp = ctx.foo()) ? 0 : -1, temp);\n          // ```\n          contextVariable = this.allocateControlFlowTempVariable();\n          comparisonTarget = contextVariable.set(this.convertPropertyBinding(expression));\n        } else {\n          comparisonTarget = this.convertPropertyBinding(expression);\n        }\n        return comparisonTarget.conditional(literal(index), generateBranch(branchIndex + 1));\n      };\n      const params = [literal(containerIndex), generateBranch(0)];\n      if (contextVariable !== null) {\n        params.push(contextVariable);\n      }\n      return params;\n    };\n    this.updateInstructionWithAdvance(containerIndex, block.branches[0].sourceSpan, Identifiers.conditional, paramsCallback);\n  }\n  visitSwitchBlock(block) {\n    if (block.cases.length === 0) {\n      return;\n    }\n    // We have to process the block in two steps: once here and again in the update instruction\n    // callback in order to generate the correct expressions when pipes or pure functions are used.\n    const caseData = block.cases.map(currentCase => {\n      const index = this.createEmbeddedTemplateFn(null, currentCase.children, '_Case', currentCase.sourceSpan, undefined, undefined, undefined, currentCase.i18n);\n      const expression = currentCase.expression === null ? null : currentCase.expression.visit(this._valueConverter);\n      return {\n        index,\n        expression\n      };\n    });\n    // Use the index of the first block as the index for the entire container.\n    const containerIndex = caseData[0].index;\n    // Note: the expression needs to be processed *after* the template,\n    // otherwise pipes injecting some symbols won't work (see #52102).\n    const blockExpression = block.expression.visit(this._valueConverter);\n    this.allocateBindingSlots(null); // Allocate a slot for the primary block expression.\n    this.updateInstructionWithAdvance(containerIndex, block.sourceSpan, Identifiers.conditional, () => {\n      const generateCases = caseIndex => {\n        // If we've gone beyond the last branch, return the special -1\n        // value which means that no view will be rendered.\n        if (caseIndex > caseData.length - 1) {\n          return literal(-1);\n        }\n        const {\n          index,\n          expression\n        } = caseData[caseIndex];\n        // If the case has no expression, it means that it's the `default` case.\n        // Return its index and stop the recursion. Assumes that there's only one\n        // `default` condition and that it's defined last.\n        if (expression === null) {\n          return literal(index);\n        }\n        // If this is the very first comparison, we need to assign the value of the primary\n        // expression as a part of the comparison so the remaining cases can reuse it. In practice\n        // this looks as follows:\n        // ```\n        // let temp;\n        // conditional(1, (temp = ctx.foo) === 1 ? 1 : temp === 2 ? 2 : temp === 3 ? 3 : 4);\n        // ```\n        const comparisonTarget = caseIndex === 0 ? this.allocateControlFlowTempVariable().set(this.convertPropertyBinding(blockExpression)) : this.allocateControlFlowTempVariable();\n        return comparisonTarget.identical(this.convertPropertyBinding(expression)).conditional(literal(index), generateCases(caseIndex + 1));\n      };\n      return [literal(containerIndex), generateCases(0)];\n    });\n  }\n  visitDeferredBlock(deferred) {\n    const {\n      loading,\n      placeholder,\n      error,\n      triggers,\n      prefetchTriggers\n    } = deferred;\n    const metadata = this.deferBlocks.get(deferred);\n    if (!metadata) {\n      throw new Error('Could not resolve `defer` block metadata. Block may need to be analyzed.');\n    }\n    const primaryTemplateIndex = this.createEmbeddedTemplateFn(null, deferred.children, '_Defer', deferred.sourceSpan, undefined, undefined, undefined, deferred.i18n);\n    const loadingIndex = loading ? this.createEmbeddedTemplateFn(null, loading.children, '_DeferLoading', loading.sourceSpan, undefined, undefined, undefined, loading.i18n) : null;\n    const loadingConsts = loading ? trimTrailingNulls([literal(loading.minimumTime), literal(loading.afterTime)]) : null;\n    const placeholderIndex = placeholder ? this.createEmbeddedTemplateFn(null, placeholder.children, '_DeferPlaceholder', placeholder.sourceSpan, undefined, undefined, undefined, placeholder.i18n) : null;\n    const placeholderConsts = placeholder && placeholder.minimumTime !== null ?\n    // TODO(crisbeto): potentially pass the time directly instead of storing it in the `consts`\n    // since the placeholder block can only have one parameter?\n    literalArr([literal(placeholder.minimumTime)]) : null;\n    const errorIndex = error ? this.createEmbeddedTemplateFn(null, error.children, '_DeferError', error.sourceSpan, undefined, undefined, undefined, error.i18n) : null;\n    // Note: we generate this last so the index matches the instruction order.\n    const deferredIndex = this.allocateDataSlot();\n    const depsFnName = `${this.contextName}_Defer_${deferredIndex}_DepsFn`;\n    // e.g. `defer(1, 0, MyComp_Defer_1_DepsFn, ...)`\n    this.creationInstruction(deferred.sourceSpan, Identifiers.defer, trimTrailingNulls([literal(deferredIndex), literal(primaryTemplateIndex), this.allDeferrableDepsFn ?? this.createDeferredDepsFunction(depsFnName, metadata), literal(loadingIndex), literal(placeholderIndex), literal(errorIndex), loadingConsts?.length ? this.addToConsts(literalArr(loadingConsts)) : TYPED_NULL_EXPR, placeholderConsts ? this.addToConsts(placeholderConsts) : TYPED_NULL_EXPR, loadingConsts?.length || placeholderConsts ? importExpr(Identifiers.deferEnableTimerScheduling) : TYPED_NULL_EXPR]));\n    // Allocate an extra data slot right after a defer block slot to store\n    // instance-specific state of that defer block at runtime.\n    this.allocateDataSlot();\n    // Note: the triggers need to be processed *after* the various templates,\n    // otherwise pipes injecting some symbols won't work (see #52102).\n    this.createDeferTriggerInstructions(deferredIndex, triggers, metadata, false);\n    this.createDeferTriggerInstructions(deferredIndex, prefetchTriggers, metadata, true);\n  }\n  createDeferredDepsFunction(name, metadata) {\n    if (metadata.deps.length === 0) {\n      return TYPED_NULL_EXPR;\n    }\n    // This defer block has deps for which we need to generate dynamic imports.\n    const dependencyExp = [];\n    for (const deferredDep of metadata.deps) {\n      if (deferredDep.isDeferrable) {\n        // Callback function, e.g. `m () => m.MyCmp;`.\n        const innerFn = arrowFn([new FnParam('m', DYNAMIC_TYPE)], variable('m').prop(deferredDep.symbolName));\n        // Dynamic import, e.g. `import('./a').then(...)`.\n        const importExpr = new DynamicImportExpr(deferredDep.importPath).prop('then').callFn([innerFn]);\n        dependencyExp.push(importExpr);\n      } else {\n        // Non-deferrable symbol, just use a reference to the type.\n        dependencyExp.push(deferredDep.type);\n      }\n    }\n    const depsFnExpr = arrowFn([], literalArr(dependencyExp));\n    this.constantPool.statements.push(depsFnExpr.toDeclStmt(name, StmtModifier.Final));\n    return variable(name);\n  }\n  createDeferTriggerInstructions(deferredIndex, triggers, metadata, prefetch) {\n    const {\n      when,\n      idle,\n      immediate,\n      timer,\n      hover,\n      interaction,\n      viewport\n    } = triggers;\n    // `deferWhen(ctx.someValue)`\n    if (when) {\n      const value = when.value.visit(this._valueConverter);\n      this.allocateBindingSlots(value);\n      this.updateInstructionWithAdvance(deferredIndex, when.sourceSpan, prefetch ? Identifiers.deferPrefetchWhen : Identifiers.deferWhen, () => this.convertPropertyBinding(value));\n    }\n    // Note that we generate an implicit `on idle` if the `deferred` block has no triggers.\n    // `deferOnIdle()`\n    if (idle || !prefetch && Object.keys(triggers).length === 0) {\n      this.creationInstruction(idle?.sourceSpan || null, prefetch ? Identifiers.deferPrefetchOnIdle : Identifiers.deferOnIdle);\n    }\n    // `deferOnImmediate()`\n    if (immediate) {\n      this.creationInstruction(immediate.sourceSpan, prefetch ? Identifiers.deferPrefetchOnImmediate : Identifiers.deferOnImmediate);\n    }\n    // `deferOnTimer(1337)`\n    if (timer) {\n      this.creationInstruction(timer.sourceSpan, prefetch ? Identifiers.deferPrefetchOnTimer : Identifiers.deferOnTimer, [literal(timer.delay)]);\n    }\n    // `deferOnHover(index, walkUpTimes)`\n    if (hover) {\n      this.domNodeBasedTrigger('hover', hover, metadata, prefetch ? Identifiers.deferPrefetchOnHover : Identifiers.deferOnHover);\n    }\n    // `deferOnInteraction(index, walkUpTimes)`\n    if (interaction) {\n      this.domNodeBasedTrigger('interaction', interaction, metadata, prefetch ? Identifiers.deferPrefetchOnInteraction : Identifiers.deferOnInteraction);\n    }\n    // `deferOnViewport(index, walkUpTimes)`\n    if (viewport) {\n      this.domNodeBasedTrigger('viewport', viewport, metadata, prefetch ? Identifiers.deferPrefetchOnViewport : Identifiers.deferOnViewport);\n    }\n  }\n  domNodeBasedTrigger(name, trigger, metadata, instructionRef) {\n    const triggerEl = metadata.triggerElements.get(trigger);\n    // Don't generate anything if a trigger cannot be resolved.\n    // We'll have template diagnostics to surface these to users.\n    if (!triggerEl) {\n      return;\n    }\n    this.creationInstruction(trigger.sourceSpan, instructionRef, () => {\n      const location = this.elementLocations.get(triggerEl);\n      if (!location) {\n        throw new Error(`Could not determine location of reference passed into ` + `'${name}' trigger. Template may not have been fully analyzed.`);\n      }\n      // A negative depth means that the trigger is inside the placeholder.\n      // Cap it at -1 since we only care whether or not it's negative.\n      const depth = Math.max(this.level - location.level, -1);\n      const params = [literal(location.index)];\n      // The most common case should be a trigger within the view so we can omit a depth of\n      // zero. For triggers in parent views and in the placeholder we need to pass it in.\n      if (depth !== 0) {\n        params.push(literal(depth));\n      }\n      return params;\n    });\n  }\n  /**\n   * Infers the data used for content projection (tag name and attributes) from the content of a\n   * node.\n   * @param node Node for which to infer the projection data.\n   */\n  inferProjectionDataFromInsertionPoint(node) {\n    let root = null;\n    let tagName = null;\n    let attrsExprs;\n    for (const child of node.children) {\n      // Skip over comment nodes.\n      if (child instanceof Comment$1) {\n        continue;\n      }\n      // We can only infer the tag name/attributes if there's a single root node.\n      if (root !== null) {\n        root = null;\n        break;\n      }\n      // Root nodes can only elements or templates with a tag name (e.g. `<div *foo></div>`).\n      if (child instanceof Element$1 || child instanceof Template && child.tagName !== null) {\n        root = child;\n      }\n    }\n    // If we've found a single root node, its tag name and *static* attributes can be copied\n    // to the surrounding template to be used for content projection. Note that it's important\n    // that we don't copy any bound attributes since they don't participate in content projection\n    // and they can be used in directive matching (in the case of `Template.templateAttrs`).\n    if (root !== null) {\n      const name = root instanceof Element$1 ? root.name : root.tagName;\n      // Don't pass along `ng-template` tag name since it enables directive matching.\n      tagName = name === NG_TEMPLATE_TAG_NAME ? null : name;\n      attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, root.attributes, root.inputs, []);\n    }\n    return {\n      tagName,\n      attrsExprs\n    };\n  }\n  allocateDataSlot() {\n    return this._dataIndex++;\n  }\n  visitForLoopBlock(block) {\n    // Allocate one slot for the repeater metadata. The slots for the primary and empty block\n    // are implicitly inferred by the runtime to index + 1 and index + 2.\n    const blockIndex = this.allocateDataSlot();\n    const {\n      tagName,\n      attrsExprs\n    } = this.inferProjectionDataFromInsertionPoint(block);\n    const primaryData = this.prepareEmbeddedTemplateFn(block.children, '_For', [block.item, block.contextVariables.$index, block.contextVariables.$count], block.i18n, {\n      // We need to provide level-specific versions of `$index` and `$count`, because\n      // they're used when deriving the remaining variables (`$odd`, `$even` etc.) while at the\n      // same time being available implicitly. Without these aliases, we wouldn't be able to\n      // access the `$index` of a parent loop from inside of a nested loop.\n      [block.contextVariables.$index.name]: this.getLevelSpecificVariableName('$index', this.level + 1),\n      [block.contextVariables.$count.name]: this.getLevelSpecificVariableName('$count', this.level + 1)\n    });\n    const {\n      expression: trackByExpression,\n      usesComponentInstance: trackByUsesComponentInstance\n    } = this.createTrackByFunction(block);\n    let emptyData = null;\n    let emptyTagName = null;\n    let emptyAttrsExprs;\n    if (block.empty !== null) {\n      const emptyInferred = this.inferProjectionDataFromInsertionPoint(block.empty);\n      emptyTagName = emptyInferred.tagName;\n      emptyAttrsExprs = emptyInferred.attrsExprs;\n      emptyData = this.prepareEmbeddedTemplateFn(block.empty.children, '_ForEmpty', undefined, block.empty.i18n);\n      // Allocate an extra slot for the empty block tracking.\n      this.allocateBindingSlots(null);\n    }\n    this.registerComputedLoopVariables(block, primaryData.scope);\n    // `repeaterCreate(0, ...)`\n    this.creationInstruction(block.sourceSpan, Identifiers.repeaterCreate, () => {\n      const params = [literal(blockIndex), variable(primaryData.name), literal(primaryData.getConstCount()), literal(primaryData.getVarCount()), literal(tagName), this.addAttrsToConsts(attrsExprs || null), trackByExpression];\n      if (emptyData !== null) {\n        params.push(literal(trackByUsesComponentInstance), variable(emptyData.name), literal(emptyData.getConstCount()), literal(emptyData.getVarCount()), literal(emptyTagName), this.addAttrsToConsts(emptyAttrsExprs || null));\n      } else if (trackByUsesComponentInstance) {\n        // If the tracking function doesn't use the component instance, we can omit the flag.\n        params.push(literal(trackByUsesComponentInstance));\n      }\n      return trimTrailingNulls(params);\n    });\n    // Note: the expression needs to be processed *after* the template,\n    // otherwise pipes injecting some symbols won't work (see #52102).\n    // Note: we don't allocate binding slots for this expression,\n    // because its value isn't stored in the LView.\n    const value = block.expression.visit(this._valueConverter);\n    // `advance(x); repeater(iterable)`\n    this.updateInstructionWithAdvance(blockIndex, block.sourceSpan, Identifiers.repeater, () => [this.convertPropertyBinding(value)]);\n  }\n  registerComputedLoopVariables(block, bindingScope) {\n    const level = bindingScope.bindingLevel;\n    bindingScope.set(level, block.contextVariables.$odd.name, (scope, retrievalLevel) => {\n      return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$index').modulo(literal(2)).notIdentical(literal(0));\n    });\n    bindingScope.set(level, block.contextVariables.$even.name, (scope, retrievalLevel) => {\n      return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$index').modulo(literal(2)).identical(literal(0));\n    });\n    bindingScope.set(level, block.contextVariables.$first.name, (scope, retrievalLevel) => {\n      return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$index').identical(literal(0));\n    });\n    bindingScope.set(level, block.contextVariables.$last.name, (scope, retrievalLevel) => {\n      const index = this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$index');\n      const count = this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$count');\n      return index.identical(count.minus(literal(1)));\n    });\n  }\n  getLevelSpecificVariableName(name, level) {\n    // We use the `ɵ` here to ensure that there are no name conflicts with user-defined variables.\n    return `ɵ${name}_${level}`;\n  }\n  /**\n   * Gets the name of a for loop variable at a specific binding level. This allows us to look\n   * up implicitly shadowed variables like `$index` and `$count` at a specific level.\n   */\n  getLevelSpecificForLoopVariable(block, scope, retrievalLevel, name) {\n    const scopeName = scope.bindingLevel === retrievalLevel ? block.contextVariables[name].name : this.getLevelSpecificVariableName(name, retrievalLevel);\n    return scope.get(scopeName);\n  }\n  optimizeTrackByFunction(block) {\n    const indexLocalName = block.contextVariables.$index.name;\n    const itemName = block.item.name;\n    const ast = block.trackBy.ast;\n    // Top-level access of `$index` uses the built in `repeaterTrackByIndex`.\n    if (ast instanceof PropertyRead && ast.receiver instanceof ImplicitReceiver && ast.name === indexLocalName) {\n      return {\n        expression: importExpr(Identifiers.repeaterTrackByIndex),\n        usesComponentInstance: false\n      };\n    }\n    // Top-level access of the item uses the built in `repeaterTrackByIdentity`.\n    if (ast instanceof PropertyRead && ast.receiver instanceof ImplicitReceiver && ast.name === itemName) {\n      return {\n        expression: importExpr(Identifiers.repeaterTrackByIdentity),\n        usesComponentInstance: false\n      };\n    }\n    // Top-level calls in the form of `fn($index, item)` can be passed in directly.\n    if (ast instanceof Call && ast.receiver instanceof PropertyRead && ast.receiver.receiver instanceof ImplicitReceiver && ast.args.length === 2) {\n      const firstIsIndex = ast.args[0] instanceof PropertyRead && ast.args[0].receiver instanceof ImplicitReceiver && ast.args[0].name === indexLocalName;\n      const secondIsItem = ast.args[1] instanceof PropertyRead && ast.args[1].receiver instanceof ImplicitReceiver && ast.args[1].name === itemName;\n      if (firstIsIndex && secondIsItem) {\n        // If we're in the top-level component, we can access directly through `ctx`,\n        // otherwise we have to get a hold of the component through `componentInstance()`.\n        const receiver = this.level === 0 ? variable(CONTEXT_NAME) : new ExternalExpr(Identifiers.componentInstance).callFn([]);\n        return {\n          expression: receiver.prop(ast.receiver.name),\n          usesComponentInstance: false\n        };\n      }\n    }\n    return null;\n  }\n  createTrackByFunction(block) {\n    const optimizedFn = this.optimizeTrackByFunction(block);\n    // If the tracking function can be optimized, we don't need any further processing.\n    if (optimizedFn !== null) {\n      return optimizedFn;\n    }\n    const contextVars = block.contextVariables;\n    const scope = new TrackByBindingScope(this._bindingScope, {\n      // Alias `$index` and the item name to `$index` and `$item` respectively.\n      // This allows us to reuse pure functions that may have different item names,\n      // but are otherwise identical.\n      [contextVars.$index.name]: '$index',\n      [block.item.name]: '$item',\n      // Accessing these variables in a tracking function will result in a template diagnostic.\n      // We define them as globals so that their accesses are preserved verbatim instead of being\n      // rewritten to the actual accesses.\n      [contextVars.$count.name]: contextVars.$count.name,\n      [contextVars.$first.name]: contextVars.$first.name,\n      [contextVars.$last.name]: contextVars.$last.name,\n      [contextVars.$even.name]: contextVars.$even.name,\n      [contextVars.$odd.name]: contextVars.$odd.name\n    });\n    const params = [new FnParam('$index'), new FnParam('$item')];\n    const stmts = convertPureComponentScopeFunction(block.trackBy.ast, scope, variable(CONTEXT_NAME), 'track');\n    const usesComponentInstance = scope.getComponentAccessCount() > 0;\n    let fn$1;\n    if (!usesComponentInstance && stmts.length === 1 && stmts[0] instanceof ExpressionStatement) {\n      fn$1 = arrowFn(params, stmts[0].expr);\n    } else {\n      // The last statement is returned implicitly.\n      if (stmts.length > 0) {\n        const lastStatement = stmts[stmts.length - 1];\n        if (lastStatement instanceof ExpressionStatement) {\n          stmts[stmts.length - 1] = new ReturnStatement(lastStatement.expr);\n        }\n      }\n      // This has to be a function expression, because `.bind` doesn't work on arrow functions.\n      fn$1 = fn(params, stmts);\n    }\n    return {\n      expression: this.constantPool.getSharedFunctionReference(fn$1, '_forTrack'),\n      usesComponentInstance\n    };\n  }\n  getConstCount() {\n    return this._dataIndex;\n  }\n  getVarCount() {\n    return this._pureFunctionSlots;\n  }\n  getConsts() {\n    return this._constants;\n  }\n  getNgContentSelectors() {\n    return this._ngContentReservedSlots.length ? this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) : null;\n  }\n  bindingContext() {\n    return `${this._bindingContext++}`;\n  }\n  templatePropertyBindings(templateIndex, attrs) {\n    const propertyBindings = [];\n    for (const input of attrs) {\n      if (!(input instanceof BoundAttribute)) {\n        continue;\n      }\n      const value = input.value.visit(this._valueConverter);\n      if (value === undefined) {\n        continue;\n      }\n      this.allocateBindingSlots(value);\n      if (value instanceof Interpolation$1) {\n        // Params typically contain attribute namespace and value sanitizer, which is applicable\n        // for regular HTML elements, but not applicable for <ng-template> (since props act as\n        // inputs to directives), so keep params array empty.\n        const params = [];\n        // prop=\"{{value}}\" case\n        this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), templateIndex, input.name, input, value, params);\n      } else {\n        // [prop]=\"value\" case\n        propertyBindings.push({\n          span: input.sourceSpan,\n          paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(value), input.name)\n        });\n      }\n    }\n    for (const propertyBinding of propertyBindings) {\n      this.updateInstructionWithAdvance(templateIndex, propertyBinding.span, Identifiers.property, propertyBinding.paramsOrFn);\n    }\n  }\n  // Bindings must only be resolved after all local refs have been visited, so all\n  // instructions are queued in callbacks that execute once the initial pass has completed.\n  // Otherwise, we wouldn't be able to support local refs that are defined after their\n  // bindings. e.g. {{ foo }} <div #foo></div>\n  instructionFn(fns, span, reference, paramsOrFn, prepend = false) {\n    fns[prepend ? 'unshift' : 'push']({\n      span,\n      reference,\n      paramsOrFn\n    });\n  }\n  processStylingUpdateInstruction(elementIndex, instruction) {\n    let allocateBindingSlots = 0;\n    if (instruction) {\n      for (const call of instruction.calls) {\n        allocateBindingSlots += call.allocateBindingSlots;\n        this.updateInstructionWithAdvance(elementIndex, call.sourceSpan, instruction.reference, () => call.params(value => call.supportsInterpolation && value instanceof Interpolation$1 ? this.getUpdateInstructionArguments(value) : this.convertPropertyBinding(value)));\n      }\n    }\n    return allocateBindingSlots;\n  }\n  creationInstruction(span, reference, paramsOrFn, prepend) {\n    this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);\n  }\n  updateInstructionWithAdvance(nodeIndex, span, reference, paramsOrFn) {\n    this.addAdvanceInstructionIfNecessary(nodeIndex, span);\n    this.updateInstruction(span, reference, paramsOrFn);\n  }\n  updateInstruction(span, reference, paramsOrFn) {\n    this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);\n  }\n  addAdvanceInstructionIfNecessary(nodeIndex, span) {\n    if (nodeIndex !== this._currentIndex) {\n      const delta = nodeIndex - this._currentIndex;\n      if (delta < 1) {\n        throw new Error('advance instruction can only go forwards');\n      }\n      this.instructionFn(this._updateCodeFns, span, Identifiers.advance, delta > 1 ? [literal(delta)] : []);\n      this._currentIndex = nodeIndex;\n    }\n  }\n  allocatePureFunctionSlots(numSlots) {\n    const originalSlots = this._pureFunctionSlots;\n    this._pureFunctionSlots += numSlots;\n    return originalSlots;\n  }\n  allocateBindingSlots(value) {\n    this._bindingSlots += value instanceof Interpolation$1 ? value.expressions.length : 1;\n  }\n  /**\n   * Gets an expression that refers to the implicit receiver. The implicit\n   * receiver is always the root level context.\n   */\n  getImplicitReceiverExpr() {\n    if (this._implicitReceiverExpr) {\n      return this._implicitReceiverExpr;\n    }\n    return this._implicitReceiverExpr = this.level === 0 ? variable(CONTEXT_NAME) : this._bindingScope.getOrCreateSharedContextVar(0);\n  }\n  convertPropertyBinding(value) {\n    const convertedPropertyBinding = convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext());\n    const valExpr = convertedPropertyBinding.currValExpr;\n    this._tempVariables.push(...convertedPropertyBinding.stmts);\n    return valExpr;\n  }\n  /**\n   * Gets a list of argument expressions to pass to an update instruction expression. Also updates\n   * the temp variables state with temp variables that were identified as needing to be created\n   * while visiting the arguments.\n   * @param value The original expression we will be resolving an arguments list from.\n   */\n  getUpdateInstructionArguments(value) {\n    const {\n      args,\n      stmts\n    } = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext());\n    this._tempVariables.push(...stmts);\n    return args;\n  }\n  /**\n   * Creates and returns a variable that can be used to\n   * store the state between control flow instructions.\n   */\n  allocateControlFlowTempVariable() {\n    // Note: the assumption here is that we'll only need one temporary variable for all control\n    // flow instructions. It's expected that any instructions will overwrite it before passing it\n    // into the parameters.\n    if (this._controlFlowTempVariable === null) {\n      const name = `${this.contextName}_contFlowTmp`;\n      this._tempVariables.push(new DeclareVarStmt(name));\n      this._controlFlowTempVariable = variable(name);\n    }\n    return this._controlFlowTempVariable;\n  }\n  /**\n   * Prepares all attribute expression values for the `TAttributes` array.\n   *\n   * The purpose of this function is to properly construct an attributes array that\n   * is passed into the `elementStart` (or just `element`) functions. Because there\n   * are many different types of attributes, the array needs to be constructed in a\n   * special way so that `elementStart` can properly evaluate them.\n   *\n   * The format looks like this:\n   *\n   * ```\n   * attrs = [prop, value, prop2, value2,\n   *   PROJECT_AS, selector,\n   *   CLASSES, class1, class2,\n   *   STYLES, style1, value1, style2, value2,\n   *   BINDINGS, name1, name2, name3,\n   *   TEMPLATE, name4, name5, name6,\n   *   I18N, name7, name8, ...]\n   * ```\n   *\n   * Note that this function will fully ignore all synthetic (@foo) attribute values\n   * because those values are intended to always be generated as property instructions.\n   */\n  getAttributeExpressions(elementName, renderAttributes, inputs, outputs, styles, templateAttrs = [], boundI18nAttrs = []) {\n    const alreadySeen = new Set();\n    const attrExprs = [];\n    let ngProjectAsAttr;\n    for (const attr of renderAttributes) {\n      if (attr.name === NG_PROJECT_AS_ATTR_NAME) {\n        ngProjectAsAttr = attr;\n      }\n      // Note that static i18n attributes aren't in the i18n array,\n      // because they're treated in the same way as regular attributes.\n      if (attr.i18n) {\n        // When i18n attributes are present on elements with structural directives\n        // (e.g. `<div *ngIf title=\"Hello\" i18n-title>`), we want to avoid generating\n        // duplicate i18n translation blocks for `ɵɵtemplate` and `ɵɵelement` instruction\n        // attributes. So we do a cache lookup to see if suitable i18n translation block\n        // already exists.\n        const {\n          i18nVarRefsCache\n        } = this._constants;\n        let i18nVarRef;\n        if (i18nVarRefsCache.has(attr.i18n)) {\n          i18nVarRef = i18nVarRefsCache.get(attr.i18n);\n        } else {\n          i18nVarRef = this.i18nTranslate(attr.i18n);\n          i18nVarRefsCache.set(attr.i18n, i18nVarRef);\n        }\n        attrExprs.push(literal(attr.name), i18nVarRef);\n      } else {\n        attrExprs.push(...getAttributeNameLiterals(attr.name), trustedConstAttribute(elementName, attr));\n      }\n    }\n    // Keep ngProjectAs next to the other name, value pairs so we can verify that we match\n    // ngProjectAs marker in the attribute name slot.\n    if (ngProjectAsAttr) {\n      attrExprs.push(...getNgProjectAsLiteral(ngProjectAsAttr));\n    }\n    function addAttrExpr(key, value) {\n      if (typeof key === 'string') {\n        if (!alreadySeen.has(key)) {\n          attrExprs.push(...getAttributeNameLiterals(key));\n          value !== undefined && attrExprs.push(value);\n          alreadySeen.add(key);\n        }\n      } else {\n        attrExprs.push(literal(key));\n      }\n    }\n    // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`\n    // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as\n    // as single property value cell by cell.\n    if (styles) {\n      styles.populateInitialStylingAttrs(attrExprs);\n    }\n    if (inputs.length || outputs.length) {\n      const attrsLengthBeforeInputs = attrExprs.length;\n      for (let i = 0; i < inputs.length; i++) {\n        const input = inputs[i];\n        // We don't want the animation and attribute bindings in the\n        // attributes array since they aren't used for directive matching.\n        if (input.type !== 4 /* BindingType.Animation */ && input.type !== 1 /* BindingType.Attribute */) {\n          addAttrExpr(input.name);\n        }\n      }\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        if (output.type !== 1 /* ParsedEventType.Animation */) {\n          addAttrExpr(output.name);\n        }\n      }\n      // this is a cheap way of adding the marker only after all the input/output\n      // values have been filtered (by not including the animation ones) and added\n      // to the expressions. The marker is important because it tells the runtime\n      // code that this is where attributes without values start...\n      if (attrExprs.length !== attrsLengthBeforeInputs) {\n        attrExprs.splice(attrsLengthBeforeInputs, 0, literal(3 /* core.AttributeMarker.Bindings */));\n      }\n    }\n    if (templateAttrs.length) {\n      attrExprs.push(literal(4 /* core.AttributeMarker.Template */));\n      templateAttrs.forEach(attr => addAttrExpr(attr.name));\n    }\n    if (boundI18nAttrs.length) {\n      attrExprs.push(literal(6 /* core.AttributeMarker.I18n */));\n      boundI18nAttrs.forEach(attr => addAttrExpr(attr.name));\n    }\n    return attrExprs;\n  }\n  addToConsts(expression) {\n    if (isNull(expression)) {\n      return TYPED_NULL_EXPR;\n    }\n    const consts = this._constants.constExpressions;\n    // Try to reuse a literal that's already in the array, if possible.\n    for (let i = 0; i < consts.length; i++) {\n      if (consts[i].isEquivalent(expression)) {\n        return literal(i);\n      }\n    }\n    return literal(consts.push(expression) - 1);\n  }\n  addAttrsToConsts(attrs) {\n    return attrs !== null && attrs.length > 0 ? this.addToConsts(literalArr(attrs)) : TYPED_NULL_EXPR;\n  }\n  prepareRefsArray(references) {\n    if (!references || references.length === 0) {\n      return TYPED_NULL_EXPR;\n    }\n    const refsParam = references.flatMap(reference => {\n      const slot = this.allocateDataSlot();\n      // Generate the update temporary.\n      const variableName = this._bindingScope.freshReferenceName();\n      const retrievalLevel = this.level;\n      const lhs = variable(variableName);\n      this._bindingScope.set(retrievalLevel, reference.name, lhs, 0 /* DeclarationPriority.DEFAULT */, (scope, relativeLevel) => {\n        // e.g. nextContext(2);\n        const nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : [];\n        // e.g. const $foo$ = reference(1);\n        const refExpr = lhs.set(importExpr(Identifiers.reference).callFn([literal(slot)]));\n        return nextContextStmt.concat(refExpr.toConstDecl());\n      }, true);\n      return [reference.name, reference.value];\n    });\n    return asLiteral(refsParam);\n  }\n  prepareListenerParameter(tagName, outputAst, index) {\n    return () => {\n      const eventName = outputAst.name;\n      const bindingFnName = outputAst.type === 1 /* ParsedEventType.Animation */ ?\n      // synthetic @listener.foo values are treated the exact same as are standard listeners\n      prepareSyntheticListenerFunctionName(eventName, outputAst.phase) : sanitizeIdentifier(eventName);\n      const handlerName = `${this.templateName}_${tagName}_${bindingFnName}_${index}_listener`;\n      const scope = this._bindingScope.nestedScope(this._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);\n      return prepareEventListenerParameters(outputAst, handlerName, scope);\n    };\n  }\n}\nclass ValueConverter extends AstMemoryEfficientTransformer {\n  constructor(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {\n    super();\n    this.constantPool = constantPool;\n    this.allocateSlot = allocateSlot;\n    this.allocatePureFunctionSlots = allocatePureFunctionSlots;\n    this.definePipe = definePipe;\n    this._pipeBindExprs = [];\n  }\n  // AstMemoryEfficientTransformer\n  visitPipe(pipe, context) {\n    // Allocate a slot to create the pipe\n    const slot = this.allocateSlot();\n    const slotPseudoLocal = `PIPE:${slot}`;\n    // Allocate one slot for the result plus one slot per pipe argument\n    const pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);\n    const target = new PropertyRead(pipe.span, pipe.sourceSpan, pipe.nameSpan, new ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);\n    const {\n      identifier,\n      isVarLength\n    } = pipeBindingCallInfo(pipe.args);\n    this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));\n    const args = [pipe.exp, ...pipe.args];\n    const convertedArgs = isVarLength ? this.visitAll([new LiteralArray(pipe.span, pipe.sourceSpan, args)]) : this.visitAll(args);\n    const pipeBindExpr = new Call(pipe.span, pipe.sourceSpan, target, [new LiteralPrimitive(pipe.span, pipe.sourceSpan, slot), new LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot), ...convertedArgs], null);\n    this._pipeBindExprs.push(pipeBindExpr);\n    return pipeBindExpr;\n  }\n  updatePipeSlotOffsets(bindingSlots) {\n    this._pipeBindExprs.forEach(pipe => {\n      // update the slot offset arg (index 1) to account for binding slots\n      const slotOffset = pipe.args[1];\n      slotOffset.value += bindingSlots;\n    });\n  }\n  visitLiteralArray(array, context) {\n    return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), values => {\n      // If the literal has calculated (non-literal) elements transform it into\n      // calls to literal factories that compose the literal and will cache intermediate\n      // values.\n      const literal = literalArr(values);\n      return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n    });\n  }\n  visitLiteralMap(map, context) {\n    return new BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), values => {\n      // If the literal has calculated (non-literal) elements  transform it into\n      // calls to literal factories that compose the literal and will cache intermediate\n      // values.\n      const literal = literalMap(values.map((value, index) => ({\n        key: map.keys[index].key,\n        value,\n        quoted: map.keys[index].quoted\n      })));\n      return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n    });\n  }\n}\n// Pipes always have at least one parameter, the value they operate on\nconst pipeBindingIdentifiers = [Identifiers.pipeBind1, Identifiers.pipeBind2, Identifiers.pipeBind3, Identifiers.pipeBind4];\nfunction pipeBindingCallInfo(args) {\n  const identifier = pipeBindingIdentifiers[args.length];\n  return {\n    identifier: identifier || Identifiers.pipeBindV,\n    isVarLength: !identifier\n  };\n}\nconst pureFunctionIdentifiers = [Identifiers.pureFunction0, Identifiers.pureFunction1, Identifiers.pureFunction2, Identifiers.pureFunction3, Identifiers.pureFunction4, Identifiers.pureFunction5, Identifiers.pureFunction6, Identifiers.pureFunction7, Identifiers.pureFunction8];\nfunction pureFunctionCallInfo(args) {\n  const identifier = pureFunctionIdentifiers[args.length];\n  return {\n    identifier: identifier || Identifiers.pureFunctionV,\n    isVarLength: !identifier\n  };\n}\n// e.g. x(2);\nfunction generateNextContextExpr(relativeLevelDiff) {\n  return importExpr(Identifiers.nextContext).callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);\n}\nfunction getLiteralFactory(constantPool, literal$1, allocateSlots) {\n  const {\n    literalFactory,\n    literalFactoryArguments\n  } = constantPool.getLiteralFactory(literal$1);\n  // Allocate 1 slot for the result plus 1 per argument\n  const startSlot = allocateSlots(1 + literalFactoryArguments.length);\n  const {\n    identifier,\n    isVarLength\n  } = pureFunctionCallInfo(literalFactoryArguments);\n  // Literal factories are pure functions that only need to be re-invoked when the parameters\n  // change.\n  const args = [literal(startSlot), literalFactory];\n  if (isVarLength) {\n    args.push(literalArr(literalFactoryArguments));\n  } else {\n    args.push(...literalFactoryArguments);\n  }\n  return importExpr(identifier).callFn(args);\n}\n/**\n * Gets an array of literals that can be added to an expression\n * to represent the name and namespace of an attribute. E.g.\n * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.\n *\n * @param name Name of the attribute, including the namespace.\n */\nfunction getAttributeNameLiterals(name) {\n  const [attributeNamespace, attributeName] = splitNsName(name);\n  const nameLiteral = literal(attributeName);\n  if (attributeNamespace) {\n    return [literal(0 /* core.AttributeMarker.NamespaceURI */), literal(attributeNamespace), nameLiteral];\n  }\n  return [nameLiteral];\n}\n/** The prefix used to get a shared context in BindingScope's map. */\nconst SHARED_CONTEXT_KEY = '$$shared_ctx$$';\nclass BindingScope {\n  static createRootScope() {\n    return new BindingScope();\n  }\n  constructor(bindingLevel = 0, parent = null, globals) {\n    this.bindingLevel = bindingLevel;\n    this.parent = parent;\n    this.globals = globals;\n    /** Keeps a map from local variables to their BindingData. */\n    this.map = new Map();\n    this.referenceNameIndex = 0;\n    this.restoreViewVariable = null;\n    this.usesRestoredViewContext = false;\n    if (globals !== undefined) {\n      for (const name of globals) {\n        this.set(0, name, variable(name));\n      }\n    }\n  }\n  get(name) {\n    let current = this;\n    while (current) {\n      let value = current.map.get(name);\n      if (value != null) {\n        if (current !== this) {\n          // make a local copy and reset the `declare` state\n          value = {\n            retrievalLevel: value.retrievalLevel,\n            lhs: value.lhs,\n            declareLocalCallback: value.declareLocalCallback,\n            declare: false,\n            priority: value.priority\n          };\n          // Cache the value locally.\n          this.map.set(name, value);\n          // Possibly generate a shared context var\n          this.maybeGenerateSharedContextVar(value);\n          this.maybeRestoreView();\n        }\n        if (value.declareLocalCallback && !value.declare) {\n          value.declare = true;\n        }\n        return typeof value.lhs === 'function' ? value.lhs(this, value.retrievalLevel) : value.lhs;\n      }\n      current = current.parent;\n    }\n    // If we get to this point, we are looking for a property on the top level component\n    // - If level === 0, we are on the top and don't need to re-declare `ctx`.\n    // - If level > 0, we are in an embedded view. We need to retrieve the name of the\n    // local var we used to store the component context, e.g. const $comp$ = x();\n    return this.bindingLevel === 0 ? null : this.getComponentProperty(name);\n  }\n  /** Checks whether a variable exists locally on the current scope. */\n  hasLocal(name) {\n    return this.map.has(name);\n  }\n  /**\n   * Create a local variable for later reference.\n   *\n   * @param retrievalLevel The level from which this value can be retrieved\n   * @param name Name of the variable.\n   * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\n   * @param priority The sorting priority of this var\n   * @param declareLocalCallback The callback to invoke when declaring this local var\n   * @param localRef Whether or not this is a local ref\n   */\n  set(retrievalLevel, name, lhs, priority = 0 /* DeclarationPriority.DEFAULT */, declareLocalCallback, localRef) {\n    if (this.map.has(name)) {\n      if (localRef) {\n        // Do not throw an error if it's a local ref and do not update existing value,\n        // so the first defined ref is always returned.\n        return this;\n      }\n      error(`The name ${name} is already defined in scope to be ${this.map.get(name)}`);\n    }\n    this.map.set(name, {\n      retrievalLevel: retrievalLevel,\n      lhs: lhs,\n      declare: false,\n      declareLocalCallback: declareLocalCallback,\n      priority: priority\n    });\n    return this;\n  }\n  // Implemented as part of LocalResolver.\n  getLocal(name) {\n    return this.get(name);\n  }\n  // Implemented as part of LocalResolver.\n  notifyImplicitReceiverUse() {\n    if (this.bindingLevel !== 0) {\n      // Since the implicit receiver is accessed in an embedded view, we need to\n      // ensure that we declare a shared context variable for the current template\n      // in the update variables.\n      this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;\n    }\n  }\n  nestedScope(level, globals) {\n    const newScope = new BindingScope(level, this, globals);\n    if (level > 0) newScope.generateSharedContextVar(0);\n    return newScope;\n  }\n  /**\n   * Gets or creates a shared context variable and returns its expression. Note that\n   * this does not mean that the shared variable will be declared. Variables in the\n   * binding scope will be only declared if they are used.\n   */\n  getOrCreateSharedContextVar(retrievalLevel) {\n    const bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;\n    if (!this.map.has(bindingKey)) {\n      this.generateSharedContextVar(retrievalLevel);\n    }\n    // Shared context variables are always generated as \"ReadVarExpr\".\n    return this.map.get(bindingKey).lhs;\n  }\n  getSharedContextName(retrievalLevel) {\n    const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel);\n    // Shared context variables are always generated as \"ReadVarExpr\".\n    return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;\n  }\n  maybeGenerateSharedContextVar(value) {\n    if (value.priority === 1 /* DeclarationPriority.CONTEXT */ && value.retrievalLevel < this.bindingLevel) {\n      const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);\n      if (sharedCtxObj) {\n        sharedCtxObj.declare = true;\n      } else {\n        this.generateSharedContextVar(value.retrievalLevel);\n      }\n    }\n  }\n  generateSharedContextVar(retrievalLevel) {\n    const lhs = variable(CONTEXT_NAME + this.freshReferenceName());\n    this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {\n      retrievalLevel: retrievalLevel,\n      lhs: lhs,\n      declareLocalCallback: (scope, relativeLevel) => {\n        // const ctx_r0 = nextContext(2);\n        return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];\n      },\n      declare: false,\n      priority: 2 /* DeclarationPriority.SHARED_CONTEXT */\n    });\n  }\n  getComponentProperty(name) {\n    const componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);\n    componentValue.declare = true;\n    this.maybeRestoreView();\n    const lhs = typeof componentValue.lhs === 'function' ? componentValue.lhs(this, componentValue.retrievalLevel) : componentValue.lhs;\n    return name === DIRECT_CONTEXT_REFERENCE ? lhs : lhs.prop(name);\n  }\n  maybeRestoreView() {\n    // View restoration is required for listener instructions inside embedded views, because\n    // they only run in creation mode and they can have references to the context object.\n    // If the context object changes in update mode, the reference will be incorrect, because\n    // it was established during creation.\n    if (this.isListenerScope()) {\n      if (!this.parent.restoreViewVariable) {\n        // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction\n        this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());\n      }\n      this.restoreViewVariable = this.parent.restoreViewVariable;\n    }\n  }\n  restoreViewStatement() {\n    if (this.restoreViewVariable) {\n      const restoreCall = invokeInstruction(null, Identifiers.restoreView, [this.restoreViewVariable]);\n      // Either `const restoredCtx = restoreView($state$);` or `restoreView($state$);`\n      // depending on whether it is being used.\n      return this.usesRestoredViewContext ? variable(RESTORED_VIEW_CONTEXT_NAME).set(restoreCall).toConstDecl() : restoreCall.toStmt();\n    }\n    return null;\n  }\n  viewSnapshotStatements() {\n    // const $state$ = getCurrentView();\n    return this.restoreViewVariable ? [this.restoreViewVariable.set(invokeInstruction(null, Identifiers.getCurrentView, [])).toConstDecl()] : [];\n  }\n  isListenerScope() {\n    return this.parent && this.parent.bindingLevel === this.bindingLevel;\n  }\n  variableDeclarations() {\n    let currentContextLevel = 0;\n    return Array.from(this.map.values()).filter(value => value.declare).sort((a, b) => b.retrievalLevel - a.retrievalLevel || b.priority - a.priority).reduce((stmts, value) => {\n      const levelDiff = this.bindingLevel - value.retrievalLevel;\n      const currStmts = value.declareLocalCallback(this, levelDiff - currentContextLevel);\n      currentContextLevel = levelDiff;\n      return stmts.concat(currStmts);\n    }, []);\n  }\n  freshReferenceName() {\n    let current = this;\n    // Find the top scope as it maintains the global reference count\n    while (current.parent) current = current.parent;\n    const ref = `${REFERENCE_PREFIX}${current.referenceNameIndex++}`;\n    return ref;\n  }\n  hasRestoreViewVariable() {\n    return !!this.restoreViewVariable;\n  }\n  notifyRestoredViewContextUse() {\n    this.usesRestoredViewContext = true;\n  }\n}\n/** Binding scope of a `track` function inside a `for` loop block. */\nclass TrackByBindingScope extends BindingScope {\n  constructor(parentScope, globalOverrides) {\n    super(parentScope.bindingLevel + 1, parentScope);\n    this.globalOverrides = globalOverrides;\n    this.componentAccessCount = 0;\n  }\n  get(name) {\n    // Intercept any overridden globals.\n    if (this.globalOverrides.hasOwnProperty(name)) {\n      return variable(this.globalOverrides[name]);\n    }\n    let current = this.parent;\n    // Prevent accesses of template variables outside the `for` loop.\n    while (current) {\n      if (current.hasLocal(name)) {\n        return null;\n      }\n      current = current.parent;\n    }\n    // When the component scope is accessed, we redirect it through `this`.\n    this.componentAccessCount++;\n    return variable('this').prop(name);\n  }\n  /** Gets the number of times the host component has been accessed through the scope. */\n  getComponentAccessCount() {\n    return this.componentAccessCount;\n  }\n}\n/**\n * Creates an array of expressions out of an `ngProjectAs` attributes\n * which can be added to the instruction parameters.\n */\nfunction getNgProjectAsLiteral(attribute) {\n  // Parse the attribute value into a CssSelectorList. Note that we only take the\n  // first selector, because we don't support multiple selectors in ngProjectAs.\n  const parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];\n  return [literal(5 /* core.AttributeMarker.ProjectAs */), asLiteral(parsedR3Selector)];\n}\n/**\n * Gets the instruction to generate for an interpolated property\n * @param interpolation An Interpolation AST\n */\nfunction getPropertyInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.propertyInterpolate;\n    case 3:\n      return Identifiers.propertyInterpolate1;\n    case 5:\n      return Identifiers.propertyInterpolate2;\n    case 7:\n      return Identifiers.propertyInterpolate3;\n    case 9:\n      return Identifiers.propertyInterpolate4;\n    case 11:\n      return Identifiers.propertyInterpolate5;\n    case 13:\n      return Identifiers.propertyInterpolate6;\n    case 15:\n      return Identifiers.propertyInterpolate7;\n    case 17:\n      return Identifiers.propertyInterpolate8;\n    default:\n      return Identifiers.propertyInterpolateV;\n  }\n}\n/**\n * Gets the instruction to generate for an interpolated attribute\n * @param interpolation An Interpolation AST\n */\nfunction getAttributeInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 3:\n      return Identifiers.attributeInterpolate1;\n    case 5:\n      return Identifiers.attributeInterpolate2;\n    case 7:\n      return Identifiers.attributeInterpolate3;\n    case 9:\n      return Identifiers.attributeInterpolate4;\n    case 11:\n      return Identifiers.attributeInterpolate5;\n    case 13:\n      return Identifiers.attributeInterpolate6;\n    case 15:\n      return Identifiers.attributeInterpolate7;\n    case 17:\n      return Identifiers.attributeInterpolate8;\n    default:\n      return Identifiers.attributeInterpolateV;\n  }\n}\n/**\n * Gets the instruction to generate for interpolated text.\n * @param interpolation An Interpolation AST\n */\nfunction getTextInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.textInterpolate;\n    case 3:\n      return Identifiers.textInterpolate1;\n    case 5:\n      return Identifiers.textInterpolate2;\n    case 7:\n      return Identifiers.textInterpolate3;\n    case 9:\n      return Identifiers.textInterpolate4;\n    case 11:\n      return Identifiers.textInterpolate5;\n    case 13:\n      return Identifiers.textInterpolate6;\n    case 15:\n      return Identifiers.textInterpolate7;\n    case 17:\n      return Identifiers.textInterpolate8;\n    default:\n      return Identifiers.textInterpolateV;\n  }\n}\n/**\n * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.\n *\n * @param template text of the template to parse\n * @param templateUrl URL to use for source mapping of the parsed template\n * @param options options to modify how the template is parsed\n */\nfunction parseTemplate(template, templateUrl, options = {}) {\n  const {\n    interpolationConfig,\n    preserveWhitespaces,\n    enableI18nLegacyMessageIdFormat\n  } = options;\n  const bindingParser = makeBindingParser(interpolationConfig);\n  const htmlParser = new HtmlParser();\n  const parseResult = htmlParser.parse(template, templateUrl, {\n    leadingTriviaChars: LEADING_TRIVIA_CHARS,\n    ...options,\n    tokenizeExpansionForms: true,\n    tokenizeBlocks: options.enableBlockSyntax ?? true\n  });\n  if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors && parseResult.errors.length > 0) {\n    const parsedTemplate = {\n      interpolationConfig,\n      preserveWhitespaces,\n      errors: parseResult.errors,\n      nodes: [],\n      styleUrls: [],\n      styles: [],\n      ngContentSelectors: []\n    };\n    if (options.collectCommentNodes) {\n      parsedTemplate.commentNodes = [];\n    }\n    return parsedTemplate;\n  }\n  let rootNodes = parseResult.rootNodes;\n  // process i18n meta information (scan attributes, generate ids)\n  // before we run whitespace removal process, because existing i18n\n  // extraction process (ng extract-i18n) relies on a raw content to generate\n  // message ids\n  const i18nMetaVisitor = new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */!preserveWhitespaces, enableI18nLegacyMessageIdFormat);\n  const i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);\n  if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors && i18nMetaResult.errors.length > 0) {\n    const parsedTemplate = {\n      interpolationConfig,\n      preserveWhitespaces,\n      errors: i18nMetaResult.errors,\n      nodes: [],\n      styleUrls: [],\n      styles: [],\n      ngContentSelectors: []\n    };\n    if (options.collectCommentNodes) {\n      parsedTemplate.commentNodes = [];\n    }\n    return parsedTemplate;\n  }\n  rootNodes = i18nMetaResult.rootNodes;\n  if (!preserveWhitespaces) {\n    rootNodes = visitAll(new WhitespaceVisitor(), rootNodes);\n    // run i18n meta visitor again in case whitespaces are removed (because that might affect\n    // generated i18n message content) and first pass indicated that i18n content is present in a\n    // template. During this pass i18n IDs generated at the first pass will be preserved, so we can\n    // mimic existing extraction process (ng extract-i18n)\n    if (i18nMetaVisitor.hasI18nMeta) {\n      rootNodes = visitAll(new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */false), rootNodes);\n    }\n  }\n  const {\n    nodes,\n    errors,\n    styleUrls,\n    styles,\n    ngContentSelectors,\n    commentNodes\n  } = htmlAstToRender3Ast(rootNodes, bindingParser, {\n    collectCommentNodes: !!options.collectCommentNodes\n  });\n  errors.push(...parseResult.errors, ...i18nMetaResult.errors);\n  const parsedTemplate = {\n    interpolationConfig,\n    preserveWhitespaces,\n    errors: errors.length > 0 ? errors : null,\n    nodes,\n    styleUrls,\n    styles,\n    ngContentSelectors\n  };\n  if (options.collectCommentNodes) {\n    parsedTemplate.commentNodes = commentNodes;\n  }\n  return parsedTemplate;\n}\nconst elementRegistry = new DomElementSchemaRegistry();\n/**\n * Construct a `BindingParser` with a default configuration.\n */\nfunction makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n  return new BindingParser(new Parser$1(new Lexer()), interpolationConfig, elementRegistry, []);\n}\nfunction resolveSanitizationFn(context, isAttribute) {\n  switch (context) {\n    case SecurityContext.HTML:\n      return importExpr(Identifiers.sanitizeHtml);\n    case SecurityContext.SCRIPT:\n      return importExpr(Identifiers.sanitizeScript);\n    case SecurityContext.STYLE:\n      // the compiler does not fill in an instruction for [style.prop?] binding\n      // values because the style algorithm knows internally what props are subject\n      // to sanitization (only [attr.style] values are explicitly sanitized)\n      return isAttribute ? importExpr(Identifiers.sanitizeStyle) : null;\n    case SecurityContext.URL:\n      return importExpr(Identifiers.sanitizeUrl);\n    case SecurityContext.RESOURCE_URL:\n      return importExpr(Identifiers.sanitizeResourceUrl);\n    default:\n      return null;\n  }\n}\nfunction trustedConstAttribute(tagName, attr) {\n  const value = asLiteral(attr.value);\n  if (isTrustedTypesSink(tagName, attr.name)) {\n    switch (elementRegistry.securityContext(tagName, attr.name, /* isAttribute */true)) {\n      case SecurityContext.HTML:\n        return taggedTemplate(importExpr(Identifiers.trustConstantHtml), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n      // NB: no SecurityContext.SCRIPT here, as the corresponding tags are stripped by the compiler.\n      case SecurityContext.RESOURCE_URL:\n        return taggedTemplate(importExpr(Identifiers.trustConstantResourceUrl), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n      default:\n        return value;\n    }\n  } else {\n    return value;\n  }\n}\nfunction isSingleElementTemplate(children) {\n  return children.length === 1 && children[0] instanceof Element$1;\n}\nfunction isTextNode(node) {\n  return node instanceof Text$3 || node instanceof BoundText || node instanceof Icu$1;\n}\nfunction isIframeElement(tagName) {\n  return tagName.toLowerCase() === 'iframe';\n}\nfunction hasTextChildrenOnly(children) {\n  return children.every(isTextNode);\n}\nfunction getBindingFunctionParams(deferredParams, name, eagerParams) {\n  return () => {\n    const value = deferredParams();\n    const fnParams = Array.isArray(value) ? value : [value];\n    if (eagerParams) {\n      fnParams.push(...eagerParams);\n    }\n    if (name) {\n      // We want the property name to always be the first function parameter.\n      fnParams.unshift(literal(name));\n    }\n    return fnParams;\n  };\n}\n/** Name of the global variable that is used to determine if we use Closure translations or not */\nconst NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';\n/**\n * Generate statements that define a given translation message.\n *\n * ```\n * var I18N_1;\n * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {\n *     var MSG_EXTERNAL_XXX = goog.getMsg(\n *          \"Some message with {$interpolation}!\",\n *          { \"interpolation\": \"\\uFFFD0\\uFFFD\" }\n *     );\n *     I18N_1 = MSG_EXTERNAL_XXX;\n * }\n * else {\n *     I18N_1 = $localize`Some message with ${'\\uFFFD0\\uFFFD'}!`;\n * }\n * ```\n *\n * @param message The original i18n AST message node\n * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.\n * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.\n * @param params Object mapping placeholder names to their values (e.g.\n * `{ \"interpolation\": \"\\uFFFD0\\uFFFD\" }`).\n * @param transformFn Optional transformation function that will be applied to the translation (e.g.\n * post-processing).\n * @returns An array of statements that defined a given translation.\n */\nfunction getTranslationDeclStmts(message, variable, closureVar, params = {}, transformFn) {\n  // Sort the map entries in the compiled output. This makes it easy to acheive identical output in\n  // the template pipeline compiler.\n  params = Object.fromEntries(Object.entries(params).sort());\n  const statements = [declareI18nVariable(variable), ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable, message, closureVar, params), createLocalizeStatements(variable, message, formatI18nPlaceholderNamesInMap(params, /* useCamelCase */false)))];\n  if (transformFn) {\n    statements.push(new ExpressionStatement(variable.set(transformFn(variable))));\n  }\n  return statements;\n}\n/**\n * Create the expression that will be used to guard the closure mode block\n * It is equivalent to:\n *\n * ```\n * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode\n * ```\n */\nfunction createClosureModeGuard() {\n  return typeofExpr(variable(NG_I18N_CLOSURE_MODE)).notIdentical(literal('undefined', STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE));\n}\n\n// This regex matches any binding names that contain the \"attr.\" prefix, e.g. \"attr.required\"\n// If there is a match, the first matching group will contain the attribute name to bind.\nconst ATTR_REGEX = /attr\\.([^\\]]+)/;\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\nfunction baseDirectiveFields(meta, constantPool, bindingParser) {\n  const definitionMap = new DefinitionMap();\n  const selectors = parseSelectorToR3Selector(meta.selector);\n  // e.g. `type: MyDirective`\n  definitionMap.set('type', meta.type.value);\n  // e.g. `selectors: [['', 'someDir', '']]`\n  if (selectors.length > 0) {\n    definitionMap.set('selectors', asLiteral(selectors));\n  }\n  if (meta.queries.length > 0) {\n    // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }\n    definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));\n  }\n  if (meta.viewQueries.length) {\n    definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));\n  }\n  // e.g. `hostBindings: (rf, ctx) => { ... }\n  definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap));\n  // e.g 'inputs: {a: 'a'}`\n  definitionMap.set('inputs', conditionallyCreateDirectiveBindingLiteral(meta.inputs, true));\n  // e.g 'outputs: {a: 'a'}`\n  definitionMap.set('outputs', conditionallyCreateDirectiveBindingLiteral(meta.outputs));\n  if (meta.exportAs !== null) {\n    definitionMap.set('exportAs', literalArr(meta.exportAs.map(e => literal(e))));\n  }\n  if (meta.isStandalone) {\n    definitionMap.set('standalone', literal(true));\n  }\n  if (meta.isSignal) {\n    definitionMap.set('signals', literal(true));\n  }\n  return definitionMap;\n}\n/**\n * Add features to the definition map.\n */\nfunction addFeatures(definitionMap, meta) {\n  // e.g. `features: [NgOnChangesFeature]`\n  const features = [];\n  const providers = meta.providers;\n  const viewProviders = meta.viewProviders;\n  const inputKeys = Object.keys(meta.inputs);\n  if (providers || viewProviders) {\n    const args = [providers || new LiteralArrayExpr([])];\n    if (viewProviders) {\n      args.push(viewProviders);\n    }\n    features.push(importExpr(Identifiers.ProvidersFeature).callFn(args));\n  }\n  for (const key of inputKeys) {\n    if (meta.inputs[key].transformFunction !== null) {\n      features.push(importExpr(Identifiers.InputTransformsFeatureFeature));\n      break;\n    }\n  }\n  // Note: host directives feature needs to be inserted before the\n  // inheritance feature to ensure the correct execution order.\n  if (meta.hostDirectives?.length) {\n    features.push(importExpr(Identifiers.HostDirectivesFeature).callFn([createHostDirectivesFeatureArg(meta.hostDirectives)]));\n  }\n  if (meta.usesInheritance) {\n    features.push(importExpr(Identifiers.InheritDefinitionFeature));\n  }\n  if (meta.fullInheritance) {\n    features.push(importExpr(Identifiers.CopyDefinitionFeature));\n  }\n  if (meta.lifecycle.usesOnChanges) {\n    features.push(importExpr(Identifiers.NgOnChangesFeature));\n  }\n  // TODO: better way of differentiating component vs directive metadata.\n  if (meta.hasOwnProperty('template') && meta.isStandalone) {\n    features.push(importExpr(Identifiers.StandaloneFeature));\n  }\n  if (features.length) {\n    definitionMap.set('features', literalArr(features));\n  }\n}\n/**\n * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\n */\nfunction compileDirectiveFromMetadata(meta, constantPool, bindingParser) {\n  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n  addFeatures(definitionMap, meta);\n  const expression = importExpr(Identifiers.defineDirective).callFn([definitionMap.toLiteralMap()], undefined, true);\n  const type = createDirectiveType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\n * Creates an AST for a function that contains dynamic imports representing\n * deferrable dependencies.\n */\nfunction createDeferredDepsFunction(constantPool, name, deps) {\n  // This defer block has deps for which we need to generate dynamic imports.\n  const dependencyExp = [];\n  for (const [symbolName, importPath] of deps) {\n    // Callback function, e.g. `m () => m.MyCmp;`.\n    const innerFn = arrowFn([new FnParam('m', DYNAMIC_TYPE)], variable('m').prop(symbolName));\n    // Dynamic import, e.g. `import('./a').then(...)`.\n    const importExpr = new DynamicImportExpr(importPath).prop('then').callFn([innerFn]);\n    dependencyExp.push(importExpr);\n  }\n  const depsFnExpr = arrowFn([], literalArr(dependencyExp));\n  constantPool.statements.push(depsFnExpr.toDeclStmt(name, StmtModifier.Final));\n  return variable(name);\n}\n/**\n * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\n */\nfunction compileComponentFromMetadata(meta, constantPool, bindingParser) {\n  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n  addFeatures(definitionMap, meta);\n  const selector = meta.selector && CssSelector.parse(meta.selector);\n  const firstSelector = selector && selector[0];\n  // e.g. `attr: [\"class\", \".my.app\"]`\n  // This is optional an only included if the first selector of a component specifies attributes.\n  if (firstSelector) {\n    const selectorAttributes = firstSelector.getAttrs();\n    if (selectorAttributes.length) {\n      definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(value => value != null ? literal(value) : literal(undefined))), /* forceShared */true));\n    }\n  }\n  // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n  const templateTypeName = meta.name;\n  const templateName = templateTypeName ? `${templateTypeName}_Template` : null;\n  // Template compilation is currently conditional as we're in the process of rewriting it.\n  if (!USE_TEMPLATE_PIPELINE) {\n    // This is the main path currently used in compilation, which compiles the template with the\n    // legacy `TemplateDefinitionBuilder`.\n    let allDeferrableDepsFn = null;\n    if (meta.deferBlocks.size > 0 && meta.deferrableTypes.size > 0 && meta.deferBlockDepsEmitMode === 1 /* DeferBlockDepsEmitMode.PerComponent */) {\n      const fnName = `${templateTypeName}_DeferFn`;\n      allDeferrableDepsFn = createDeferredDepsFunction(constantPool, fnName, meta.deferrableTypes);\n    }\n    const template = meta.template;\n    const templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, Identifiers.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.deferBlocks, new Map(), allDeferrableDepsFn);\n    const templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []);\n    // We need to provide this so that dynamically generated components know what\n    // projected content blocks to pass through to the component when it is\n    //     instantiated.\n    const ngContentSelectors = templateBuilder.getNgContentSelectors();\n    if (ngContentSelectors) {\n      definitionMap.set('ngContentSelectors', ngContentSelectors);\n    }\n    // e.g. `decls: 2`\n    // definitionMap.set('decls', o.literal(tpl.root.decls!));\n    definitionMap.set('decls', literal(templateBuilder.getConstCount()));\n    // e.g. `vars: 2`\n    // definitionMap.set('vars', o.literal(tpl.root.vars!));\n    definitionMap.set('vars', literal(templateBuilder.getVarCount()));\n    // Generate `consts` section of ComponentDef:\n    // - either as an array:\n    //   `consts: [['one', 'two'], ['three', 'four']]`\n    // - or as a factory function in case additional statements are present (to support i18n):\n    //   `consts: () => { var i18n_0; if (ngI18nClosureMode) {...} else {...} return [i18n_0];\n    //   }`\n    const {\n      constExpressions,\n      prepareStatements\n    } = templateBuilder.getConsts();\n    if (constExpressions.length > 0) {\n      let constsExpr = literalArr(constExpressions);\n      // Prepare statements are present - turn `consts` into a function.\n      if (prepareStatements.length > 0) {\n        constsExpr = arrowFn([], [...prepareStatements, new ReturnStatement(constsExpr)]);\n      }\n      definitionMap.set('consts', constsExpr);\n    }\n    definitionMap.set('template', templateFunctionExpression);\n  } else {\n    // This path compiles the template using the prototype template pipeline. First the template is\n    // ingested into IR:\n    const tpl = ingestComponent(meta.name, meta.template.nodes, constantPool, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.deferBlocks);\n    // Then the IR is transformed to prepare it for cod egeneration.\n    transform(tpl, CompilationJobKind.Tmpl);\n    // Finally we emit the template function:\n    const templateFn = emitTemplateFn(tpl, constantPool);\n    if (tpl.contentSelectors !== null) {\n      definitionMap.set('ngContentSelectors', tpl.contentSelectors);\n    }\n    definitionMap.set('decls', literal(tpl.root.decls));\n    definitionMap.set('vars', literal(tpl.root.vars));\n    if (tpl.consts.length > 0) {\n      if (tpl.constsInitializers.length > 0) {\n        definitionMap.set('consts', arrowFn([], [...tpl.constsInitializers, new ReturnStatement(literalArr(tpl.consts))]));\n      } else {\n        definitionMap.set('consts', literalArr(tpl.consts));\n      }\n    }\n    definitionMap.set('template', templateFn);\n  }\n  if (meta.declarationListEmitMode !== 3 /* DeclarationListEmitMode.RuntimeResolved */ && meta.declarations.length > 0) {\n    definitionMap.set('dependencies', compileDeclarationList(literalArr(meta.declarations.map(decl => decl.type)), meta.declarationListEmitMode));\n  } else if (meta.declarationListEmitMode === 3 /* DeclarationListEmitMode.RuntimeResolved */) {\n    const args = [meta.type.value];\n    if (meta.rawImports) {\n      args.push(meta.rawImports);\n    }\n    definitionMap.set('dependencies', importExpr(Identifiers.getComponentDepsFactory).callFn(args));\n  }\n  if (meta.encapsulation === null) {\n    meta.encapsulation = ViewEncapsulation.Emulated;\n  }\n  // e.g. `styles: [str1, str2]`\n  if (meta.styles && meta.styles.length) {\n    const styleValues = meta.encapsulation == ViewEncapsulation.Emulated ? compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) : meta.styles;\n    const styleNodes = styleValues.reduce((result, style) => {\n      if (style.trim().length > 0) {\n        result.push(constantPool.getConstLiteral(literal(style)));\n      }\n      return result;\n    }, []);\n    if (styleNodes.length > 0) {\n      definitionMap.set('styles', literalArr(styleNodes));\n    }\n  } else if (meta.encapsulation === ViewEncapsulation.Emulated) {\n    // If there is no style, don't generate css selectors on elements\n    meta.encapsulation = ViewEncapsulation.None;\n  }\n  // Only set view encapsulation if it's not the default value\n  if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n    definitionMap.set('encapsulation', literal(meta.encapsulation));\n  }\n  // e.g. `animation: [trigger('123', [])]`\n  if (meta.animations !== null) {\n    definitionMap.set('data', literalMap([{\n      key: 'animation',\n      value: meta.animations,\n      quoted: false\n    }]));\n  }\n  // Setting change detection flag\n  if (meta.changeDetection !== null) {\n    if (typeof meta.changeDetection === 'number' && meta.changeDetection !== ChangeDetectionStrategy.Default) {\n      // changeDetection is resolved during analysis. Only set it if not the default.\n      definitionMap.set('changeDetection', literal(meta.changeDetection));\n    } else if (typeof meta.changeDetection === 'object') {\n      // changeDetection is not resolved during analysis (e.g., we are in local compilation mode).\n      // So place it as is.\n      definitionMap.set('changeDetection', meta.changeDetection);\n    }\n  }\n  const expression = importExpr(Identifiers.defineComponent).callFn([definitionMap.toLiteralMap()], undefined, true);\n  const type = createComponentType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\n * Creates the type specification from the component meta. This type is inserted into .d.ts files\n * to be consumed by upstream compilations.\n */\nfunction createComponentType(meta) {\n  const typeParams = createBaseDirectiveTypeParams(meta);\n  typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));\n  typeParams.push(expressionType(literal(meta.isStandalone)));\n  typeParams.push(createHostDirectivesType(meta));\n  // TODO(signals): Always include this metadata starting with v17. Right\n  // now Angular v16.0.x does not support this field and library distributions\n  // would then be incompatible with v16.0.x framework users.\n  if (meta.isSignal) {\n    typeParams.push(expressionType(literal(meta.isSignal)));\n  }\n  return expressionType(importExpr(Identifiers.ComponentDeclaration, typeParams));\n}\n/**\n * Compiles the array literal of declarations into an expression according to the provided emit\n * mode.\n */\nfunction compileDeclarationList(list, mode) {\n  switch (mode) {\n    case 0 /* DeclarationListEmitMode.Direct */:\n      // directives: [MyDir],\n      return list;\n    case 1 /* DeclarationListEmitMode.Closure */:\n      // directives: function () { return [MyDir]; }\n      return arrowFn([], list);\n    case 2 /* DeclarationListEmitMode.ClosureResolved */:\n      // directives: function () { return [MyDir].map(ng.resolveForwardRef); }\n      const resolvedList = list.prop('map').callFn([importExpr(Identifiers.resolveForwardRef)]);\n      return arrowFn([], resolvedList);\n    case 3 /* DeclarationListEmitMode.RuntimeResolved */:\n      throw new Error(`Unsupported with an array of pre-resolved dependencies`);\n  }\n}\nfunction prepareQueryParams(query, constantPool) {\n  const parameters = [getQueryPredicate(query, constantPool), literal(toQueryFlags(query))];\n  if (query.read) {\n    parameters.push(query.read);\n  }\n  return parameters;\n}\n/**\n * Translates query flags into `TQueryFlags` type in packages/core/src/render3/interfaces/query.ts\n * @param query\n */\nfunction toQueryFlags(query) {\n  return (query.descendants ? 1 /* QueryFlags.descendants */ : 0 /* QueryFlags.none */) | (query.static ? 2 /* QueryFlags.isStatic */ : 0 /* QueryFlags.none */) | (query.emitDistinctChangesOnly ? 4 /* QueryFlags.emitDistinctChangesOnly */ : 0 /* QueryFlags.none */);\n}\nfunction convertAttributesToExpressions(attributes) {\n  const values = [];\n  for (let key of Object.getOwnPropertyNames(attributes)) {\n    const value = attributes[key];\n    values.push(literal(key), value);\n  }\n  return values;\n}\n// Define and update any content queries\nfunction createContentQueriesFunction(queries, constantPool, name) {\n  const createStatements = [];\n  const updateStatements = [];\n  const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n  for (const query of queries) {\n    // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);\n    createStatements.push(importExpr(Identifiers.contentQuery).callFn([variable('dirIndex'), ...prepareQueryParams(query, constantPool)]).toStmt());\n    // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n    const temporary = tempAllocator();\n    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);\n    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);\n    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);\n    updateStatements.push(refresh.and(updateDirective).toStmt());\n  }\n  const contentQueriesFnName = name ? `${name}_ContentQueries` : null;\n  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null), new FnParam('dirIndex', null)], [renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, createStatements), renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateStatements)], INFERRED_TYPE, null, contentQueriesFnName);\n}\nfunction stringAsType(str) {\n  return expressionType(literal(str));\n}\nfunction stringMapAsLiteralExpression(map) {\n  const mapValues = Object.keys(map).map(key => {\n    const value = Array.isArray(map[key]) ? map[key][0] : map[key];\n    return {\n      key,\n      value: literal(value),\n      quoted: true\n    };\n  });\n  return literalMap(mapValues);\n}\nfunction stringArrayAsType(arr) {\n  return arr.length > 0 ? expressionType(literalArr(arr.map(value => literal(value)))) : NONE_TYPE;\n}\nfunction createBaseDirectiveTypeParams(meta) {\n  // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n  // string literal, which must be on one line.\n  const selectorForType = meta.selector !== null ? meta.selector.replace(/\\n/g, '') : null;\n  return [typeWithParameters(meta.type.type, meta.typeArgumentCount), selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE, meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE, expressionType(getInputsTypeExpression(meta)), expressionType(stringMapAsLiteralExpression(meta.outputs)), stringArrayAsType(meta.queries.map(q => q.propertyName))];\n}\nfunction getInputsTypeExpression(meta) {\n  return literalMap(Object.keys(meta.inputs).map(key => {\n    const value = meta.inputs[key];\n    const values = [{\n      key: 'alias',\n      value: literal(value.bindingPropertyName),\n      quoted: true\n    }, {\n      key: 'required',\n      value: literal(value.required),\n      quoted: true\n    }];\n    // TODO(legacy-partial-output-inputs): Consider always emitting this information,\n    // or leaving it as is.\n    if (value.isSignal) {\n      values.push({\n        key: 'isSignal',\n        value: literal(value.isSignal),\n        quoted: true\n      });\n    }\n    return {\n      key,\n      value: literalMap(values),\n      quoted: true\n    };\n  }));\n}\n/**\n * Creates the type specification from the directive meta. This type is inserted into .d.ts files\n * to be consumed by upstream compilations.\n */\nfunction createDirectiveType(meta) {\n  const typeParams = createBaseDirectiveTypeParams(meta);\n  // Directives have no NgContentSelectors slot, but instead express a `never` type\n  // so that future fields align.\n  typeParams.push(NONE_TYPE);\n  typeParams.push(expressionType(literal(meta.isStandalone)));\n  typeParams.push(createHostDirectivesType(meta));\n  // TODO(signals): Always include this metadata starting with v17. Right\n  // now Angular v16.0.x does not support this field and library distributions\n  // would then be incompatible with v16.0.x framework users.\n  if (meta.isSignal) {\n    typeParams.push(expressionType(literal(meta.isSignal)));\n  }\n  return expressionType(importExpr(Identifiers.DirectiveDeclaration, typeParams));\n}\n// Define and update any view queries\nfunction createViewQueriesFunction(viewQueries, constantPool, name) {\n  const createStatements = [];\n  const updateStatements = [];\n  const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n  viewQueries.forEach(query => {\n    // creation, e.g. r3.viewQuery(somePredicate, true);\n    const queryDefinition = importExpr(Identifiers.viewQuery).callFn(prepareQueryParams(query, constantPool));\n    createStatements.push(queryDefinition.toStmt());\n    // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n    const temporary = tempAllocator();\n    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);\n    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);\n    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);\n    updateStatements.push(refresh.and(updateDirective).toStmt());\n  });\n  const viewQueryFnName = name ? `${name}_Query` : null;\n  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, createStatements), renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateStatements)], INFERRED_TYPE, null, viewQueryFnName);\n}\n// Return a host binding function or null if one is not necessary.\nfunction createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {\n  const bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, typeSourceSpan);\n  // Calculate host event bindings\n  const eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, typeSourceSpan);\n  if (USE_TEMPLATE_PIPELINE) {\n    // The parser for host bindings treats class and style attributes specially -- they are\n    // extracted into these separate fields. This is not the case for templates, so the compiler can\n    // actually already handle these special attributes internally. Therefore, we just drop them\n    // into the attributes map.\n    if (hostBindingsMetadata.specialAttributes.styleAttr) {\n      hostBindingsMetadata.attributes['style'] = literal(hostBindingsMetadata.specialAttributes.styleAttr);\n    }\n    if (hostBindingsMetadata.specialAttributes.classAttr) {\n      hostBindingsMetadata.attributes['class'] = literal(hostBindingsMetadata.specialAttributes.classAttr);\n    }\n    const hostJob = ingestHostBinding({\n      componentName: name,\n      componentSelector: selector,\n      properties: bindings,\n      events: eventBindings,\n      attributes: hostBindingsMetadata.attributes\n    }, bindingParser, constantPool);\n    transform(hostJob, CompilationJobKind.Host);\n    definitionMap.set('hostAttrs', hostJob.root.attributes);\n    const varCount = hostJob.root.vars;\n    if (varCount !== null && varCount > 0) {\n      definitionMap.set('hostVars', literal(varCount));\n    }\n    return emitHostBindingFunction(hostJob);\n  }\n  let bindingId = 0;\n  const getNextBindingId = () => `${bindingId++}`;\n  const bindingContext = variable(CONTEXT_NAME);\n  const styleBuilder = new StylingBuilder(bindingContext);\n  const {\n    styleAttr,\n    classAttr\n  } = hostBindingsMetadata.specialAttributes;\n  if (styleAttr !== undefined) {\n    styleBuilder.registerStyleAttr(styleAttr);\n  }\n  if (classAttr !== undefined) {\n    styleBuilder.registerClassAttr(classAttr);\n  }\n  const createInstructions = [];\n  const updateInstructions = [];\n  const updateVariables = [];\n  const hostBindingSourceSpan = typeSourceSpan;\n  if (eventBindings && eventBindings.length) {\n    createInstructions.push(...createHostListeners(eventBindings, name));\n  }\n  // Calculate the host property bindings\n  const allOtherBindings = [];\n  // We need to calculate the total amount of binding slots required by\n  // all the instructions together before any value conversions happen.\n  // Value conversions may require additional slots for interpolation and\n  // bindings with pipes. These calculates happen after this block.\n  let totalHostVarsCount = 0;\n  bindings && bindings.forEach(binding => {\n    const stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);\n    if (stylingInputWasSet) {\n      totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;\n    } else {\n      allOtherBindings.push(binding);\n      totalHostVarsCount++;\n    }\n  });\n  let valueConverter;\n  const getValueConverter = () => {\n    if (!valueConverter) {\n      const hostVarsCountFn = numSlots => {\n        const originalVarsCount = totalHostVarsCount;\n        totalHostVarsCount += numSlots;\n        return originalVarsCount;\n      };\n      valueConverter = new ValueConverter(constantPool, () => error('Unexpected node'),\n      // new nodes are illegal here\n      hostVarsCountFn, () => error('Unexpected pipe')); // pipes are illegal here\n    }\n    return valueConverter;\n  };\n  const propertyBindings = [];\n  const attributeBindings = [];\n  const syntheticHostBindings = [];\n  for (const binding of allOtherBindings) {\n    // resolve literal arrays and literal objects\n    const value = binding.expression.visit(getValueConverter());\n    const bindingExpr = bindingFn(bindingContext, value, getNextBindingId);\n    const {\n      bindingName,\n      instruction,\n      isAttribute\n    } = getBindingNameAndInstruction(binding);\n    const securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute).filter(context => context !== SecurityContext.NONE);\n    let sanitizerFn = null;\n    if (securityContexts.length) {\n      if (securityContexts.length === 2 && securityContexts.indexOf(SecurityContext.URL) > -1 && securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {\n        // Special case for some URL attributes (such as \"src\" and \"href\") that may be a part\n        // of different security contexts. In this case we use special sanitization function and\n        // select the actual sanitizer at runtime based on a tag name that is provided while\n        // invoking sanitization function.\n        sanitizerFn = importExpr(Identifiers.sanitizeUrlOrResourceUrl);\n      } else {\n        sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);\n      }\n    }\n    const instructionParams = [literal(bindingName), bindingExpr.currValExpr];\n    if (sanitizerFn) {\n      instructionParams.push(sanitizerFn);\n    } else {\n      // If there was no sanitization function found based on the security context\n      // of an attribute/property binding - check whether this attribute/property is\n      // one of the security-sensitive <iframe> attributes.\n      // Note: for host bindings defined on a directive, we do not try to find all\n      // possible places where it can be matched, so we can not determine whether\n      // the host element is an <iframe>. In this case, if an attribute/binding\n      // name is in the `IFRAME_SECURITY_SENSITIVE_ATTRS` set - append a validation\n      // function, which would be invoked at runtime and would have access to the\n      // underlying DOM element, check if it's an <iframe> and if so - runs extra checks.\n      if (isIframeSecuritySensitiveAttr(bindingName)) {\n        instructionParams.push(importExpr(Identifiers.validateIframeAttribute));\n      }\n    }\n    updateVariables.push(...bindingExpr.stmts);\n    if (instruction === Identifiers.hostProperty) {\n      propertyBindings.push(instructionParams);\n    } else if (instruction === Identifiers.attribute) {\n      attributeBindings.push(instructionParams);\n    } else if (instruction === Identifiers.syntheticHostProperty) {\n      syntheticHostBindings.push(instructionParams);\n    } else {\n      updateInstructions.push({\n        reference: instruction,\n        paramsOrFn: instructionParams,\n        span: null\n      });\n    }\n  }\n  for (const bindingParams of propertyBindings) {\n    updateInstructions.push({\n      reference: Identifiers.hostProperty,\n      paramsOrFn: bindingParams,\n      span: null\n    });\n  }\n  for (const bindingParams of attributeBindings) {\n    updateInstructions.push({\n      reference: Identifiers.attribute,\n      paramsOrFn: bindingParams,\n      span: null\n    });\n  }\n  for (const bindingParams of syntheticHostBindings) {\n    updateInstructions.push({\n      reference: Identifiers.syntheticHostProperty,\n      paramsOrFn: bindingParams,\n      span: null\n    });\n  }\n  // since we're dealing with directives/components and both have hostBinding\n  // functions, we need to generate a special hostAttrs instruction that deals\n  // with both the assignment of styling as well as static attributes to the host\n  // element. The instruction below will instruct all initial styling (styling\n  // that is inside of a host binding within a directive/component) to be attached\n  // to the host element alongside any of the provided host attributes that were\n  // collected earlier.\n  const hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);\n  styleBuilder.assignHostAttrs(hostAttrs, definitionMap);\n  if (styleBuilder.hasBindings) {\n    // finally each binding that was registered in the statement above will need to be added to\n    // the update block of a component/directive templateFn/hostBindingsFn so that the bindings\n    // are evaluated and updated for the element.\n    styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(instruction => {\n      for (const call of instruction.calls) {\n        // we subtract a value of `1` here because the binding slot was already allocated\n        // at the top of this method when all the input bindings were counted.\n        totalHostVarsCount += Math.max(call.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);\n        const {\n          params,\n          stmts\n        } = convertStylingCall(call, bindingContext, bindingFn, getNextBindingId);\n        updateVariables.push(...stmts);\n        updateInstructions.push({\n          reference: instruction.reference,\n          paramsOrFn: params,\n          span: null\n        });\n      }\n    });\n  }\n  if (totalHostVarsCount) {\n    definitionMap.set('hostVars', literal(totalHostVarsCount));\n  }\n  if (createInstructions.length > 0 || updateInstructions.length > 0) {\n    const hostBindingsFnName = name ? `${name}_HostBindings` : null;\n    const statements = [];\n    if (createInstructions.length > 0) {\n      statements.push(renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, getInstructionStatements(createInstructions)));\n    }\n    if (updateInstructions.length > 0) {\n      statements.push(renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateVariables.concat(getInstructionStatements(updateInstructions))));\n    }\n    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);\n  }\n  return null;\n}\nfunction bindingFn(implicit, value, getNextBindingIdFn) {\n  return convertPropertyBinding(null, implicit, value, getNextBindingIdFn());\n}\nfunction convertStylingCall(call, bindingContext, bindingFn, getNextBindingIdFn) {\n  const stmts = [];\n  const params = call.params(value => {\n    const result = bindingFn(bindingContext, value, getNextBindingIdFn);\n    if (Array.isArray(result.stmts) && result.stmts.length > 0) {\n      stmts.push(...result.stmts);\n    }\n    return result.currValExpr;\n  });\n  return {\n    params,\n    stmts\n  };\n}\nfunction getBindingNameAndInstruction(binding) {\n  let bindingName = binding.name;\n  let instruction;\n  // Check to see if this is an attr binding or a property binding\n  const attrMatches = bindingName.match(ATTR_REGEX);\n  if (attrMatches) {\n    bindingName = attrMatches[1];\n    instruction = Identifiers.attribute;\n  } else {\n    if (binding.isAnimation) {\n      bindingName = prepareSyntheticPropertyName(bindingName);\n      // host bindings that have a synthetic property (e.g. @foo) should always be rendered\n      // in the context of the component and not the parent. Therefore there is a special\n      // compatibility instruction available for this purpose.\n      instruction = Identifiers.syntheticHostProperty;\n    } else {\n      instruction = Identifiers.hostProperty;\n    }\n  }\n  return {\n    bindingName,\n    instruction,\n    isAttribute: !!attrMatches\n  };\n}\nfunction createHostListeners(eventBindings, name) {\n  const listenerParams = [];\n  const syntheticListenerParams = [];\n  const instructions = [];\n  for (const binding of eventBindings) {\n    let bindingName = binding.name && sanitizeIdentifier(binding.name);\n    const bindingFnName = binding.type === 1 /* ParsedEventType.Animation */ ? prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) : bindingName;\n    const handlerName = name && bindingName ? `${name}_${bindingFnName}_HostBindingHandler` : null;\n    const params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);\n    if (binding.type == 1 /* ParsedEventType.Animation */) {\n      syntheticListenerParams.push(params);\n    } else {\n      listenerParams.push(params);\n    }\n  }\n  for (const params of syntheticListenerParams) {\n    instructions.push({\n      reference: Identifiers.syntheticHostListener,\n      paramsOrFn: params,\n      span: null\n    });\n  }\n  for (const params of listenerParams) {\n    instructions.push({\n      reference: Identifiers.listener,\n      paramsOrFn: params,\n      span: null\n    });\n  }\n  return instructions;\n}\nconst HOST_REG_EXP = /^(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\))$/;\nfunction parseHostBindings(host) {\n  const attributes = {};\n  const listeners = {};\n  const properties = {};\n  const specialAttributes = {};\n  for (const key of Object.keys(host)) {\n    const value = host[key];\n    const matches = key.match(HOST_REG_EXP);\n    if (matches === null) {\n      switch (key) {\n        case 'class':\n          if (typeof value !== 'string') {\n            // TODO(alxhub): make this a diagnostic.\n            throw new Error(`Class binding must be string`);\n          }\n          specialAttributes.classAttr = value;\n          break;\n        case 'style':\n          if (typeof value !== 'string') {\n            // TODO(alxhub): make this a diagnostic.\n            throw new Error(`Style binding must be string`);\n          }\n          specialAttributes.styleAttr = value;\n          break;\n        default:\n          if (typeof value === 'string') {\n            attributes[key] = literal(value);\n          } else {\n            attributes[key] = value;\n          }\n      }\n    } else if (matches[1 /* HostBindingGroup.Binding */] != null) {\n      if (typeof value !== 'string') {\n        // TODO(alxhub): make this a diagnostic.\n        throw new Error(`Property binding must be string`);\n      }\n      // synthetic properties (the ones that have a `@` as a prefix)\n      // are still treated the same as regular properties. Therefore\n      // there is no point in storing them in a separate map.\n      properties[matches[1 /* HostBindingGroup.Binding */]] = value;\n    } else if (matches[2 /* HostBindingGroup.Event */] != null) {\n      if (typeof value !== 'string') {\n        // TODO(alxhub): make this a diagnostic.\n        throw new Error(`Event binding must be string`);\n      }\n      listeners[matches[2 /* HostBindingGroup.Event */]] = value;\n    }\n  }\n  return {\n    attributes,\n    listeners,\n    properties,\n    specialAttributes\n  };\n}\n/**\n * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a\n * given set of host bindings has no errors.\n *\n * @param bindings set of host bindings to verify.\n * @param sourceSpan source span where host bindings were defined.\n * @returns array of errors associated with a given set of host bindings.\n */\nfunction verifyHostBindings(bindings, sourceSpan) {\n  // TODO: abstract out host bindings verification logic and use it instead of\n  // creating events and properties ASTs to detect errors (FW-996)\n  const bindingParser = makeBindingParser();\n  bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);\n  bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);\n  return bindingParser.errors;\n}\nfunction compileStyles(styles, selector, hostSelector) {\n  const shadowCss = new ShadowCss();\n  return styles.map(style => {\n    return shadowCss.shimCssText(style, selector, hostSelector);\n  });\n}\n/**\n * Encapsulates a CSS stylesheet with emulated view encapsulation.\n * This allows a stylesheet to be used with an Angular component that\n * is using the `ViewEncapsulation.Emulated` mode.\n *\n * @param style The content of a CSS stylesheet.\n * @returns The encapsulated content for the style.\n */\nfunction encapsulateStyle(style) {\n  const shadowCss = new ShadowCss();\n  return shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR);\n}\nfunction createHostDirectivesType(meta) {\n  if (!meta.hostDirectives?.length) {\n    return NONE_TYPE;\n  }\n  return expressionType(literalArr(meta.hostDirectives.map(hostMeta => literalMap([{\n    key: 'directive',\n    value: typeofExpr(hostMeta.directive.type),\n    quoted: false\n  }, {\n    key: 'inputs',\n    value: stringMapAsLiteralExpression(hostMeta.inputs || {}),\n    quoted: false\n  }, {\n    key: 'outputs',\n    value: stringMapAsLiteralExpression(hostMeta.outputs || {}),\n    quoted: false\n  }]))));\n}\nfunction createHostDirectivesFeatureArg(hostDirectives) {\n  const expressions = [];\n  let hasForwardRef = false;\n  for (const current of hostDirectives) {\n    // Use a shorthand if there are no inputs or outputs.\n    if (!current.inputs && !current.outputs) {\n      expressions.push(current.directive.type);\n    } else {\n      const keys = [{\n        key: 'directive',\n        value: current.directive.type,\n        quoted: false\n      }];\n      if (current.inputs) {\n        const inputsLiteral = createHostDirectivesMappingArray(current.inputs);\n        if (inputsLiteral) {\n          keys.push({\n            key: 'inputs',\n            value: inputsLiteral,\n            quoted: false\n          });\n        }\n      }\n      if (current.outputs) {\n        const outputsLiteral = createHostDirectivesMappingArray(current.outputs);\n        if (outputsLiteral) {\n          keys.push({\n            key: 'outputs',\n            value: outputsLiteral,\n            quoted: false\n          });\n        }\n      }\n      expressions.push(literalMap(keys));\n    }\n    if (current.isForwardReference) {\n      hasForwardRef = true;\n    }\n  }\n  // If there's a forward reference, we generate a `function() { return [HostDir] }`,\n  // otherwise we can save some bytes by using a plain array, e.g. `[HostDir]`.\n  return hasForwardRef ? new FunctionExpr([], [new ReturnStatement(literalArr(expressions))]) : literalArr(expressions);\n}\n/**\n * Converts an input/output mapping object literal into an array where the even keys are the\n * public name of the binding and the odd ones are the name it was aliased to. E.g.\n * `{inputOne: 'aliasOne', inputTwo: 'aliasTwo'}` will become\n * `['inputOne', 'aliasOne', 'inputTwo', 'aliasTwo']`.\n *\n * This conversion is necessary, because hosts bind to the public name of the host directive and\n * keeping the mapping in an object literal will break for apps using property renaming.\n */\nfunction createHostDirectivesMappingArray(mapping) {\n  const elements = [];\n  for (const publicName in mapping) {\n    if (mapping.hasOwnProperty(publicName)) {\n      elements.push(literal(publicName), literal(mapping[publicName]));\n    }\n  }\n  return elements.length > 0 ? literalArr(elements) : null;\n}\n\n/**\n * Processes `Target`s with a given set of directives and performs a binding operation, which\n * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the\n * target.\n */\nclass R3TargetBinder {\n  constructor(directiveMatcher) {\n    this.directiveMatcher = directiveMatcher;\n  }\n  /**\n   * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains\n   * metadata about the types referenced in the template.\n   */\n  bind(target) {\n    if (!target.template) {\n      // TODO(alxhub): handle targets which contain things like HostBindings, etc.\n      throw new Error('Binding without a template not yet supported');\n    }\n    // First, parse the template into a `Scope` structure. This operation captures the syntactic\n    // scopes in the template and makes them available for later use.\n    const scope = Scope.apply(target.template);\n    // Use the `Scope` to extract the entities present at every level of the template.\n    const scopedNodeEntities = extractScopedNodeEntities(scope);\n    // Next, perform directive matching on the template using the `DirectiveBinder`. This returns:\n    //   - directives: Map of nodes (elements & ng-templates) to the directives on them.\n    //   - bindings: Map of inputs, outputs, and attributes to the directive/element that claims\n    //     them. TODO(alxhub): handle multiple directives claiming an input/output/etc.\n    //   - references: Map of #references to their targets.\n    const {\n      directives,\n      eagerDirectives,\n      bindings,\n      references\n    } = DirectiveBinder.apply(target.template, this.directiveMatcher);\n    // Finally, run the TemplateBinder to bind references, variables, and other entities within the\n    // template. This extracts all the metadata that doesn't depend on directive matching.\n    const {\n      expressions,\n      symbols,\n      nestingLevel,\n      usedPipes,\n      eagerPipes,\n      deferBlocks\n    } = TemplateBinder.applyWithScope(target.template, scope);\n    return new R3BoundTarget(target, directives, eagerDirectives, bindings, references, expressions, symbols, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, deferBlocks, scope);\n  }\n}\n/**\n * Represents a binding scope within a template.\n *\n * Any variables, references, or other named entities declared within the template will\n * be captured and available by name in `namedEntities`. Additionally, child templates will\n * be analyzed and have their child `Scope`s available in `childScopes`.\n */\nclass Scope {\n  constructor(parentScope, rootNode) {\n    this.parentScope = parentScope;\n    this.rootNode = rootNode;\n    /**\n     * Named members of the `Scope`, such as `Reference`s or `Variable`s.\n     */\n    this.namedEntities = new Map();\n    /**\n     * Set of elements that belong to this scope.\n     */\n    this.elementsInScope = new Set();\n    /**\n     * Child `Scope`s for immediately nested `ScopedNode`s.\n     */\n    this.childScopes = new Map();\n    this.isDeferred = parentScope !== null && parentScope.isDeferred ? true : rootNode instanceof DeferredBlock;\n  }\n  static newRootScope() {\n    return new Scope(null, null);\n  }\n  /**\n   * Process a template (either as a `Template` sub-template with variables, or a plain array of\n   * template `Node`s) and construct its `Scope`.\n   */\n  static apply(template) {\n    const scope = Scope.newRootScope();\n    scope.ingest(template);\n    return scope;\n  }\n  /**\n   * Internal method to process the scoped node and populate the `Scope`.\n   */\n  ingest(nodeOrNodes) {\n    if (nodeOrNodes instanceof Template) {\n      // Variables on an <ng-template> are defined in the inner scope.\n      nodeOrNodes.variables.forEach(node => this.visitVariable(node));\n      // Process the nodes of the template.\n      nodeOrNodes.children.forEach(node => node.visit(this));\n    } else if (nodeOrNodes instanceof IfBlockBranch) {\n      if (nodeOrNodes.expressionAlias !== null) {\n        this.visitVariable(nodeOrNodes.expressionAlias);\n      }\n      nodeOrNodes.children.forEach(node => node.visit(this));\n    } else if (nodeOrNodes instanceof ForLoopBlock) {\n      this.visitVariable(nodeOrNodes.item);\n      Object.values(nodeOrNodes.contextVariables).forEach(v => this.visitVariable(v));\n      nodeOrNodes.children.forEach(node => node.visit(this));\n    } else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty || nodeOrNodes instanceof DeferredBlock || nodeOrNodes instanceof DeferredBlockError || nodeOrNodes instanceof DeferredBlockPlaceholder || nodeOrNodes instanceof DeferredBlockLoading) {\n      nodeOrNodes.children.forEach(node => node.visit(this));\n    } else {\n      // No overarching `Template` instance, so process the nodes directly.\n      nodeOrNodes.forEach(node => node.visit(this));\n    }\n  }\n  visitElement(element) {\n    // `Element`s in the template may have `Reference`s which are captured in the scope.\n    element.references.forEach(node => this.visitReference(node));\n    // Recurse into the `Element`'s children.\n    element.children.forEach(node => node.visit(this));\n    this.elementsInScope.add(element);\n  }\n  visitTemplate(template) {\n    // References on a <ng-template> are defined in the outer scope, so capture them before\n    // processing the template's child scope.\n    template.references.forEach(node => this.visitReference(node));\n    // Next, create an inner scope and process the template within it.\n    this.ingestScopedNode(template);\n  }\n  visitVariable(variable) {\n    // Declare the variable if it's not already.\n    this.maybeDeclare(variable);\n  }\n  visitReference(reference) {\n    // Declare the variable if it's not already.\n    this.maybeDeclare(reference);\n  }\n  visitDeferredBlock(deferred) {\n    this.ingestScopedNode(deferred);\n    deferred.placeholder?.visit(this);\n    deferred.loading?.visit(this);\n    deferred.error?.visit(this);\n  }\n  visitDeferredBlockPlaceholder(block) {\n    this.ingestScopedNode(block);\n  }\n  visitDeferredBlockError(block) {\n    this.ingestScopedNode(block);\n  }\n  visitDeferredBlockLoading(block) {\n    this.ingestScopedNode(block);\n  }\n  visitSwitchBlock(block) {\n    block.cases.forEach(node => node.visit(this));\n  }\n  visitSwitchBlockCase(block) {\n    this.ingestScopedNode(block);\n  }\n  visitForLoopBlock(block) {\n    this.ingestScopedNode(block);\n    block.empty?.visit(this);\n  }\n  visitForLoopBlockEmpty(block) {\n    this.ingestScopedNode(block);\n  }\n  visitIfBlock(block) {\n    block.branches.forEach(node => node.visit(this));\n  }\n  visitIfBlockBranch(block) {\n    this.ingestScopedNode(block);\n  }\n  // Unused visitors.\n  visitContent(content) {}\n  visitBoundAttribute(attr) {}\n  visitBoundEvent(event) {}\n  visitBoundText(text) {}\n  visitText(text) {}\n  visitTextAttribute(attr) {}\n  visitIcu(icu) {}\n  visitDeferredTrigger(trigger) {}\n  visitUnknownBlock(block) {}\n  maybeDeclare(thing) {\n    // Declare something with a name, as long as that name isn't taken.\n    if (!this.namedEntities.has(thing.name)) {\n      this.namedEntities.set(thing.name, thing);\n    }\n  }\n  /**\n   * Look up a variable within this `Scope`.\n   *\n   * This can recurse into a parent `Scope` if it's available.\n   */\n  lookup(name) {\n    if (this.namedEntities.has(name)) {\n      // Found in the local scope.\n      return this.namedEntities.get(name);\n    } else if (this.parentScope !== null) {\n      // Not in the local scope, but there's a parent scope so check there.\n      return this.parentScope.lookup(name);\n    } else {\n      // At the top level and it wasn't found.\n      return null;\n    }\n  }\n  /**\n   * Get the child scope for a `ScopedNode`.\n   *\n   * This should always be defined.\n   */\n  getChildScope(node) {\n    const res = this.childScopes.get(node);\n    if (res === undefined) {\n      throw new Error(`Assertion error: child scope for ${node} not found`);\n    }\n    return res;\n  }\n  ingestScopedNode(node) {\n    const scope = new Scope(this, node);\n    scope.ingest(node);\n    this.childScopes.set(node, scope);\n  }\n}\n/**\n * Processes a template and matches directives on nodes (elements and templates).\n *\n * Usually used via the static `apply()` method.\n */\nclass DirectiveBinder {\n  constructor(matcher, directives, eagerDirectives, bindings, references) {\n    this.matcher = matcher;\n    this.directives = directives;\n    this.eagerDirectives = eagerDirectives;\n    this.bindings = bindings;\n    this.references = references;\n    // Indicates whether we are visiting elements within a `defer` block\n    this.isInDeferBlock = false;\n  }\n  /**\n   * Process a template (list of `Node`s) and perform directive matching against each node.\n   *\n   * @param template the list of template `Node`s to match (recursively).\n   * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for\n   * this template.\n   * @returns three maps which contain information about directives in the template: the\n   * `directives` map which lists directives matched on each node, the `bindings` map which\n   * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`\n   * map which resolves #references (`Reference`s) within the template to the named directive or\n   * template node.\n   */\n  static apply(template, selectorMatcher) {\n    const directives = new Map();\n    const bindings = new Map();\n    const references = new Map();\n    const eagerDirectives = [];\n    const matcher = new DirectiveBinder(selectorMatcher, directives, eagerDirectives, bindings, references);\n    matcher.ingest(template);\n    return {\n      directives,\n      eagerDirectives,\n      bindings,\n      references\n    };\n  }\n  ingest(template) {\n    template.forEach(node => node.visit(this));\n  }\n  visitElement(element) {\n    this.visitElementOrTemplate(element);\n  }\n  visitTemplate(template) {\n    this.visitElementOrTemplate(template);\n  }\n  visitElementOrTemplate(node) {\n    // First, determine the HTML shape of the node for the purpose of directive matching.\n    // Do this by building up a `CssSelector` for the node.\n    const cssSelector = createCssSelectorFromNode(node);\n    // Next, use the `SelectorMatcher` to get the list of directives on the node.\n    const directives = [];\n    this.matcher.match(cssSelector, (_selector, results) => directives.push(...results));\n    if (directives.length > 0) {\n      this.directives.set(node, directives);\n      if (!this.isInDeferBlock) {\n        this.eagerDirectives.push(...directives);\n      }\n    }\n    // Resolve any references that are created on this node.\n    node.references.forEach(ref => {\n      let dirTarget = null;\n      // If the reference expression is empty, then it matches the \"primary\" directive on the node\n      // (if there is one). Otherwise it matches the host node itself (either an element or\n      // <ng-template> node).\n      if (ref.value.trim() === '') {\n        // This could be a reference to a component if there is one.\n        dirTarget = directives.find(dir => dir.isComponent) || null;\n      } else {\n        // This should be a reference to a directive exported via exportAs.\n        dirTarget = directives.find(dir => dir.exportAs !== null && dir.exportAs.some(value => value === ref.value)) || null;\n        // Check if a matching directive was found.\n        if (dirTarget === null) {\n          // No matching directive was found - this reference points to an unknown target. Leave it\n          // unmapped.\n          return;\n        }\n      }\n      if (dirTarget !== null) {\n        // This reference points to a directive.\n        this.references.set(ref, {\n          directive: dirTarget,\n          node\n        });\n      } else {\n        // This reference points to the node itself.\n        this.references.set(ref, node);\n      }\n    });\n    const setAttributeBinding = (attribute, ioType) => {\n      const dir = directives.find(dir => dir[ioType].hasBindingPropertyName(attribute.name));\n      const binding = dir !== undefined ? dir : node;\n      this.bindings.set(attribute, binding);\n    };\n    // Node inputs (bound attributes) and text attributes can be bound to an\n    // input on a directive.\n    node.inputs.forEach(input => setAttributeBinding(input, 'inputs'));\n    node.attributes.forEach(attr => setAttributeBinding(attr, 'inputs'));\n    if (node instanceof Template) {\n      node.templateAttrs.forEach(attr => setAttributeBinding(attr, 'inputs'));\n    }\n    // Node outputs (bound events) can be bound to an output on a directive.\n    node.outputs.forEach(output => setAttributeBinding(output, 'outputs'));\n    // Recurse into the node's children.\n    node.children.forEach(child => child.visit(this));\n  }\n  visitDeferredBlock(deferred) {\n    const wasInDeferBlock = this.isInDeferBlock;\n    this.isInDeferBlock = true;\n    deferred.children.forEach(child => child.visit(this));\n    this.isInDeferBlock = wasInDeferBlock;\n    deferred.placeholder?.visit(this);\n    deferred.loading?.visit(this);\n    deferred.error?.visit(this);\n  }\n  visitDeferredBlockPlaceholder(block) {\n    block.children.forEach(child => child.visit(this));\n  }\n  visitDeferredBlockError(block) {\n    block.children.forEach(child => child.visit(this));\n  }\n  visitDeferredBlockLoading(block) {\n    block.children.forEach(child => child.visit(this));\n  }\n  visitSwitchBlock(block) {\n    block.cases.forEach(node => node.visit(this));\n  }\n  visitSwitchBlockCase(block) {\n    block.children.forEach(node => node.visit(this));\n  }\n  visitForLoopBlock(block) {\n    block.item.visit(this);\n    Object.values(block.contextVariables).forEach(v => v.visit(this));\n    block.children.forEach(node => node.visit(this));\n    block.empty?.visit(this);\n  }\n  visitForLoopBlockEmpty(block) {\n    block.children.forEach(node => node.visit(this));\n  }\n  visitIfBlock(block) {\n    block.branches.forEach(node => node.visit(this));\n  }\n  visitIfBlockBranch(block) {\n    block.expressionAlias?.visit(this);\n    block.children.forEach(node => node.visit(this));\n  }\n  // Unused visitors.\n  visitContent(content) {}\n  visitVariable(variable) {}\n  visitReference(reference) {}\n  visitTextAttribute(attribute) {}\n  visitBoundAttribute(attribute) {}\n  visitBoundEvent(attribute) {}\n  visitBoundAttributeOrEvent(node) {}\n  visitText(text) {}\n  visitBoundText(text) {}\n  visitIcu(icu) {}\n  visitDeferredTrigger(trigger) {}\n  visitUnknownBlock(block) {}\n}\n/**\n * Processes a template and extract metadata about expressions and symbols within.\n *\n * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched\n * within the template in order to operate.\n *\n * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided\n * by overridden methods from that visitor.\n */\nclass TemplateBinder extends RecursiveAstVisitor {\n  constructor(bindings, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, rootNode, level) {\n    super();\n    this.bindings = bindings;\n    this.symbols = symbols;\n    this.usedPipes = usedPipes;\n    this.eagerPipes = eagerPipes;\n    this.deferBlocks = deferBlocks;\n    this.nestingLevel = nestingLevel;\n    this.scope = scope;\n    this.rootNode = rootNode;\n    this.level = level;\n    // Save a bit of processing time by constructing this closure in advance.\n    this.visitNode = node => node.visit(this);\n  }\n  // This method is defined to reconcile the type of TemplateBinder since both\n  // RecursiveAstVisitor and Visitor define the visit() method in their\n  // interfaces.\n  visit(node, context) {\n    if (node instanceof AST) {\n      node.visit(this, context);\n    } else {\n      node.visit(this);\n    }\n  }\n  /**\n   * Process a template and extract metadata about expressions and symbols within.\n   *\n   * @param nodes the nodes of the template to process\n   * @param scope the `Scope` of the template being processed.\n   * @returns three maps which contain metadata about the template: `expressions` which interprets\n   * special `AST` nodes in expressions as pointing to references or variables declared within the\n   * template, `symbols` which maps those variables and references to the nested `Template` which\n   * declares them, if any, and `nestingLevel` which associates each `Template` with a integer\n   * nesting level (how many levels deep within the template structure the `Template` is), starting\n   * at 1.\n   */\n  static applyWithScope(nodes, scope) {\n    const expressions = new Map();\n    const symbols = new Map();\n    const nestingLevel = new Map();\n    const usedPipes = new Set();\n    const eagerPipes = new Set();\n    const template = nodes instanceof Template ? nodes : null;\n    const deferBlocks = new Set();\n    // The top-level template has nesting level 0.\n    const binder = new TemplateBinder(expressions, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, template, 0);\n    binder.ingest(nodes);\n    return {\n      expressions,\n      symbols,\n      nestingLevel,\n      usedPipes,\n      eagerPipes,\n      deferBlocks\n    };\n  }\n  ingest(nodeOrNodes) {\n    if (nodeOrNodes instanceof Template) {\n      // For <ng-template>s, process only variables and child nodes. Inputs, outputs, templateAttrs,\n      // and references were all processed in the scope of the containing template.\n      nodeOrNodes.variables.forEach(this.visitNode);\n      nodeOrNodes.children.forEach(this.visitNode);\n      // Set the nesting level.\n      this.nestingLevel.set(nodeOrNodes, this.level);\n    } else if (nodeOrNodes instanceof IfBlockBranch) {\n      if (nodeOrNodes.expressionAlias !== null) {\n        this.visitNode(nodeOrNodes.expressionAlias);\n      }\n      nodeOrNodes.children.forEach(this.visitNode);\n      this.nestingLevel.set(nodeOrNodes, this.level);\n    } else if (nodeOrNodes instanceof ForLoopBlock) {\n      this.visitNode(nodeOrNodes.item);\n      Object.values(nodeOrNodes.contextVariables).forEach(v => this.visitNode(v));\n      nodeOrNodes.trackBy.visit(this);\n      nodeOrNodes.children.forEach(this.visitNode);\n      this.nestingLevel.set(nodeOrNodes, this.level);\n    } else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty || nodeOrNodes instanceof DeferredBlock || nodeOrNodes instanceof DeferredBlockError || nodeOrNodes instanceof DeferredBlockPlaceholder || nodeOrNodes instanceof DeferredBlockLoading) {\n      nodeOrNodes.children.forEach(node => node.visit(this));\n      this.nestingLevel.set(nodeOrNodes, this.level);\n    } else {\n      // Visit each node from the top-level template.\n      nodeOrNodes.forEach(this.visitNode);\n    }\n  }\n  visitElement(element) {\n    // Visit the inputs, outputs, and children of the element.\n    element.inputs.forEach(this.visitNode);\n    element.outputs.forEach(this.visitNode);\n    element.children.forEach(this.visitNode);\n    element.references.forEach(this.visitNode);\n  }\n  visitTemplate(template) {\n    // First, visit inputs, outputs and template attributes of the template node.\n    template.inputs.forEach(this.visitNode);\n    template.outputs.forEach(this.visitNode);\n    template.templateAttrs.forEach(this.visitNode);\n    template.references.forEach(this.visitNode);\n    // Next, recurse into the template.\n    this.ingestScopedNode(template);\n  }\n  visitVariable(variable) {\n    // Register the `Variable` as a symbol in the current `Template`.\n    if (this.rootNode !== null) {\n      this.symbols.set(variable, this.rootNode);\n    }\n  }\n  visitReference(reference) {\n    // Register the `Reference` as a symbol in the current `Template`.\n    if (this.rootNode !== null) {\n      this.symbols.set(reference, this.rootNode);\n    }\n  }\n  // Unused template visitors\n  visitText(text) {}\n  visitContent(content) {}\n  visitTextAttribute(attribute) {}\n  visitUnknownBlock(block) {}\n  visitDeferredTrigger() {}\n  visitIcu(icu) {\n    Object.keys(icu.vars).forEach(key => icu.vars[key].visit(this));\n    Object.keys(icu.placeholders).forEach(key => icu.placeholders[key].visit(this));\n  }\n  // The remaining visitors are concerned with processing AST expressions within template bindings\n  visitBoundAttribute(attribute) {\n    attribute.value.visit(this);\n  }\n  visitBoundEvent(event) {\n    event.handler.visit(this);\n  }\n  visitDeferredBlock(deferred) {\n    this.deferBlocks.add(deferred);\n    this.ingestScopedNode(deferred);\n    deferred.triggers.when?.value.visit(this);\n    deferred.prefetchTriggers.when?.value.visit(this);\n    deferred.placeholder && this.visitNode(deferred.placeholder);\n    deferred.loading && this.visitNode(deferred.loading);\n    deferred.error && this.visitNode(deferred.error);\n  }\n  visitDeferredBlockPlaceholder(block) {\n    this.ingestScopedNode(block);\n  }\n  visitDeferredBlockError(block) {\n    this.ingestScopedNode(block);\n  }\n  visitDeferredBlockLoading(block) {\n    this.ingestScopedNode(block);\n  }\n  visitSwitchBlock(block) {\n    block.expression.visit(this);\n    block.cases.forEach(this.visitNode);\n  }\n  visitSwitchBlockCase(block) {\n    block.expression?.visit(this);\n    this.ingestScopedNode(block);\n  }\n  visitForLoopBlock(block) {\n    block.expression.visit(this);\n    this.ingestScopedNode(block);\n    block.empty?.visit(this);\n  }\n  visitForLoopBlockEmpty(block) {\n    this.ingestScopedNode(block);\n  }\n  visitIfBlock(block) {\n    block.branches.forEach(node => node.visit(this));\n  }\n  visitIfBlockBranch(block) {\n    block.expression?.visit(this);\n    this.ingestScopedNode(block);\n  }\n  visitBoundText(text) {\n    text.value.visit(this);\n  }\n  visitPipe(ast, context) {\n    this.usedPipes.add(ast.name);\n    if (!this.scope.isDeferred) {\n      this.eagerPipes.add(ast.name);\n    }\n    return super.visitPipe(ast, context);\n  }\n  // These five types of AST expressions can refer to expression roots, which could be variables\n  // or references in the current scope.\n  visitPropertyRead(ast, context) {\n    this.maybeMap(ast, ast.name);\n    return super.visitPropertyRead(ast, context);\n  }\n  visitSafePropertyRead(ast, context) {\n    this.maybeMap(ast, ast.name);\n    return super.visitSafePropertyRead(ast, context);\n  }\n  visitPropertyWrite(ast, context) {\n    this.maybeMap(ast, ast.name);\n    return super.visitPropertyWrite(ast, context);\n  }\n  ingestScopedNode(node) {\n    const childScope = this.scope.getChildScope(node);\n    const binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.eagerPipes, this.deferBlocks, this.nestingLevel, childScope, node, this.level + 1);\n    binder.ingest(node);\n  }\n  maybeMap(ast, name) {\n    // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an\n    // `AST` expression that maps to a `Variable` or `Reference`.\n    if (!(ast.receiver instanceof ImplicitReceiver)) {\n      return;\n    }\n    // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is\n    // probably a property on the top-level component context.\n    let target = this.scope.lookup(name);\n    if (target !== null) {\n      this.bindings.set(ast, target);\n    }\n  }\n}\n/**\n * Metadata container for a `Target` that allows queries for specific bits of metadata.\n *\n * See `BoundTarget` for documentation on the individual methods.\n */\nclass R3BoundTarget {\n  constructor(target, directives, eagerDirectives, bindings, references, exprTargets, symbols, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, deferredBlocks, rootScope) {\n    this.target = target;\n    this.directives = directives;\n    this.eagerDirectives = eagerDirectives;\n    this.bindings = bindings;\n    this.references = references;\n    this.exprTargets = exprTargets;\n    this.symbols = symbols;\n    this.nestingLevel = nestingLevel;\n    this.scopedNodeEntities = scopedNodeEntities;\n    this.usedPipes = usedPipes;\n    this.eagerPipes = eagerPipes;\n    this.deferredBlocks = deferredBlocks;\n    this.rootScope = rootScope;\n  }\n  getEntitiesInScope(node) {\n    return this.scopedNodeEntities.get(node) ?? new Set();\n  }\n  getDirectivesOfNode(node) {\n    return this.directives.get(node) || null;\n  }\n  getReferenceTarget(ref) {\n    return this.references.get(ref) || null;\n  }\n  getConsumerOfBinding(binding) {\n    return this.bindings.get(binding) || null;\n  }\n  getExpressionTarget(expr) {\n    return this.exprTargets.get(expr) || null;\n  }\n  getDefinitionNodeOfSymbol(symbol) {\n    return this.symbols.get(symbol) || null;\n  }\n  getNestingLevel(node) {\n    return this.nestingLevel.get(node) || 0;\n  }\n  getUsedDirectives() {\n    const set = new Set();\n    this.directives.forEach(dirs => dirs.forEach(dir => set.add(dir)));\n    return Array.from(set.values());\n  }\n  getEagerlyUsedDirectives() {\n    const set = new Set(this.eagerDirectives);\n    return Array.from(set.values());\n  }\n  getUsedPipes() {\n    return Array.from(this.usedPipes);\n  }\n  getEagerlyUsedPipes() {\n    return Array.from(this.eagerPipes);\n  }\n  getDeferBlocks() {\n    return Array.from(this.deferredBlocks);\n  }\n  getDeferredTriggerTarget(block, trigger) {\n    // Only triggers that refer to DOM nodes can be resolved.\n    if (!(trigger instanceof InteractionDeferredTrigger) && !(trigger instanceof ViewportDeferredTrigger) && !(trigger instanceof HoverDeferredTrigger)) {\n      return null;\n    }\n    const name = trigger.reference;\n    if (name === null) {\n      let trigger = null;\n      if (block.placeholder !== null) {\n        for (const child of block.placeholder.children) {\n          // Skip over comment nodes. Currently by default the template parser doesn't capture\n          // comments, but we have a safeguard here just in case since it can be enabled.\n          if (child instanceof Comment$1) {\n            continue;\n          }\n          // We can only infer the trigger if there's one root element node. Any other\n          // nodes at the root make it so that we can't infer the trigger anymore.\n          if (trigger !== null) {\n            return null;\n          }\n          if (child instanceof Element$1) {\n            trigger = child;\n          }\n        }\n      }\n      return trigger;\n    }\n    const outsideRef = this.findEntityInScope(block, name);\n    // First try to resolve the target in the scope of the main deferred block. Note that we\n    // skip triggers defined inside the main block itself, because they might not exist yet.\n    if (outsideRef instanceof Reference && this.getDefinitionNodeOfSymbol(outsideRef) !== block) {\n      const target = this.getReferenceTarget(outsideRef);\n      if (target !== null) {\n        return this.referenceTargetToElement(target);\n      }\n    }\n    // If the trigger couldn't be found in the main block, check the\n    // placeholder block which is shown before the main block has loaded.\n    if (block.placeholder !== null) {\n      const refInPlaceholder = this.findEntityInScope(block.placeholder, name);\n      const targetInPlaceholder = refInPlaceholder instanceof Reference ? this.getReferenceTarget(refInPlaceholder) : null;\n      if (targetInPlaceholder !== null) {\n        return this.referenceTargetToElement(targetInPlaceholder);\n      }\n    }\n    return null;\n  }\n  isDeferred(element) {\n    for (const deferBlock of this.deferredBlocks) {\n      const scope = this.rootScope.childScopes.get(deferBlock);\n      if (scope && scope.elementsInScope.has(element)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Finds an entity with a specific name in a scope.\n   * @param rootNode Root node of the scope.\n   * @param name Name of the entity.\n   */\n  findEntityInScope(rootNode, name) {\n    const entities = this.getEntitiesInScope(rootNode);\n    for (const entitity of entities) {\n      if (entitity.name === name) {\n        return entitity;\n      }\n    }\n    return null;\n  }\n  /** Coerces a `ReferenceTarget` to an `Element`, if possible. */\n  referenceTargetToElement(target) {\n    if (target instanceof Element$1) {\n      return target;\n    }\n    if (target instanceof Template) {\n      return null;\n    }\n    return this.referenceTargetToElement(target.node);\n  }\n}\nfunction extractScopedNodeEntities(rootScope) {\n  const entityMap = new Map();\n  function extractScopeEntities(scope) {\n    if (entityMap.has(scope.rootNode)) {\n      return entityMap.get(scope.rootNode);\n    }\n    const currentEntities = scope.namedEntities;\n    let entities;\n    if (scope.parentScope !== null) {\n      entities = new Map([...extractScopeEntities(scope.parentScope), ...currentEntities]);\n    } else {\n      entities = new Map(currentEntities);\n    }\n    entityMap.set(scope.rootNode, entities);\n    return entities;\n  }\n  const scopesToProcess = [rootScope];\n  while (scopesToProcess.length > 0) {\n    const scope = scopesToProcess.pop();\n    for (const childScope of scope.childScopes.values()) {\n      scopesToProcess.push(childScope);\n    }\n    extractScopeEntities(scope);\n  }\n  const templateEntities = new Map();\n  for (const [template, entities] of entityMap) {\n    templateEntities.set(template, new Set(entities.values()));\n  }\n  return templateEntities;\n}\n\n/**\n * An interface for retrieving documents by URL that the compiler uses to\n * load templates.\n *\n * This is an abstract class, rather than an interface, so that it can be used\n * as injection token.\n */\nclass ResourceLoader {}\nclass CompilerFacadeImpl {\n  constructor(jitEvaluator = new JitEvaluator()) {\n    this.jitEvaluator = jitEvaluator;\n    this.FactoryTarget = FactoryTarget$1;\n    this.ResourceLoader = ResourceLoader;\n    this.elementSchemaRegistry = new DomElementSchemaRegistry();\n  }\n  compilePipe(angularCoreEnv, sourceMapUrl, facade) {\n    const metadata = {\n      name: facade.name,\n      type: wrapReference(facade.type),\n      typeArgumentCount: 0,\n      deps: null,\n      pipeName: facade.pipeName,\n      pure: facade.pure,\n      isStandalone: facade.isStandalone\n    };\n    const res = compilePipeFromMetadata(metadata);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n  compilePipeDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const meta = convertDeclarePipeFacadeToMetadata(declaration);\n    const res = compilePipeFromMetadata(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n  compileInjectable(angularCoreEnv, sourceMapUrl, facade) {\n    const {\n      expression,\n      statements\n    } = compileInjectable({\n      name: facade.name,\n      type: wrapReference(facade.type),\n      typeArgumentCount: facade.typeArgumentCount,\n      providedIn: computeProvidedIn(facade.providedIn),\n      useClass: convertToProviderExpression(facade, 'useClass'),\n      useFactory: wrapExpression(facade, 'useFactory'),\n      useValue: convertToProviderExpression(facade, 'useValue'),\n      useExisting: convertToProviderExpression(facade, 'useExisting'),\n      deps: facade.deps?.map(convertR3DependencyMetadata)\n    }, /* resolveForwardRefs */true);\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n  }\n  compileInjectableDeclaration(angularCoreEnv, sourceMapUrl, facade) {\n    const {\n      expression,\n      statements\n    } = compileInjectable({\n      name: facade.type.name,\n      type: wrapReference(facade.type),\n      typeArgumentCount: 0,\n      providedIn: computeProvidedIn(facade.providedIn),\n      useClass: convertToProviderExpression(facade, 'useClass'),\n      useFactory: wrapExpression(facade, 'useFactory'),\n      useValue: convertToProviderExpression(facade, 'useValue'),\n      useExisting: convertToProviderExpression(facade, 'useExisting'),\n      deps: facade.deps?.map(convertR3DeclareDependencyMetadata)\n    }, /* resolveForwardRefs */true);\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n  }\n  compileInjector(angularCoreEnv, sourceMapUrl, facade) {\n    const meta = {\n      name: facade.name,\n      type: wrapReference(facade.type),\n      providers: facade.providers && facade.providers.length > 0 ? new WrappedNodeExpr(facade.providers) : null,\n      imports: facade.imports.map(i => new WrappedNodeExpr(i))\n    };\n    const res = compileInjector(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n  compileInjectorDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const meta = convertDeclareInjectorFacadeToMetadata(declaration);\n    const res = compileInjector(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n  compileNgModule(angularCoreEnv, sourceMapUrl, facade) {\n    const meta = {\n      kind: R3NgModuleMetadataKind.Global,\n      type: wrapReference(facade.type),\n      bootstrap: facade.bootstrap.map(wrapReference),\n      declarations: facade.declarations.map(wrapReference),\n      publicDeclarationTypes: null,\n      // only needed for types in AOT\n      imports: facade.imports.map(wrapReference),\n      includeImportTypes: true,\n      exports: facade.exports.map(wrapReference),\n      selectorScopeMode: R3SelectorScopeMode.Inline,\n      containsForwardDecls: false,\n      schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,\n      id: facade.id ? new WrappedNodeExpr(facade.id) : null\n    };\n    const res = compileNgModule(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n  compileNgModuleDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const expression = compileNgModuleDeclarationExpression(declaration);\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, []);\n  }\n  compileDirective(angularCoreEnv, sourceMapUrl, facade) {\n    const meta = convertDirectiveFacadeToMetadata(facade);\n    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n  compileDirectiveDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const typeSourceSpan = this.createParseSourceSpan('Directive', declaration.type.name, sourceMapUrl);\n    const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);\n    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n  compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n    const constantPool = new ConstantPool();\n    const bindingParser = makeBindingParser();\n    const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n  }\n  compileComponent(angularCoreEnv, sourceMapUrl, facade) {\n    // Parse the template and check for errors.\n    const {\n      template,\n      interpolation,\n      deferBlocks\n    } = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation);\n    // Compile the component metadata, including template, into an expression.\n    const meta = {\n      ...facade,\n      ...convertDirectiveFacadeToMetadata(facade),\n      selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),\n      template,\n      declarations: facade.declarations.map(convertDeclarationFacadeToMetadata),\n      declarationListEmitMode: 0 /* DeclarationListEmitMode.Direct */,\n      deferBlocks,\n      deferrableTypes: new Map(),\n      deferrableDeclToImportDecl: new Map(),\n      deferBlockDepsEmitMode: 0 /* DeferBlockDepsEmitMode.PerBlock */,\n      styles: [...facade.styles, ...template.styles],\n      encapsulation: facade.encapsulation,\n      interpolation,\n      changeDetection: facade.changeDetection ?? null,\n      animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,\n      viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,\n      relativeContextFilePath: '',\n      i18nUseExternalIds: true\n    };\n    const jitExpressionSourceMap = `ng:///${facade.name}.js`;\n    return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);\n  }\n  compileComponentDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const typeSourceSpan = this.createParseSourceSpan('Component', declaration.type.name, sourceMapUrl);\n    const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);\n    return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n  compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n    const constantPool = new ConstantPool();\n    const bindingParser = makeBindingParser(meta.interpolation);\n    const res = compileComponentFromMetadata(meta, constantPool, bindingParser);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n  }\n  compileFactory(angularCoreEnv, sourceMapUrl, meta) {\n    const factoryRes = compileFactoryFunction({\n      name: meta.name,\n      type: wrapReference(meta.type),\n      typeArgumentCount: meta.typeArgumentCount,\n      deps: convertR3DependencyMetadataArray(meta.deps),\n      target: meta.target\n    });\n    return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n  }\n  compileFactoryDeclaration(angularCoreEnv, sourceMapUrl, meta) {\n    const factoryRes = compileFactoryFunction({\n      name: meta.type.name,\n      type: wrapReference(meta.type),\n      typeArgumentCount: 0,\n      deps: Array.isArray(meta.deps) ? meta.deps.map(convertR3DeclareDependencyMetadata) : meta.deps,\n      target: meta.target\n    });\n    return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n  }\n  createParseSourceSpan(kind, typeName, sourceUrl) {\n    return r3JitTypeSourceSpan(kind, typeName, sourceUrl);\n  }\n  /**\n   * JIT compiles an expression and returns the result of executing that expression.\n   *\n   * @param def the definition which will be compiled and executed to get the value to patch\n   * @param context an object map of @angular/core symbol names to symbols which will be available\n   * in the context of the compiled expression\n   * @param sourceUrl a URL to use for the source map of the compiled expression\n   * @param preStatements a collection of statements that should be evaluated before the expression.\n   */\n  jitExpression(def, context, sourceUrl, preStatements) {\n    // The ConstantPool may contain Statements which declare variables used in the final expression.\n    // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n    // declaration of $def which is set to the expression being compiled.\n    const statements = [...preStatements, new DeclareVarStmt('$def', def, undefined, StmtModifier.Exported)];\n    const res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context), /* enableSourceMaps */true);\n    return res['$def'];\n  }\n}\nfunction convertToR3QueryMetadata(facade) {\n  return {\n    ...facade,\n    predicate: convertQueryPredicate(facade.predicate),\n    read: facade.read ? new WrappedNodeExpr(facade.read) : null,\n    static: facade.static,\n    emitDistinctChangesOnly: facade.emitDistinctChangesOnly\n  };\n}\nfunction convertQueryDeclarationToMetadata(declaration) {\n  return {\n    propertyName: declaration.propertyName,\n    first: declaration.first ?? false,\n    predicate: convertQueryPredicate(declaration.predicate),\n    descendants: declaration.descendants ?? false,\n    read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,\n    static: declaration.static ?? false,\n    emitDistinctChangesOnly: declaration.emitDistinctChangesOnly ?? true\n  };\n}\nfunction convertQueryPredicate(predicate) {\n  return Array.isArray(predicate) ?\n  // The predicate is an array of strings so pass it through.\n  predicate :\n  // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.\n  createMayBeForwardRefExpression(new WrappedNodeExpr(predicate), 1 /* ForwardRefHandling.Wrapped */);\n}\nfunction convertDirectiveFacadeToMetadata(facade) {\n  const inputsFromMetadata = parseInputsArray(facade.inputs || []);\n  const outputsFromMetadata = parseMappingStringArray(facade.outputs || []);\n  const propMetadata = facade.propMetadata;\n  const inputsFromType = {};\n  const outputsFromType = {};\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(ann => {\n        if (isInput(ann)) {\n          inputsFromType[field] = {\n            bindingPropertyName: ann.alias || field,\n            classPropertyName: field,\n            required: ann.required || false,\n            // For JIT, decorators are used to declare signal inputs. That is because of\n            // a technical limitation where it's not possible to statically reflect class\n            // members of a directive/component at runtime before instantiating the class.\n            isSignal: !!ann.isSignal,\n            transformFunction: ann.transform != null ? new WrappedNodeExpr(ann.transform) : null\n          };\n        } else if (isOutput(ann)) {\n          outputsFromType[field] = ann.alias || field;\n        }\n      });\n    }\n  }\n  return {\n    ...facade,\n    typeArgumentCount: 0,\n    typeSourceSpan: facade.typeSourceSpan,\n    type: wrapReference(facade.type),\n    deps: null,\n    host: extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host),\n    inputs: {\n      ...inputsFromMetadata,\n      ...inputsFromType\n    },\n    outputs: {\n      ...outputsFromMetadata,\n      ...outputsFromType\n    },\n    queries: facade.queries.map(convertToR3QueryMetadata),\n    providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,\n    viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),\n    fullInheritance: false,\n    hostDirectives: convertHostDirectivesToMetadata(facade)\n  };\n}\nfunction convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    typeSourceSpan,\n    selector: declaration.selector ?? null,\n    inputs: declaration.inputs ? inputsPartialMetadataToInputMetadata(declaration.inputs) : {},\n    outputs: declaration.outputs ?? {},\n    host: convertHostDeclarationToMetadata(declaration.host),\n    queries: (declaration.queries ?? []).map(convertQueryDeclarationToMetadata),\n    viewQueries: (declaration.viewQueries ?? []).map(convertQueryDeclarationToMetadata),\n    providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) : null,\n    exportAs: declaration.exportAs ?? null,\n    usesInheritance: declaration.usesInheritance ?? false,\n    lifecycle: {\n      usesOnChanges: declaration.usesOnChanges ?? false\n    },\n    deps: null,\n    typeArgumentCount: 0,\n    fullInheritance: false,\n    isStandalone: declaration.isStandalone ?? false,\n    isSignal: declaration.isSignal ?? false,\n    hostDirectives: convertHostDirectivesToMetadata(declaration)\n  };\n}\nfunction convertHostDeclarationToMetadata(host = {}) {\n  return {\n    attributes: convertOpaqueValuesToExpressions(host.attributes ?? {}),\n    listeners: host.listeners ?? {},\n    properties: host.properties ?? {},\n    specialAttributes: {\n      classAttr: host.classAttribute,\n      styleAttr: host.styleAttribute\n    }\n  };\n}\nfunction convertHostDirectivesToMetadata(metadata) {\n  if (metadata.hostDirectives?.length) {\n    return metadata.hostDirectives.map(hostDirective => {\n      return typeof hostDirective === 'function' ? {\n        directive: wrapReference(hostDirective),\n        inputs: null,\n        outputs: null,\n        isForwardReference: false\n      } : {\n        directive: wrapReference(hostDirective.directive),\n        isForwardReference: false,\n        inputs: hostDirective.inputs ? parseMappingStringArray(hostDirective.inputs) : null,\n        outputs: hostDirective.outputs ? parseMappingStringArray(hostDirective.outputs) : null\n      };\n    });\n  }\n  return null;\n}\nfunction convertOpaqueValuesToExpressions(obj) {\n  const result = {};\n  for (const key of Object.keys(obj)) {\n    result[key] = new WrappedNodeExpr(obj[key]);\n  }\n  return result;\n}\nfunction convertDeclareComponentFacadeToMetadata(decl, typeSourceSpan, sourceMapUrl) {\n  const {\n    template,\n    interpolation,\n    deferBlocks\n  } = parseJitTemplate(decl.template, decl.type.name, sourceMapUrl, decl.preserveWhitespaces ?? false, decl.interpolation);\n  const declarations = [];\n  if (decl.dependencies) {\n    for (const innerDep of decl.dependencies) {\n      switch (innerDep.kind) {\n        case 'directive':\n        case 'component':\n          declarations.push(convertDirectiveDeclarationToMetadata(innerDep));\n          break;\n        case 'pipe':\n          declarations.push(convertPipeDeclarationToMetadata(innerDep));\n          break;\n      }\n    }\n  } else if (decl.components || decl.directives || decl.pipes) {\n    // Existing declarations on NPM may not be using the new `dependencies` merged field, and may\n    // have separate fields for dependencies instead. Unify them for JIT compilation.\n    decl.components && declarations.push(...decl.components.map(dir => convertDirectiveDeclarationToMetadata(dir, /* isComponent */true)));\n    decl.directives && declarations.push(...decl.directives.map(dir => convertDirectiveDeclarationToMetadata(dir)));\n    decl.pipes && declarations.push(...convertPipeMapToMetadata(decl.pipes));\n  }\n  return {\n    ...convertDeclareDirectiveFacadeToMetadata(decl, typeSourceSpan),\n    template,\n    styles: decl.styles ?? [],\n    declarations,\n    viewProviders: decl.viewProviders !== undefined ? new WrappedNodeExpr(decl.viewProviders) : null,\n    animations: decl.animations !== undefined ? new WrappedNodeExpr(decl.animations) : null,\n    deferBlocks,\n    deferrableTypes: new Map(),\n    deferrableDeclToImportDecl: new Map(),\n    deferBlockDepsEmitMode: 0 /* DeferBlockDepsEmitMode.PerBlock */,\n    changeDetection: decl.changeDetection ?? ChangeDetectionStrategy.Default,\n    encapsulation: decl.encapsulation ?? ViewEncapsulation.Emulated,\n    interpolation,\n    declarationListEmitMode: 2 /* DeclarationListEmitMode.ClosureResolved */,\n    relativeContextFilePath: '',\n    i18nUseExternalIds: true\n  };\n}\nfunction convertDeclarationFacadeToMetadata(declaration) {\n  return {\n    ...declaration,\n    type: new WrappedNodeExpr(declaration.type)\n  };\n}\nfunction convertDirectiveDeclarationToMetadata(declaration, isComponent = null) {\n  return {\n    kind: R3TemplateDependencyKind.Directive,\n    isComponent: isComponent || declaration.kind === 'component',\n    selector: declaration.selector,\n    type: new WrappedNodeExpr(declaration.type),\n    inputs: declaration.inputs ?? [],\n    outputs: declaration.outputs ?? [],\n    exportAs: declaration.exportAs ?? null\n  };\n}\nfunction convertPipeMapToMetadata(pipes) {\n  if (!pipes) {\n    return [];\n  }\n  return Object.keys(pipes).map(name => {\n    return {\n      kind: R3TemplateDependencyKind.Pipe,\n      name,\n      type: new WrappedNodeExpr(pipes[name])\n    };\n  });\n}\nfunction convertPipeDeclarationToMetadata(pipe) {\n  return {\n    kind: R3TemplateDependencyKind.Pipe,\n    name: pipe.name,\n    type: new WrappedNodeExpr(pipe.type)\n  };\n}\nfunction parseJitTemplate(template, typeName, sourceMapUrl, preserveWhitespaces, interpolation) {\n  const interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG;\n  // Parse the template and check for errors.\n  const parsed = parseTemplate(template, sourceMapUrl, {\n    preserveWhitespaces,\n    interpolationConfig\n  });\n  if (parsed.errors !== null) {\n    const errors = parsed.errors.map(err => err.toString()).join(', ');\n    throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);\n  }\n  const binder = new R3TargetBinder(new SelectorMatcher());\n  const boundTarget = binder.bind({\n    template: parsed.nodes\n  });\n  return {\n    template: parsed,\n    interpolation: interpolationConfig,\n    deferBlocks: createR3DeferredMetadata(boundTarget)\n  };\n}\n/**\n * Convert the expression, if present to an `R3ProviderExpression`.\n *\n * In JIT mode we do not want the compiler to wrap the expression in a `forwardRef()` call because,\n * if it is referencing a type that has not yet been defined, it will have already been wrapped in\n * a `forwardRef()` - either by the application developer or during partial-compilation. Thus we can\n * use `ForwardRefHandling.None`.\n */\nfunction convertToProviderExpression(obj, property) {\n  if (obj.hasOwnProperty(property)) {\n    return createMayBeForwardRefExpression(new WrappedNodeExpr(obj[property]), 0 /* ForwardRefHandling.None */);\n  } else {\n    return undefined;\n  }\n}\nfunction wrapExpression(obj, property) {\n  if (obj.hasOwnProperty(property)) {\n    return new WrappedNodeExpr(obj[property]);\n  } else {\n    return undefined;\n  }\n}\nfunction computeProvidedIn(providedIn) {\n  const expression = typeof providedIn === 'function' ? new WrappedNodeExpr(providedIn) : new LiteralExpr(providedIn ?? null);\n  // See `convertToProviderExpression()` for why this uses `ForwardRefHandling.None`.\n  return createMayBeForwardRefExpression(expression, 0 /* ForwardRefHandling.None */);\n}\nfunction convertR3DependencyMetadataArray(facades) {\n  return facades == null ? null : facades.map(convertR3DependencyMetadata);\n}\nfunction convertR3DependencyMetadata(facade) {\n  const isAttributeDep = facade.attribute != null; // both `null` and `undefined`\n  const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n  // In JIT mode, if the dep is an `@Attribute()` then we use the attribute name given in\n  // `attribute` rather than the `token`.\n  const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;\n  return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);\n}\nfunction convertR3DeclareDependencyMetadata(facade) {\n  const isAttributeDep = facade.attribute ?? false;\n  const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n  return createR3DependencyMetadata(token, isAttributeDep, facade.host ?? false, facade.optional ?? false, facade.self ?? false, facade.skipSelf ?? false);\n}\nfunction createR3DependencyMetadata(token, isAttributeDep, host, optional, self, skipSelf) {\n  // If the dep is an `@Attribute()` the `attributeNameType` ought to be the `unknown` type.\n  // But types are not available at runtime so we just use a literal `\"<unknown>\"` string as a dummy\n  // marker.\n  const attributeNameType = isAttributeDep ? literal('unknown') : null;\n  return {\n    token,\n    attributeNameType,\n    host,\n    optional,\n    self,\n    skipSelf\n  };\n}\nfunction createR3DeferredMetadata(boundTarget) {\n  const deferredBlocks = boundTarget.getDeferBlocks();\n  const meta = new Map();\n  for (const block of deferredBlocks) {\n    const triggerElements = new Map();\n    resolveDeferTriggers(block, block.triggers, boundTarget, triggerElements);\n    resolveDeferTriggers(block, block.prefetchTriggers, boundTarget, triggerElements);\n    // TODO: leaving `deps` empty in JIT mode for now, to be implemented as one of the next steps.\n    meta.set(block, {\n      deps: [],\n      triggerElements\n    });\n  }\n  return meta;\n}\nfunction resolveDeferTriggers(block, triggers, boundTarget, triggerElements) {\n  Object.keys(triggers).forEach(key => {\n    const trigger = triggers[key];\n    triggerElements.set(trigger, boundTarget.getDeferredTriggerTarget(block, trigger));\n  });\n}\nfunction extractHostBindings(propMetadata, sourceSpan, host) {\n  // First parse the declarations from the metadata.\n  const bindings = parseHostBindings(host || {});\n  // After that check host bindings for errors\n  const errors = verifyHostBindings(bindings, sourceSpan);\n  if (errors.length) {\n    throw new Error(errors.map(error => error.msg).join('\\n'));\n  }\n  // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(ann => {\n        if (isHostBinding(ann)) {\n          // Since this is a decorator, we know that the value is a class member. Always access it\n          // through `this` so that further down the line it can't be confused for a literal value\n          // (e.g. if there's a property called `true`).\n          bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString('this', field);\n        } else if (isHostListener(ann)) {\n          bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(',')})`;\n        }\n      });\n    }\n  }\n  return bindings;\n}\nfunction isHostBinding(value) {\n  return value.ngMetadataName === 'HostBinding';\n}\nfunction isHostListener(value) {\n  return value.ngMetadataName === 'HostListener';\n}\nfunction isInput(value) {\n  return value.ngMetadataName === 'Input';\n}\nfunction isOutput(value) {\n  return value.ngMetadataName === 'Output';\n}\nfunction inputsPartialMetadataToInputMetadata(inputs) {\n  return Object.keys(inputs).reduce((result, minifiedClassName) => {\n    const value = inputs[minifiedClassName];\n    // Handle legacy partial input output.\n    if (typeof value === 'string' || Array.isArray(value)) {\n      result[minifiedClassName] = parseLegacyInputPartialOutput(value);\n    } else {\n      result[minifiedClassName] = {\n        bindingPropertyName: value.publicName,\n        classPropertyName: minifiedClassName,\n        transformFunction: value.transformFunction !== null ? new WrappedNodeExpr(value.transformFunction) : null,\n        required: value.isRequired,\n        isSignal: value.isSignal\n      };\n    }\n    return result;\n  }, {});\n}\n/**\n * Parses the legacy input partial output. For more details see `partial/directive.ts`.\n * TODO(legacy-partial-output-inputs): Remove in v18.\n */\nfunction parseLegacyInputPartialOutput(value) {\n  if (typeof value === 'string') {\n    return {\n      bindingPropertyName: value,\n      classPropertyName: value,\n      transformFunction: null,\n      required: false,\n      // legacy partial output does not capture signal inputs.\n      isSignal: false\n    };\n  }\n  return {\n    bindingPropertyName: value[0],\n    classPropertyName: value[1],\n    transformFunction: value[2] ? new WrappedNodeExpr(value[2]) : null,\n    required: false,\n    // legacy partial output does not capture signal inputs.\n    isSignal: false\n  };\n}\nfunction parseInputsArray(values) {\n  return values.reduce((results, value) => {\n    if (typeof value === 'string') {\n      const [bindingPropertyName, classPropertyName] = parseMappingString(value);\n      results[classPropertyName] = {\n        bindingPropertyName,\n        classPropertyName,\n        required: false,\n        // Signal inputs not supported for the inputs array.\n        isSignal: false,\n        transformFunction: null\n      };\n    } else {\n      results[value.name] = {\n        bindingPropertyName: value.alias || value.name,\n        classPropertyName: value.name,\n        required: value.required || false,\n        // Signal inputs not supported for the inputs array.\n        isSignal: false,\n        transformFunction: value.transform != null ? new WrappedNodeExpr(value.transform) : null\n      };\n    }\n    return results;\n  }, {});\n}\nfunction parseMappingStringArray(values) {\n  return values.reduce((results, value) => {\n    const [alias, fieldName] = parseMappingString(value);\n    results[fieldName] = alias;\n    return results;\n  }, {});\n}\nfunction parseMappingString(value) {\n  // Either the value is 'field' or 'field: property'. In the first case, `property` will\n  // be undefined, in which case the field name should also be used as the property name.\n  const [fieldName, bindingPropertyName] = value.split(':', 2).map(str => str.trim());\n  return [bindingPropertyName ?? fieldName, fieldName];\n}\nfunction convertDeclarePipeFacadeToMetadata(declaration) {\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    typeArgumentCount: 0,\n    pipeName: declaration.name,\n    deps: null,\n    pure: declaration.pure ?? true,\n    isStandalone: declaration.isStandalone ?? false\n  };\n}\nfunction convertDeclareInjectorFacadeToMetadata(declaration) {\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    providers: declaration.providers !== undefined && declaration.providers.length > 0 ? new WrappedNodeExpr(declaration.providers) : null,\n    imports: declaration.imports !== undefined ? declaration.imports.map(i => new WrappedNodeExpr(i)) : []\n  };\n}\nfunction publishFacade(global) {\n  const ng = global.ng || (global.ng = {});\n  ng.ɵcompilerFacade = new CompilerFacadeImpl();\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the compiler package.\n */\nconst VERSION = new Version('17.1.0');\nclass CompilerConfig {\n  constructor({\n    defaultEncapsulation = ViewEncapsulation.Emulated,\n    preserveWhitespaces,\n    strictInjectionParameters\n  } = {}) {\n    this.defaultEncapsulation = defaultEncapsulation;\n    this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\n    this.strictInjectionParameters = strictInjectionParameters === true;\n  }\n}\nfunction preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting = false) {\n  return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\n}\nconst _I18N_ATTR = 'i18n';\nconst _I18N_ATTR_PREFIX = 'i18n-';\nconst _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nconst MEANING_SEPARATOR = '|';\nconst ID_SEPARATOR = '@@';\nlet i18nCommentsWarned = false;\n/**\n * Extract translatable messages from an html AST\n */\nfunction extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n  const visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.extract(nodes, interpolationConfig);\n}\nfunction mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n  const visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.merge(nodes, translations, interpolationConfig);\n}\nclass ExtractionResult {\n  constructor(messages, errors) {\n    this.messages = messages;\n    this.errors = errors;\n  }\n}\nvar _VisitorMode;\n(function (_VisitorMode) {\n  _VisitorMode[_VisitorMode[\"Extract\"] = 0] = \"Extract\";\n  _VisitorMode[_VisitorMode[\"Merge\"] = 1] = \"Merge\";\n})(_VisitorMode || (_VisitorMode = {}));\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * @internal\n */\nclass _Visitor {\n  constructor(_implicitTags, _implicitAttrs) {\n    this._implicitTags = _implicitTags;\n    this._implicitAttrs = _implicitAttrs;\n  }\n  /**\n   * Extracts the messages from the tree\n   */\n  extract(nodes, interpolationConfig) {\n    this._init(_VisitorMode.Extract, interpolationConfig);\n    nodes.forEach(node => node.visit(this, null));\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n    return new ExtractionResult(this._messages, this._errors);\n  }\n  /**\n   * Returns a tree where all translatable nodes are translated\n   */\n  merge(nodes, translations, interpolationConfig) {\n    this._init(_VisitorMode.Merge, interpolationConfig);\n    this._translations = translations;\n    // Construct a single fake root element\n    const wrapper = new Element('wrapper', [], nodes, undefined, undefined, undefined);\n    const translatedNode = wrapper.visit(this, null);\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n    return new ParseTreeResult(translatedNode.children, this._errors);\n  }\n  visitExpansionCase(icuCase, context) {\n    // Parse cases for translatable html attributes\n    const expression = visitAll(this, icuCase.expression, context);\n    if (this._mode === _VisitorMode.Merge) {\n      return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n    }\n  }\n  visitExpansion(icu, context) {\n    this._mayBeAddBlockChildren(icu);\n    const wasInIcu = this._inIcu;\n    if (!this._inIcu) {\n      // nested ICU messages should not be extracted but top-level translated as a whole\n      if (this._isInTranslatableSection) {\n        this._addMessage([icu]);\n      }\n      this._inIcu = true;\n    }\n    const cases = visitAll(this, icu.cases, context);\n    if (this._mode === _VisitorMode.Merge) {\n      icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n    }\n    this._inIcu = wasInIcu;\n    return icu;\n  }\n  visitComment(comment, context) {\n    const isOpening = _isOpeningComment(comment);\n    if (isOpening && this._isInTranslatableSection) {\n      this._reportError(comment, 'Could not start a block inside a translatable section');\n      return;\n    }\n    const isClosing = _isClosingComment(comment);\n    if (isClosing && !this._inI18nBlock) {\n      this._reportError(comment, 'Trying to close an unopened block');\n      return;\n    }\n    if (!this._inI18nNode && !this._inIcu) {\n      if (!this._inI18nBlock) {\n        if (isOpening) {\n          // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n          if (!i18nCommentsWarned && console && console.warn) {\n            i18nCommentsWarned = true;\n            const details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : '';\n            // TODO(ocombe): use a log service once there is a public one available\n            console.warn(`I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`);\n          }\n          this._inI18nBlock = true;\n          this._blockStartDepth = this._depth;\n          this._blockChildren = [];\n          this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n          this._openTranslatableSection(comment);\n        }\n      } else {\n        if (isClosing) {\n          if (this._depth == this._blockStartDepth) {\n            this._closeTranslatableSection(comment, this._blockChildren);\n            this._inI18nBlock = false;\n            const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);\n            // merge attributes in sections\n            const nodes = this._translateMessage(comment, message);\n            return visitAll(this, nodes);\n          } else {\n            this._reportError(comment, 'I18N blocks should not cross element boundaries');\n            return;\n          }\n        }\n      }\n    }\n  }\n  visitText(text, context) {\n    if (this._isInTranslatableSection) {\n      this._mayBeAddBlockChildren(text);\n    }\n    return text;\n  }\n  visitElement(el, context) {\n    this._mayBeAddBlockChildren(el);\n    this._depth++;\n    const wasInI18nNode = this._inI18nNode;\n    const wasInImplicitNode = this._inImplicitNode;\n    let childNodes = [];\n    let translatedChildNodes = undefined;\n    // Extract:\n    // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n    // - ICU messages\n    const i18nAttr = _getI18nAttr(el);\n    const i18nMeta = i18nAttr ? i18nAttr.value : '';\n    const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu && !this._isInTranslatableSection;\n    const isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n    this._inImplicitNode = wasInImplicitNode || isImplicit;\n    if (!this._isInTranslatableSection && !this._inIcu) {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._inI18nNode = true;\n        const message = this._addMessage(el.children, i18nMeta);\n        translatedChildNodes = this._translateMessage(el, message);\n      }\n      if (this._mode == _VisitorMode.Extract) {\n        const isTranslatable = i18nAttr || isTopLevelImplicit;\n        if (isTranslatable) this._openTranslatableSection(el);\n        visitAll(this, el.children);\n        if (isTranslatable) this._closeTranslatableSection(el, el.children);\n      }\n    } else {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n      }\n      if (this._mode == _VisitorMode.Extract) {\n        // Descend into child nodes for extraction\n        visitAll(this, el.children);\n      }\n    }\n    if (this._mode === _VisitorMode.Merge) {\n      const visitNodes = translatedChildNodes || el.children;\n      visitNodes.forEach(child => {\n        const visited = child.visit(this, context);\n        if (visited && !this._isInTranslatableSection) {\n          // Do not add the children from translatable sections (= i18n blocks here)\n          // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n          childNodes = childNodes.concat(visited);\n        }\n      });\n    }\n    this._visitAttributesOf(el);\n    this._depth--;\n    this._inI18nNode = wasInI18nNode;\n    this._inImplicitNode = wasInImplicitNode;\n    if (this._mode === _VisitorMode.Merge) {\n      const translatedAttrs = this._translateAttributes(el);\n      return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n    }\n    return null;\n  }\n  visitAttribute(attribute, context) {\n    throw new Error('unreachable code');\n  }\n  visitBlock(block, context) {\n    visitAll(this, block.children, context);\n  }\n  visitBlockParameter(parameter, context) {}\n  _init(mode, interpolationConfig) {\n    this._mode = mode;\n    this._inI18nBlock = false;\n    this._inI18nNode = false;\n    this._depth = 0;\n    this._inIcu = false;\n    this._msgCountAtSectionStart = undefined;\n    this._errors = [];\n    this._messages = [];\n    this._inImplicitNode = false;\n    this._createI18nMessage = createI18nMessageFactory(interpolationConfig, DEFAULT_CONTAINER_BLOCKS);\n  }\n  // looks for translatable attributes\n  _visitAttributesOf(el) {\n    const explicitAttrNameToValue = {};\n    const implicitAttrNames = this._implicitAttrs[el.name] || [];\n    el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX)).forEach(attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value);\n    el.attrs.forEach(attr => {\n      if (attr.name in explicitAttrNameToValue) {\n        this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n      } else if (implicitAttrNames.some(name => attr.name === name)) {\n        this._addMessage([attr]);\n      }\n    });\n  }\n  // add a translatable message\n  _addMessage(ast, msgMeta) {\n    if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {\n      // Do not create empty messages\n      return null;\n    }\n    const {\n      meaning,\n      description,\n      id\n    } = _parseMessageMeta(msgMeta);\n    const message = this._createI18nMessage(ast, meaning, description, id);\n    this._messages.push(message);\n    return message;\n  }\n  // Translates the given message given the `TranslationBundle`\n  // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n  // no-op when called in extraction mode (returns [])\n  _translateMessage(el, message) {\n    if (message && this._mode === _VisitorMode.Merge) {\n      const nodes = this._translations.get(message);\n      if (nodes) {\n        return nodes;\n      }\n      this._reportError(el, `Translation unavailable for message id=\"${this._translations.digest(message)}\"`);\n    }\n    return [];\n  }\n  // translate the attributes of an element and remove i18n specific attributes\n  _translateAttributes(el) {\n    const attributes = el.attrs;\n    const i18nParsedMessageMeta = {};\n    attributes.forEach(attr => {\n      if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(attr.value);\n      }\n    });\n    const translatedAttributes = [];\n    attributes.forEach(attr => {\n      if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        // strip i18n specific attributes\n        return;\n      }\n      if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n        const {\n          meaning,\n          description,\n          id\n        } = i18nParsedMessageMeta[attr.name];\n        const message = this._createI18nMessage([attr], meaning, description, id);\n        const nodes = this._translations.get(message);\n        if (nodes) {\n          if (nodes.length == 0) {\n            translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan, undefined /* keySpan */, undefined /* valueSpan */, undefined /* valueTokens */, undefined /* i18n */));\n          } else if (nodes[0] instanceof Text) {\n            const value = nodes[0].value;\n            translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan, undefined /* keySpan */, undefined /* valueSpan */, undefined /* valueTokens */, undefined /* i18n */));\n          } else {\n            this._reportError(el, `Unexpected translation for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n          }\n        } else {\n          this._reportError(el, `Translation unavailable for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n        }\n      } else {\n        translatedAttributes.push(attr);\n      }\n    });\n    return translatedAttributes;\n  }\n  /**\n   * Add the node as a child of the block when:\n   * - we are in a block,\n   * - we are not inside a ICU message (those are handled separately),\n   * - the node is a \"direct child\" of the block\n   */\n  _mayBeAddBlockChildren(node) {\n    if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n      this._blockChildren.push(node);\n    }\n  }\n  /**\n   * Marks the start of a section, see `_closeTranslatableSection`\n   */\n  _openTranslatableSection(node) {\n    if (this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section start');\n    } else {\n      this._msgCountAtSectionStart = this._messages.length;\n    }\n  }\n  /**\n   * A translatable section could be:\n   * - the content of translatable element,\n   * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n   */\n  get _isInTranslatableSection() {\n    return this._msgCountAtSectionStart !== void 0;\n  }\n  /**\n   * Terminates a section.\n   *\n   * If a section has only one significant children (comments not significant) then we should not\n   * keep the message from this children:\n   *\n   * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n   * - one for the <p> content with meaning and description,\n   * - another one for the ICU message.\n   *\n   * In this case the last message is discarded as it contains less information (the AST is\n   * otherwise identical).\n   *\n   * Note that we should still keep messages extracted from attributes inside the section (ie in the\n   * ICU message here)\n   */\n  _closeTranslatableSection(node, directChildren) {\n    if (!this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section end');\n      return;\n    }\n    const startIndex = this._msgCountAtSectionStart;\n    const significantChildren = directChildren.reduce((count, node) => count + (node instanceof Comment ? 0 : 1), 0);\n    if (significantChildren == 1) {\n      for (let i = this._messages.length - 1; i >= startIndex; i--) {\n        const ast = this._messages[i].nodes;\n        if (!(ast.length == 1 && ast[0] instanceof Text$2)) {\n          this._messages.splice(i, 1);\n          break;\n        }\n      }\n    }\n    this._msgCountAtSectionStart = undefined;\n  }\n  _reportError(node, msg) {\n    this._errors.push(new I18nError(node.sourceSpan, msg));\n  }\n}\nfunction _isOpeningComment(n) {\n  return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));\n}\nfunction _isClosingComment(n) {\n  return !!(n instanceof Comment && n.value && n.value === '/i18n');\n}\nfunction _getI18nAttr(p) {\n  return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\n}\nfunction _parseMessageMeta(i18n) {\n  if (!i18n) return {\n    meaning: '',\n    description: '',\n    id: ''\n  };\n  const idIndex = i18n.indexOf(ID_SEPARATOR);\n  const descIndex = i18n.indexOf(MEANING_SEPARATOR);\n  const [meaningAndDesc, id] = idIndex > -1 ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\n  const [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc];\n  return {\n    meaning,\n    description,\n    id: id.trim()\n  };\n}\nclass XmlTagDefinition {\n  constructor() {\n    this.closedByParent = false;\n    this.implicitNamespacePrefix = null;\n    this.isVoid = false;\n    this.ignoreFirstLf = false;\n    this.canSelfClose = true;\n    this.preventNamespaceInheritance = false;\n  }\n  requireExtraParent(currentParent) {\n    return false;\n  }\n  isClosedByChild(name) {\n    return false;\n  }\n  getContentType() {\n    return TagContentType.PARSABLE_DATA;\n  }\n}\nconst _TAG_DEFINITION = new XmlTagDefinition();\nfunction getXmlTagDefinition(tagName) {\n  return _TAG_DEFINITION;\n}\nclass XmlParser extends Parser {\n  constructor() {\n    super(getXmlTagDefinition);\n  }\n  parse(source, url, options = {}) {\n    // Blocks aren't supported in an XML context.\n    return super.parse(source, url, {\n      ...options,\n      tokenizeBlocks: false\n    });\n  }\n}\nconst _VERSION$1 = '1.2';\nconst _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:1.2';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG$1 = 'en';\nconst _PLACEHOLDER_TAG$2 = 'x';\nconst _MARKER_TAG$1 = 'mrk';\nconst _FILE_TAG = 'file';\nconst _SOURCE_TAG$1 = 'source';\nconst _SEGMENT_SOURCE_TAG = 'seg-source';\nconst _ALT_TRANS_TAG = 'alt-trans';\nconst _TARGET_TAG$1 = 'target';\nconst _UNIT_TAG$1 = 'trans-unit';\nconst _CONTEXT_GROUP_TAG = 'context-group';\nconst _CONTEXT_TAG = 'context';\n// https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n// https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\nclass Xliff extends Serializer {\n  write(messages, locale) {\n    const visitor = new _WriteVisitor$1();\n    const transUnits = [];\n    messages.forEach(message => {\n      let contextTags = [];\n      message.sources.forEach(source => {\n        let contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, {\n          purpose: 'location'\n        });\n        contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, {\n          'context-type': 'sourcefile'\n        }, [new Text$1(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, {\n          'context-type': 'linenumber'\n        }, [new Text$1(`${source.startLine}`)]), new CR(8));\n        contextTags.push(new CR(8), contextGroupTag);\n      });\n      const transUnit = new Tag(_UNIT_TAG$1, {\n        id: message.id,\n        datatype: 'html'\n      });\n      transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), ...contextTags);\n      if (message.description) {\n        transUnit.children.push(new CR(8), new Tag('note', {\n          priority: '1',\n          from: 'description'\n        }, [new Text$1(message.description)]));\n      }\n      if (message.meaning) {\n        transUnit.children.push(new CR(8), new Tag('note', {\n          priority: '1',\n          from: 'meaning'\n        }, [new Text$1(message.meaning)]));\n      }\n      transUnit.children.push(new CR(6));\n      transUnits.push(new CR(6), transUnit);\n    });\n    const body = new Tag('body', {}, [...transUnits, new CR(4)]);\n    const file = new Tag('file', {\n      'source-language': locale || _DEFAULT_SOURCE_LANG$1,\n      datatype: 'plaintext',\n      original: 'ng2.template'\n    }, [new CR(4), body, new CR(2)]);\n    const xliff = new Tag('xliff', {\n      version: _VERSION$1,\n      xmlns: _XMLNS$1\n    }, [new CR(2), file, new CR()]);\n    return serialize([new Declaration({\n      version: '1.0',\n      encoding: 'UTF-8'\n    }), new CR(), xliff, new CR()]);\n  }\n  load(content, url) {\n    // xliff to xml nodes\n    const xliffParser = new XliffParser();\n    const {\n      locale,\n      msgIdToHtml,\n      errors\n    } = xliffParser.parse(content, url);\n    // xml nodes to i18n nodes\n    const i18nNodesByMsgId = {};\n    const converter = new XmlToI18n$2();\n    Object.keys(msgIdToHtml).forEach(msgId => {\n      const {\n        i18nNodes,\n        errors: e\n      } = converter.convert(msgIdToHtml[msgId], url);\n      errors.push(...e);\n      i18nNodesByMsgId[msgId] = i18nNodes;\n    });\n    if (errors.length) {\n      throw new Error(`xliff parse errors:\\n${errors.join('\\n')}`);\n    }\n    return {\n      locale: locale,\n      i18nNodesByMsgId\n    };\n  }\n  digest(message) {\n    return digest$1(message);\n  }\n}\nclass _WriteVisitor$1 {\n  visitText(text, context) {\n    return [new Text$1(text.value)];\n  }\n  visitContainer(container, context) {\n    const nodes = [];\n    container.children.forEach(node => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n  visitIcu(icu, context) {\n    const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n    Object.keys(icu.cases).forEach(c => {\n      nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n    });\n    nodes.push(new Text$1(`}`));\n    return nodes;\n  }\n  visitTagPlaceholder(ph, context) {\n    const ctype = getCtypeForTag(ph.tag);\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [new Tag(_PLACEHOLDER_TAG$2, {\n        id: ph.startName,\n        ctype,\n        'equiv-text': `<${ph.tag}/>`\n      })];\n    }\n    const startTagPh = new Tag(_PLACEHOLDER_TAG$2, {\n      id: ph.startName,\n      ctype,\n      'equiv-text': `<${ph.tag}>`\n    });\n    const closeTagPh = new Tag(_PLACEHOLDER_TAG$2, {\n      id: ph.closeName,\n      ctype,\n      'equiv-text': `</${ph.tag}>`\n    });\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n  visitPlaceholder(ph, context) {\n    return [new Tag(_PLACEHOLDER_TAG$2, {\n      id: ph.name,\n      'equiv-text': `{{${ph.value}}}`\n    })];\n  }\n  visitBlockPlaceholder(ph, context) {\n    const ctype = `x-${ph.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;\n    const startTagPh = new Tag(_PLACEHOLDER_TAG$2, {\n      id: ph.startName,\n      ctype,\n      'equiv-text': `@${ph.name}`\n    });\n    const closeTagPh = new Tag(_PLACEHOLDER_TAG$2, {\n      id: ph.closeName,\n      ctype,\n      'equiv-text': `}`\n    });\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n  visitIcuPlaceholder(ph, context) {\n    const equivText = `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ')}}`;\n    return [new Tag(_PLACEHOLDER_TAG$2, {\n      id: ph.name,\n      'equiv-text': equivText\n    })];\n  }\n  serialize(nodes) {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n}\n// TODO(vicb): add error management (structure)\n// Extract messages as xml nodes from the xliff file\nclass XliffParser {\n  constructor() {\n    this._locale = null;\n  }\n  parse(xliff, url) {\n    this._unitMlString = null;\n    this._msgIdToHtml = {};\n    const xml = new XmlParser().parse(xliff, url);\n    this._errors = xml.errors;\n    visitAll(this, xml.rootNodes, null);\n    return {\n      msgIdToHtml: this._msgIdToHtml,\n      errors: this._errors,\n      locale: this._locale\n    };\n  }\n  visitElement(element, context) {\n    switch (element.name) {\n      case _UNIT_TAG$1:\n        this._unitMlString = null;\n        const idAttr = element.attrs.find(attr => attr.name === 'id');\n        if (!idAttr) {\n          this._addError(element, `<${_UNIT_TAG$1}> misses the \"id\" attribute`);\n        } else {\n          const id = idAttr.value;\n          if (this._msgIdToHtml.hasOwnProperty(id)) {\n            this._addError(element, `Duplicated translations for msg ${id}`);\n          } else {\n            visitAll(this, element.children, null);\n            if (typeof this._unitMlString === 'string') {\n              this._msgIdToHtml[id] = this._unitMlString;\n            } else {\n              this._addError(element, `Message ${id} misses a translation`);\n            }\n          }\n        }\n        break;\n      // ignore those tags\n      case _SOURCE_TAG$1:\n      case _SEGMENT_SOURCE_TAG:\n      case _ALT_TRANS_TAG:\n        break;\n      case _TARGET_TAG$1:\n        const innerTextStart = element.startSourceSpan.end.offset;\n        const innerTextEnd = element.endSourceSpan.start.offset;\n        const content = element.startSourceSpan.start.file.content;\n        const innerText = content.slice(innerTextStart, innerTextEnd);\n        this._unitMlString = innerText;\n        break;\n      case _FILE_TAG:\n        const localeAttr = element.attrs.find(attr => attr.name === 'target-language');\n        if (localeAttr) {\n          this._locale = localeAttr.value;\n        }\n        visitAll(this, element.children, null);\n        break;\n      default:\n        // TODO(vicb): assert file structure, xliff version\n        // For now only recurse on unhandled nodes\n        visitAll(this, element.children, null);\n    }\n  }\n  visitAttribute(attribute, context) {}\n  visitText(text, context) {}\n  visitComment(comment, context) {}\n  visitExpansion(expansion, context) {}\n  visitExpansionCase(expansionCase, context) {}\n  visitBlock(block, context) {}\n  visitBlockParameter(parameter, context) {}\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n$2 {\n  convert(message, url) {\n    const xmlIcu = new XmlParser().parse(message, url, {\n      tokenizeExpansionForms: true\n    });\n    this._errors = xmlIcu.errors;\n    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : [].concat(...visitAll(this, xmlIcu.rootNodes));\n    return {\n      i18nNodes: i18nNodes,\n      errors: this._errors\n    };\n  }\n  visitText(text, context) {\n    return new Text$2(text.value, text.sourceSpan);\n  }\n  visitElement(el, context) {\n    if (el.name === _PLACEHOLDER_TAG$2) {\n      const nameAttr = el.attrs.find(attr => attr.name === 'id');\n      if (nameAttr) {\n        return new Placeholder('', nameAttr.value, el.sourceSpan);\n      }\n      this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"id\" attribute`);\n      return null;\n    }\n    if (el.name === _MARKER_TAG$1) {\n      return [].concat(...visitAll(this, el.children));\n    }\n    this._addError(el, `Unexpected tag`);\n    return null;\n  }\n  visitExpansion(icu, context) {\n    const caseMap = {};\n    visitAll(this, icu.cases).forEach(c => {\n      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n    });\n    return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n  }\n  visitExpansionCase(icuCase, context) {\n    return {\n      value: icuCase.value,\n      nodes: visitAll(this, icuCase.expression)\n    };\n  }\n  visitComment(comment, context) {}\n  visitAttribute(attribute, context) {}\n  visitBlock(block, context) {}\n  visitBlockParameter(parameter, context) {}\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\nfunction getCtypeForTag(tag) {\n  switch (tag.toLowerCase()) {\n    case 'br':\n      return 'lb';\n    case 'img':\n      return 'image';\n    default:\n      return `x-${tag}`;\n  }\n}\nconst _VERSION = '2.0';\nconst _XMLNS = 'urn:oasis:names:tc:xliff:document:2.0';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG = 'en';\nconst _PLACEHOLDER_TAG$1 = 'ph';\nconst _PLACEHOLDER_SPANNING_TAG = 'pc';\nconst _MARKER_TAG = 'mrk';\nconst _XLIFF_TAG = 'xliff';\nconst _SOURCE_TAG = 'source';\nconst _TARGET_TAG = 'target';\nconst _UNIT_TAG = 'unit';\n// https://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html\nclass Xliff2 extends Serializer {\n  write(messages, locale) {\n    const visitor = new _WriteVisitor();\n    const units = [];\n    messages.forEach(message => {\n      const unit = new Tag(_UNIT_TAG, {\n        id: message.id\n      });\n      const notes = new Tag('notes');\n      if (message.description || message.meaning) {\n        if (message.description) {\n          notes.children.push(new CR(8), new Tag('note', {\n            category: 'description'\n          }, [new Text$1(message.description)]));\n        }\n        if (message.meaning) {\n          notes.children.push(new CR(8), new Tag('note', {\n            category: 'meaning'\n          }, [new Text$1(message.meaning)]));\n        }\n      }\n      message.sources.forEach(source => {\n        notes.children.push(new CR(8), new Tag('note', {\n          category: 'location'\n        }, [new Text$1(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));\n      });\n      notes.children.push(new CR(6));\n      unit.children.push(new CR(6), notes);\n      const segment = new Tag('segment');\n      segment.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(6));\n      unit.children.push(new CR(6), segment, new CR(4));\n      units.push(new CR(4), unit);\n    });\n    const file = new Tag('file', {\n      'original': 'ng.template',\n      id: 'ngi18n'\n    }, [...units, new CR(2)]);\n    const xliff = new Tag(_XLIFF_TAG, {\n      version: _VERSION,\n      xmlns: _XMLNS,\n      srcLang: locale || _DEFAULT_SOURCE_LANG\n    }, [new CR(2), file, new CR()]);\n    return serialize([new Declaration({\n      version: '1.0',\n      encoding: 'UTF-8'\n    }), new CR(), xliff, new CR()]);\n  }\n  load(content, url) {\n    // xliff to xml nodes\n    const xliff2Parser = new Xliff2Parser();\n    const {\n      locale,\n      msgIdToHtml,\n      errors\n    } = xliff2Parser.parse(content, url);\n    // xml nodes to i18n nodes\n    const i18nNodesByMsgId = {};\n    const converter = new XmlToI18n$1();\n    Object.keys(msgIdToHtml).forEach(msgId => {\n      const {\n        i18nNodes,\n        errors: e\n      } = converter.convert(msgIdToHtml[msgId], url);\n      errors.push(...e);\n      i18nNodesByMsgId[msgId] = i18nNodes;\n    });\n    if (errors.length) {\n      throw new Error(`xliff2 parse errors:\\n${errors.join('\\n')}`);\n    }\n    return {\n      locale: locale,\n      i18nNodesByMsgId\n    };\n  }\n  digest(message) {\n    return decimalDigest(message);\n  }\n}\nclass _WriteVisitor {\n  constructor() {\n    this._nextPlaceholderId = 0;\n  }\n  visitText(text, context) {\n    return [new Text$1(text.value)];\n  }\n  visitContainer(container, context) {\n    const nodes = [];\n    container.children.forEach(node => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n  visitIcu(icu, context) {\n    const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n    Object.keys(icu.cases).forEach(c => {\n      nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n    });\n    nodes.push(new Text$1(`}`));\n    return nodes;\n  }\n  visitTagPlaceholder(ph, context) {\n    const type = getTypeForTag(ph.tag);\n    if (ph.isVoid) {\n      const tagPh = new Tag(_PLACEHOLDER_TAG$1, {\n        id: (this._nextPlaceholderId++).toString(),\n        equiv: ph.startName,\n        type: type,\n        disp: `<${ph.tag}/>`\n      });\n      return [tagPh];\n    }\n    const tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\n      id: (this._nextPlaceholderId++).toString(),\n      equivStart: ph.startName,\n      equivEnd: ph.closeName,\n      type: type,\n      dispStart: `<${ph.tag}>`,\n      dispEnd: `</${ph.tag}>`\n    });\n    const nodes = [].concat(...ph.children.map(node => node.visit(this)));\n    if (nodes.length) {\n      nodes.forEach(node => tagPc.children.push(node));\n    } else {\n      tagPc.children.push(new Text$1(''));\n    }\n    return [tagPc];\n  }\n  visitPlaceholder(ph, context) {\n    const idStr = (this._nextPlaceholderId++).toString();\n    return [new Tag(_PLACEHOLDER_TAG$1, {\n      id: idStr,\n      equiv: ph.name,\n      disp: `{{${ph.value}}}`\n    })];\n  }\n  visitBlockPlaceholder(ph, context) {\n    const tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\n      id: (this._nextPlaceholderId++).toString(),\n      equivStart: ph.startName,\n      equivEnd: ph.closeName,\n      type: 'other',\n      dispStart: `@${ph.name}`,\n      dispEnd: `}`\n    });\n    const nodes = [].concat(...ph.children.map(node => node.visit(this)));\n    if (nodes.length) {\n      nodes.forEach(node => tagPc.children.push(node));\n    } else {\n      tagPc.children.push(new Text$1(''));\n    }\n    return [tagPc];\n  }\n  visitIcuPlaceholder(ph, context) {\n    const cases = Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ');\n    const idStr = (this._nextPlaceholderId++).toString();\n    return [new Tag(_PLACEHOLDER_TAG$1, {\n      id: idStr,\n      equiv: ph.name,\n      disp: `{${ph.value.expression}, ${ph.value.type}, ${cases}}`\n    })];\n  }\n  serialize(nodes) {\n    this._nextPlaceholderId = 0;\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n}\n// Extract messages as xml nodes from the xliff file\nclass Xliff2Parser {\n  constructor() {\n    this._locale = null;\n  }\n  parse(xliff, url) {\n    this._unitMlString = null;\n    this._msgIdToHtml = {};\n    const xml = new XmlParser().parse(xliff, url);\n    this._errors = xml.errors;\n    visitAll(this, xml.rootNodes, null);\n    return {\n      msgIdToHtml: this._msgIdToHtml,\n      errors: this._errors,\n      locale: this._locale\n    };\n  }\n  visitElement(element, context) {\n    switch (element.name) {\n      case _UNIT_TAG:\n        this._unitMlString = null;\n        const idAttr = element.attrs.find(attr => attr.name === 'id');\n        if (!idAttr) {\n          this._addError(element, `<${_UNIT_TAG}> misses the \"id\" attribute`);\n        } else {\n          const id = idAttr.value;\n          if (this._msgIdToHtml.hasOwnProperty(id)) {\n            this._addError(element, `Duplicated translations for msg ${id}`);\n          } else {\n            visitAll(this, element.children, null);\n            if (typeof this._unitMlString === 'string') {\n              this._msgIdToHtml[id] = this._unitMlString;\n            } else {\n              this._addError(element, `Message ${id} misses a translation`);\n            }\n          }\n        }\n        break;\n      case _SOURCE_TAG:\n        // ignore source message\n        break;\n      case _TARGET_TAG:\n        const innerTextStart = element.startSourceSpan.end.offset;\n        const innerTextEnd = element.endSourceSpan.start.offset;\n        const content = element.startSourceSpan.start.file.content;\n        const innerText = content.slice(innerTextStart, innerTextEnd);\n        this._unitMlString = innerText;\n        break;\n      case _XLIFF_TAG:\n        const localeAttr = element.attrs.find(attr => attr.name === 'trgLang');\n        if (localeAttr) {\n          this._locale = localeAttr.value;\n        }\n        const versionAttr = element.attrs.find(attr => attr.name === 'version');\n        if (versionAttr) {\n          const version = versionAttr.value;\n          if (version !== '2.0') {\n            this._addError(element, `The XLIFF file version ${version} is not compatible with XLIFF 2.0 serializer`);\n          } else {\n            visitAll(this, element.children, null);\n          }\n        }\n        break;\n      default:\n        visitAll(this, element.children, null);\n    }\n  }\n  visitAttribute(attribute, context) {}\n  visitText(text, context) {}\n  visitComment(comment, context) {}\n  visitExpansion(expansion, context) {}\n  visitExpansionCase(expansionCase, context) {}\n  visitBlock(block, context) {}\n  visitBlockParameter(parameter, context) {}\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n$1 {\n  convert(message, url) {\n    const xmlIcu = new XmlParser().parse(message, url, {\n      tokenizeExpansionForms: true\n    });\n    this._errors = xmlIcu.errors;\n    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : [].concat(...visitAll(this, xmlIcu.rootNodes));\n    return {\n      i18nNodes,\n      errors: this._errors\n    };\n  }\n  visitText(text, context) {\n    return new Text$2(text.value, text.sourceSpan);\n  }\n  visitElement(el, context) {\n    switch (el.name) {\n      case _PLACEHOLDER_TAG$1:\n        const nameAttr = el.attrs.find(attr => attr.name === 'equiv');\n        if (nameAttr) {\n          return [new Placeholder('', nameAttr.value, el.sourceSpan)];\n        }\n        this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equiv\" attribute`);\n        break;\n      case _PLACEHOLDER_SPANNING_TAG:\n        const startAttr = el.attrs.find(attr => attr.name === 'equivStart');\n        const endAttr = el.attrs.find(attr => attr.name === 'equivEnd');\n        if (!startAttr) {\n          this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equivStart\" attribute`);\n        } else if (!endAttr) {\n          this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equivEnd\" attribute`);\n        } else {\n          const startId = startAttr.value;\n          const endId = endAttr.value;\n          const nodes = [];\n          return nodes.concat(new Placeholder('', startId, el.sourceSpan), ...el.children.map(node => node.visit(this, null)), new Placeholder('', endId, el.sourceSpan));\n        }\n        break;\n      case _MARKER_TAG:\n        return [].concat(...visitAll(this, el.children));\n      default:\n        this._addError(el, `Unexpected tag`);\n    }\n    return null;\n  }\n  visitExpansion(icu, context) {\n    const caseMap = {};\n    visitAll(this, icu.cases).forEach(c => {\n      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n    });\n    return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n  }\n  visitExpansionCase(icuCase, context) {\n    return {\n      value: icuCase.value,\n      nodes: [].concat(...visitAll(this, icuCase.expression))\n    };\n  }\n  visitComment(comment, context) {}\n  visitAttribute(attribute, context) {}\n  visitBlock(block, context) {}\n  visitBlockParameter(parameter, context) {}\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\nfunction getTypeForTag(tag) {\n  switch (tag.toLowerCase()) {\n    case 'br':\n    case 'b':\n    case 'i':\n    case 'u':\n      return 'fmt';\n    case 'img':\n      return 'image';\n    case 'a':\n      return 'link';\n    default:\n      return 'other';\n  }\n}\nconst _TRANSLATIONS_TAG = 'translationbundle';\nconst _TRANSLATION_TAG = 'translation';\nconst _PLACEHOLDER_TAG = 'ph';\nclass Xtb extends Serializer {\n  write(messages, locale) {\n    throw new Error('Unsupported');\n  }\n  load(content, url) {\n    // xtb to xml nodes\n    const xtbParser = new XtbParser();\n    const {\n      locale,\n      msgIdToHtml,\n      errors\n    } = xtbParser.parse(content, url);\n    // xml nodes to i18n nodes\n    const i18nNodesByMsgId = {};\n    const converter = new XmlToI18n();\n    // Because we should be able to load xtb files that rely on features not supported by angular,\n    // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n    // converted\n    Object.keys(msgIdToHtml).forEach(msgId => {\n      const valueFn = function () {\n        const {\n          i18nNodes,\n          errors\n        } = converter.convert(msgIdToHtml[msgId], url);\n        if (errors.length) {\n          throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n        }\n        return i18nNodes;\n      };\n      createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n    });\n    if (errors.length) {\n      throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n    }\n    return {\n      locale: locale,\n      i18nNodesByMsgId\n    };\n  }\n  digest(message) {\n    return digest(message);\n  }\n  createNameMapper(message) {\n    return new SimplePlaceholderMapper(message, toPublicName);\n  }\n}\nfunction createLazyProperty(messages, id, valueFn) {\n  Object.defineProperty(messages, id, {\n    configurable: true,\n    enumerable: true,\n    get: function () {\n      const value = valueFn();\n      Object.defineProperty(messages, id, {\n        enumerable: true,\n        value\n      });\n      return value;\n    },\n    set: _ => {\n      throw new Error('Could not overwrite an XTB translation');\n    }\n  });\n}\n// Extract messages as xml nodes from the xtb file\nclass XtbParser {\n  constructor() {\n    this._locale = null;\n  }\n  parse(xtb, url) {\n    this._bundleDepth = 0;\n    this._msgIdToHtml = {};\n    // We can not parse the ICU messages at this point as some messages might not originate\n    // from Angular that could not be lex'd.\n    const xml = new XmlParser().parse(xtb, url);\n    this._errors = xml.errors;\n    visitAll(this, xml.rootNodes);\n    return {\n      msgIdToHtml: this._msgIdToHtml,\n      errors: this._errors,\n      locale: this._locale\n    };\n  }\n  visitElement(element, context) {\n    switch (element.name) {\n      case _TRANSLATIONS_TAG:\n        this._bundleDepth++;\n        if (this._bundleDepth > 1) {\n          this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);\n        }\n        const langAttr = element.attrs.find(attr => attr.name === 'lang');\n        if (langAttr) {\n          this._locale = langAttr.value;\n        }\n        visitAll(this, element.children, null);\n        this._bundleDepth--;\n        break;\n      case _TRANSLATION_TAG:\n        const idAttr = element.attrs.find(attr => attr.name === 'id');\n        if (!idAttr) {\n          this._addError(element, `<${_TRANSLATION_TAG}> misses the \"id\" attribute`);\n        } else {\n          const id = idAttr.value;\n          if (this._msgIdToHtml.hasOwnProperty(id)) {\n            this._addError(element, `Duplicated translations for msg ${id}`);\n          } else {\n            const innerTextStart = element.startSourceSpan.end.offset;\n            const innerTextEnd = element.endSourceSpan.start.offset;\n            const content = element.startSourceSpan.start.file.content;\n            const innerText = content.slice(innerTextStart, innerTextEnd);\n            this._msgIdToHtml[id] = innerText;\n          }\n        }\n        break;\n      default:\n        this._addError(element, 'Unexpected tag');\n    }\n  }\n  visitAttribute(attribute, context) {}\n  visitText(text, context) {}\n  visitComment(comment, context) {}\n  visitExpansion(expansion, context) {}\n  visitExpansionCase(expansionCase, context) {}\n  visitBlock(block, context) {}\n  visitBlockParameter(block, context) {}\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\n// Convert ml nodes (xtb syntax) to i18n nodes\nclass XmlToI18n {\n  convert(message, url) {\n    const xmlIcu = new XmlParser().parse(message, url, {\n      tokenizeExpansionForms: true\n    });\n    this._errors = xmlIcu.errors;\n    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : visitAll(this, xmlIcu.rootNodes);\n    return {\n      i18nNodes,\n      errors: this._errors\n    };\n  }\n  visitText(text, context) {\n    return new Text$2(text.value, text.sourceSpan);\n  }\n  visitExpansion(icu, context) {\n    const caseMap = {};\n    visitAll(this, icu.cases).forEach(c => {\n      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n    });\n    return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n  }\n  visitExpansionCase(icuCase, context) {\n    return {\n      value: icuCase.value,\n      nodes: visitAll(this, icuCase.expression)\n    };\n  }\n  visitElement(el, context) {\n    if (el.name === _PLACEHOLDER_TAG) {\n      const nameAttr = el.attrs.find(attr => attr.name === 'name');\n      if (nameAttr) {\n        return new Placeholder('', nameAttr.value, el.sourceSpan);\n      }\n      this._addError(el, `<${_PLACEHOLDER_TAG}> misses the \"name\" attribute`);\n    } else {\n      this._addError(el, `Unexpected tag`);\n    }\n    return null;\n  }\n  visitComment(comment, context) {}\n  visitAttribute(attribute, context) {}\n  visitBlock(block, context) {}\n  visitBlockParameter(block, context) {}\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\n\n/**\n * A container for translated messages\n */\nclass TranslationBundle {\n  constructor(_i18nNodesByMsgId = {}, locale, digest, mapperFactory, missingTranslationStrategy = MissingTranslationStrategy.Warning, console) {\n    this._i18nNodesByMsgId = _i18nNodesByMsgId;\n    this.digest = digest;\n    this.mapperFactory = mapperFactory;\n    this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);\n  }\n  // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n  static load(content, url, serializer, missingTranslationStrategy, console) {\n    const {\n      locale,\n      i18nNodesByMsgId\n    } = serializer.load(content, url);\n    const digestFn = m => serializer.digest(m);\n    const mapperFactory = m => serializer.createNameMapper(m);\n    return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n  }\n  // Returns the translation as HTML nodes from the given source message.\n  get(srcMsg) {\n    const html = this._i18nToHtml.convert(srcMsg);\n    if (html.errors.length) {\n      throw new Error(html.errors.join('\\n'));\n    }\n    return html.nodes;\n  }\n  has(srcMsg) {\n    return this.digest(srcMsg) in this._i18nNodesByMsgId;\n  }\n}\nclass I18nToHtmlVisitor {\n  constructor(_i18nNodesByMsgId = {}, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\n    this._i18nNodesByMsgId = _i18nNodesByMsgId;\n    this._locale = _locale;\n    this._digest = _digest;\n    this._mapperFactory = _mapperFactory;\n    this._missingTranslationStrategy = _missingTranslationStrategy;\n    this._console = _console;\n    this._errors = [];\n    this._contextStack = [];\n  }\n  convert(srcMsg) {\n    this._contextStack.length = 0;\n    this._errors.length = 0;\n    // i18n to text\n    const text = this._convertToText(srcMsg);\n    // text to html\n    const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n    const html = new HtmlParser().parse(text, url, {\n      tokenizeExpansionForms: true\n    });\n    return {\n      nodes: html.rootNodes,\n      errors: [...this._errors, ...html.errors]\n    };\n  }\n  visitText(text, context) {\n    // `convert()` uses an `HtmlParser` to return `html.Node`s\n    // we should then make sure that any special characters are escaped\n    return escapeXml(text.value);\n  }\n  visitContainer(container, context) {\n    return container.children.map(n => n.visit(this)).join('');\n  }\n  visitIcu(icu, context) {\n    const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n    // TODO(vicb): Once all format switch to using expression placeholders\n    // we should throw when the placeholder is not in the source message\n    const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression].text : icu.expression;\n    return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n  }\n  visitPlaceholder(ph, context) {\n    const phName = this._mapper(ph.name);\n    if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n      return this._srcMsg.placeholders[phName].text;\n    }\n    if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n      return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n    }\n    this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n    return '';\n  }\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitTagPlaceholder(ph, context) {\n    const tag = `${ph.tag}`;\n    const attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\n    if (ph.isVoid) {\n      return `<${tag} ${attrs}/>`;\n    }\n    const children = ph.children.map(c => c.visit(this)).join('');\n    return `<${tag} ${attrs}>${children}</${tag}>`;\n  }\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitIcuPlaceholder(ph, context) {\n    // An ICU placeholder references the source message to be serialized\n    return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n  }\n  visitBlockPlaceholder(ph, context) {\n    const params = ph.parameters.length === 0 ? '' : ` (${ph.parameters.join('; ')})`;\n    const children = ph.children.map(c => c.visit(this)).join('');\n    return `@${ph.name}${params} {${children}}`;\n  }\n  /**\n   * Convert a source message to a translated text string:\n   * - text nodes are replaced with their translation,\n   * - placeholders are replaced with their content,\n   * - ICU nodes are converted to ICU expressions.\n   */\n  _convertToText(srcMsg) {\n    const id = this._digest(srcMsg);\n    const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n    let nodes;\n    this._contextStack.push({\n      msg: this._srcMsg,\n      mapper: this._mapper\n    });\n    this._srcMsg = srcMsg;\n    if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n      // When there is a translation use its nodes as the source\n      // And create a mapper to convert serialized placeholder names to internal names\n      nodes = this._i18nNodesByMsgId[id];\n      this._mapper = name => mapper ? mapper.toInternalName(name) : name;\n    } else {\n      // When no translation has been found\n      // - report an error / a warning / nothing,\n      // - use the nodes from the original message\n      // - placeholders are already internal and need no mapper\n      if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n        this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\n      } else if (this._console && this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n        this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\n      }\n      nodes = srcMsg.nodes;\n      this._mapper = name => name;\n    }\n    const text = nodes.map(node => node.visit(this)).join('');\n    const context = this._contextStack.pop();\n    this._srcMsg = context.msg;\n    this._mapper = context.mapper;\n    return text;\n  }\n  _addError(el, msg) {\n    this._errors.push(new I18nError(el.sourceSpan, msg));\n  }\n}\nclass I18NHtmlParser {\n  constructor(_htmlParser, translations, translationsFormat, missingTranslation = MissingTranslationStrategy.Warning, console) {\n    this._htmlParser = _htmlParser;\n    if (translations) {\n      const serializer = createSerializer(translationsFormat);\n      this._translationBundle = TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n    } else {\n      this._translationBundle = new TranslationBundle({}, null, digest$1, undefined, missingTranslation, console);\n    }\n  }\n  parse(source, url, options = {}) {\n    const interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n    const parseResult = this._htmlParser.parse(source, url, {\n      interpolationConfig,\n      ...options\n    });\n    if (parseResult.errors.length) {\n      return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n    }\n    return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n  }\n}\nfunction createSerializer(format) {\n  format = (format || 'xlf').toLowerCase();\n  switch (format) {\n    case 'xmb':\n      return new Xmb();\n    case 'xtb':\n      return new Xtb();\n    case 'xliff2':\n    case 'xlf2':\n      return new Xliff2();\n    case 'xliff':\n    case 'xlf':\n    default:\n      return new Xliff();\n  }\n}\n\n/**\n * A container for message extracted from the templates.\n */\nclass MessageBundle {\n  constructor(_htmlParser, _implicitTags, _implicitAttrs, _locale = null) {\n    this._htmlParser = _htmlParser;\n    this._implicitTags = _implicitTags;\n    this._implicitAttrs = _implicitAttrs;\n    this._locale = _locale;\n    this._messages = [];\n  }\n  updateFromTemplate(html, url, interpolationConfig) {\n    const htmlParserResult = this._htmlParser.parse(html, url, {\n      tokenizeExpansionForms: true,\n      interpolationConfig\n    });\n    if (htmlParserResult.errors.length) {\n      return htmlParserResult.errors;\n    }\n    const i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n    if (i18nParserResult.errors.length) {\n      return i18nParserResult.errors;\n    }\n    this._messages.push(...i18nParserResult.messages);\n    return [];\n  }\n  // Return the message in the internal format\n  // The public (serialized) format might be different, see the `write` method.\n  getMessages() {\n    return this._messages;\n  }\n  write(serializer, filterSources) {\n    const messages = {};\n    const mapperVisitor = new MapPlaceholderNames();\n    // Deduplicate messages based on their ID\n    this._messages.forEach(message => {\n      const id = serializer.digest(message);\n      if (!messages.hasOwnProperty(id)) {\n        messages[id] = message;\n      } else {\n        messages[id].sources.push(...message.sources);\n      }\n    });\n    // Transform placeholder names using the serializer mapping\n    const msgList = Object.keys(messages).map(id => {\n      const mapper = serializer.createNameMapper(messages[id]);\n      const src = messages[id];\n      const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n      let transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);\n      transformedMessage.sources = src.sources;\n      if (filterSources) {\n        transformedMessage.sources.forEach(source => source.filePath = filterSources(source.filePath));\n      }\n      return transformedMessage;\n    });\n    return serializer.write(msgList, this._locale);\n  }\n}\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends CloneVisitor {\n  convert(nodes, mapper) {\n    return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n  }\n  visitTagPlaceholder(ph, mapper) {\n    const startName = mapper.toPublicName(ph.startName);\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n    const children = ph.children.map(n => n.visit(this, mapper));\n    return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n  }\n  visitBlockPlaceholder(ph, mapper) {\n    const startName = mapper.toPublicName(ph.startName);\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n    const children = ph.children.map(n => n.visit(this, mapper));\n    return new BlockPlaceholder(ph.name, ph.parameters, startName, closeName, children, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n  }\n  visitPlaceholder(ph, mapper) {\n    return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n  }\n  visitIcuPlaceholder(ph, mapper) {\n    return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n  }\n}\nvar FactoryTarget;\n(function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\nfunction compileClassMetadata(metadata) {\n  // Generate an ngDevMode guarded call to setClassMetadata with the class identifier and its\n  // metadata.\n  const fnCall = importExpr(Identifiers.setClassMetadata).callFn([metadata.type, metadata.decorators, metadata.ctorParameters ?? literal(null), metadata.propDecorators ?? literal(null)]);\n  const iife = arrowFn([], [devOnlyGuardedExpression(fnCall).toStmt()]);\n  return iife.callFn([]);\n}\n/**\n * Wraps the `setClassMetadata` function with extra logic that dynamically\n * loads dependencies from `@defer` blocks.\n *\n * Generates a call like this:\n * ```\n * setClassMetadataAsync(type, () => [\n *   import('./cmp-a').then(m => m.CmpA);\n *   import('./cmp-b').then(m => m.CmpB);\n * ], (CmpA, CmpB) => {\n *   setClassMetadata(type, decorators, ctorParameters, propParameters);\n * });\n * ```\n *\n * Similar to the `setClassMetadata` call, it's wrapped into the `ngDevMode`\n * check to tree-shake away this code in production mode.\n */\nfunction compileComponentClassMetadata(metadata, deferrableTypes) {\n  if (deferrableTypes === null || deferrableTypes.size === 0) {\n    // If there are no deferrable symbols - just generate a regular `setClassMetadata` call.\n    return compileClassMetadata(metadata);\n  }\n  const dynamicImports = [];\n  const importedSymbols = [];\n  for (const [symbolName, importPath] of deferrableTypes) {\n    // e.g. `(m) => m.CmpA`\n    const innerFn = arrowFn([new FnParam('m', DYNAMIC_TYPE)], variable('m').prop(symbolName));\n    // e.g. `import('./cmp-a').then(...)`\n    const importExpr = new DynamicImportExpr(importPath).prop('then').callFn([innerFn]);\n    dynamicImports.push(importExpr);\n    importedSymbols.push(new FnParam(symbolName, DYNAMIC_TYPE));\n  }\n  // e.g. `() => [ ... ];`\n  const dependencyLoadingFn = arrowFn([], literalArr(dynamicImports));\n  // e.g. `setClassMetadata(...)`\n  const setClassMetadataCall = importExpr(Identifiers.setClassMetadata).callFn([metadata.type, metadata.decorators, metadata.ctorParameters ?? literal(null), metadata.propDecorators ?? literal(null)]);\n  // e.g. `(CmpA) => setClassMetadata(...)`\n  const setClassMetaWrapper = arrowFn(importedSymbols, [setClassMetadataCall.toStmt()]);\n  // Final `setClassMetadataAsync()` call with all arguments\n  const setClassMetaAsync = importExpr(Identifiers.setClassMetadataAsync).callFn([metadata.type, dependencyLoadingFn, setClassMetaWrapper]);\n  // Generate an ngDevMode guarded call to `setClassMetadataAsync` with\n  // the class identifier and its metadata, so that this call can be tree-shaken.\n  const iife = arrowFn([], [devOnlyGuardedExpression(setClassMetaAsync).toStmt()]);\n  return iife.callFn([]);\n}\n\n/**\n * Generate an ngDevMode guarded call to setClassDebugInfo with the debug info about the class\n * (e.g., the file name in which the class is defined)\n */\nfunction compileClassDebugInfo(debugInfo) {\n  const debugInfoObject = {\n    className: debugInfo.className\n  };\n  // Include file path and line number only if the file relative path is calculated successfully.\n  if (debugInfo.filePath) {\n    debugInfoObject.filePath = debugInfo.filePath;\n    debugInfoObject.lineNumber = debugInfo.lineNumber;\n  }\n  // Include forbidOrphanRendering only if it's set to true (to reduce generated code)\n  if (debugInfo.forbidOrphanRendering) {\n    debugInfoObject.forbidOrphanRendering = literal(true);\n  }\n  const fnCall = importExpr(Identifiers.setClassDebugInfo).callFn([debugInfo.type, mapLiteral(debugInfoObject)]);\n  const iife = arrowFn([], [devOnlyGuardedExpression(fnCall).toStmt()]);\n  return iife.callFn([]);\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$5 = '12.0.0';\nfunction compileDeclareClassMetadata(metadata) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$5));\n  definitionMap.set('version', literal('17.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', metadata.type);\n  definitionMap.set('decorators', metadata.decorators);\n  definitionMap.set('ctorParameters', metadata.ctorParameters);\n  definitionMap.set('propDecorators', metadata.propDecorators);\n  return importExpr(Identifiers.declareClassMetadata).callFn([definitionMap.toLiteralMap()]);\n}\n\n/**\n * Creates an array literal expression from the given array, mapping all values to an expression\n * using the provided mapping function. If the array is empty or null, then null is returned.\n *\n * @param values The array to transfer into literal array expression.\n * @param mapper The logic to use for creating an expression for the array's values.\n * @returns An array literal expression representing `values`, or null if `values` is empty or\n * is itself null.\n */\nfunction toOptionalLiteralArray(values, mapper) {\n  if (values === null || values.length === 0) {\n    return null;\n  }\n  return literalArr(values.map(value => mapper(value)));\n}\n/**\n * Creates an object literal expression from the given object, mapping all values to an expression\n * using the provided mapping function. If the object has no keys, then null is returned.\n *\n * @param object The object to transfer into an object literal expression.\n * @param mapper The logic to use for creating an expression for the object's values.\n * @returns An object literal expression representing `object`, or null if `object` does not have\n * any keys.\n */\nfunction toOptionalLiteralMap(object, mapper) {\n  const entries = Object.keys(object).map(key => {\n    const value = object[key];\n    return {\n      key,\n      value: mapper(value),\n      quoted: true\n    };\n  });\n  if (entries.length > 0) {\n    return literalMap(entries);\n  } else {\n    return null;\n  }\n}\nfunction compileDependencies(deps) {\n  if (deps === 'invalid') {\n    // The `deps` can be set to the string \"invalid\"  by the `unwrapConstructorDependencies()`\n    // function, which tries to convert `ConstructorDeps` into `R3DependencyMetadata[]`.\n    return literal('invalid');\n  } else if (deps === null) {\n    return literal(null);\n  } else {\n    return literalArr(deps.map(compileDependency));\n  }\n}\nfunction compileDependency(dep) {\n  const depMeta = new DefinitionMap();\n  depMeta.set('token', dep.token);\n  if (dep.attributeNameType !== null) {\n    depMeta.set('attribute', literal(true));\n  }\n  if (dep.host) {\n    depMeta.set('host', literal(true));\n  }\n  if (dep.optional) {\n    depMeta.set('optional', literal(true));\n  }\n  if (dep.self) {\n    depMeta.set('self', literal(true));\n  }\n  if (dep.skipSelf) {\n    depMeta.set('skipSelf', literal(true));\n  }\n  return depMeta.toLiteralMap();\n}\n\n/**\n * Compile a directive declaration defined by the `R3DirectiveMetadata`.\n */\nfunction compileDeclareDirectiveFromMetadata(meta) {\n  const definitionMap = createDirectiveDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declareDirective).callFn([definitionMap.toLiteralMap()]);\n  const type = createDirectiveType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing\n * this logic for components, as they extend the directive metadata.\n */\nfunction createDirectiveDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  const minVersion = getMinimumVersionForPartialOutput(meta);\n  definitionMap.set('minVersion', literal(minVersion));\n  definitionMap.set('version', literal('17.1.0'));\n  // e.g. `type: MyDirective`\n  definitionMap.set('type', meta.type.value);\n  if (meta.isStandalone) {\n    definitionMap.set('isStandalone', literal(meta.isStandalone));\n  }\n  if (meta.isSignal) {\n    definitionMap.set('isSignal', literal(meta.isSignal));\n  }\n  // e.g. `selector: 'some-dir'`\n  if (meta.selector !== null) {\n    definitionMap.set('selector', literal(meta.selector));\n  }\n  definitionMap.set('inputs', needsNewInputPartialOutput(meta) ? createInputsPartialMetadata(meta.inputs) : legacyInputsPartialMetadata(meta.inputs));\n  definitionMap.set('outputs', conditionallyCreateDirectiveBindingLiteral(meta.outputs));\n  definitionMap.set('host', compileHostMetadata(meta.host));\n  definitionMap.set('providers', meta.providers);\n  if (meta.queries.length > 0) {\n    definitionMap.set('queries', literalArr(meta.queries.map(compileQuery)));\n  }\n  if (meta.viewQueries.length > 0) {\n    definitionMap.set('viewQueries', literalArr(meta.viewQueries.map(compileQuery)));\n  }\n  if (meta.exportAs !== null) {\n    definitionMap.set('exportAs', asLiteral(meta.exportAs));\n  }\n  if (meta.usesInheritance) {\n    definitionMap.set('usesInheritance', literal(true));\n  }\n  if (meta.lifecycle.usesOnChanges) {\n    definitionMap.set('usesOnChanges', literal(true));\n  }\n  if (meta.hostDirectives?.length) {\n    definitionMap.set('hostDirectives', createHostDirectives(meta.hostDirectives));\n  }\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  return definitionMap;\n}\n/**\n * Determines the minimum linker version for the partial output\n * generated for this directive.\n *\n * Every time we make a breaking change to the declaration interface or partial-linker\n * behavior, we must update the minimum versions to prevent old partial-linkers from\n * incorrectly processing the declaration.\n *\n * NOTE: Do not include any prerelease in these versions as they are ignored.\n */\nfunction getMinimumVersionForPartialOutput(meta) {\n  // We are starting with the oldest minimum version that can work for common\n  // directive partial compilation output. As we discover usages of new features\n  // that require a newer partial output emit, we bump the `minVersion`. Our goal\n  // is to keep libraries as much compatible with older linker versions as possible.\n  let minVersion = '14.0.0';\n  // Note: in order to allow consuming Angular libraries that have been compiled with 16.1+ in\n  // Angular 16.0, we only force a minimum version of 16.1 if input transform feature as introduced\n  // in 16.1 is actually used.\n  const hasDecoratorTransformFunctions = Object.values(meta.inputs).some(input => input.transformFunction !== null);\n  if (hasDecoratorTransformFunctions) {\n    minVersion = '16.1.0';\n  }\n  // If there are input flags and we need the new emit, use the actual minimum version,\n  // where this was introduced. i.e. in 17.1.0\n  // TODO(legacy-partial-output-inputs): Remove in v18.\n  if (needsNewInputPartialOutput(meta)) {\n    minVersion = '17.1.0';\n  }\n  return minVersion;\n}\n/**\n * Gets whether the given directive needs the new input partial output structure\n * that can hold additional metadata like `isRequired`, `isSignal` etc.\n */\nfunction needsNewInputPartialOutput(meta) {\n  return Object.values(meta.inputs).some(input => input.isSignal);\n}\n/**\n * Compiles the metadata of a single query into its partial declaration form as declared\n * by `R3DeclareQueryMetadata`.\n */\nfunction compileQuery(query) {\n  const meta = new DefinitionMap();\n  meta.set('propertyName', literal(query.propertyName));\n  if (query.first) {\n    meta.set('first', literal(true));\n  }\n  meta.set('predicate', Array.isArray(query.predicate) ? asLiteral(query.predicate) : convertFromMaybeForwardRefExpression(query.predicate));\n  if (!query.emitDistinctChangesOnly) {\n    // `emitDistinctChangesOnly` is special because we expect it to be `true`.\n    // Therefore we explicitly emit the field, and explicitly place it only when it's `false`.\n    meta.set('emitDistinctChangesOnly', literal(false));\n  } else {\n    // The linker will assume that an absent `emitDistinctChangesOnly` flag is by default `true`.\n  }\n  if (query.descendants) {\n    meta.set('descendants', literal(true));\n  }\n  meta.set('read', query.read);\n  if (query.static) {\n    meta.set('static', literal(true));\n  }\n  return meta.toLiteralMap();\n}\n/**\n * Compiles the host metadata into its partial declaration form as declared\n * in `R3DeclareDirectiveMetadata['host']`\n */\nfunction compileHostMetadata(meta) {\n  const hostMetadata = new DefinitionMap();\n  hostMetadata.set('attributes', toOptionalLiteralMap(meta.attributes, expression => expression));\n  hostMetadata.set('listeners', toOptionalLiteralMap(meta.listeners, literal));\n  hostMetadata.set('properties', toOptionalLiteralMap(meta.properties, literal));\n  if (meta.specialAttributes.styleAttr) {\n    hostMetadata.set('styleAttribute', literal(meta.specialAttributes.styleAttr));\n  }\n  if (meta.specialAttributes.classAttr) {\n    hostMetadata.set('classAttribute', literal(meta.specialAttributes.classAttr));\n  }\n  if (hostMetadata.values.length > 0) {\n    return hostMetadata.toLiteralMap();\n  } else {\n    return null;\n  }\n}\nfunction createHostDirectives(hostDirectives) {\n  const expressions = hostDirectives.map(current => {\n    const keys = [{\n      key: 'directive',\n      value: current.isForwardReference ? generateForwardRef(current.directive.type) : current.directive.type,\n      quoted: false\n    }];\n    const inputsLiteral = current.inputs ? createHostDirectivesMappingArray(current.inputs) : null;\n    const outputsLiteral = current.outputs ? createHostDirectivesMappingArray(current.outputs) : null;\n    if (inputsLiteral) {\n      keys.push({\n        key: 'inputs',\n        value: inputsLiteral,\n        quoted: false\n      });\n    }\n    if (outputsLiteral) {\n      keys.push({\n        key: 'outputs',\n        value: outputsLiteral,\n        quoted: false\n      });\n    }\n    return literalMap(keys);\n  });\n  // If there's a forward reference, we generate a `function() { return [{directive: HostDir}] }`,\n  // otherwise we can save some bytes by using a plain array, e.g. `[{directive: HostDir}]`.\n  return literalArr(expressions);\n}\n/**\n * Generates partial output metadata for inputs of a directive.\n *\n * The generated structure is expected to match `R3DeclareDirectiveFacade['inputs']`.\n */\nfunction createInputsPartialMetadata(inputs) {\n  const keys = Object.getOwnPropertyNames(inputs);\n  if (keys.length === 0) {\n    return null;\n  }\n  return literalMap(keys.map(declaredName => {\n    const value = inputs[declaredName];\n    return {\n      key: declaredName,\n      // put quotes around keys that contain potentially unsafe characters\n      quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(declaredName),\n      value: literalMap([{\n        key: 'classPropertyName',\n        quoted: false,\n        value: asLiteral(value.classPropertyName)\n      }, {\n        key: 'publicName',\n        quoted: false,\n        value: asLiteral(value.bindingPropertyName)\n      }, {\n        key: 'isSignal',\n        quoted: false,\n        value: asLiteral(value.isSignal)\n      }, {\n        key: 'isRequired',\n        quoted: false,\n        value: asLiteral(value.required)\n      }, {\n        key: 'transformFunction',\n        quoted: false,\n        value: value.transformFunction ?? NULL_EXPR\n      }])\n    };\n  }));\n}\n/**\n * Pre v18 legacy partial output for inputs.\n *\n * Previously, inputs did not capture metadata like `isSignal` in the partial compilation output.\n * To enable capturing such metadata, we restructured how input metadata is communicated in the\n * partial output. This would make libraries incompatible with older Angular FW versions where the\n * linker would not know how to handle this new \"format\". For this reason, if we know this metadata\n * does not need to be captured- we fall back to the old format. This is what this function\n * generates.\n *\n * See:\n * https://github.com/angular/angular/blob/d4b423690210872b5c32a322a6090beda30b05a3/packages/core/src/compiler/compiler_facade_interface.ts#L197-L199\n */\nfunction legacyInputsPartialMetadata(inputs) {\n  // TODO(legacy-partial-output-inputs): Remove function in v18.\n  const keys = Object.getOwnPropertyNames(inputs);\n  if (keys.length === 0) {\n    return null;\n  }\n  return literalMap(keys.map(declaredName => {\n    const value = inputs[declaredName];\n    const publicName = value.bindingPropertyName;\n    const differentDeclaringName = publicName !== declaredName;\n    let result;\n    if (differentDeclaringName || value.transformFunction !== null) {\n      const values = [asLiteral(publicName), asLiteral(declaredName)];\n      if (value.transformFunction !== null) {\n        values.push(value.transformFunction);\n      }\n      result = literalArr(values);\n    } else {\n      result = asLiteral(publicName);\n    }\n    return {\n      key: declaredName,\n      // put quotes around keys that contain potentially unsafe characters\n      quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(declaredName),\n      value: result\n    };\n  }));\n}\n\n/**\n * Compile a component declaration defined by the `R3ComponentMetadata`.\n */\nfunction compileDeclareComponentFromMetadata(meta, template, additionalTemplateInfo) {\n  const definitionMap = createComponentDefinitionMap(meta, template, additionalTemplateInfo);\n  const expression = importExpr(Identifiers.declareComponent).callFn([definitionMap.toLiteralMap()]);\n  const type = createComponentType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for a component into a `DefinitionMap`.\n */\nfunction createComponentDefinitionMap(meta, template, templateInfo) {\n  const definitionMap = createDirectiveDefinitionMap(meta);\n  const blockVisitor = new BlockPresenceVisitor();\n  visitAll$1(blockVisitor, template.nodes);\n  definitionMap.set('template', getTemplateExpression(template, templateInfo));\n  if (templateInfo.isInline) {\n    definitionMap.set('isInline', literal(true));\n  }\n  // Set the minVersion to 17.0.0 if the component is using at least one block in its template.\n  // We don't do this for templates without blocks, in order to preserve backwards compatibility.\n  if (blockVisitor.hasBlocks) {\n    definitionMap.set('minVersion', literal('17.0.0'));\n  }\n  definitionMap.set('styles', toOptionalLiteralArray(meta.styles, literal));\n  definitionMap.set('dependencies', compileUsedDependenciesMetadata(meta));\n  definitionMap.set('viewProviders', meta.viewProviders);\n  definitionMap.set('animations', meta.animations);\n  if (meta.changeDetection !== null) {\n    if (typeof meta.changeDetection === 'object') {\n      throw new Error('Impossible state! Change detection flag is not resolved!');\n    }\n    definitionMap.set('changeDetection', importExpr(Identifiers.ChangeDetectionStrategy).prop(ChangeDetectionStrategy[meta.changeDetection]));\n  }\n  if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n    definitionMap.set('encapsulation', importExpr(Identifiers.ViewEncapsulation).prop(ViewEncapsulation[meta.encapsulation]));\n  }\n  if (meta.interpolation !== DEFAULT_INTERPOLATION_CONFIG) {\n    definitionMap.set('interpolation', literalArr([literal(meta.interpolation.start), literal(meta.interpolation.end)]));\n  }\n  if (template.preserveWhitespaces === true) {\n    definitionMap.set('preserveWhitespaces', literal(true));\n  }\n  return definitionMap;\n}\nfunction getTemplateExpression(template, templateInfo) {\n  // If the template has been defined using a direct literal, we use that expression directly\n  // without any modifications. This is ensures proper source mapping from the partially\n  // compiled code to the source file declaring the template. Note that this does not capture\n  // template literals referenced indirectly through an identifier.\n  if (templateInfo.inlineTemplateLiteralExpression !== null) {\n    return templateInfo.inlineTemplateLiteralExpression;\n  }\n  // If the template is defined inline but not through a literal, the template has been resolved\n  // through static interpretation. We create a literal but cannot provide any source span. Note\n  // that we cannot use the expression defining the template because the linker expects the template\n  // to be defined as a literal in the declaration.\n  if (templateInfo.isInline) {\n    return literal(templateInfo.content, null, null);\n  }\n  // The template is external so we must synthesize an expression node with\n  // the appropriate source-span.\n  const contents = templateInfo.content;\n  const file = new ParseSourceFile(contents, templateInfo.sourceUrl);\n  const start = new ParseLocation(file, 0, 0, 0);\n  const end = computeEndLocation(file, contents);\n  const span = new ParseSourceSpan(start, end);\n  return literal(contents, null, span);\n}\nfunction computeEndLocation(file, contents) {\n  const length = contents.length;\n  let lineStart = 0;\n  let lastLineStart = 0;\n  let line = 0;\n  do {\n    lineStart = contents.indexOf('\\n', lastLineStart);\n    if (lineStart !== -1) {\n      lastLineStart = lineStart + 1;\n      line++;\n    }\n  } while (lineStart !== -1);\n  return new ParseLocation(file, length, line, length - lastLineStart);\n}\nfunction compileUsedDependenciesMetadata(meta) {\n  const wrapType = meta.declarationListEmitMode !== 0 /* DeclarationListEmitMode.Direct */ ? generateForwardRef : expr => expr;\n  if (meta.declarationListEmitMode === 3 /* DeclarationListEmitMode.RuntimeResolved */) {\n    throw new Error(`Unsupported emit mode`);\n  }\n  return toOptionalLiteralArray(meta.declarations, decl => {\n    switch (decl.kind) {\n      case R3TemplateDependencyKind.Directive:\n        const dirMeta = new DefinitionMap();\n        dirMeta.set('kind', literal(decl.isComponent ? 'component' : 'directive'));\n        dirMeta.set('type', wrapType(decl.type));\n        dirMeta.set('selector', literal(decl.selector));\n        dirMeta.set('inputs', toOptionalLiteralArray(decl.inputs, literal));\n        dirMeta.set('outputs', toOptionalLiteralArray(decl.outputs, literal));\n        dirMeta.set('exportAs', toOptionalLiteralArray(decl.exportAs, literal));\n        return dirMeta.toLiteralMap();\n      case R3TemplateDependencyKind.Pipe:\n        const pipeMeta = new DefinitionMap();\n        pipeMeta.set('kind', literal('pipe'));\n        pipeMeta.set('type', wrapType(decl.type));\n        pipeMeta.set('name', literal(decl.name));\n        return pipeMeta.toLiteralMap();\n      case R3TemplateDependencyKind.NgModule:\n        const ngModuleMeta = new DefinitionMap();\n        ngModuleMeta.set('kind', literal('ngmodule'));\n        ngModuleMeta.set('type', wrapType(decl.type));\n        return ngModuleMeta.toLiteralMap();\n    }\n  });\n}\nclass BlockPresenceVisitor extends RecursiveVisitor$1 {\n  constructor() {\n    super(...arguments);\n    this.hasBlocks = false;\n  }\n  visitDeferredBlock() {\n    this.hasBlocks = true;\n  }\n  visitDeferredBlockPlaceholder() {\n    this.hasBlocks = true;\n  }\n  visitDeferredBlockLoading() {\n    this.hasBlocks = true;\n  }\n  visitDeferredBlockError() {\n    this.hasBlocks = true;\n  }\n  visitIfBlock() {\n    this.hasBlocks = true;\n  }\n  visitIfBlockBranch() {\n    this.hasBlocks = true;\n  }\n  visitForLoopBlock() {\n    this.hasBlocks = true;\n  }\n  visitForLoopBlockEmpty() {\n    this.hasBlocks = true;\n  }\n  visitSwitchBlock() {\n    this.hasBlocks = true;\n  }\n  visitSwitchBlockCase() {\n    this.hasBlocks = true;\n  }\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$4 = '12.0.0';\nfunction compileDeclareFactoryFunction(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$4));\n  definitionMap.set('version', literal('17.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', meta.type.value);\n  definitionMap.set('deps', compileDependencies(meta.deps));\n  definitionMap.set('target', importExpr(Identifiers.FactoryTarget).prop(FactoryTarget$1[meta.target]));\n  return {\n    expression: importExpr(Identifiers.declareFactory).callFn([definitionMap.toLiteralMap()]),\n    statements: [],\n    type: createFactoryType(meta)\n  };\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$3 = '12.0.0';\n/**\n * Compile a Injectable declaration defined by the `R3InjectableMetadata`.\n */\nfunction compileDeclareInjectableFromMetadata(meta) {\n  const definitionMap = createInjectableDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declareInjectable).callFn([definitionMap.toLiteralMap()]);\n  const type = createInjectableType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for a Injectable into a `DefinitionMap`.\n */\nfunction createInjectableDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$3));\n  definitionMap.set('version', literal('17.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', meta.type.value);\n  // Only generate providedIn property if it has a non-null value\n  if (meta.providedIn !== undefined) {\n    const providedIn = convertFromMaybeForwardRefExpression(meta.providedIn);\n    if (providedIn.value !== null) {\n      definitionMap.set('providedIn', providedIn);\n    }\n  }\n  if (meta.useClass !== undefined) {\n    definitionMap.set('useClass', convertFromMaybeForwardRefExpression(meta.useClass));\n  }\n  if (meta.useExisting !== undefined) {\n    definitionMap.set('useExisting', convertFromMaybeForwardRefExpression(meta.useExisting));\n  }\n  if (meta.useValue !== undefined) {\n    definitionMap.set('useValue', convertFromMaybeForwardRefExpression(meta.useValue));\n  }\n  // Factories do not contain `ForwardRef`s since any types are already wrapped in a function call\n  // so the types will not be eagerly evaluated. Therefore we do not need to process this expression\n  // with `convertFromProviderExpression()`.\n  if (meta.useFactory !== undefined) {\n    definitionMap.set('useFactory', meta.useFactory);\n  }\n  if (meta.deps !== undefined) {\n    definitionMap.set('deps', literalArr(meta.deps.map(compileDependency)));\n  }\n  return definitionMap;\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$2 = '12.0.0';\nfunction compileDeclareInjectorFromMetadata(meta) {\n  const definitionMap = createInjectorDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declareInjector).callFn([definitionMap.toLiteralMap()]);\n  const type = createInjectorType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for an Injector into a `DefinitionMap`.\n */\nfunction createInjectorDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$2));\n  definitionMap.set('version', literal('17.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', meta.type.value);\n  definitionMap.set('providers', meta.providers);\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', literalArr(meta.imports));\n  }\n  return definitionMap;\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$1 = '14.0.0';\nfunction compileDeclareNgModuleFromMetadata(meta) {\n  const definitionMap = createNgModuleDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declareNgModule).callFn([definitionMap.toLiteralMap()]);\n  const type = createNgModuleType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for an NgModule into a `DefinitionMap`.\n */\nfunction createNgModuleDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  if (meta.kind === R3NgModuleMetadataKind.Local) {\n    throw new Error('Invalid path! Local compilation mode should not get into the partial compilation path');\n  }\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$1));\n  definitionMap.set('version', literal('17.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', meta.type.value);\n  // We only generate the keys in the metadata if the arrays contain values.\n  // We must wrap the arrays inside a function if any of the values are a forward reference to a\n  // not-yet-declared class. This is to support JIT execution of the `ɵɵngDeclareNgModule()` call.\n  // In the linker these wrappers are stripped and then reapplied for the `ɵɵdefineNgModule()` call.\n  if (meta.bootstrap.length > 0) {\n    definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));\n  }\n  if (meta.declarations.length > 0) {\n    definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n  }\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n  }\n  if (meta.exports.length > 0) {\n    definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n  }\n  if (meta.schemas !== null && meta.schemas.length > 0) {\n    definitionMap.set('schemas', literalArr(meta.schemas.map(ref => ref.value)));\n  }\n  if (meta.id !== null) {\n    definitionMap.set('id', meta.id);\n  }\n  return definitionMap;\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION = '14.0.0';\n/**\n * Compile a Pipe declaration defined by the `R3PipeMetadata`.\n */\nfunction compileDeclarePipeFromMetadata(meta) {\n  const definitionMap = createPipeDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declarePipe).callFn([definitionMap.toLiteralMap()]);\n  const type = createPipeType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for a Pipe into a `DefinitionMap`.\n */\nfunction createPipeDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION));\n  definitionMap.set('version', literal('17.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  // e.g. `type: MyPipe`\n  definitionMap.set('type', meta.type.value);\n  if (meta.isStandalone) {\n    definitionMap.set('isStandalone', literal(meta.isStandalone));\n  }\n  // e.g. `name: \"myPipe\"`\n  definitionMap.set('name', literal(meta.pipeName));\n  if (meta.pure === false) {\n    // e.g. `pure: false`\n    definitionMap.set('pure', literal(meta.pure));\n  }\n  return definitionMap;\n}\n\n//////////////////////////////////////\n// This file only reexports content of the `src` folder. Keep it that way.\n// This function call has a global side effects and publishes the compiler into global namespace for\n// the late binding of the Compiler to the @angular/core for jit compilation.\npublishFacade(_global);\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n// This file is not used to build this module. It is only used during editing\n\nexport { AST, ASTWithName, ASTWithSource, AbsoluteSourceSpan, ArrayType, ArrowFunctionExpr, AstMemoryEfficientTransformer, AstTransformer, Attribute, Binary, BinaryOperator, BinaryOperatorExpr, BindingPipe, Block, BlockParameter, BoundElementProperty, BuiltinType, BuiltinTypeName, CUSTOM_ELEMENTS_SCHEMA, Call, Chain, ChangeDetectionStrategy, CommaExpr, Comment, CompilerConfig, Conditional, ConditionalExpr, ConstantPool, CssSelector, DEFAULT_INTERPOLATION_CONFIG, DYNAMIC_TYPE, DeclareFunctionStmt, DeclareVarStmt, DomElementSchemaRegistry, DynamicImportExpr, EOF, Element, ElementSchemaRegistry, EmitterVisitorContext, EmptyExpr$1 as EmptyExpr, Expansion, ExpansionCase, Expression, ExpressionBinding, ExpressionStatement, ExpressionType, ExternalExpr, ExternalReference, FactoryTarget$1 as FactoryTarget, FunctionExpr, HtmlParser, HtmlTagDefinition, I18NHtmlParser, IfStmt, ImplicitReceiver, InstantiateExpr, Interpolation$1 as Interpolation, InterpolationConfig, InvokeFunctionExpr, JSDocComment, JitEvaluator, KeyedRead, KeyedWrite, LeadingComment, Lexer, LiteralArray, LiteralArrayExpr, LiteralExpr, LiteralMap, LiteralMapExpr, LiteralPrimitive, LocalizedString, MapType, MessageBundle, NONE_TYPE, NO_ERRORS_SCHEMA, NodeWithI18n, NonNullAssert, NotExpr, ParseError, ParseErrorLevel, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseSpan, ParseTreeResult, ParsedEvent, ParsedProperty, ParsedPropertyType, ParsedVariable, Parser$1 as Parser, ParserError, PrefixNot, PropertyRead, PropertyWrite, R3BoundTarget, Identifiers as R3Identifiers, R3NgModuleMetadataKind, R3SelectorScopeMode, R3TargetBinder, R3TemplateDependencyKind, ReadKeyExpr, ReadPropExpr, ReadVarExpr, RecursiveAstVisitor, RecursiveVisitor, ResourceLoader, ReturnStatement, STRING_TYPE, SafeCall, SafeKeyedRead, SafePropertyRead, SelectorContext, SelectorListContext, SelectorMatcher, Serializer, SplitInterpolation, Statement, StmtModifier, TagContentType, TaggedTemplateExpr, TemplateBindingParseResult, TemplateLiteral, TemplateLiteralElement, Text, ThisReceiver, BoundAttribute as TmplAstBoundAttribute, BoundDeferredTrigger as TmplAstBoundDeferredTrigger, BoundEvent as TmplAstBoundEvent, BoundText as TmplAstBoundText, Content as TmplAstContent, DeferredBlock as TmplAstDeferredBlock, DeferredBlockError as TmplAstDeferredBlockError, DeferredBlockLoading as TmplAstDeferredBlockLoading, DeferredBlockPlaceholder as TmplAstDeferredBlockPlaceholder, DeferredTrigger as TmplAstDeferredTrigger, Element$1 as TmplAstElement, ForLoopBlock as TmplAstForLoopBlock, ForLoopBlockEmpty as TmplAstForLoopBlockEmpty, HoverDeferredTrigger as TmplAstHoverDeferredTrigger, Icu$1 as TmplAstIcu, IdleDeferredTrigger as TmplAstIdleDeferredTrigger, IfBlock as TmplAstIfBlock, IfBlockBranch as TmplAstIfBlockBranch, ImmediateDeferredTrigger as TmplAstImmediateDeferredTrigger, InteractionDeferredTrigger as TmplAstInteractionDeferredTrigger, RecursiveVisitor$1 as TmplAstRecursiveVisitor, Reference as TmplAstReference, SwitchBlock as TmplAstSwitchBlock, SwitchBlockCase as TmplAstSwitchBlockCase, Template as TmplAstTemplate, Text$3 as TmplAstText, TextAttribute as TmplAstTextAttribute, TimerDeferredTrigger as TmplAstTimerDeferredTrigger, UnknownBlock as TmplAstUnknownBlock, Variable as TmplAstVariable, ViewportDeferredTrigger as TmplAstViewportDeferredTrigger, Token, TokenType, TransplantedType, TreeError, Type, TypeModifier, TypeofExpr, Unary, UnaryOperator, UnaryOperatorExpr, VERSION, VariableBinding, Version, ViewEncapsulation, WrappedNodeExpr, WriteKeyExpr, WritePropExpr, WriteVarExpr, Xliff, Xliff2, Xmb, XmlParser, Xtb, _ParseAST, compileClassDebugInfo, compileClassMetadata, compileComponentClassMetadata, compileComponentFromMetadata, compileDeclareClassMetadata, compileDeclareComponentFromMetadata, compileDeclareDirectiveFromMetadata, compileDeclareFactoryFunction, compileDeclareInjectableFromMetadata, compileDeclareInjectorFromMetadata, compileDeclareNgModuleFromMetadata, compileDeclarePipeFromMetadata, compileDirectiveFromMetadata, compileFactoryFunction, compileInjectable, compileInjector, compileNgModule, compilePipeFromMetadata, computeMsgId, core, createCssSelectorFromNode, createInjectableType, createMayBeForwardRefExpression, devOnlyGuardedExpression, emitDistinctChangesOnlyDefaultValue, encapsulateStyle, getHtmlTagDefinition, getNsPrefix, getSafePropertyAccessString, identifierName, isIdentifier, isNgContainer, isNgContent, isNgTemplate, jsDocComment, leadingComment, literal, literalMap, makeBindingParser, mergeNsAndName, output_ast as outputAst, parseHostBindings, parseTemplate, preserveWhitespacesDefault, publishFacade, r3JitTypeSourceSpan, sanitizeIdentifier, splitNsName, verifyHostBindings, visitAll };","map":{"version":3,"names":["_SELECTOR_REGEXP","RegExp","CssSelector","constructor","element","classNames","attrs","notSelectors","parse","selector","results","_addResult","res","cssSel","length","push","cssSelector","match","current","inNot","lastIndex","exec","Error","tag","prefix","addAttribute","slice","addClassName","setElement","attribute","unescapeAttribute","attr","result","escaping","i","char","charAt","escapeAttribute","replace","isElementSelector","hasElementSelector","getAttrs","join","concat","name","value","toLowerCase","toString","forEach","klass","notSelector","SelectorMatcher","_elementMap","Map","_elementPartialMap","_classMap","_classPartialMap","_attrValueMap","_attrValuePartialMap","_listContexts","createNotMatcher","notMatcher","addSelectables","cssSelectors","callbackCtxt","listContext","SelectorListContext","_addSelectable","matcher","selectable","SelectorContext","isTerminal","_addTerminal","_addPartial","className","terminalMap","terminalValuesMap","get","set","partialMap","partialValuesMap","map","terminalList","matchedCallback","alreadyMatched","_matchTerminal","_matchPartial","selectables","starSelectables","finalize","nestedSelector","selectors","cbContext","callback","emitDistinctChangesOnlyDefaultValue","ViewEncapsulation","ChangeDetectionStrategy","InputFlags","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","Type$1","Function","SecurityContext","MissingTranslationStrategy","parserSelectorToSimpleSelector","classes","elementName","parserSelectorToNegativeSelector","parserSelectorToR3Selector","positive","negative","parseSelectorToR3Selector","core","Object","freeze","__proto__","Type","textEncoder","digest$1","message","id","computeDigest","sha1","serializeNodes","nodes","meaning","decimalDigest","computeDecimalDigest","visitor","_SerializerIgnoreIcuExpVisitor","parts","a","visit","computeMsgId","_SerializerVisitor","visitText","text","context","visitContainer","container","children","child","visitIcu","icu","strCases","keys","cases","k","expression","type","visitTagPlaceholder","ph","isVoid","startName","closeName","visitPlaceholder","visitIcuPlaceholder","visitBlockPlaceholder","serializerVisitor$1","str","TextEncoder","utf8","encode","words32","bytesToWords32","Endian","Big","len","w","Uint32Array","b","c","d","e","h0","h1","h2","h3","h4","j","rol32","fkVal","fk","f","temp","reduce","add32","toHexU32","padStart","index","fingerprint","view","DataView","buffer","byteOffset","byteLength","hi","hash32","lo","BigInt","asUintN","msg","msgFingerprint","end","getUint32","mix","remainder","getUint8","add32to64","low","high","count","bytes","endian","size","wordAt","byteAt","word","TypeModifier","modifiers","None","hasModifier","modifier","BuiltinTypeName","BuiltinType","visitType","visitBuiltinType","ExpressionType","typeParams","visitExpressionType","ArrayType","of","visitArrayType","MapType","valueType","visitMapType","TransplantedType","visitTransplantedType","DYNAMIC_TYPE","Dynamic","INFERRED_TYPE","Inferred","BOOL_TYPE","Bool","INT_TYPE","Int","NUMBER_TYPE","Number","STRING_TYPE","String","FUNCTION_TYPE","NONE_TYPE","UnaryOperator","BinaryOperator","nullSafeIsEquivalent","base","other","isEquivalent","areAllEquivalentPredicate","equivalentPredicate","areAllEquivalent","baseElement","otherElement","Expression","sourceSpan","prop","ReadPropExpr","key","ReadKeyExpr","callFn","params","pure","InvokeFunctionExpr","instantiate","InstantiateExpr","conditional","trueCase","falseCase","ConditionalExpr","equals","rhs","BinaryOperatorExpr","Equals","notEquals","NotEquals","identical","Identical","notIdentical","NotIdentical","minus","Minus","plus","Plus","divide","Divide","multiply","Multiply","modulo","Modulo","and","And","bitwiseOr","parens","BitwiseOr","bitwiseAnd","BitwiseAnd","or","Or","lower","Lower","lowerEquals","LowerEquals","bigger","Bigger","biggerEquals","BiggerEquals","isBlank","TYPED_NULL_EXPR","nullishCoalesce","NullishCoalesce","toStmt","ExpressionStatement","ReadVarExpr","isConstant","visitExpression","visitReadVarExpr","clone","WriteVarExpr","TypeofExpr","expr","visitTypeofExpr","WrappedNodeExpr","node","visitWrappedNodeExpr","visitWriteVarExpr","toDeclStmt","DeclareVarStmt","toConstDecl","StmtModifier","Final","WriteKeyExpr","receiver","visitWriteKeyExpr","WritePropExpr","visitWritePropExpr","fn","args","visitInvokeFunctionExpr","arg","TaggedTemplateExpr","template","elements","expressions","visitTaggedTemplateExpr","classExpr","visitInstantiateExpr","LiteralExpr","visitLiteralExpr","TemplateLiteral","el","TemplateLiteralElement","rawText","escapeForTemplateLiteral","escapeSlashes","LiteralPiece","PlaceholderPiece","associatedMessage","MEANING_SEPARATOR$1","ID_SEPARATOR$1","LEGACY_ID_INDICATOR","LocalizedString","metaBlock","messageParts","placeHolderNames","visitLocalizedString","serializeI18nHead","description","customId","legacyIds","legacyId","createCookedRawString","getMessagePartSourceSpan","getPlaceholderSourceSpan","serializeI18nTemplatePart","partIndex","placeholder","messagePart","messageString","escapeStartingColon","escapeColons","range","cooked","raw","ExternalExpr","moduleName","runtime","visitExternalExpr","ExternalReference","condition","visitConditionalExpr","DynamicImportExpr","url","visitDynamicImportExpr","NotExpr","visitNotExpr","FnParam","param","FunctionExpr","statements","DeclareFunctionStmt","visitFunctionExpr","p","ArrowFunctionExpr","body","Array","isArray","visitArrowFunctionExpr","UnaryOperatorExpr","operator","visitUnaryOperatorExpr","lhs","visitBinaryOperatorExpr","visitReadPropExpr","visitReadKeyExpr","LiteralArrayExpr","entries","every","visitLiteralArrayExpr","LiteralMapEntry","quoted","LiteralMapExpr","visitLiteralMapExpr","entriesClone","entry","CommaExpr","visitCommaExpr","NULL_EXPR","LeadingComment","multiline","trailingNewline","JSDocComment","tags","serializeTags","Statement","leadingComments","addLeadingComment","leadingComment","stmt","visitStatement","visitDeclareVarStmt","visitDeclareFunctionStmt","visitExpressionStmt","ReturnStatement","visitReturnStmt","IfStmt","visitIfStmt","RecursiveAstVisitor$1","ast","visitAllExpressions","visitAllStatements","exprs","stmts","jsDocComment","variable","importExpr","importType","typeModifiers","expressionType","transplantedType","typeofExpr","literalArr","values","literalMap","unary","not","arrowFn","ifStmt","thenClause","elseClause","taggedTemplate","literal","localizedString","placeholderNames","isNull","exp","tagToString","out","tagName","output_ast","RecursiveAstVisitor","CONSTANT_PREFIX","UNKNOWN_VALUE_KEY","KEY_CONTEXT","POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS","FixupExpression","resolved","shared","original","fixup","ConstantPool","isClosureCompilerEnabled","literals","literalFactories","sharedConstants","nextNameIndex","getConstLiteral","forceShared","isLongStringLiteral","GenericKeyFn","INSTANCE","keyOf","newValue","freshName","definition","usage","getSharedConstant","def","has","toSharedConstantDeclaration","getLiteralFactory","argumentsForKey","_getLiteralFactory","expressionForKey","getSharedFunctionReference","useUniqueName","isArrow","uniqueName","resultMap","literalFactory","literalFactoryArguments","filter","resultExpressions","parameters","isVariable","pureFunctionDeclaration","_","CORE","Identifiers","NEW_METHOD","_2","TRANSFORM_METHOD","_3","PATCH_DEPS","_4","_5","namespaceHTML","_6","namespaceMathML","_7","namespaceSVG","_8","_9","elementStart","_10","elementEnd","_11","advance","_12","syntheticHostProperty","_13","syntheticHostListener","_14","_15","attributeInterpolate1","_16","attributeInterpolate2","_17","attributeInterpolate3","_18","attributeInterpolate4","_19","attributeInterpolate5","_20","attributeInterpolate6","_21","attributeInterpolate7","_22","attributeInterpolate8","_23","attributeInterpolateV","_24","classProp","_25","elementContainerStart","_26","elementContainerEnd","_27","elementContainer","_28","styleMap","_29","styleMapInterpolate1","_30","styleMapInterpolate2","_31","styleMapInterpolate3","_32","styleMapInterpolate4","_33","styleMapInterpolate5","_34","styleMapInterpolate6","_35","styleMapInterpolate7","_36","styleMapInterpolate8","_37","styleMapInterpolateV","_38","classMap","_39","classMapInterpolate1","_40","classMapInterpolate2","_41","classMapInterpolate3","_42","classMapInterpolate4","_43","classMapInterpolate5","_44","classMapInterpolate6","_45","classMapInterpolate7","_46","classMapInterpolate8","_47","classMapInterpolateV","_48","styleProp","_49","stylePropInterpolate1","_50","stylePropInterpolate2","_51","stylePropInterpolate3","_52","stylePropInterpolate4","_53","stylePropInterpolate5","_54","stylePropInterpolate6","_55","stylePropInterpolate7","_56","stylePropInterpolate8","_57","stylePropInterpolateV","_58","nextContext","_59","resetView","_60","templateCreate","_61","defer","_62","deferWhen","_63","deferOnIdle","_64","deferOnImmediate","_65","deferOnTimer","_66","deferOnHover","_67","deferOnInteraction","_68","deferOnViewport","_69","deferPrefetchWhen","_70","deferPrefetchOnIdle","_71","deferPrefetchOnImmediate","_72","deferPrefetchOnTimer","_73","deferPrefetchOnHover","_74","deferPrefetchOnInteraction","_75","deferPrefetchOnViewport","_76","deferEnableTimerScheduling","_77","_78","repeater","_79","repeaterCreate","_80","repeaterTrackByIndex","_81","repeaterTrackByIdentity","_82","componentInstance","_83","_84","enableBindings","_85","disableBindings","_86","getCurrentView","_87","textInterpolate","_88","textInterpolate1","_89","textInterpolate2","_90","textInterpolate3","_91","textInterpolate4","_92","textInterpolate5","_93","textInterpolate6","_94","textInterpolate7","_95","textInterpolate8","_96","textInterpolateV","_97","restoreView","_98","pureFunction0","_99","pureFunction1","_100","pureFunction2","_101","pureFunction3","_102","pureFunction4","_103","pureFunction5","_104","pureFunction6","_105","pureFunction7","_106","pureFunction8","_107","pureFunctionV","_108","pipeBind1","_109","pipeBind2","_110","pipeBind3","_111","pipeBind4","_112","pipeBindV","_113","hostProperty","_114","property","_115","propertyInterpolate","_116","propertyInterpolate1","_117","propertyInterpolate2","_118","propertyInterpolate3","_119","propertyInterpolate4","_120","propertyInterpolate5","_121","propertyInterpolate6","_122","propertyInterpolate7","_123","propertyInterpolate8","_124","propertyInterpolateV","_125","i18n","_126","i18nAttributes","_127","i18nExp","_128","i18nStart","_129","i18nEnd","_130","i18nApply","_131","i18nPostprocess","_132","pipe","_133","projection","_134","projectionDef","_135","reference","_136","inject","_137","injectAttribute","_138","directiveInject","_139","invalidFactory","_140","invalidFactoryDep","_141","templateRefExtractor","_142","forwardRef","_143","resolveForwardRef","_144","ɵɵdefineInjectable","_145","declareInjectable","_146","InjectableDeclaration","_147","resolveWindow","_148","resolveDocument","_149","resolveBody","_150","getComponentDepsFactory","_151","defineComponent","_152","declareComponent","_153","setComponentScope","_154","_155","_156","ComponentDeclaration","_157","FactoryDeclaration","_158","declareFactory","_159","FactoryTarget","_160","defineDirective","_161","declareDirective","_162","DirectiveDeclaration","_163","InjectorDef","_164","InjectorDeclaration","_165","defineInjector","_166","declareInjector","_167","NgModuleDeclaration","_168","ModuleWithProviders","_169","defineNgModule","_170","declareNgModule","_171","setNgModuleScope","_172","registerNgModuleType","_173","PipeDeclaration","_174","definePipe","_175","declarePipe","_176","declareClassMetadata","_177","setClassMetadata","_178","setClassMetadataAsync","_179","setClassDebugInfo","_180","queryRefresh","_181","viewQuery","_182","loadQuery","_183","contentQuery","_184","NgOnChangesFeature","_185","InheritDefinitionFeature","_186","CopyDefinitionFeature","_187","StandaloneFeature","_188","ProvidersFeature","_189","HostDirectivesFeature","_190","InputTransformsFeatureFeature","_191","listener","_192","getInheritedFactory","_193","_194","sanitizeHtml","_195","sanitizeStyle","_196","sanitizeResourceUrl","_197","sanitizeScript","_198","sanitizeUrl","_199","sanitizeUrlOrResourceUrl","_200","trustConstantHtml","_201","trustConstantResourceUrl","_202","validateIframeAttribute","_203","InputSignalBrandWriteType","_204","UnwrapDirectiveSignalInputs","DASH_CASE_REGEXP","dashCaseToCamelCase","input","m","toUpperCase","splitAtColon","defaultValues","_splitAt","splitAtPeriod","character","characterIndex","indexOf","trim","noUndefined","val","undefined","error","escapeRegExp","s","utf8Encode","encoded","codePoint","charCodeAt","stringify","token","overriddenName","newLineIndex","substring","Version","full","splits","split","major","minor","patch","_global","globalThis","newArray","list","partitionArray","arr","conditionFn","truthy","falsy","item","VERSION$1","JS_B64_PREFIX","SourceMapGenerator","file","sourcesContent","lines","lastCol0","hasMappings","addSource","content","addLine","addMapping","col0","sourceUrl","sourceLine0","sourceCol0","currentLine","toJSON","sourcesIndex","sources","from","mappings","lastSourceIndex","lastSourceLine0","lastSourceCol0","segments","segment","segAsStr","toBase64VLQ","toJsComment","toBase64String","JSON","b64","i1","i2","i3","toBase64Digit","digit","B64_DIGITS","_SINGLE_QUOTE_ESCAPE_STRING_RE","_LEGAL_IDENTIFIER_RE","_INDENT_WITH","_EmittedLine","indent","partsLength","srcSpans","EmitterVisitorContext","createRoot","_indent","_lines","_currentLine","println","lastPart","print","lineIsEmpty","lineLength","part","newLine","removeEmptyLastLine","pop","incIndent","decIndent","toSource","sourceLines","l","_createIndent","toSourceMapGenerator","genFilePath","startsAtLine","firstOffsetMapped","mapFirstOffsetIfNeeded","line","lineIdx","spans","spanIdx","span","source","start","sourceLine","sourceCol","col","spanOf","column","emittedLine","columnsLeft","AbstractEmitterVisitor","_escapeDollarInStrings","printLeadingComments","ctx","comment","hasElseCase","lineWasEmpty","shouldParenthesize","escapeIdentifier","head","opStr","visitAllObjects","separator","handler","incrementedIndent","escapeDollar","alwaysQuote","requiresQuotes","test","typeWithParameters","numParams","ANIMATE_SYMBOL_PREFIX","prepareSyntheticPropertyName","prepareSyntheticListenerName","phase","getSafePropertyAccessString","accessor","escapedName","prepareSyntheticListenerFunctionName","jitOnlyGuardedExpression","guardedExpression","devOnlyGuardedExpression","guard","guardExpr","guardNotDefined","guardUndefinedOrTrue","wrapReference","wrapped","refsToArray","refs","shouldForwardDeclare","ref","createMayBeForwardRefExpression","convertFromMaybeForwardRefExpression","generateForwardRef","R3FactoryDelegateType","FactoryTarget$1","compileFactoryFunction","meta","t","baseFactoryVar","typeForCtor","isDelegatedFactoryMetadata","ctorExpr","deps","injectDependencies","target","retExpr","makeConditionalFactory","nonCtorExpr","r","ctorStmt","delegateArgs","delegateDeps","factoryExpr","delegateType","Class","delegate","isExpressionFactoryMetadata","getInheritedFactoryCall","baseFactory","factoryFn","createFactoryType","ctorDepsType","createCtorDepsType","typeArgumentCount","dep","compileInjectDependency","attributeNameType","flags","self","skipSelf","host","optional","Pipe","flagsParam","injectArgs","injectFn","getInjectFn","hasTypes","attributeTypes","createCtorDepType","Component","Directive","NgModule","Injectable","TagContentType","splitNsName","fatal","colonIndex","isNgContainer","isNgContent","isNgTemplate","getNsPrefix","fullName","mergeNsAndName","localName","Comment$1","_visitor","Text$3","BoundText","visitBoundText","TextAttribute","keySpan","valueSpan","visitTextAttribute","BoundAttribute","securityContext","unit","fromBoundElementProperty","visitBoundAttribute","BoundEvent","handlerSpan","fromParsedEvent","event","targetOrPhase","visitBoundEvent","Element$1","attributes","inputs","outputs","references","startSourceSpan","endSourceSpan","visitElement","DeferredTrigger","nameSpan","prefetchSpan","whenOrOnSourceSpan","visitDeferredTrigger","BoundDeferredTrigger","whenSourceSpan","IdleDeferredTrigger","ImmediateDeferredTrigger","HoverDeferredTrigger","onSourceSpan","TimerDeferredTrigger","delay","InteractionDeferredTrigger","ViewportDeferredTrigger","BlockNode","DeferredBlockPlaceholder","minimumTime","visitDeferredBlockPlaceholder","DeferredBlockLoading","afterTime","visitDeferredBlockLoading","DeferredBlockError","visitDeferredBlockError","DeferredBlock","triggers","prefetchTriggers","loading","mainBlockSpan","definedTriggers","definedPrefetchTriggers","visitDeferredBlock","visitAll","visitTriggers","visitAll$1","remainingBlocks","x","SwitchBlock","unknownBlocks","visitSwitchBlock","SwitchBlockCase","visitSwitchBlockCase","ForLoopBlock","trackBy","trackKeywordSpan","contextVariables","empty","visitForLoopBlock","ForLoopBlockEmpty","visitForLoopBlockEmpty","IfBlock","branches","visitIfBlock","IfBlockBranch","expressionAlias","visitIfBlockBranch","UnknownBlock","visitUnknownBlock","Template","templateAttrs","variables","visitTemplate","Content","visitContent","Variable","visitVariable","Reference","visitReference","Icu$1","vars","placeholders","RecursiveVisitor$1","deferred","block","blockItems","trigger","newNode","Message","placeholderToMessage","serializeMessage","filePath","startLine","startCol","endLine","endCol","Text$2","Container","Icu","expressionPlaceholder","TagPlaceholder","Placeholder","IcuPlaceholder","BlockPlaceholder","CloneVisitor","n","RecurseVisitor","messageNodes","LocalizeMessageStringVisitor","Serializer","createNameMapper","SimplePlaceholderMapper","mapName","internalToPublic","publicToNextId","publicToInternal","toPublicName","internalName","hasOwnProperty","toInternalName","publicName","visitPlaceholderName","nextId","_Visitor$2","visitTag","strAttrs","_serializeAttributes","strChildren","visitDeclaration","decl","visitDoctype","doctype","rootTag","dtd","serialize","Declaration","unescapedAttrs","escapeXml","Doctype","Tag","Text$1","unescapedValue","CR","ws","_ESCAPED_CHARS","_MESSAGES_TAG","_MESSAGE_TAG","_PLACEHOLDER_TAG$3","_EXAMPLE_TAG","_SOURCE_TAG$2","_DOCTYPE","Xmb","write","messages","locale","exampleVisitor","ExampleVisitor","_Visitor$1","rootNode","sourceTags","version","encoding","addDefaultExamples","load","digest","startTagAsText","startEx","startTagPh","closeTagAsText","closeEx","closeTagPh","interpolationAsText","exTag","startAsText","closeAsText","icuExpression","icuType","icuCases","icuAsText","exText","CLOSURE_TRANSLATION_VAR_PREFIX","TRANSLATION_VAR_PREFIX$1","I18N_ATTR","I18N_ATTR_PREFIX","I18N_ICU_VAR_PREFIX","I18N_ICU_MAPPING_PREFIX$1","I18N_PLACEHOLDER_SYMBOL","isI18nAttribute","startsWith","isI18nRootNode","isSingleI18nIcu","hasI18nMeta","hasI18nAttrs","some","icuFromI18nMessage","wrapI18nPlaceholder","contextId","blockId","assembleI18nBoundString","strings","bindingStartIndex","acc","lastIdx","getSeqNumberGenerator","startsAt","placeholdersToParams","updatePlaceholderMap","assembleBoundTextPlaceholders","startIdx","find","idx","formatI18nPlaceholderNamesInMap","useCamelCase","_params","formatI18nPlaceholderName","chunks","postfix","shift","getTranslationConstPrefix","extra","declareI18nVariable","UNSAFE_OBJECT_KEY_NAME_REGEXP","TEMPORARY_NAME","CONTEXT_NAME","RENDER_FLAGS","REFERENCE_PREFIX","IMPLICIT_REFERENCE","NON_BINDABLE_ATTR","RESTORED_VIEW_CONTEXT_NAME","DIRECT_CONTEXT_REFERENCE","MAX_CHAIN_LENGTH","CHAINABLE_INSTRUCTIONS","Set","invokeInstruction","temporaryAllocator","invalid","asLiteral","conditionallyCreateDirectiveBindingLiteral","forInputs","getOwnPropertyNames","declaredName","minifiedName","expressionValue","classPropertyName","bindingPropertyName","differentDeclaringName","hasDecoratorInputTransform","transformFunction","isSignal","bitwiseOrInputFlagsExpr","SignalBased","HasDecoratorInputTransform","flagsExpr","getInputFlagExpr","flag","trimTrailingNulls","getQueryPredicate","query","constantPool","predicate","DefinitionMap","existing","toLiteralMap","createCssSelectorFromNode","getAttrsForDirectiveMatching","elementNameNoNs","nameNoNs","elOrTpl","attributesMap","o","getInterpolationArgsLength","interpolation","getInstructionStatements","instructions","pendingExpression","pendingExpressionType","chainLength","resolvedParams","paramsOrFn","compileInjectable","resolveForwardRefs","factoryMeta","useClass","useClassOnSelf","delegateToFactory","useFactory","useValue","useExisting","injectableProps","providedIn","createInjectableType","useType","unwrapForwardRefs","createFactoryFunction","unwrappedType","UNUSABLE_INTERPOLATION_REGEXPS","assertInterpolationSymbols","identifier","regexp","InterpolationConfig","fromArray","markers","DEFAULT_INTERPOLATION_CONFIG","DEFAULT_CONTAINER_BLOCKS","$EOF","$BSPACE","$TAB","$LF","$VTAB","$FF","$CR","$SPACE","$BANG","$DQ","$HASH","$$","$PERCENT","$AMPERSAND","$SQ","$LPAREN","$RPAREN","$STAR","$PLUS","$COMMA","$MINUS","$PERIOD","$SLASH","$COLON","$SEMICOLON","$LT","$EQ","$GT","$QUESTION","$0","$7","$9","$A","$E","$F","$X","$Z","$LBRACKET","$BACKSLASH","$RBRACKET","$CARET","$_","$a","$b","$e","$f","$n","$r","$t","$u","$v","$x","$z","$LBRACE","$BAR","$RBRACE","$NBSP","$PIPE","$TILDA","$AT","$BT","isWhitespace","code","isDigit","isAsciiLetter","isAsciiHexDigit","isNewLine","isOctalDigit","isQuote","ParseLocation","offset","moveBy","delta","ch","priorLine","lastIndexOf","fromCharCode","getContext","maxChars","maxLines","startOffset","endOffset","ctxChars","ctxLines","before","after","ParseSourceFile","ParseSourceSpan","fullStart","details","ParseErrorLevel","ParseError","level","ERROR","contextualMessage","r3JitTypeSourceSpan","kind","typeName","sourceFileName","sourceFile","_anonymousTypeIndex","identifierName","compileIdentifier","sanitizeIdentifier","makeTemplateObjectPolyfill","AbstractJsEmitterVisitor","_visitParams","isObjectLiteral","policy","getPolicy","trustedTypes","createPolicy","createScript","trustedScriptFromString","script","newTrustedFunctionForJIT","fnArgs","fnBody","bind","JitEvaluator","evaluateStatements","refResolver","createSourceMaps","converter","JitEmitterVisitor","isUseStrictStatement","createReturnStmt","evaluateCode","getArgs","createSourceMap","fnArgNames","fnArgValues","argName","emptyFn","headerLines","executeFunction","_evalArgNames","_evalArgValues","_evalExportedVars","resultVar","_emitReferenceToExternal","resolveExternalReference","Exported","statement","compileInjector","definitionMap","providers","imports","createInjectorType","R3JitReflector","R3SelectorScopeMode","R3NgModuleMetadataKind","compileNgModule","Global","bootstrap","containsForwardDecls","selectorScopeMode","Inline","declarations","exports","SideEffect","setNgModuleScopeCall","generateSetNgModuleScopeCall","schemas","createNgModuleType","compileNgModuleDeclarationExpression","Local","moduleType","includeImportTypes","publicDeclarationTypes","tupleTypeOf","tupleOfTypes","scopeMap","declarationsExpression","importsExpression","exportsExpression","bootstrapExpression","fnCall","guardedCall","iife","iifeCall","types","typeofTypes","compilePipeFromMetadata","metadata","definitionMapValues","pipeName","isStandalone","createPipeType","R3TemplateDependencyKind","ParserError","errLocation","ctxLocation","ParseSpan","toAbsolute","absoluteOffset","AbsoluteSourceSpan","AST","ASTWithName","EmptyExpr$1","ImplicitReceiver","visitImplicitReceiver","ThisReceiver","visitThisReceiver","Chain","visitChain","Conditional","trueExp","falseExp","visitConditional","PropertyRead","visitPropertyRead","PropertyWrite","visitPropertyWrite","SafePropertyRead","visitSafePropertyRead","KeyedRead","visitKeyedRead","SafeKeyedRead","visitSafeKeyedRead","KeyedWrite","visitKeyedWrite","BindingPipe","visitPipe","LiteralPrimitive","visitLiteralPrimitive","LiteralArray","visitLiteralArray","LiteralMap","visitLiteralMap","Interpolation$1","visitInterpolation","Binary","operation","left","right","visitBinary","Unary","createMinus","createPlus","binaryOp","binaryLeft","binaryRight","visitUnary","PrefixNot","visitPrefixNot","NonNullAssert","visitNonNullAssert","Call","argumentSpan","visitCall","SafeCall","visitSafeCall","ASTWithSource","location","errors","visitASTWithSource","VariableBinding","ExpressionBinding","asts","AstTransformer","AstMemoryEfficientTransformer","obj","modified","ParsedProperty","isLiteral","ParsedPropertyType","LITERAL_ATTR","isAnimation","ANIMATION","ParsedEvent","ParsedVariable","BoundElementProperty","EventHandlerVars","convertActionBinding","localResolver","implicitReceiver","action","bindingId","baseSourceSpan","implicitReceiverAccesses","globals","DefaultLocalResolver","actionWithoutBuiltins","convertPropertyBindingBuiltins","createLiteralArrayConverter","argCount","createLiteralMapConverter","createPipeConverter","_AstToIrVisitor","actionStmts","flattenStatements","_Mode","prependTemporaryDecls","temporaryCount","usesImplicitReceiver","notifyImplicitReceiverUse","lastStatement","converterFactory","convertBuiltins","ConvertPropertyBindingResult","currValExpr","convertPropertyBinding","expressionWithoutBuiltins","outputExpr","getStatementsFromVisitor","convertPureComponentScopeFunction","converted","convertUpdateArguments","contextVariableExpression","expressionWithArgumentsToExtract","temporaryDeclaration","_BuiltinAstConverter","temporaryName","temporaryNumber","unshift","ensureStatementMode","mode","ensureExpressionMode","convertToStatementIfNeeded","_converterFactory","BuiltinFunctionCall","_localResolver","_implicitReceiver","supportsInterpolation","_nodeMap","_resultMap","_currentTemporary","op","_visit","convertSourceSpan","convertNullishCoalesce","InterpolationExpression","leftMostSafe","leftMostSafeNode","convertSafeAccess","maybeRestoreView","_getLocal","getLocal","prevUsesImplicitReceiver","addImplicitReceiverAccess","varExpr","localExpr","convertedArgs","call","temporary","needsTemporaryInSafeAccess","allocateTemporary","access","delete","releaseTemporary","visitSome","tempNumber","Math","max","add","output","unsupported","_SECURITY_SCHEMA","SECURITY_SCHEMA","registerContext","HTML","STYLE","URL","RESOURCE_URL","specs","spec","IFRAME_SECURITY_SENSITIVE_ATTRS","isIframeSecuritySensitiveAttr","attrName","animationKeywords","ShadowCss","_animationDeclarationKeyframesRe","shimCssText","cssText","hostSelector","comments","_commentRe","_commentWithHashRe","newLinesMatches","_newLinesRe","COMMENT_PLACEHOLDER","_insertDirectives","scopedCssText","_scopeCssText","commentIdx","_commentWithHashPlaceHolderRe","_insertPolyfillDirectivesInCssText","_insertPolyfillRulesInCssText","_scopeKeyframesRelatedCss","scopeSelector","unscopedKeyframesSet","scopedKeyframesCssText","processRules","rule","_scopeLocalKeyframeDeclarations","_scopeAnimationRule","quote","keyframeName","endSpaces","unescapeQuotes","_scopeAnimationKeyframe","keyframe","spaces1","spaces2","animationDeclarations","leadingSpaces","quotedName","nonQuotedName","_match","commaSeparatedKeyframes","_cssContentNextSelectorRe","_cssContentRuleRe","unscopedRules","_extractUnscopedRulesFromCssText","_insertPolyfillHostInCssText","_convertColonHost","_convertColonHostContext","_convertShadowDOMSelectors","_scopeSelectors","_cssContentUnscopedRuleRe","_cssColonHostRe","hostSelectors","otherSelectors","convertedSelectors","hostSelectorArray","convertedSelector","_polyfillHostNoCombinator","_polyfillHost","_cssColonHostContextReGlobal","selectorText","contextSelectorGroups","_cssColonHostContextRe","newContextSelectors","contextSelectorGroupsLength","repeatGroups","contextSelectors","combineHostContextSelectors","_shadowDOMSelectorsRe","pattern","_scopeSelector","_stripScopingSelectors","CssRule","_shadowDeepSelectors","_polyfillHostNoCombinatorRe","deepParts","shallowPart","otherParts","applyScope","_selectorNeedsScoping","_applySelectorScope","re","_makeScopeMatcher","lre","rre","_selectorReSuffix","_applySimpleSelectorScope","_polyfillHostRe","replaceBy","hnc","colon","isRe","_scopeSelectorPart","scopedP","matches","safeContent","SafeSelector","scopedSelector","startIndex","sep","hasHost","shouldScope","scopedPart","restore","_colonHostContextRe","_polyfillHostContext","_colonHostRe","_escapeRegexMatches","keep","_content","pseudo","_ph","_parenSuffix","BLOCK_PLACEHOLDER","_ruleRe","CONTENT_PAIRS","COMMA_IN_PLACEHOLDER","SEMI_IN_PLACEHOLDER","COLON_IN_PLACEHOLDER","_cssCommaInPlaceholderReGlobal","_cssSemiInPlaceholderReGlobal","_cssColonInPlaceholderReGlobal","ruleCallback","escaped","escapeInStrings","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedResult","escapedString","suffix","contentPrefix","blocks","unescapeInStrings","StringWithEscapedBlocks","charPairs","resultParts","escapedBlocks","openCharCount","nonBlockStartIndex","blockStartIndex","openChar","closeChar","ESCAPE_IN_STRING_MAP","currentQuoteChar","substr","isQuoted","hostMarker","otherSelectorsHasHost","combined","contextSelector","previousSelectors","groups","multiples","OpKind","ExpressionKind","VariableFlags","SemanticVariableKind","CompatibilityMode","DeferSecondaryKind","BindingKind","I18nParamResolutionTime","I18nExpressionFor","I18nParamValueFlags","Namespace","DeferTriggerKind","I18nContextKind","TemplateKind","ConsumesSlot","Symbol","DependsOnSlotContext","ConsumesVarsTrait","UsesVarOffset","TRAIT_CONSUMES_SLOT","numSlotsUsed","TRAIT_DEPENDS_ON_SLOT_CONTEXT","TRAIT_CONSUMES_VARS","TRAIT_USES_VAR_OFFSET","varOffset","hasConsumesSlotTrait","hasDependsOnSlotContextTrait","hasConsumesVarsTrait","hasUsesVarOffsetTrait","createStatementOp","NEW_OP","createVariableOp","xref","initializer","debugListId","prev","next","createInterpolateTextOp","InterpolateText","Interpolation","i18nPlaceholders","createBindingOp","isTextAttribute","isStructuralTemplateAttribute","templateKind","i18nMessage","Binding","bindingKind","i18nContext","createPropertyOp","isAnimationTrigger","Property","sanitizer","createStylePropOp","StyleProp","createClassPropOp","ClassProp","createStyleMapOp","StyleMap","createClassMapOp","ClassMap","createAttributeOp","namespace","Attribute","createAdvanceOp","Advance","createConditionalOp","targetSlot","conditions","processed","contextValue","createRepeaterOp","collection","Repeater","createDeferWhenOp","prefetch","DeferWhen","createI18nExpressionOp","i18nOwner","handle","icuPlaceholder","i18nPlaceholder","resolutionTime","I18nExpression","createI18nApplyOp","owner","I18nApply","_a","_b","_c","_d","_e","_f","isIrExpression","ExpressionBase","LexicalReadExpr","LexicalRead","transformInternalExpressions","ReferenceExpr","ContextExpr","Context","TrackContextExpr","TrackContext","NextContextExpr","NextContext","steps","GetCurrentViewExpr","GetCurrentView","RestoreViewExpr","RestoreView","transform","transformExpressionsInExpression","ResetViewExpr","ResetView","ReadVariableExpr","ReadVariable","PureFunctionExpr","VisitorContextFlag","InChildOperation","PureFunctionParameterExpr","PipeBindingExpr","PipeBinding","PipeBindingVariadicExpr","numArgs","PipeBindingVariadic","SafePropertyReadExpr","SafeKeyedReadExpr","SafeInvokeFunctionExpr","SafeInvokeFunction","SafeTernaryExpr","EmptyExpr","arguments","AssignTemporaryExpr","ReadTemporaryExpr","SlotLiteralExpr","slot","ConditionalCaseExpr","alias","ConditionalCase","ConstCollectedExpr","ConstCollected","visitExpressionsInOp","transformExpressionsInOp","transformExpressionsInInterpolation","HostProperty","transformExpressionsInStatement","Listener","innerOp","handlerOps","ExtractedAttribute","trustedValueFn","RepeaterCreate","track","trackByFn","Defer","loadingConfig","placeholderConfig","resolverFn","I18nMessage","postprocessingParams","ContainerEnd","ContainerStart","DeferOn","DisableBindings","Element","ElementEnd","ElementStart","EnableBindings","I18n","I18nContext","I18nEnd","I18nStart","IcuEnd","IcuStart","Projection","ProjectionDef","Text","I18nAttributes","caseStatement","isStringLiteral","OpList","nextListId","ListEnd","tail","assertIsNotEnd","assertIsUnowned","oldLast","prepend","ops","first","iterator","assertIsOwned","reversed","oldOp","newOp","replaceWithMany","newOps","remove","listId","oldPrev","oldNext","last","insertBefore","insertAfter","byList","SlotHandle","elementContainerOpKinds","isElementOrContainerOp","createElementStartOp","wholeSourceSpan","localRefs","nonBindable","createTemplateOp","functionNameSuffix","decls","createRepeaterCreateOp","primaryView","emptyView","varNames","emptyTag","emptyI18nPlaceholder","emptyAttributes","usesComponentInstance","createElementEndOp","createDisableBindingsOp","createEnableBindingsOp","createTextOp","initialValue","createListenerOp","animationPhase","eventTarget","hostListener","handlerList","handlerFnName","consumesDollarEvent","isAnimationListener","createPipeOp","createNamespaceOp","active","createProjectionDefOp","createProjectionOp","projectionSlotIndex","createExtractedAttributeOp","createDeferOp","main","mainSlot","mainView","loadingView","loadingSlot","loadingMinimumTime","loadingAfterTime","placeholderView","placeholderSlot","placeholderMinimumTime","errorView","errorSlot","createDeferOnOp","createI18nMessageOp","i18nBlock","messagePlaceholder","needsPostprocessing","subMessages","createI18nStartOp","root","messageIndex","subTemplateIndex","createI18nEndOp","createIcuStartOp","createIcuEndOp","createIcuPlaceholderOp","expressionPlaceholders","createI18nContextOp","contextKind","Attr","createI18nAttributesOp","i18nAttributesConfig","literalOrArrayLiteral$1","createHostPropertyOp","CTX_REF","CompilationJobKind","CompilationJob","componentName","pool","compatibility","Both","nextXrefId","allocateXrefId","ComponentCompilationJob","relativeContextFilePath","i18nUseExternalIds","deferBlocksMeta","Tmpl","fnSuffix","views","contentSelectors","consts","constsInitializers","ViewCompilationUnit","allocateView","parent","units","addConst","newConst","initializers","CompilationUnit","create","update","fnName","listenerOp","job","aliases","HostBindingCompilationJob","Host","HostBindingCompilationUnit","deleteAnyCasts","removeAnys","applyI18nExpressions","i18nContexts","needsApplication","assignI18nSlotDependencies","updateOp","i18nExpressionsInProgress","state","createOp","blockXref","lastSlotConsumer","I18nText","opToRemove","createOpXrefMap","extractAttributes","extractAttributeOp","lookupElement$2","TemplateDefinitionBuilder","extractedAttributeOp","NONE","extractable","ownerOp","lookupElement$1","specializeBindings","Animation","ClassName","StyleProperty","CHAINABLE","chain","chainOperationsInList","opList","instruction","collapseSingletonInterpolations","eligibleOpKind","generateConditionalExpressions","defaultCase","findIndex","cond","splice","tmp","conditionalCase","useTmp","caseExpressionTemporaryXref","BINARY_OPERATORS","namespaceForKey","namespacePrefixKey","NAMESPACES","SVG","keyForNamespace","prefixWithNamespace","strippedTag","literalOrArrayLiteral","collectElementConsts","allElementAttributes","ElementAttributes","attrArray","serializeAttributes","getConstIndex","FLYWEIGHT_ARRAY","byKind","styles","bindings","known","projectAs","isKnown","nameToValue","allowDuplicates","array","arrayFor","getAttributeNameLiterals$1","nameLiteral","parsedR3Selector","convertI18nBindings","i18nAttributesByElem","i18nAttributesForElem","Creation","I18nAttribute","createDeferDepsFns","dependencies","isDeferrable","innerFn","symbolName","importPath","depsFnExpr","createI18nContexts","attrContextByMessage","blockContextByI18nBlock","contextOp","RootI18n","rootContext","currentI18nOp","deduplicateTextBindings","seen","seenForElement","configureDeferInstructions","resolveDeferTargetNames","scopes","getScopeForView","scope","Scope$1","targets","resolveTrigger","deferOwnerView","Idle","Immediate","Timer","Hover","Interaction","Viewport","targetName","placeholderOp","targetXref","targetView","targetSlotViewSteps","step","defers","deferOp","REPLACEMENTS","IGNORED_OP_KINDS","collapseEmptyInstructions","opReplacements","startKind","mergedKind","prevOp","expandSafeReads","safeTransform","ternaryTransform","requiresTemporary","temporariesIn","temporaries","eliminateTemporaryAssignments","tmps","read","safeTernaryWithTemporary","isSafeAccessExpression","isUnsafeAccessExpression","isAccessExpression","deepestSafeTernary","st","dst","ESCAPE$1","ELEMENT_MARKER","TEMPLATE_MARKER","TAG_CLOSE_MARKER","CONTEXT_MARKER","LIST_START_MARKER","LIST_END_MARKER","LIST_DELIMITER","extractI18nMessages","i18nMessagesByContext","i18nBlocks","i18nMessageOp","createI18nMessage","currentIcu","icuContext","rootI18nBlock","rootMessage","subMessage","formatIcuPlaceholder","formattedParams","formatParams","formattedPostprocessingParams","v","formatValue","flatMap","placeholderValues","serializedValues","formatParamValues","ElementTag","TemplateTag","elementValue","templateValue","OpenTag","CloseTag","tagMarker","closeMarker","generateAdvance","slotMap","slotContext","generateProjectionDefs","share","defExpr","generateVariables","recursivelyProcessView","parentScope","generateVariablesInScopeForView","preambleOps","viewContextVariable","Identifier","targetId","scopeView","AlwaysInline","collectConstExpressions","STYLE_DOT","CLASS_DOT","STYLE_BANG","CLASS_BANG","BANG_IMPORTANT","parseHostStyleProperties","endsWith","isCssCustomProperty$1","hyphenate$1","parseProperty$1","overrideIndex","unitIndex","mapEntry","mapLiteral","IcuSerializerVisitor","formatPh","serializer","serializeIcuNode","TokenType","KEYWORDS","Lexer","tokenize","scanner","_Scanner","tokens","scanToken","Token","numValue","strValue","isCharacter","Character","isNumber","isString","isOperator","Operator","isIdentifier","isPrivateIdentifier","PrivateIdentifier","isKeyword","Keyword","isKeywordLet","isKeywordAs","isKeywordNull","isKeywordUndefined","isKeywordTrue","isKeywordFalse","isKeywordThis","isError","toNumber","newCharacterToken","newIdentifierToken","newPrivateIdentifierToken","newKeywordToken","newOperatorToken","newStringToken","newNumberToken","newErrorToken","EOF","peek","isIdentifierStart","scanIdentifier","scanNumber","scanCharacter","scanString","scanPrivateIdentifier","scanOperator","scanQuestion","scanComplexOperator","one","twoCode","two","threeCode","three","isIdentifierPart","simple","hasSeparators","isExponentStart","isExponentSign","parseIntAutoRadix","parseFloat","marker","unescapedCode","hex","parseInt","unescape","position","isNaN","SplitInterpolation","offsets","TemplateBindingParseResult","templateBindings","warnings","Parser$1","_lexer","parseAction","isAssignmentEvent","interpolationConfig","_checkNoInterpolation","sourceToLex","_stripComments","_ParseAST","parseChain","parseBinding","_parseBindingAst","checkSimpleExpression","checker","SimpleExpressionChecker","parseSimpleBinding","_reportError","parseTemplateBindings","templateKey","templateUrl","absoluteKeyOffset","absoluteValueOffset","parser","parseInterpolation","interpolatedTokens","splitInterpolation","expressionNodes","expressionText","createInterpolationAst","parseInterpolationExpression","inputToTemplateIndexMap","getIndexMapForOriginalTemplate","atInterpolation","extendLastString","interpStart","interpEnd","exprStart","exprEnd","_getInterpolationEndIndex","fullEnd","startInOriginalTemplate","piece","wrapLiteralPrimitive","_commentStart","outerQuote","nextChar","endIndex","charIndex","_forEachUnquotedChar","expressionEnd","currentQuote","escapeCount","ParseContextFlags","parseFlags","rparensExpected","rbracketsExpected","rbracesExpected","sourceSpanCache","atEOF","inputIndex","currentEndIndex","curToken","currentAbsoluteOffset","artificialEndIndex","serial","withContext","cb","ret","consumeOptionalCharacter","peekKeywordLet","peekKeywordAs","expectCharacter","consumeOptionalOperator","expectOperator","prettyPrintToken","tok","expectIdentifierOrKeyword","_reportErrorForPrivateIdentifier","expectIdentifierOrKeywordOrString","parsePipe","errorIndex","artificialStart","artificialEnd","parseExpression","nameStart","nameId","fullSpanEnd","parseConditional","parseLogicalOr","yes","no","parseLogicalAnd","parseNullishCoalescing","parseEquality","parseRelational","parseAdditive","parseMultiplicative","parsePrefix","parseCallChain","parsePrimary","parseAccessMember","parseCall","parseKeyedReadOrWrite","parseExpressionList","parseLiteralMap","literalValue","terminator","keyStart","readReceiver","isSafe","Writable","consumeOptionalAssignment","argumentStart","parseCallArguments","positionals","expectTemplateBindingKey","operatorFound","parseDirectiveKeywordBindings","letBinding","parseLetBinding","binding","parseAsBinding","consumeStatementTerminator","getDirectiveBoundTarget","spanEnd","asBinding","spanStart","locationText","skip","extraMessage","errorMessage","offsetMap","consumedInOriginalTemplate","consumedInInput","tokenIndex","currentToken","decoded","lengthOfParts","sum","NodeWithI18n","Expansion","switchValue","switchValueSourceSpan","visitExpansion","ExpansionCase","valueSourceSpan","expSourceSpan","visitExpansionCase","valueTokens","visitAttribute","Comment","visitComment","Block","visitBlock","BlockParameter","visitBlockParameter","astResult","RecursiveVisitor","visitChildren","prototype","apply","ElementSchemaRegistry","BOOLEAN","NUMBER","STRING","OBJECT","SCHEMA","_ATTR_TO_PROP","_PROP_TO_ATTR","inverted","propertyName","attributeName","DomElementSchemaRegistry","_schema","_eventSchema","encodedType","events","strType","strProperties","properties","typeNames","superName","superType","superEvent","hasProperty","propName","schemaMetas","schema","elementProperties","hasElement","isAttribute","getMappedPropName","getDefaultComponentElementName","validateProperty","validateAttribute","allKnownElementNames","allKnownAttributesOfElement","allKnownEventsOfElement","normalizeAnimationStyleProperty","normalizeAnimationStyleValue","camelCaseProp","userProvidedProp","strVal","errorMsg","_isPixelDimensionStyle","valAndSuffixMatch","HtmlTagDefinition","closedByChildren","implicitNamespacePrefix","contentType","PARSABLE_DATA","closedByParent","ignoreFirstLf","preventNamespaceInheritance","canSelfClose","isClosedByChild","getContentType","overrideType","default","DEFAULT_TAG_DEFINITION","TAG_DEFINITIONS","getHtmlTagDefinition","assign","RAW_TEXT","ESCAPABLE_RAW_TEXT","svg","knownTagName","TAG_TO_PLACEHOLDER_NAMES","PlaceholderRegistry","_placeHolderNameCounts","_signatureToName","getStartTagPlaceholderName","signature","_hashTag","upperTag","baseName","_generateUniqueName","getCloseTagPlaceholderName","_hashClosingTag","getPlaceholderName","upperName","getUniquePlaceholder","getStartBlockPlaceholderName","_hashBlock","_toSnakeCase","getCloseBlockPlaceholderName","_hashClosingBlock","sort","_expParser","createI18nMessageFactory","containerBlocks","_I18nVisitor","visitNodeFn","toI18nMessage","noopVisitNodeFn","_html","_expressionParser","_interpolationConfig","_containerBlocks","isIcu","icuDepth","placeholderRegistry","placeholderToContent","i18nodes","startPhName","closePhName","_visitTextWithInterpolation","i18nIcuCases","i18nIcu","caze","expPh","phName","_icuCase","_context","_parameter","previousI18n","hasInterpolation","extractPlaceholderName","previous","reusePreviousSourceSpans","assertSingleContainerMessage","assertEquivalentNodes","previousNodes","_CUSTOM_PH_EXP","I18nError","NAMED_ENTITIES","NGSP_UNICODE","TokenError","tokenType","TokenizeResult","nonNormalizedIcuExpressions","getTagDefinition","options","tokenizer","_Tokenizer","mergeTextTokens","_CR_OR_CRLF_REGEXP","_unexpectedCharacterErrorMsg","charCode","_unknownEntityErrorMsg","entitySrc","_unparsableEntityErrorMsg","entityStr","CharacterReferenceType","_ControlFlowError","_file","_getTagDefinition","_currentTokenStart","_currentTokenType","_expansionCaseStack","_inInterpolation","_tokenizeIcu","tokenizeExpansionForms","_leadingTriviaCodePoints","leadingTriviaChars","codePointAt","endPos","startPos","_cursor","EscapedCharacterCursor","PlainCharacterCursor","_preserveLineEndings","preserveLineEndings","_i18nNormalizeLineEndingsInICUs","i18nNormalizeLineEndingsInICUs","_tokenizeBlocks","tokenizeBlocks","init","handleError","_processCarriageReturns","_attemptCharCode","_consumeCdata","_consumeComment","_consumeDocType","_consumeTagClose","_consumeTagOpen","_consumeBlockStart","_isInExpansionCase","_isInExpansionForm","_consumeBlockEnd","_tokenizeExpansionForm","_consumeWithInterpolation","_isTextEnd","_isTagStart","_beginToken","_endToken","_getBlockName","spacesInNameAllowed","nameCursor","_attemptCharCodeUntilFn","isBlockNameChar","getChars","startToken","_consumeBlockParameters","isNotWhitespace","isBlockParameterChar","inQuote","openParens","isExpansionFormStart","_consumeExpansionFormStart","isExpansionCaseStart","_consumeExpansionCaseStart","_consumeExpansionCaseEnd","_consumeExpansionFormEnd","getSpan","_createError","CursorError","cursor","_attemptCharCodeCaseInsensitive","compareCharCodeCaseInsensitive","_requireCharCode","_attemptStr","chars","charsLeft","initialPosition","_attemptStrCaseInsensitive","_requireStr","_requireCharCodeUntilFn","diff","_attemptUntilChar","_readChar","fromCodePoint","_consumeEntity","textTokenType","isHex","codeStart","isDigitEntityEnd","entityType","HEX","DEC","strNum","isNamedEntityEnd","_consumeRawText","consumeEntities","endMarkerPredicate","tagCloseStart","foundEndMarker","contentStart","_consumePrefixAndName","nameOrPrefixStart","isPrefixEnd","isNameEnd","openTagToken","_consumeTagOpenStart","_consumeAttributeName","_consumeAttributeValue","_consumeTagOpenEnd","contentTokenType","_consumeRawTextWithTagClose","attrNameStart","prefixAndName","quoteChar","_consumeQuote","endPredicate","_readUntil","normalizedCondition","conditionToken","interpolationTokenType","endInterpolation","_consumeInterpolation","interpolationStart","prematureEndPredicate","expressionStart","inComment","_getProcessedChars","_isInExpansion","isInterpolation","code1","code2","toUpperCaseCharCode","srcTokens","dstTokens","lastDstToken","fileOrCursor","advanceState","updatePeek","leadingTriviaCodePoints","startLocation","locationFromCursor","endLocation","fullStartLocation","pos","currentChar","internalState","processEscapeSequence","digitStart","decodeHexDigits","octal","TreeError","ParseTreeResult","rootNodes","Parser","tokenizeResult","_TreeBuilder","build","_index","_containerStack","_advance","_peek","_consumeStartTag","_consumeEndTag","_closeVoidElement","_consumeText","_consumeExpansion","_consumeBlockOpen","_consumeBlockClose","_consumeIncompleteBlock","leftoverContainer","_advanceIf","_startToken","endToken","_addToParent","expCase","_parseExpansionCase","_collectExpansionExpTokens","expansionCaseParser","expansionFormStack","lastOnStack","startSpan","_getContainer","decodeEntity","endSpan","startTagToken","_consumeAttr","_getElementFullName","_getClosestParentElement","selfClosing","tagDef","parentEl","_pushContainer","_popContainer","endTagToken","errMsg","expectedName","expectedType","unexpectedCloseTagDetected","stackIndex","attrEnd","valueStartSpan","valueEnd","nextTokenType","valueToken","quoteToken","paramToken","parentElement","parentTagName","parentTagDefinition","stack","entity","TRUSTED_TYPES_SINKS","isTrustedTypesSink","setI18nRefs","htmlNode","i18nNode","previousMessage","I18nMetaVisitor","keepI18nAttrs","enableI18nLegacyMessageIdFormat","_errors","_generateI18nMessage","_parseMetadata","_setMessageId","_setLegacyIds","visitAllWithErrors","attrsMeta","expansion","currentMessage","expansionCase","parameter","parseI18nMeta","I18N_MEANING_SEPARATOR","I18N_ID_SEPARATOR","idIndex","descIndex","meaningAndDesc","i18nMetaToJSDoc","GOOG_GET_MSG","createGoogleGetMsgStatements","variable$1","closureVar","serializeI18nMessageForGetMsg","original_code","googGetMsgStmt","i18nAssignmentStmt","GetMsgSerializerVisitor","serializerVisitor","createLocalizeStatements","placeHolders","serializeI18nMessageForLocalize","getSourceSpan","localizedString$1","variableInitialization","LocalizeSerializerVisitor","pieces","createPlaceholderPiece","processMessagePieces","startNode","endNode","createEmptyMessagePart","NG_I18N_CLOSURE_MODE$1","TRANSLATION_VAR_PREFIX","I18N_ICU_MAPPING_PREFIX","ESCAPE","collectI18nConsts","fileBasedI18nSuffix","extractedAttributesByI18nContext","i18nAttributesByElement","i18nExpressionsByElement","i18nValuesByContext","messageConstIndices","mainVar","collectMessage","i18nConst","attributesForMessage","elem","i18nExpressions","seenPropertyNames","i18nExpr","i18nAttributeConfig","i18nExprValue","msgIndex","messageOp","subMessagePlaceholders","subMessageId","subMessageVar","subMessageStatements","addSubMessageParams","i18nGenerateClosureVar","transformFn","fromEntries","extraTransformFnParams","getTranslationDeclStmts$1","paramsObject","createClosureModeGuard$1","messageId","useExternalIds","uniqueSuffix","convertI18nText","currentI18n","textNodeI18nBlocks","textNodeIcus","icuPlaceholderByText","icuPlaceholderOp","i18nOp","icuOp","Postproccessing","liftLocalRefs","serializeLocalRefs","constRefs","emitNamespaceChanges","activeNamespace","parenDepth","valueStart","propStart","currentProp","hyphenate","styleVal","nameFunctionsAndVariables","addNamesToView","animation","getVariableName","childView","normalizeStylePropName","stripImportant","compatPrefix","importantIndex","mergeNextContextExpressions","mergeNextContextsInOps","mergeSteps","tryToMerge","candidate","CONTAINER_TAG","generateNgContainerOps","updatedElementXrefs","lookupElement","disableBindings$1","generateNullishCoalesceExpressions","assignment","kindTest","kindWithInterpolationTest","CREATE_ORDERING","UPDATE_ORDERING","keepLast","UPDATE_HOST_ORDERING","handledOpKinds","orderOps","orderWithin","ordering","opsToOrder","firstTargetInGroup","currentTarget","reorder","groupIndex","group","parseExtractedStyles","Structural","parsedStyles","parsedClasses","parsedClass","removeContentSelectors","lookupInXrefMap","isSelectAttribute","createPipes","processPipeBindingsInView","slotHandle","addPipeToCreationBlock","afterTargetXref","createVariadicPipes","propagateI18nBlocks","propagateI18nBlocksToTemplates","propagateI18nBlocksForView","forView","wrapTemplateWithI18n","parentI18n","extractPureFunctions","constantDef","PureFunctionConstant","declName","keyExpr","fnParams","returnExpr","generatePureLiteralStructures","transformLiteralArray","transformLiteralMap","derivedEntries","nonConstantArgs","constIndex","localRefIndex","elementOrContainerBase","templateFnRef","handlerFn","eventTargetResolver","syntheticHost","namespaceMath","savedView","returnValue","selfSlot","primarySlot","dependencyResolverFn","enableTimerScheduling","deferTriggerToR3TriggerInstructionsMap","deferOn","instructionToCall","viewFnName","trackByUsesComponentInstance","emptyViewFnName","emptyDecls","emptyVars","emptyConstIndex","PIPE_BINDINGS","pipeBind","interpolationArgs","callVariadicInstruction","TEXT_INTERPOLATE_CONFIG","collateInterpolationArgs","extraArgs","PROPERTY_INTERPOLATE_CONFIG","attributeInterpolate","ATTRIBUTE_INTERPOLATE_CONFIG","stylePropInterpolate","STYLE_PROP_INTERPOLATE_CONFIG","styleMapInterpolate","STYLE_MAP_INTERPOLATE_CONFIG","classMapInterpolate","CLASS_MAP_INTERPOLATE_CONFIG","pureFunction","callVariadicInstructionExpr","PURE_FUNCTION_CONFIG","constant","mapping","config","baseArgs","GLOBAL_TARGET_RESOLVERS$1","reify","reifyCreateOperations","reifyUpdateOperations","ensureNoIrForDebug","reifyIrExpression","listenerFn","reifyListenerHandler","timerScheduling","repeaterView","_unit","handlerStmts","removeEmptyBindings","removeI18nContexts","removeUnusedI18nAttributesOps","ownersWithI18nExpressions","resolveContexts","processLexicalScope$1","resolveDollarEvent","transformDollarEvent","resolveI18nElementPlaceholders","resolvePlaceholdersForView","pendingStructuralDirective","currentOps","pendingStructuralDirectiveCloses","recordElementStart","startOp","recordElementClose","recordTemplateStart","recordTemplateClose","forSlot","emptySlot","structuralDirective","addParam","getSubTemplateIndexForTemplateTag","childOp","resolveI18nExpressionPlaceholders","subTemplateIndicies","icuPlaceholders","expressionIndices","referenceIndex","ExpressionIndex","updatePlaceholder","resolveNames","processLexicalScope","Alias","SavedView","sanitizerFns","SCRIPT","trustedValueFns","resolveSanitizers","getOnlySecurityContext","sanitizerFn","isIframe","isIframeElement$1","saveAndRestoreView","needsRestoreView","handlerOp","addSaveRestoreViewOperationToListener","allocateSlots","slotCount","specializeStyleBindings","generateTemporaryVariables","generateTemporaries","opCount","generatedStatements","finalReads","assigned","released","defs","assignName","names","generateTrackFns","usesComponentContext","optimizeTrackFns","isTrackByFunctionCall","rootView","arg0","arg1","generateTrackVariables","$index","$implicit","countVariables","varCount","varsUsedByOp","varsUsedByIrExpression","slots","isSingletonInterpolation","optimizeVariables","inlineAlwaysInlineVariables","optimizeVariablesInOpList","Fence","fencesForIrExpression","varOp","varDecls","varUsages","varRemoteUsages","opMap","collectOpInfo","countVariableUsages","contextIsUsed","opInfo","fences","ViewContextWrite","SideEffectful","stmtOp","uncountVariableUsages","ViewContextRead","toInline","varInfo","isAlwaysInline","targetOp","variablesUsed","allowConservativeInlining","tryInlineVariableInitializer","safeToInlinePastFences","varRemoteUsage","declFences","inlined","inliningAllowed","exprFences","wrapI18nIcus","addedI18nId","phases","emitTemplateFn","tpl","rootFn","emitView","emitChildViews","viewFn","createStatements","updateStatements","createCond","maybeGenerateRfBlock","updateCond","emitHostBindingFunction","compatibilityMode","domSchema","NG_TEMPLATE_TAG_NAME$1","ingestComponent","ingestNodes","ingestHostBinding","bindingParser","securityContexts","calcPossibleSecurityContexts","componentSelector","ingestHostProperty","ingestHostAttribute","ingestHostEvent","convertAst","attrBinding","eventBinding","makeListenerHandlerOps","ingestElement","ingestTemplate","ingestContent","ingestText","ingestBoundText","ingestIfBlock","ingestSwitchBlock","ingestDeferBlock","ingestIcu","ingestForBlock","namespaceKey","ingestElementBindings","ingestReferences","i18nBlockId","endOp","tmpl","tagNameWithoutNamespace","namespacePrefix","isPlainTemplate","NgTemplate","templateOp","ingestTemplateBindings","asMessage","textXref","ifBlock","firstXref","firstSlotHandle","ifCase","cView","ingestControlFlowInsertionPoint","ifCaseI18nMeta","caseExpr","conditionalCaseExpr","switchBlock","switchCase","switchCaseI18nMeta","ingestDeferView","i18nMeta","secondaryView","deferBlock","blockMeta","deferXref","deferOnOps","deferWhenOps","idle","deferOnOp","immediate","timer","hover","interaction","viewport","when","icuNode","forBlock","$count","indexName","countName","$first","$last","$even","$odd","emptyTagName","isThisReceiver","isImplicitReceiver","isSpecialNode","convertAstWithInterpolation","BINDING_KINDS","astOf","createTemplateBinding","isTextBinding","bindingType","handlerExprs","assertIsArray","USE_TEMPLATE_PIPELINE","IMPORTANT_FLAG","MIN_STYLING_BINDING_SLOTS_REQUIRED","StylingBuilder","_directiveExpr","_hasInitialValues","hasBindings","hasBindingsWithPipes","_classMapInput","_styleMapInput","_singleStyleInputs","_singleClassInputs","_lastStylingInput","_firstStylingInput","_stylesIndex","_classesIndex","_initialStyleValues","_initialClassValues","registerBoundInput","registerInputBasedOnName","registerStyleInput","registerClassInput","isStyle","isClass","isMapBased","isEmptyExpression","isCssCustomProperty","hasOverrideFlag","bindingSuffix","parseProperty","registerIntoMap","_checkForPipes","registerStyleAttr","registerClassAttr","populateInitialStylingAttrs","assignHostAttrs","buildClassMapInstruction","valueConverter","_buildMapBasedInstruction","buildStyleMapInstruction","isClassBased","stylingInput","totalBindingSlotsRequired","mapValue","getClassMapInterpolationExpression","getStyleMapInterpolationExpression","calls","allocateBindingSlots","convertFn","convertResult","_buildSingleInputs","getInterpolationExpressionFn","previousInstruction","referenceForCall","_buildClassInputs","_buildStyleInputs","getStylePropInterpolationExpression","buildUpdateLevelInstructions","styleMapInstruction","classMapInstruction","HtmlParser","PRESERVE_WS_ATTR_NAME","SKIP_WS_TRIM_TAGS","WS_CHARS","NO_WS_REGEXP","WS_REPLACE_REGEXP","hasPreserveWhitespacesAttr","replaceNgsp","WhitespaceVisitor","visitAllWithSiblings","isNotBlank","hasExpansionSibling","createWhitespaceProcessedTextToken","processWhitespace","removeWhitespaces","htmlAstWithErrors","PROPERTY_PARTS_SEPARATOR","ATTRIBUTE_PREFIX","CLASS_PREFIX","STYLE_PREFIX","TEMPLATE_ATTR_PREFIX$1","ANIMATE_PROP_PREFIX","BindingParser","_exprParser","_schemaRegistry","createBoundHostProperties","boundProps","parsePropertyBinding","createDirectiveHostEventAsts","hostListeners","targetEvents","parseEvent","sourceInfo","_reportExpressionParserErrors","parseInlineTemplateBinding","tplKey","tplValue","targetMatchableAttrs","targetProps","targetVars","isIvyAst","_parseTemplateBindings","bindingSpan","moveParseSourceSpan","srcSpan","_parsePropertyAst","parseLiteralAttr","bindingsResult","warning","WARNING","isAnimationLabel","_parseAnimation","isHost","isAnimationProp","parsePropertyInterpolation","DEFAULT","isHostBinding","createBoundElementProperty","elementSelector","boundProp","skipValidation","mapPropertyName","boundPropertyName","_validatePropertyOrAttributeName","nsSeparatorIdx","ns","mappedPropName","_parseAnimationEvent","_parseRegularEvent","eventName","_parseAction","isAttr","report","PipeCollector","pipes","registry","ctxs","elementNames","notElementNames","possibleElementNames","absoluteSpan","startDiff","endDiff","isStyleUrlResolvable","schemeMatch","URL_WITH_SCHEMA_REGEXP","NG_CONTENT_SELECT_ATTR$1","LINK_ELEMENT","LINK_STYLE_REL_ATTR","LINK_STYLE_HREF_ATTR","LINK_STYLE_REL_VALUE","STYLE_ELEMENT","SCRIPT_ELEMENT","NG_NON_BINDABLE_ATTR","NG_PROJECT_AS","preparseElement","selectAttr","hrefAttr","relAttr","lcAttrName","normalizeNgContentSelect","nodeName","PreparsedElementType","OTHER","NG_CONTENT","STYLESHEET","PreparsedElement","FOR_LOOP_EXPRESSION_PATTERN","FOR_LOOP_TRACK_PATTERN","CONDITIONAL_ALIAS_PATTERN","ELSE_IF_PATTERN","FOR_LOOP_LET_PATTERN","ALLOWED_FOR_LOOP_LET_VARIABLES","isConnectedForLoopBlock","isConnectedIfLoopBlock","createIfBlock","connectedBlocks","validateIfConnectedBlocks","mainBlockParams","parseConditionalBlockParameters","ifBlockStartSourceSpan","ifBlockEndSourceSpan","lastBranch","createForLoop","parseForLoopParameters","itemName","keywordSpan","createSwitchBlock","validateSwitchBlock","primaryExpression","parseBlockParameterToBinding","expressionParam","secondaryParams","stripOptionalParentheses","rawExpression","letMatch","parseLetParameter","trackMatch","variableName","emptySpanAfterForBlockStart","expressionParts","hasElse","hasDefault","aliasMatch","spaceRegex","TIME_PATTERN","SEPARATOR_PATTERN","COMMA_DELIMITED_SYNTAX","OnTriggerType","parseWhenTrigger","whenIndex","getPrefetchSpan","getTriggerParametersStart","parsed","trackTrigger","parseOnTrigger","onIndex","OnTriggerParser","unexpectedToken","isFollowedByOrLast","consumeTrigger","prevErrors","consumeParameters","min","triggerNameStartSpan","isFirstTrigger","prefetchSourceSpan","IDLE","createIdleTrigger","TIMER","createTimerTrigger","INTERACTION","createInteractionTrigger","IMMEDIATE","createImmediateTrigger","HOVER","createHoverTrigger","VIEWPORT","createViewportTrigger","commaDelimStack","tokenText","newStart","newEnd","allTriggers","parseDeferredTime","validateReferenceBasedTrigger","startPosition","hasFoundSeparator","time","PREFETCH_WHEN_PATTERN","PREFETCH_ON_PATTERN","MINIMUM_PARAMETER_PATTERN","AFTER_PARAMETER_PATTERN","WHEN_PARAMETER_PATTERN","ON_PARAMETER_PATTERN","isConnectedDeferLoopBlock","createDeferredBlock","parseConnectedBlocks","parsePrimaryTriggers","lastEndSourceSpan","endOfLastSourceSpan","lastConnectedBlock","sourceSpanWithConnectedBlocks","parsePlaceholderBlock","parseLoadingBlock","parseErrorBlock","parsedTime","BIND_NAME_REGEXP","KW_BIND_IDX","KW_LET_IDX","KW_REF_IDX","KW_ON_IDX","KW_BINDON_IDX","KW_AT_IDX","IDENT_KW_IDX","BINDING_DELIMS","BANANA_BOX","PROPERTY","EVENT","TEMPLATE_ATTR_PREFIX","htmlAstToRender3Ast","htmlNodes","transformer","HtmlAstToIvyAst","ivyNodes","allErrors","styleUrls","ngContentSelectors","collectCommentNodes","commentNodes","inI18nBlock","processedNodes","isI18nRootElement","reportError","preparsedElement","contents","textContents","isTemplateElement","parsedProperties","boundEvents","i18nAttrsMeta","templateParsedProperties","templateVariables","elementHasInlineTemplate","hasBinding","normalizedName","normalizeAttributeName","isTemplateBinding","parsedVariables","parseAttribute","NON_BINDABLE_VISITOR","flat","Infinity","parsedElement","isEmptyTextNode","isCommentNode","bound","hoistedAttrs","formattedKey","findConnectedBlocks","primaryBlockIndex","siblings","relatedBlocks","i18nPropsMeta","bep","matchableAttributes","createKeySpan","normalizationAdjustment","keySpanStart","keySpanEnd","bindParts","parseVariable","parseReference","addEvents","parseAssignmentEvent","delims","valueNoNgsp","NonBindableVisitor","TagType","setupRegistry","getUniqueId","icus","templateIndex","isEmitted","_unresolvedCtxCount","_registry","appendTag","closed","appendBlockPart","TEMPLATE","isRoot","isResolved","getSerializedPlaceholders","serializePlaceholderValue","appendBinding","appendIcu","appendBoundText","phs","appendTemplate","appendBlock","appendElement","ELEMENT","appendProjection","forkChildContext","reconcileChildContext","findTemplateFn","childPhs","tmplIdx","isCloseTag","isTemplateTag","wrap","symbol","wrapTag","data","NG_CONTENT_SELECT_ATTR","NG_PROJECT_AS_ATTR_NAME","EVENT_BINDING_SCOPE_GLOBALS","NG_TEMPLATE_TAG_NAME","GLOBAL_TARGET_RESOLVERS","LEADING_TRIVIA_CHARS","renderFlagCheckIfStmt","prepareEventListenerParameters","eventAst","handlerName","eventArgumentName","implicitReceiverExpr","bindingLevel","getOrCreateSharedContextVar","bindingStatements","variableDeclarations","restoreViewStatement","createComponentDefConsts","prepareStatements","constExpressions","i18nVarRefsCache","TemplateData","getConstCount","getVarCount","parentBindingScope","contextName","templateName","_namespace","deferBlocks","elementLocations","allDeferrableDepsFn","_constants","_dataIndex","_bindingContext","_prefixCode","_creationCodeFns","_updateCodeFns","_currentIndex","_tempVariables","_controlFlowTempVariable","_nestedTemplateFns","_pureFunctionSlots","_bindingSlots","_ngContentReservedSlots","_ngContentSelectorsOffset","_implicitReceiverExpr","_bindingScope","nestedScope","_valueConverter","ValueConverter","allocateDataSlot","numSlots","allocatePureFunctionSlots","creationInstruction","buildTemplateFunction","ngContentSelectorsOffset","variableAliases","registerContextVariables","initI18nContext","isSingleElementTemplate","selfClosingI18nInstruction","hasTextChildrenOnly","updatePipeSlotOffsets","buildTemplateFn","r3ReservedSlots","creationStatements","creationVariables","viewSnapshotStatements","updateVariables","creationBlock","updateBlock","i18nTranslate","_ref","i18nGenerateMainBlockVar","getTranslationDeclStmts","scopedName","freshReferenceName","retrievalLevel","isDirect","isListenerScope","relativeLevel","hasRestoreViewVariable","notifyRestoredViewContextUse","sharedCtxVar","getSharedContextName","generateNextContextExpr","i18nAppendBindings","i18nBindProps","props","label","i18nUpdateRef","icuMapping","addToConsts","updateInstructionWithAdvance","updateInstruction","i18nAttributesInstruction","nodeIndex","i18nAttrArgs","getNamespaceInstruction","addNamespaceInstruction","nsInstruction","interpolatedUpdateInstruction","elementIndex","getUpdateInstructionArguments","ngContent","projectionSlotIdx","nonContentSelectAttributes","getAttributeExpressions","stylingBuilder","isNonBindableMode","outputAttrs","isNgContainer$1","allOtherInputs","boundI18nAttrs","stylingInputWasSet","addAttrsToConsts","prepareRefsArray","wasInNamespace","currentNamespace","hasChildren","createSelfClosingInstruction","createSelfClosingI18nInstruction","outputAst","prepareListenerParameter","stylingInstructions","limit","processStylingUpdateInstruction","emptyValueBindInstruction","propertyBindings","attributeBindings","inputType","hasValue","getBindingFunctionParams","attrNamespace","isAttributeBinding","sanitizationRef","resolveSanitizationFn","isIframeElement","namespaceLiteral","getPropertyInterpolationExpression","getAttributeInterpolationExpression","boundValue","propertyBinding","attributeBinding","prepareEmbeddedTemplateFn","contextNameSuffix","templateFunctionExpr","createEmbeddedTemplateFn","attrsExprs","templatePropertyBindings","i18nInputs","getTextInterpolationExpression","initWasInvoked","formatted","branchData","branch","branchIndex","inferredData","inferProjectionDataFromInsertionPoint","processedExpression","containerIndex","paramsCallback","contextVariable","generateBranch","comparisonTarget","allocateControlFlowTempVariable","caseData","currentCase","blockExpression","generateCases","caseIndex","primaryTemplateIndex","loadingIndex","loadingConsts","placeholderIndex","placeholderConsts","deferredIndex","depsFnName","createDeferredDepsFunction","createDeferTriggerInstructions","dependencyExp","deferredDep","domNodeBasedTrigger","instructionRef","triggerEl","triggerElements","depth","blockIndex","primaryData","getLevelSpecificVariableName","trackByExpression","createTrackByFunction","emptyData","emptyAttrsExprs","emptyInferred","registerComputedLoopVariables","bindingScope","getLevelSpecificForLoopVariable","scopeName","optimizeTrackByFunction","indexLocalName","firstIsIndex","secondIsItem","optimizedFn","contextVars","TrackByBindingScope","getComponentAccessCount","fn$1","getConsts","getNgContentSelectors","bindingContext","instructionFn","fns","addAdvanceInstructionIfNecessary","originalSlots","getImplicitReceiverExpr","convertedPropertyBinding","valExpr","renderAttributes","alreadySeen","attrExprs","ngProjectAsAttr","i18nVarRef","getAttributeNameLiterals","trustedConstAttribute","getNgProjectAsLiteral","addAttrExpr","attrsLengthBeforeInputs","refsParam","nextContextStmt","refExpr","bindingFnName","allocateSlot","_pipeBindExprs","slotPseudoLocal","pureFunctionSlot","isVarLength","pipeBindingCallInfo","pipeBindExpr","bindingSlots","slotOffset","pipeBindingIdentifiers","pureFunctionIdentifiers","pureFunctionCallInfo","relativeLevelDiff","literal$1","startSlot","attributeNamespace","SHARED_CONTEXT_KEY","BindingScope","createRootScope","referenceNameIndex","restoreViewVariable","usesRestoredViewContext","declareLocalCallback","declare","priority","maybeGenerateSharedContextVar","getComponentProperty","hasLocal","localRef","newScope","generateSharedContextVar","bindingKey","sharedCtxObj","componentValue","restoreCall","currentContextLevel","levelDiff","currStmts","globalOverrides","componentAccessCount","parseTemplate","preserveWhitespaces","makeBindingParser","htmlParser","parseResult","enableBlockSyntax","alwaysAttemptHtmlToR3AstConversion","parsedTemplate","i18nMetaVisitor","i18nMetaResult","elementRegistry","isTextNode","deferredParams","eagerParams","NG_I18N_CLOSURE_MODE","createClosureModeGuard","ATTR_REGEX","COMPONENT_VARIABLE","HOST_ATTR","CONTENT_ATTR","baseDirectiveFields","queries","createContentQueriesFunction","viewQueries","createViewQueriesFunction","createHostBindingsFunction","typeSourceSpan","exportAs","addFeatures","features","viewProviders","inputKeys","hostDirectives","createHostDirectivesFeatureArg","usesInheritance","fullInheritance","lifecycle","usesOnChanges","compileDirectiveFromMetadata","createDirectiveType","compileComponentFromMetadata","firstSelector","selectorAttributes","templateTypeName","deferrableTypes","deferBlockDepsEmitMode","templateBuilder","templateFunctionExpression","constsExpr","templateFn","declarationListEmitMode","compileDeclarationList","rawImports","encapsulation","Emulated","styleValues","compileStyles","styleNodes","style","animations","changeDetection","Default","createComponentType","createBaseDirectiveTypeParams","stringArrayAsType","createHostDirectivesType","resolvedList","prepareQueryParams","toQueryFlags","descendants","static","emitDistinctChangesOnly","convertAttributesToExpressions","tempAllocator","getQueryList","refresh","updateDirective","contentQueriesFnName","stringAsType","stringMapAsLiteralExpression","mapValues","selectorForType","getInputsTypeExpression","q","required","queryDefinition","viewQueryFnName","hostBindingsMetadata","eventBindings","listeners","specialAttributes","styleAttr","classAttr","hostJob","getNextBindingId","styleBuilder","createInstructions","updateInstructions","hostBindingSourceSpan","createHostListeners","allOtherBindings","totalHostVarsCount","getValueConverter","hostVarsCountFn","originalVarsCount","syntheticHostBindings","bindingExpr","bindingFn","bindingName","getBindingNameAndInstruction","instructionParams","bindingParams","hostAttrs","convertStylingCall","hostBindingsFnName","implicit","getNextBindingIdFn","attrMatches","listenerParams","syntheticListenerParams","HOST_REG_EXP","parseHostBindings","verifyHostBindings","shadowCss","encapsulateStyle","hostMeta","directive","hasForwardRef","inputsLiteral","createHostDirectivesMappingArray","outputsLiteral","isForwardReference","R3TargetBinder","directiveMatcher","Scope","scopedNodeEntities","extractScopedNodeEntities","directives","eagerDirectives","DirectiveBinder","symbols","nestingLevel","usedPipes","eagerPipes","TemplateBinder","applyWithScope","R3BoundTarget","namedEntities","elementsInScope","childScopes","isDeferred","newRootScope","ingest","nodeOrNodes","ingestScopedNode","maybeDeclare","thing","lookup","getChildScope","isInDeferBlock","selectorMatcher","visitElementOrTemplate","_selector","dirTarget","dir","isComponent","setAttributeBinding","ioType","hasBindingPropertyName","wasInDeferBlock","visitBoundAttributeOrEvent","visitNode","binder","maybeMap","childScope","exprTargets","deferredBlocks","rootScope","getEntitiesInScope","getDirectivesOfNode","getReferenceTarget","getConsumerOfBinding","getExpressionTarget","getDefinitionNodeOfSymbol","getNestingLevel","getUsedDirectives","dirs","getEagerlyUsedDirectives","getUsedPipes","getEagerlyUsedPipes","getDeferBlocks","getDeferredTriggerTarget","outsideRef","findEntityInScope","referenceTargetToElement","refInPlaceholder","targetInPlaceholder","entities","entitity","entityMap","extractScopeEntities","currentEntities","scopesToProcess","templateEntities","ResourceLoader","CompilerFacadeImpl","jitEvaluator","elementSchemaRegistry","compilePipe","angularCoreEnv","sourceMapUrl","facade","jitExpression","compilePipeDeclaration","declaration","convertDeclarePipeFacadeToMetadata","computeProvidedIn","convertToProviderExpression","wrapExpression","convertR3DependencyMetadata","compileInjectableDeclaration","convertR3DeclareDependencyMetadata","compileInjectorDeclaration","convertDeclareInjectorFacadeToMetadata","compileNgModuleDeclaration","compileDirective","convertDirectiveFacadeToMetadata","compileDirectiveFromMeta","compileDirectiveDeclaration","createParseSourceSpan","convertDeclareDirectiveFacadeToMetadata","compileComponent","parseJitTemplate","convertDeclarationFacadeToMetadata","deferrableDeclToImportDecl","jitExpressionSourceMap","compileComponentFromMeta","compileComponentDeclaration","convertDeclareComponentFacadeToMetadata","compileFactory","factoryRes","convertR3DependencyMetadataArray","compileFactoryDeclaration","preStatements","convertToR3QueryMetadata","convertQueryPredicate","convertQueryDeclarationToMetadata","inputsFromMetadata","parseInputsArray","outputsFromMetadata","parseMappingStringArray","propMetadata","inputsFromType","outputsFromType","field","ann","isInput","isOutput","extractHostBindings","convertHostDirectivesToMetadata","inputsPartialMetadataToInputMetadata","convertHostDeclarationToMetadata","convertOpaqueValuesToExpressions","classAttribute","styleAttribute","hostDirective","innerDep","convertDirectiveDeclarationToMetadata","convertPipeDeclarationToMetadata","components","convertPipeMapToMetadata","err","boundTarget","createR3DeferredMetadata","facades","isAttributeDep","rawToken","createR3DependencyMetadata","resolveDeferTriggers","hostPropertyName","isHostListener","ngMetadataName","minifiedClassName","parseLegacyInputPartialOutput","isRequired","parseMappingString","fieldName","publishFacade","global","ng","ɵcompilerFacade","VERSION","CompilerConfig","defaultEncapsulation","strictInjectionParameters","preserveWhitespacesDefault","preserveWhitespacesOption","defaultSetting","_I18N_ATTR","_I18N_ATTR_PREFIX","_I18N_COMMENT_PREFIX_REGEXP","MEANING_SEPARATOR","ID_SEPARATOR","i18nCommentsWarned","extractMessages","implicitTags","implicitAttrs","_Visitor","extract","mergeTranslations","translations","merge","ExtractionResult","_VisitorMode","_implicitTags","_implicitAttrs","_init","Extract","_inI18nBlock","_messages","Merge","_translations","wrapper","translatedNode","icuCase","_mode","_mayBeAddBlockChildren","wasInIcu","_inIcu","_isInTranslatableSection","_addMessage","isOpening","_isOpeningComment","isClosing","_isClosingComment","_inI18nNode","console","warn","_blockStartDepth","_depth","_blockChildren","_blockMeaningAndDesc","_openTranslatableSection","_closeTranslatableSection","_translateMessage","wasInI18nNode","wasInImplicitNode","_inImplicitNode","childNodes","translatedChildNodes","i18nAttr","_getI18nAttr","isImplicit","isTopLevelImplicit","isTranslatable","visitNodes","visited","_visitAttributesOf","translatedAttrs","_translateAttributes","_msgCountAtSectionStart","_createI18nMessage","explicitAttrNameToValue","implicitAttrNames","msgMeta","_parseMessageMeta","i18nParsedMessageMeta","translatedAttributes","directChildren","significantChildren","XmlTagDefinition","requireExtraParent","currentParent","_TAG_DEFINITION","getXmlTagDefinition","XmlParser","_VERSION$1","_XMLNS$1","_DEFAULT_SOURCE_LANG$1","_PLACEHOLDER_TAG$2","_MARKER_TAG$1","_FILE_TAG","_SOURCE_TAG$1","_SEGMENT_SOURCE_TAG","_ALT_TRANS_TAG","_TARGET_TAG$1","_UNIT_TAG$1","_CONTEXT_GROUP_TAG","_CONTEXT_TAG","Xliff","_WriteVisitor$1","transUnits","contextTags","contextGroupTag","purpose","transUnit","datatype","xliff","xmlns","xliffParser","XliffParser","msgIdToHtml","i18nNodesByMsgId","XmlToI18n$2","msgId","i18nNodes","convert","ctype","getCtypeForTag","equivText","_locale","_unitMlString","_msgIdToHtml","xml","idAttr","_addError","innerTextStart","innerTextEnd","innerText","localeAttr","xmlIcu","nameAttr","caseMap","_VERSION","_XMLNS","_DEFAULT_SOURCE_LANG","_PLACEHOLDER_TAG$1","_PLACEHOLDER_SPANNING_TAG","_MARKER_TAG","_XLIFF_TAG","_SOURCE_TAG","_TARGET_TAG","_UNIT_TAG","Xliff2","_WriteVisitor","notes","category","srcLang","xliff2Parser","Xliff2Parser","XmlToI18n$1","_nextPlaceholderId","getTypeForTag","tagPh","equiv","disp","tagPc","equivStart","equivEnd","dispStart","dispEnd","idStr","versionAttr","startAttr","endAttr","startId","endId","_TRANSLATIONS_TAG","_TRANSLATION_TAG","_PLACEHOLDER_TAG","Xtb","xtbParser","XtbParser","XmlToI18n","valueFn","createLazyProperty","defineProperty","configurable","enumerable","xtb","_bundleDepth","langAttr","TranslationBundle","_i18nNodesByMsgId","mapperFactory","missingTranslationStrategy","Warning","_i18nToHtml","I18nToHtmlVisitor","digestFn","srcMsg","html","_digest","_mapperFactory","_missingTranslationStrategy","_console","_contextStack","_convertToText","_srcMsg","_mapper","mapper","I18NHtmlParser","_htmlParser","translationsFormat","missingTranslation","createSerializer","_translationBundle","format","MessageBundle","updateFromTemplate","htmlParserResult","i18nParserResult","getMessages","filterSources","mapperVisitor","MapPlaceholderNames","msgList","src","transformedMessage","compileClassMetadata","decorators","ctorParameters","propDecorators","compileComponentClassMetadata","dynamicImports","importedSymbols","dependencyLoadingFn","setClassMetadataCall","setClassMetaWrapper","setClassMetaAsync","compileClassDebugInfo","debugInfo","debugInfoObject","lineNumber","forbidOrphanRendering","MINIMUM_PARTIAL_LINKER_VERSION$5","compileDeclareClassMetadata","toOptionalLiteralArray","toOptionalLiteralMap","object","compileDependencies","compileDependency","depMeta","compileDeclareDirectiveFromMetadata","createDirectiveDefinitionMap","minVersion","getMinimumVersionForPartialOutput","needsNewInputPartialOutput","createInputsPartialMetadata","legacyInputsPartialMetadata","compileHostMetadata","compileQuery","createHostDirectives","hasDecoratorTransformFunctions","hostMetadata","compileDeclareComponentFromMetadata","additionalTemplateInfo","createComponentDefinitionMap","templateInfo","blockVisitor","BlockPresenceVisitor","getTemplateExpression","isInline","hasBlocks","compileUsedDependenciesMetadata","inlineTemplateLiteralExpression","computeEndLocation","lineStart","lastLineStart","wrapType","dirMeta","pipeMeta","ngModuleMeta","MINIMUM_PARTIAL_LINKER_VERSION$4","compileDeclareFactoryFunction","MINIMUM_PARTIAL_LINKER_VERSION$3","compileDeclareInjectableFromMetadata","createInjectableDefinitionMap","MINIMUM_PARTIAL_LINKER_VERSION$2","compileDeclareInjectorFromMetadata","createInjectorDefinitionMap","MINIMUM_PARTIAL_LINKER_VERSION$1","compileDeclareNgModuleFromMetadata","createNgModuleDefinitionMap","MINIMUM_PARTIAL_LINKER_VERSION","compileDeclarePipeFromMetadata","createPipeDefinitionMap","R3Identifiers","TmplAstBoundAttribute","TmplAstBoundDeferredTrigger","TmplAstBoundEvent","TmplAstBoundText","TmplAstContent","TmplAstDeferredBlock","TmplAstDeferredBlockError","TmplAstDeferredBlockLoading","TmplAstDeferredBlockPlaceholder","TmplAstDeferredTrigger","TmplAstElement","TmplAstForLoopBlock","TmplAstForLoopBlockEmpty","TmplAstHoverDeferredTrigger","TmplAstIcu","TmplAstIdleDeferredTrigger","TmplAstIfBlock","TmplAstIfBlockBranch","TmplAstImmediateDeferredTrigger","TmplAstInteractionDeferredTrigger","TmplAstRecursiveVisitor","TmplAstReference","TmplAstSwitchBlock","TmplAstSwitchBlockCase","TmplAstTemplate","TmplAstText","TmplAstTextAttribute","TmplAstTimerDeferredTrigger","TmplAstUnknownBlock","TmplAstVariable","TmplAstViewportDeferredTrigger"],"sources":["/Users/sgaby100/Desktop/Licenta/deskbuddy/node_modules/@angular/compiler/fesm2022/compiler.mjs"],"sourcesContent":["/**\n * @license Angular v17.1.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nconst _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' + // 1: \":not(\"\n    '(([\\\\.\\\\#]?)[-\\\\w]+)|' + // 2: \"tag\"; 3: \".\"/\"#\";\n    // \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n    // 4: attribute; 5: attribute_string; 6: attribute_value\n    '(?:\\\\[([-.\\\\w*\\\\\\\\$]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' + // \"[name]\", \"[name=value]\",\n    // \"[name=\"value\"]\",\n    // \"[name='value']\"\n    '(\\\\))|' + // 7: \")\"\n    '(\\\\s*,\\\\s*)', // 8: \",\"\n'g');\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nclass CssSelector {\n    constructor() {\n        this.element = null;\n        this.classNames = [];\n        /**\n         * The selectors are encoded in pairs where:\n         * - even locations are attribute names\n         * - odd locations are attribute values.\n         *\n         * Example:\n         * Selector: `[key1=value1][key2]` would parse to:\n         * ```\n         * ['key1', 'value1', 'key2', '']\n         * ```\n         */\n        this.attrs = [];\n        this.notSelectors = [];\n    }\n    static parse(selector) {\n        const results = [];\n        const _addResult = (res, cssSel) => {\n            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\n                cssSel.attrs.length == 0) {\n                cssSel.element = '*';\n            }\n            res.push(cssSel);\n        };\n        let cssSelector = new CssSelector();\n        let match;\n        let current = cssSelector;\n        let inNot = false;\n        _SELECTOR_REGEXP.lastIndex = 0;\n        while (match = _SELECTOR_REGEXP.exec(selector)) {\n            if (match[1 /* SelectorRegexp.NOT */]) {\n                if (inNot) {\n                    throw new Error('Nesting :not in a selector is not allowed');\n                }\n                inNot = true;\n                current = new CssSelector();\n                cssSelector.notSelectors.push(current);\n            }\n            const tag = match[2 /* SelectorRegexp.TAG */];\n            if (tag) {\n                const prefix = match[3 /* SelectorRegexp.PREFIX */];\n                if (prefix === '#') {\n                    // #hash\n                    current.addAttribute('id', tag.slice(1));\n                }\n                else if (prefix === '.') {\n                    // Class\n                    current.addClassName(tag.slice(1));\n                }\n                else {\n                    // Element\n                    current.setElement(tag);\n                }\n            }\n            const attribute = match[4 /* SelectorRegexp.ATTRIBUTE */];\n            if (attribute) {\n                current.addAttribute(current.unescapeAttribute(attribute), match[6 /* SelectorRegexp.ATTRIBUTE_VALUE */]);\n            }\n            if (match[7 /* SelectorRegexp.NOT_END */]) {\n                inNot = false;\n                current = cssSelector;\n            }\n            if (match[8 /* SelectorRegexp.SEPARATOR */]) {\n                if (inNot) {\n                    throw new Error('Multiple selectors in :not are not supported');\n                }\n                _addResult(results, cssSelector);\n                cssSelector = current = new CssSelector();\n            }\n        }\n        _addResult(results, cssSelector);\n        return results;\n    }\n    /**\n     * Unescape `\\$` sequences from the CSS attribute selector.\n     *\n     * This is needed because `$` can have a special meaning in CSS selectors,\n     * but we might want to match an attribute that contains `$`.\n     * [MDN web link for more\n     * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n     * @param attr the attribute to unescape.\n     * @returns the unescaped string.\n     */\n    unescapeAttribute(attr) {\n        let result = '';\n        let escaping = false;\n        for (let i = 0; i < attr.length; i++) {\n            const char = attr.charAt(i);\n            if (char === '\\\\') {\n                escaping = true;\n                continue;\n            }\n            if (char === '$' && !escaping) {\n                throw new Error(`Error in attribute selector \"${attr}\". ` +\n                    `Unescaped \"$\" is not supported. Please escape with \"\\\\$\".`);\n            }\n            escaping = false;\n            result += char;\n        }\n        return result;\n    }\n    /**\n     * Escape `$` sequences from the CSS attribute selector.\n     *\n     * This is needed because `$` can have a special meaning in CSS selectors,\n     * with this method we are escaping `$` with `\\$'.\n     * [MDN web link for more\n     * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n     * @param attr the attribute to escape.\n     * @returns the escaped string.\n     */\n    escapeAttribute(attr) {\n        return attr.replace(/\\\\/g, '\\\\\\\\').replace(/\\$/g, '\\\\$');\n    }\n    isElementSelector() {\n        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n            this.notSelectors.length === 0;\n    }\n    hasElementSelector() {\n        return !!this.element;\n    }\n    setElement(element = null) {\n        this.element = element;\n    }\n    getAttrs() {\n        const result = [];\n        if (this.classNames.length > 0) {\n            result.push('class', this.classNames.join(' '));\n        }\n        return result.concat(this.attrs);\n    }\n    addAttribute(name, value = '') {\n        this.attrs.push(name, value && value.toLowerCase() || '');\n    }\n    addClassName(name) {\n        this.classNames.push(name.toLowerCase());\n    }\n    toString() {\n        let res = this.element || '';\n        if (this.classNames) {\n            this.classNames.forEach(klass => res += `.${klass}`);\n        }\n        if (this.attrs) {\n            for (let i = 0; i < this.attrs.length; i += 2) {\n                const name = this.escapeAttribute(this.attrs[i]);\n                const value = this.attrs[i + 1];\n                res += `[${name}${value ? '=' + value : ''}]`;\n            }\n        }\n        this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);\n        return res;\n    }\n}\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nclass SelectorMatcher {\n    constructor() {\n        this._elementMap = new Map();\n        this._elementPartialMap = new Map();\n        this._classMap = new Map();\n        this._classPartialMap = new Map();\n        this._attrValueMap = new Map();\n        this._attrValuePartialMap = new Map();\n        this._listContexts = [];\n    }\n    static createNotMatcher(notSelectors) {\n        const notMatcher = new SelectorMatcher();\n        notMatcher.addSelectables(notSelectors, null);\n        return notMatcher;\n    }\n    addSelectables(cssSelectors, callbackCtxt) {\n        let listContext = null;\n        if (cssSelectors.length > 1) {\n            listContext = new SelectorListContext(cssSelectors);\n            this._listContexts.push(listContext);\n        }\n        for (let i = 0; i < cssSelectors.length; i++) {\n            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n        }\n    }\n    /**\n     * Add an object that can be found later on by calling `match`.\n     * @param cssSelector A css selector\n     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n     */\n    _addSelectable(cssSelector, callbackCtxt, listContext) {\n        let matcher = this;\n        const element = cssSelector.element;\n        const classNames = cssSelector.classNames;\n        const attrs = cssSelector.attrs;\n        const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n        if (element) {\n            const isTerminal = attrs.length === 0 && classNames.length === 0;\n            if (isTerminal) {\n                this._addTerminal(matcher._elementMap, element, selectable);\n            }\n            else {\n                matcher = this._addPartial(matcher._elementPartialMap, element);\n            }\n        }\n        if (classNames) {\n            for (let i = 0; i < classNames.length; i++) {\n                const isTerminal = attrs.length === 0 && i === classNames.length - 1;\n                const className = classNames[i];\n                if (isTerminal) {\n                    this._addTerminal(matcher._classMap, className, selectable);\n                }\n                else {\n                    matcher = this._addPartial(matcher._classPartialMap, className);\n                }\n            }\n        }\n        if (attrs) {\n            for (let i = 0; i < attrs.length; i += 2) {\n                const isTerminal = i === attrs.length - 2;\n                const name = attrs[i];\n                const value = attrs[i + 1];\n                if (isTerminal) {\n                    const terminalMap = matcher._attrValueMap;\n                    let terminalValuesMap = terminalMap.get(name);\n                    if (!terminalValuesMap) {\n                        terminalValuesMap = new Map();\n                        terminalMap.set(name, terminalValuesMap);\n                    }\n                    this._addTerminal(terminalValuesMap, value, selectable);\n                }\n                else {\n                    const partialMap = matcher._attrValuePartialMap;\n                    let partialValuesMap = partialMap.get(name);\n                    if (!partialValuesMap) {\n                        partialValuesMap = new Map();\n                        partialMap.set(name, partialValuesMap);\n                    }\n                    matcher = this._addPartial(partialValuesMap, value);\n                }\n            }\n        }\n    }\n    _addTerminal(map, name, selectable) {\n        let terminalList = map.get(name);\n        if (!terminalList) {\n            terminalList = [];\n            map.set(name, terminalList);\n        }\n        terminalList.push(selectable);\n    }\n    _addPartial(map, name) {\n        let matcher = map.get(name);\n        if (!matcher) {\n            matcher = new SelectorMatcher();\n            map.set(name, matcher);\n        }\n        return matcher;\n    }\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param cssSelector A css selector\n     * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return boolean true if a match was found\n     */\n    match(cssSelector, matchedCallback) {\n        let result = false;\n        const element = cssSelector.element;\n        const classNames = cssSelector.classNames;\n        const attrs = cssSelector.attrs;\n        for (let i = 0; i < this._listContexts.length; i++) {\n            this._listContexts[i].alreadyMatched = false;\n        }\n        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n            result;\n        if (classNames) {\n            for (let i = 0; i < classNames.length; i++) {\n                const className = classNames[i];\n                result =\n                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n                result =\n                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n                        result;\n            }\n        }\n        if (attrs) {\n            for (let i = 0; i < attrs.length; i += 2) {\n                const name = attrs[i];\n                const value = attrs[i + 1];\n                const terminalValuesMap = this._attrValueMap.get(name);\n                if (value) {\n                    result =\n                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n                const partialValuesMap = this._attrValuePartialMap.get(name);\n                if (value) {\n                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n            }\n        }\n        return result;\n    }\n    /** @internal */\n    _matchTerminal(map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        let selectables = map.get(name) || [];\n        const starSelectables = map.get('*');\n        if (starSelectables) {\n            selectables = selectables.concat(starSelectables);\n        }\n        if (selectables.length === 0) {\n            return false;\n        }\n        let selectable;\n        let result = false;\n        for (let i = 0; i < selectables.length; i++) {\n            selectable = selectables[i];\n            result = selectable.finalize(cssSelector, matchedCallback) || result;\n        }\n        return result;\n    }\n    /** @internal */\n    _matchPartial(map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        const nestedSelector = map.get(name);\n        if (!nestedSelector) {\n            return false;\n        }\n        // TODO(perf): get rid of recursion and measure again\n        // TODO(perf): don't pass the whole selector into the recursion,\n        // but only the not processed parts\n        return nestedSelector.match(cssSelector, matchedCallback);\n    }\n}\nclass SelectorListContext {\n    constructor(selectors) {\n        this.selectors = selectors;\n        this.alreadyMatched = false;\n    }\n}\n// Store context to pass back selector and context when a selector is matched\nclass SelectorContext {\n    constructor(selector, cbContext, listContext) {\n        this.selector = selector;\n        this.cbContext = cbContext;\n        this.listContext = listContext;\n        this.notSelectors = selector.notSelectors;\n    }\n    finalize(cssSelector, callback) {\n        let result = true;\n        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n            const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n            result = !notMatcher.match(cssSelector, null);\n        }\n        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n            if (this.listContext) {\n                this.listContext.alreadyMatched = true;\n            }\n            callback(this.selector, this.cbContext);\n        }\n        return result;\n    }\n}\n\n// Attention:\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nconst emitDistinctChangesOnlyDefaultValue = true;\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n/** Flags describing an input for a directive. */\nvar InputFlags;\n(function (InputFlags) {\n    InputFlags[InputFlags[\"None\"] = 0] = \"None\";\n    InputFlags[InputFlags[\"SignalBased\"] = 1] = \"SignalBased\";\n    InputFlags[InputFlags[\"HasDecoratorInputTransform\"] = 2] = \"HasDecoratorInputTransform\";\n})(InputFlags || (InputFlags = {}));\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\nconst Type$1 = Function;\nvar SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\nfunction parserSelectorToSimpleSelector(selector) {\n    const classes = selector.classNames && selector.classNames.length ?\n        [8 /* SelectorFlags.CLASS */, ...selector.classNames] :\n        [];\n    const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n    return [elementName, ...selector.attrs, ...classes];\n}\nfunction parserSelectorToNegativeSelector(selector) {\n    const classes = selector.classNames && selector.classNames.length ?\n        [8 /* SelectorFlags.CLASS */, ...selector.classNames] :\n        [];\n    if (selector.element) {\n        return [\n            1 /* SelectorFlags.NOT */ | 4 /* SelectorFlags.ELEMENT */, selector.element, ...selector.attrs, ...classes\n        ];\n    }\n    else if (selector.attrs.length) {\n        return [1 /* SelectorFlags.NOT */ | 2 /* SelectorFlags.ATTRIBUTE */, ...selector.attrs, ...classes];\n    }\n    else {\n        return selector.classNames && selector.classNames.length ?\n            [1 /* SelectorFlags.NOT */ | 8 /* SelectorFlags.CLASS */, ...selector.classNames] :\n            [];\n    }\n}\nfunction parserSelectorToR3Selector(selector) {\n    const positive = parserSelectorToSimpleSelector(selector);\n    const negative = selector.notSelectors && selector.notSelectors.length ?\n        selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) :\n        [];\n    return positive.concat(...negative);\n}\nfunction parseSelectorToR3Selector(selector) {\n    return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];\n}\n\nvar core = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    emitDistinctChangesOnlyDefaultValue: emitDistinctChangesOnlyDefaultValue,\n    get ViewEncapsulation () { return ViewEncapsulation; },\n    get ChangeDetectionStrategy () { return ChangeDetectionStrategy; },\n    get InputFlags () { return InputFlags; },\n    CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,\n    NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,\n    Type: Type$1,\n    get SecurityContext () { return SecurityContext; },\n    get MissingTranslationStrategy () { return MissingTranslationStrategy; },\n    parseSelectorToR3Selector: parseSelectorToR3Selector\n});\n\n/**\n * A lazily created TextEncoder instance for converting strings into UTF-8 bytes\n */\nlet textEncoder;\n/**\n * Return the message id or compute it using the XLIFF1 digest.\n */\nfunction digest$1(message) {\n    return message.id || computeDigest(message);\n}\n/**\n * Compute the message id using the XLIFF1 digest.\n */\nfunction computeDigest(message) {\n    return sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n/**\n * Return the message id or compute it using the XLIFF2/XMB/$localize digest.\n */\nfunction decimalDigest(message) {\n    return message.id || computeDecimalDigest(message);\n}\n/**\n * Compute the message id using the XLIFF2/XMB/$localize digest.\n */\nfunction computeDecimalDigest(message) {\n    const visitor = new _SerializerIgnoreIcuExpVisitor();\n    const parts = message.nodes.map(a => a.visit(visitor, null));\n    return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\nclass _SerializerVisitor {\n    visitText(text, context) {\n        return text.value;\n    }\n    visitContainer(container, context) {\n        return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n    }\n    visitIcu(icu, context) {\n        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n    }\n    visitTagPlaceholder(ph, context) {\n        return ph.isVoid ?\n            `<ph tag name=\"${ph.startName}\"/>` :\n            `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n    }\n    visitPlaceholder(ph, context) {\n        return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n    }\n    visitIcuPlaceholder(ph, context) {\n        return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n    }\n    visitBlockPlaceholder(ph, context) {\n        return `<ph block name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n    }\n}\nconst serializerVisitor$1 = new _SerializerVisitor();\nfunction serializeNodes(nodes) {\n    return nodes.map(a => a.visit(serializerVisitor$1, null));\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * @internal\n */\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n    visitIcu(icu, context) {\n        let strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        // Do not take the expression into account\n        return `{${icu.type}, ${strCases.join(', ')}}`;\n    }\n}\n/**\n * Compute the SHA1 of the given string\n *\n * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n */\nfunction sha1(str) {\n    textEncoder ??= new TextEncoder();\n    const utf8 = [...textEncoder.encode(str)];\n    const words32 = bytesToWords32(utf8, Endian.Big);\n    const len = utf8.length * 8;\n    const w = new Uint32Array(80);\n    let a = 0x67452301, b = 0xefcdab89, c = 0x98badcfe, d = 0x10325476, e = 0xc3d2e1f0;\n    words32[len >> 5] |= 0x80 << (24 - len % 32);\n    words32[((len + 64 >> 9) << 4) + 15] = len;\n    for (let i = 0; i < words32.length; i += 16) {\n        const h0 = a, h1 = b, h2 = c, h3 = d, h4 = e;\n        for (let j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = words32[i + j];\n            }\n            else {\n                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n            }\n            const fkVal = fk(j, b, c, d);\n            const f = fkVal[0];\n            const k = fkVal[1];\n            const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n            e = d;\n            d = c;\n            c = rol32(b, 30);\n            b = a;\n            a = temp;\n        }\n        a = add32(a, h0);\n        b = add32(b, h1);\n        c = add32(c, h2);\n        d = add32(d, h3);\n        e = add32(e, h4);\n    }\n    // Convert the output parts to a 160-bit hexadecimal string\n    return toHexU32(a) + toHexU32(b) + toHexU32(c) + toHexU32(d) + toHexU32(e);\n}\n/**\n * Convert and format a number as a string representing a 32-bit unsigned hexadecimal number.\n * @param value The value to format as a string.\n * @returns A hexadecimal string representing the value.\n */\nfunction toHexU32(value) {\n    // unsigned right shift of zero ensures an unsigned 32-bit number\n    return (value >>> 0).toString(16).padStart(8, '0');\n}\nfunction fk(index, b, c, d) {\n    if (index < 20) {\n        return [(b & c) | (~b & d), 0x5a827999];\n    }\n    if (index < 40) {\n        return [b ^ c ^ d, 0x6ed9eba1];\n    }\n    if (index < 60) {\n        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n    }\n    return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n */\nfunction fingerprint(str) {\n    textEncoder ??= new TextEncoder();\n    const utf8 = textEncoder.encode(str);\n    const view = new DataView(utf8.buffer, utf8.byteOffset, utf8.byteLength);\n    let hi = hash32(view, utf8.length, 0);\n    let lo = hash32(view, utf8.length, 102072);\n    if (hi == 0 && (lo == 0 || lo == 1)) {\n        hi = hi ^ 0x130f9bef;\n        lo = lo ^ -0x6b5f56d8;\n    }\n    return (BigInt.asUintN(32, BigInt(hi)) << BigInt(32)) | BigInt.asUintN(32, BigInt(lo));\n}\nfunction computeMsgId(msg, meaning = '') {\n    let msgFingerprint = fingerprint(msg);\n    if (meaning) {\n        // Rotate the 64-bit message fingerprint one bit to the left and then add the meaning\n        // fingerprint.\n        msgFingerprint = BigInt.asUintN(64, msgFingerprint << BigInt(1)) |\n            ((msgFingerprint >> BigInt(63)) & BigInt(1));\n        msgFingerprint += fingerprint(meaning);\n    }\n    return BigInt.asUintN(63, msgFingerprint).toString();\n}\nfunction hash32(view, length, c) {\n    let a = 0x9e3779b9, b = 0x9e3779b9;\n    let index = 0;\n    const end = length - 12;\n    for (; index <= end; index += 12) {\n        a += view.getUint32(index, true);\n        b += view.getUint32(index + 4, true);\n        c += view.getUint32(index + 8, true);\n        const res = mix(a, b, c);\n        a = res[0], b = res[1], c = res[2];\n    }\n    const remainder = length - index;\n    // the first byte of c is reserved for the length\n    c += length;\n    if (remainder >= 4) {\n        a += view.getUint32(index, true);\n        index += 4;\n        if (remainder >= 8) {\n            b += view.getUint32(index, true);\n            index += 4;\n            // Partial 32-bit word for c\n            if (remainder >= 9) {\n                c += view.getUint8(index++) << 8;\n            }\n            if (remainder >= 10) {\n                c += view.getUint8(index++) << 16;\n            }\n            if (remainder === 11) {\n                c += view.getUint8(index++) << 24;\n            }\n        }\n        else {\n            // Partial 32-bit word for b\n            if (remainder >= 5) {\n                b += view.getUint8(index++);\n            }\n            if (remainder >= 6) {\n                b += view.getUint8(index++) << 8;\n            }\n            if (remainder === 7) {\n                b += view.getUint8(index++) << 16;\n            }\n        }\n    }\n    else {\n        // Partial 32-bit word for a\n        if (remainder >= 1) {\n            a += view.getUint8(index++);\n        }\n        if (remainder >= 2) {\n            a += view.getUint8(index++) << 8;\n        }\n        if (remainder === 3) {\n            a += view.getUint8(index++) << 16;\n        }\n    }\n    return mix(a, b, c)[2];\n}\n// clang-format off\nfunction mix(a, b, c) {\n    a -= b;\n    a -= c;\n    a ^= c >>> 13;\n    b -= c;\n    b -= a;\n    b ^= a << 8;\n    c -= a;\n    c -= b;\n    c ^= b >>> 13;\n    a -= b;\n    a -= c;\n    a ^= c >>> 12;\n    b -= c;\n    b -= a;\n    b ^= a << 16;\n    c -= a;\n    c -= b;\n    c ^= b >>> 5;\n    a -= b;\n    a -= c;\n    a ^= c >>> 3;\n    b -= c;\n    b -= a;\n    b ^= a << 10;\n    c -= a;\n    c -= b;\n    c ^= b >>> 15;\n    return [a, b, c];\n}\n// clang-format on\n// Utils\nvar Endian;\n(function (Endian) {\n    Endian[Endian[\"Little\"] = 0] = \"Little\";\n    Endian[Endian[\"Big\"] = 1] = \"Big\";\n})(Endian || (Endian = {}));\nfunction add32(a, b) {\n    return add32to64(a, b)[1];\n}\nfunction add32to64(a, b) {\n    const low = (a & 0xffff) + (b & 0xffff);\n    const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n    return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n// Rotate a 32b number left `count` position\nfunction rol32(a, count) {\n    return (a << count) | (a >>> (32 - count));\n}\nfunction bytesToWords32(bytes, endian) {\n    const size = (bytes.length + 3) >>> 2;\n    const words32 = [];\n    for (let i = 0; i < size; i++) {\n        words32[i] = wordAt(bytes, i * 4, endian);\n    }\n    return words32;\n}\nfunction byteAt(bytes, index) {\n    return index >= bytes.length ? 0 : bytes[index];\n}\nfunction wordAt(bytes, index, endian) {\n    let word = 0;\n    if (endian === Endian.Big) {\n        for (let i = 0; i < 4; i++) {\n            word += byteAt(bytes, index + i) << (24 - 8 * i);\n        }\n    }\n    else {\n        for (let i = 0; i < 4; i++) {\n            word += byteAt(bytes, index + i) << 8 * i;\n        }\n    }\n    return word;\n}\n\n//// Types\nvar TypeModifier;\n(function (TypeModifier) {\n    TypeModifier[TypeModifier[\"None\"] = 0] = \"None\";\n    TypeModifier[TypeModifier[\"Const\"] = 1] = \"Const\";\n})(TypeModifier || (TypeModifier = {}));\nclass Type {\n    constructor(modifiers = TypeModifier.None) {\n        this.modifiers = modifiers;\n    }\n    hasModifier(modifier) {\n        return (this.modifiers & modifier) !== 0;\n    }\n}\nvar BuiltinTypeName;\n(function (BuiltinTypeName) {\n    BuiltinTypeName[BuiltinTypeName[\"Dynamic\"] = 0] = \"Dynamic\";\n    BuiltinTypeName[BuiltinTypeName[\"Bool\"] = 1] = \"Bool\";\n    BuiltinTypeName[BuiltinTypeName[\"String\"] = 2] = \"String\";\n    BuiltinTypeName[BuiltinTypeName[\"Int\"] = 3] = \"Int\";\n    BuiltinTypeName[BuiltinTypeName[\"Number\"] = 4] = \"Number\";\n    BuiltinTypeName[BuiltinTypeName[\"Function\"] = 5] = \"Function\";\n    BuiltinTypeName[BuiltinTypeName[\"Inferred\"] = 6] = \"Inferred\";\n    BuiltinTypeName[BuiltinTypeName[\"None\"] = 7] = \"None\";\n})(BuiltinTypeName || (BuiltinTypeName = {}));\nclass BuiltinType extends Type {\n    constructor(name, modifiers) {\n        super(modifiers);\n        this.name = name;\n    }\n    visitType(visitor, context) {\n        return visitor.visitBuiltinType(this, context);\n    }\n}\nclass ExpressionType extends Type {\n    constructor(value, modifiers, typeParams = null) {\n        super(modifiers);\n        this.value = value;\n        this.typeParams = typeParams;\n    }\n    visitType(visitor, context) {\n        return visitor.visitExpressionType(this, context);\n    }\n}\nclass ArrayType extends Type {\n    constructor(of, modifiers) {\n        super(modifiers);\n        this.of = of;\n    }\n    visitType(visitor, context) {\n        return visitor.visitArrayType(this, context);\n    }\n}\nclass MapType extends Type {\n    constructor(valueType, modifiers) {\n        super(modifiers);\n        this.valueType = valueType || null;\n    }\n    visitType(visitor, context) {\n        return visitor.visitMapType(this, context);\n    }\n}\nclass TransplantedType extends Type {\n    constructor(type, modifiers) {\n        super(modifiers);\n        this.type = type;\n    }\n    visitType(visitor, context) {\n        return visitor.visitTransplantedType(this, context);\n    }\n}\nconst DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nconst INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\nconst BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nconst INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nconst NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nconst STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nconst FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\nconst NONE_TYPE = new BuiltinType(BuiltinTypeName.None);\n///// Expressions\nvar UnaryOperator;\n(function (UnaryOperator) {\n    UnaryOperator[UnaryOperator[\"Minus\"] = 0] = \"Minus\";\n    UnaryOperator[UnaryOperator[\"Plus\"] = 1] = \"Plus\";\n})(UnaryOperator || (UnaryOperator = {}));\nvar BinaryOperator;\n(function (BinaryOperator) {\n    BinaryOperator[BinaryOperator[\"Equals\"] = 0] = \"Equals\";\n    BinaryOperator[BinaryOperator[\"NotEquals\"] = 1] = \"NotEquals\";\n    BinaryOperator[BinaryOperator[\"Identical\"] = 2] = \"Identical\";\n    BinaryOperator[BinaryOperator[\"NotIdentical\"] = 3] = \"NotIdentical\";\n    BinaryOperator[BinaryOperator[\"Minus\"] = 4] = \"Minus\";\n    BinaryOperator[BinaryOperator[\"Plus\"] = 5] = \"Plus\";\n    BinaryOperator[BinaryOperator[\"Divide\"] = 6] = \"Divide\";\n    BinaryOperator[BinaryOperator[\"Multiply\"] = 7] = \"Multiply\";\n    BinaryOperator[BinaryOperator[\"Modulo\"] = 8] = \"Modulo\";\n    BinaryOperator[BinaryOperator[\"And\"] = 9] = \"And\";\n    BinaryOperator[BinaryOperator[\"Or\"] = 10] = \"Or\";\n    BinaryOperator[BinaryOperator[\"BitwiseOr\"] = 11] = \"BitwiseOr\";\n    BinaryOperator[BinaryOperator[\"BitwiseAnd\"] = 12] = \"BitwiseAnd\";\n    BinaryOperator[BinaryOperator[\"Lower\"] = 13] = \"Lower\";\n    BinaryOperator[BinaryOperator[\"LowerEquals\"] = 14] = \"LowerEquals\";\n    BinaryOperator[BinaryOperator[\"Bigger\"] = 15] = \"Bigger\";\n    BinaryOperator[BinaryOperator[\"BiggerEquals\"] = 16] = \"BiggerEquals\";\n    BinaryOperator[BinaryOperator[\"NullishCoalesce\"] = 17] = \"NullishCoalesce\";\n})(BinaryOperator || (BinaryOperator = {}));\nfunction nullSafeIsEquivalent(base, other) {\n    if (base == null || other == null) {\n        return base == other;\n    }\n    return base.isEquivalent(other);\n}\nfunction areAllEquivalentPredicate(base, other, equivalentPredicate) {\n    const len = base.length;\n    if (len !== other.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (!equivalentPredicate(base[i], other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction areAllEquivalent(base, other) {\n    return areAllEquivalentPredicate(base, other, (baseElement, otherElement) => baseElement.isEquivalent(otherElement));\n}\nclass Expression {\n    constructor(type, sourceSpan) {\n        this.type = type || null;\n        this.sourceSpan = sourceSpan || null;\n    }\n    prop(name, sourceSpan) {\n        return new ReadPropExpr(this, name, null, sourceSpan);\n    }\n    key(index, type, sourceSpan) {\n        return new ReadKeyExpr(this, index, type, sourceSpan);\n    }\n    callFn(params, sourceSpan, pure) {\n        return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);\n    }\n    instantiate(params, type, sourceSpan) {\n        return new InstantiateExpr(this, params, type, sourceSpan);\n    }\n    conditional(trueCase, falseCase = null, sourceSpan) {\n        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n    }\n    equals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n    }\n    notEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n    }\n    identical(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n    }\n    notIdentical(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n    }\n    minus(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n    }\n    plus(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n    }\n    divide(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n    }\n    multiply(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n    }\n    modulo(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n    }\n    and(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n    }\n    bitwiseOr(rhs, sourceSpan, parens = true) {\n        return new BinaryOperatorExpr(BinaryOperator.BitwiseOr, this, rhs, null, sourceSpan, parens);\n    }\n    bitwiseAnd(rhs, sourceSpan, parens = true) {\n        return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n    }\n    or(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n    }\n    lower(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n    }\n    lowerEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n    }\n    bigger(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n    }\n    biggerEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n    }\n    isBlank(sourceSpan) {\n        // Note: We use equals by purpose here to compare to null and undefined in JS.\n        // We use the typed null to allow strictNullChecks to narrow types.\n        return this.equals(TYPED_NULL_EXPR, sourceSpan);\n    }\n    nullishCoalesce(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);\n    }\n    toStmt() {\n        return new ExpressionStatement(this, null);\n    }\n}\nclass ReadVarExpr extends Expression {\n    constructor(name, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.name = name;\n    }\n    isEquivalent(e) {\n        return e instanceof ReadVarExpr && this.name === e.name;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitReadVarExpr(this, context);\n    }\n    clone() {\n        return new ReadVarExpr(this.name, this.type, this.sourceSpan);\n    }\n    set(value) {\n        return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n    }\n}\nclass TypeofExpr extends Expression {\n    constructor(expr, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.expr = expr;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitTypeofExpr(this, context);\n    }\n    isEquivalent(e) {\n        return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);\n    }\n    isConstant() {\n        return this.expr.isConstant();\n    }\n    clone() {\n        return new TypeofExpr(this.expr.clone());\n    }\n}\nclass WrappedNodeExpr extends Expression {\n    constructor(node, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.node = node;\n    }\n    isEquivalent(e) {\n        return e instanceof WrappedNodeExpr && this.node === e.node;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitWrappedNodeExpr(this, context);\n    }\n    clone() {\n        return new WrappedNodeExpr(this.node, this.type, this.sourceSpan);\n    }\n}\nclass WriteVarExpr extends Expression {\n    constructor(name, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.name = name;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitWriteVarExpr(this, context);\n    }\n    clone() {\n        return new WriteVarExpr(this.name, this.value.clone(), this.type, this.sourceSpan);\n    }\n    toDeclStmt(type, modifiers) {\n        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n    }\n    toConstDecl() {\n        return this.toDeclStmt(INFERRED_TYPE, StmtModifier.Final);\n    }\n}\nclass WriteKeyExpr extends Expression {\n    constructor(receiver, index, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.receiver = receiver;\n        this.index = index;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitWriteKeyExpr(this, context);\n    }\n    clone() {\n        return new WriteKeyExpr(this.receiver.clone(), this.index.clone(), this.value.clone(), this.type, this.sourceSpan);\n    }\n}\nclass WritePropExpr extends Expression {\n    constructor(receiver, name, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.receiver = receiver;\n        this.name = name;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name && this.value.isEquivalent(e.value);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitWritePropExpr(this, context);\n    }\n    clone() {\n        return new WritePropExpr(this.receiver.clone(), this.name, this.value.clone(), this.type, this.sourceSpan);\n    }\n}\nclass InvokeFunctionExpr extends Expression {\n    constructor(fn, args, type, sourceSpan, pure = false) {\n        super(type, sourceSpan);\n        this.fn = fn;\n        this.args = args;\n        this.pure = pure;\n    }\n    // An alias for fn, which allows other logic to handle calls and property reads together.\n    get receiver() {\n        return this.fn;\n    }\n    isEquivalent(e) {\n        return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) &&\n            areAllEquivalent(this.args, e.args) && this.pure === e.pure;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitInvokeFunctionExpr(this, context);\n    }\n    clone() {\n        return new InvokeFunctionExpr(this.fn.clone(), this.args.map(arg => arg.clone()), this.type, this.sourceSpan, this.pure);\n    }\n}\nclass TaggedTemplateExpr extends Expression {\n    constructor(tag, template, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.tag = tag;\n        this.template = template;\n    }\n    isEquivalent(e) {\n        return e instanceof TaggedTemplateExpr && this.tag.isEquivalent(e.tag) &&\n            areAllEquivalentPredicate(this.template.elements, e.template.elements, (a, b) => a.text === b.text) &&\n            areAllEquivalent(this.template.expressions, e.template.expressions);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitTaggedTemplateExpr(this, context);\n    }\n    clone() {\n        return new TaggedTemplateExpr(this.tag.clone(), this.template.clone(), this.type, this.sourceSpan);\n    }\n}\nclass InstantiateExpr extends Expression {\n    constructor(classExpr, args, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.classExpr = classExpr;\n        this.args = args;\n    }\n    isEquivalent(e) {\n        return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) &&\n            areAllEquivalent(this.args, e.args);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitInstantiateExpr(this, context);\n    }\n    clone() {\n        return new InstantiateExpr(this.classExpr.clone(), this.args.map(arg => arg.clone()), this.type, this.sourceSpan);\n    }\n}\nclass LiteralExpr extends Expression {\n    constructor(value, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof LiteralExpr && this.value === e.value;\n    }\n    isConstant() {\n        return true;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralExpr(this, context);\n    }\n    clone() {\n        return new LiteralExpr(this.value, this.type, this.sourceSpan);\n    }\n}\nclass TemplateLiteral {\n    constructor(elements, expressions) {\n        this.elements = elements;\n        this.expressions = expressions;\n    }\n    clone() {\n        return new TemplateLiteral(this.elements.map(el => el.clone()), this.expressions.map(expr => expr.clone()));\n    }\n}\nclass TemplateLiteralElement {\n    constructor(text, sourceSpan, rawText) {\n        this.text = text;\n        this.sourceSpan = sourceSpan;\n        // If `rawText` is not provided, try to extract the raw string from its\n        // associated `sourceSpan`. If that is also not available, \"fake\" the raw\n        // string instead by escaping the following control sequences:\n        // - \"\\\" would otherwise indicate that the next character is a control character.\n        // - \"`\" and \"${\" are template string control sequences that would otherwise prematurely\n        // indicate the end of the template literal element.\n        this.rawText =\n            rawText ?? sourceSpan?.toString() ?? escapeForTemplateLiteral(escapeSlashes(text));\n    }\n    clone() {\n        return new TemplateLiteralElement(this.text, this.sourceSpan, this.rawText);\n    }\n}\nclass LiteralPiece {\n    constructor(text, sourceSpan) {\n        this.text = text;\n        this.sourceSpan = sourceSpan;\n    }\n}\nclass PlaceholderPiece {\n    /**\n     * Create a new instance of a `PlaceholderPiece`.\n     *\n     * @param text the name of this placeholder (e.g. `PH_1`).\n     * @param sourceSpan the location of this placeholder in its localized message the source code.\n     * @param associatedMessage reference to another message that this placeholder is associated with.\n     * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has\n     * been extracted out from the message containing the placeholder.\n     */\n    constructor(text, sourceSpan, associatedMessage) {\n        this.text = text;\n        this.sourceSpan = sourceSpan;\n        this.associatedMessage = associatedMessage;\n    }\n}\nconst MEANING_SEPARATOR$1 = '|';\nconst ID_SEPARATOR$1 = '@@';\nconst LEGACY_ID_INDICATOR = '␟';\nclass LocalizedString extends Expression {\n    constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {\n        super(STRING_TYPE, sourceSpan);\n        this.metaBlock = metaBlock;\n        this.messageParts = messageParts;\n        this.placeHolderNames = placeHolderNames;\n        this.expressions = expressions;\n    }\n    isEquivalent(e) {\n        // return e instanceof LocalizedString && this.message === e.message;\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLocalizedString(this, context);\n    }\n    clone() {\n        return new LocalizedString(this.metaBlock, this.messageParts, this.placeHolderNames, this.expressions.map(expr => expr.clone()), this.sourceSpan);\n    }\n    /**\n     * Serialize the given `meta` and `messagePart` into \"cooked\" and \"raw\" strings that can be used\n     * in a `$localize` tagged string. The format of the metadata is the same as that parsed by\n     * `parseI18nMeta()`.\n     *\n     * @param meta The metadata to serialize\n     * @param messagePart The first part of the tagged string\n     */\n    serializeI18nHead() {\n        let metaBlock = this.metaBlock.description || '';\n        if (this.metaBlock.meaning) {\n            metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR$1}${metaBlock}`;\n        }\n        if (this.metaBlock.customId) {\n            metaBlock = `${metaBlock}${ID_SEPARATOR$1}${this.metaBlock.customId}`;\n        }\n        if (this.metaBlock.legacyIds) {\n            this.metaBlock.legacyIds.forEach(legacyId => {\n                metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;\n            });\n        }\n        return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));\n    }\n    getMessagePartSourceSpan(i) {\n        return this.messageParts[i]?.sourceSpan ?? this.sourceSpan;\n    }\n    getPlaceholderSourceSpan(i) {\n        return this.placeHolderNames[i]?.sourceSpan ?? this.expressions[i]?.sourceSpan ??\n            this.sourceSpan;\n    }\n    /**\n     * Serialize the given `placeholderName` and `messagePart` into \"cooked\" and \"raw\" strings that\n     * can be used in a `$localize` tagged string.\n     *\n     * The format is `:<placeholder-name>[@@<associated-id>]:`.\n     *\n     * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder\n     * refers.\n     *\n     * @param partIndex The index of the message part to serialize.\n     */\n    serializeI18nTemplatePart(partIndex) {\n        const placeholder = this.placeHolderNames[partIndex - 1];\n        const messagePart = this.messageParts[partIndex];\n        let metaBlock = placeholder.text;\n        if (placeholder.associatedMessage?.legacyIds.length === 0) {\n            metaBlock += `${ID_SEPARATOR$1}${computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning)}`;\n        }\n        return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));\n    }\n}\nconst escapeSlashes = (str) => str.replace(/\\\\/g, '\\\\\\\\');\nconst escapeStartingColon = (str) => str.replace(/^:/, '\\\\:');\nconst escapeColons = (str) => str.replace(/:/g, '\\\\:');\nconst escapeForTemplateLiteral = (str) => str.replace(/`/g, '\\\\`').replace(/\\${/g, '$\\\\{');\n/**\n * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.\n *\n * The `raw` text must have various character sequences escaped:\n * * \"\\\" would otherwise indicate that the next character is a control character.\n * * \"`\" and \"${\" are template string control sequences that would otherwise prematurely indicate\n *   the end of a message part.\n * * \":\" inside a metablock would prematurely indicate the end of the metablock.\n * * \":\" at the start of a messagePart with no metablock would erroneously indicate the start of a\n *   metablock.\n *\n * @param metaBlock Any metadata that should be prepended to the string\n * @param messagePart The message part of the string\n */\nfunction createCookedRawString(metaBlock, messagePart, range) {\n    if (metaBlock === '') {\n        return {\n            cooked: messagePart,\n            raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),\n            range,\n        };\n    }\n    else {\n        return {\n            cooked: `:${metaBlock}:${messagePart}`,\n            raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),\n            range,\n        };\n    }\n}\nclass ExternalExpr extends Expression {\n    constructor(value, type, typeParams = null, sourceSpan) {\n        super(type, sourceSpan);\n        this.value = value;\n        this.typeParams = typeParams;\n    }\n    isEquivalent(e) {\n        return e instanceof ExternalExpr && this.value.name === e.value.name &&\n            this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitExternalExpr(this, context);\n    }\n    clone() {\n        return new ExternalExpr(this.value, this.type, this.typeParams, this.sourceSpan);\n    }\n}\nclass ExternalReference {\n    constructor(moduleName, name, runtime) {\n        this.moduleName = moduleName;\n        this.name = name;\n        this.runtime = runtime;\n    }\n}\nclass ConditionalExpr extends Expression {\n    constructor(condition, trueCase, falseCase = null, type, sourceSpan) {\n        super(type || trueCase.type, sourceSpan);\n        this.condition = condition;\n        this.falseCase = falseCase;\n        this.trueCase = trueCase;\n    }\n    isEquivalent(e) {\n        return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) &&\n            this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitConditionalExpr(this, context);\n    }\n    clone() {\n        return new ConditionalExpr(this.condition.clone(), this.trueCase.clone(), this.falseCase?.clone(), this.type, this.sourceSpan);\n    }\n}\nclass DynamicImportExpr extends Expression {\n    constructor(url, sourceSpan) {\n        super(null, sourceSpan);\n        this.url = url;\n    }\n    isEquivalent(e) {\n        return e instanceof DynamicImportExpr && this.url === e.url;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitDynamicImportExpr(this, context);\n    }\n    clone() {\n        return new DynamicImportExpr(this.url, this.sourceSpan);\n    }\n}\nclass NotExpr extends Expression {\n    constructor(condition, sourceSpan) {\n        super(BOOL_TYPE, sourceSpan);\n        this.condition = condition;\n    }\n    isEquivalent(e) {\n        return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitNotExpr(this, context);\n    }\n    clone() {\n        return new NotExpr(this.condition.clone(), this.sourceSpan);\n    }\n}\nclass FnParam {\n    constructor(name, type = null) {\n        this.name = name;\n        this.type = type;\n    }\n    isEquivalent(param) {\n        return this.name === param.name;\n    }\n    clone() {\n        return new FnParam(this.name, this.type);\n    }\n}\nclass FunctionExpr extends Expression {\n    constructor(params, statements, type, sourceSpan, name) {\n        super(type, sourceSpan);\n        this.params = params;\n        this.statements = statements;\n        this.name = name;\n    }\n    isEquivalent(e) {\n        return (e instanceof FunctionExpr || e instanceof DeclareFunctionStmt) &&\n            areAllEquivalent(this.params, e.params) && areAllEquivalent(this.statements, e.statements);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitFunctionExpr(this, context);\n    }\n    toDeclStmt(name, modifiers) {\n        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n    }\n    clone() {\n        // TODO: Should we deep clone statements?\n        return new FunctionExpr(this.params.map(p => p.clone()), this.statements, this.type, this.sourceSpan, this.name);\n    }\n}\nclass ArrowFunctionExpr extends Expression {\n    // Note that `body: Expression` represents `() => expr` whereas\n    // `body: Statement[]` represents `() => { expr }`.\n    constructor(params, body, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.params = params;\n        this.body = body;\n    }\n    isEquivalent(e) {\n        if (!(e instanceof ArrowFunctionExpr) || !areAllEquivalent(this.params, e.params)) {\n            return false;\n        }\n        if (this.body instanceof Expression && e.body instanceof Expression) {\n            return this.body.isEquivalent(e.body);\n        }\n        if (Array.isArray(this.body) && Array.isArray(e.body)) {\n            return areAllEquivalent(this.body, e.body);\n        }\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitArrowFunctionExpr(this, context);\n    }\n    clone() {\n        // TODO: Should we deep clone statements?\n        return new ArrowFunctionExpr(this.params.map(p => p.clone()), Array.isArray(this.body) ? this.body : this.body.clone(), this.type, this.sourceSpan);\n    }\n    toDeclStmt(name, modifiers) {\n        return new DeclareVarStmt(name, this, INFERRED_TYPE, modifiers, this.sourceSpan);\n    }\n}\nclass UnaryOperatorExpr extends Expression {\n    constructor(operator, expr, type, sourceSpan, parens = true) {\n        super(type || NUMBER_TYPE, sourceSpan);\n        this.operator = operator;\n        this.expr = expr;\n        this.parens = parens;\n    }\n    isEquivalent(e) {\n        return e instanceof UnaryOperatorExpr && this.operator === e.operator &&\n            this.expr.isEquivalent(e.expr);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitUnaryOperatorExpr(this, context);\n    }\n    clone() {\n        return new UnaryOperatorExpr(this.operator, this.expr.clone(), this.type, this.sourceSpan, this.parens);\n    }\n}\nclass BinaryOperatorExpr extends Expression {\n    constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {\n        super(type || lhs.type, sourceSpan);\n        this.operator = operator;\n        this.rhs = rhs;\n        this.parens = parens;\n        this.lhs = lhs;\n    }\n    isEquivalent(e) {\n        return e instanceof BinaryOperatorExpr && this.operator === e.operator &&\n            this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitBinaryOperatorExpr(this, context);\n    }\n    clone() {\n        return new BinaryOperatorExpr(this.operator, this.lhs.clone(), this.rhs.clone(), this.type, this.sourceSpan, this.parens);\n    }\n}\nclass ReadPropExpr extends Expression {\n    constructor(receiver, name, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    // An alias for name, which allows other logic to handle property reads and keyed reads together.\n    get index() {\n        return this.name;\n    }\n    isEquivalent(e) {\n        return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitReadPropExpr(this, context);\n    }\n    set(value) {\n        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n    }\n    clone() {\n        return new ReadPropExpr(this.receiver.clone(), this.name, this.type, this.sourceSpan);\n    }\n}\nclass ReadKeyExpr extends Expression {\n    constructor(receiver, index, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.receiver = receiver;\n        this.index = index;\n    }\n    isEquivalent(e) {\n        return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitReadKeyExpr(this, context);\n    }\n    set(value) {\n        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n    }\n    clone() {\n        return new ReadKeyExpr(this.receiver.clone(), this.index.clone(), this.type, this.sourceSpan);\n    }\n}\nclass LiteralArrayExpr extends Expression {\n    constructor(entries, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.entries = entries;\n    }\n    isConstant() {\n        return this.entries.every(e => e.isConstant());\n    }\n    isEquivalent(e) {\n        return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralArrayExpr(this, context);\n    }\n    clone() {\n        return new LiteralArrayExpr(this.entries.map(e => e.clone()), this.type, this.sourceSpan);\n    }\n}\nclass LiteralMapEntry {\n    constructor(key, value, quoted) {\n        this.key = key;\n        this.value = value;\n        this.quoted = quoted;\n    }\n    isEquivalent(e) {\n        return this.key === e.key && this.value.isEquivalent(e.value);\n    }\n    clone() {\n        return new LiteralMapEntry(this.key, this.value.clone(), this.quoted);\n    }\n}\nclass LiteralMapExpr extends Expression {\n    constructor(entries, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.entries = entries;\n        this.valueType = null;\n        if (type) {\n            this.valueType = type.valueType;\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n    }\n    isConstant() {\n        return this.entries.every(e => e.value.isConstant());\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralMapExpr(this, context);\n    }\n    clone() {\n        const entriesClone = this.entries.map(entry => entry.clone());\n        return new LiteralMapExpr(entriesClone, this.type, this.sourceSpan);\n    }\n}\nclass CommaExpr extends Expression {\n    constructor(parts, sourceSpan) {\n        super(parts[parts.length - 1].type, sourceSpan);\n        this.parts = parts;\n    }\n    isEquivalent(e) {\n        return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitCommaExpr(this, context);\n    }\n    clone() {\n        return new CommaExpr(this.parts.map(p => p.clone()));\n    }\n}\nconst NULL_EXPR = new LiteralExpr(null, null, null);\nconst TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);\n//// Statements\nvar StmtModifier;\n(function (StmtModifier) {\n    StmtModifier[StmtModifier[\"None\"] = 0] = \"None\";\n    StmtModifier[StmtModifier[\"Final\"] = 1] = \"Final\";\n    StmtModifier[StmtModifier[\"Private\"] = 2] = \"Private\";\n    StmtModifier[StmtModifier[\"Exported\"] = 4] = \"Exported\";\n    StmtModifier[StmtModifier[\"Static\"] = 8] = \"Static\";\n})(StmtModifier || (StmtModifier = {}));\nclass LeadingComment {\n    constructor(text, multiline, trailingNewline) {\n        this.text = text;\n        this.multiline = multiline;\n        this.trailingNewline = trailingNewline;\n    }\n    toString() {\n        return this.multiline ? ` ${this.text} ` : this.text;\n    }\n}\nclass JSDocComment extends LeadingComment {\n    constructor(tags) {\n        super('', /* multiline */ true, /* trailingNewline */ true);\n        this.tags = tags;\n    }\n    toString() {\n        return serializeTags(this.tags);\n    }\n}\nclass Statement {\n    constructor(modifiers = StmtModifier.None, sourceSpan = null, leadingComments) {\n        this.modifiers = modifiers;\n        this.sourceSpan = sourceSpan;\n        this.leadingComments = leadingComments;\n    }\n    hasModifier(modifier) {\n        return (this.modifiers & modifier) !== 0;\n    }\n    addLeadingComment(leadingComment) {\n        this.leadingComments = this.leadingComments ?? [];\n        this.leadingComments.push(leadingComment);\n    }\n}\nclass DeclareVarStmt extends Statement {\n    constructor(name, value, type, modifiers, sourceSpan, leadingComments) {\n        super(modifiers, sourceSpan, leadingComments);\n        this.name = name;\n        this.value = value;\n        this.type = type || (value && value.type) || null;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof DeclareVarStmt && this.name === stmt.name &&\n            (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitDeclareVarStmt(this, context);\n    }\n}\nclass DeclareFunctionStmt extends Statement {\n    constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {\n        super(modifiers, sourceSpan, leadingComments);\n        this.name = name;\n        this.params = params;\n        this.statements = statements;\n        this.type = type || null;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) &&\n            areAllEquivalent(this.statements, stmt.statements);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitDeclareFunctionStmt(this, context);\n    }\n}\nclass ExpressionStatement extends Statement {\n    constructor(expr, sourceSpan, leadingComments) {\n        super(StmtModifier.None, sourceSpan, leadingComments);\n        this.expr = expr;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitExpressionStmt(this, context);\n    }\n}\nclass ReturnStatement extends Statement {\n    constructor(value, sourceSpan = null, leadingComments) {\n        super(StmtModifier.None, sourceSpan, leadingComments);\n        this.value = value;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitReturnStmt(this, context);\n    }\n}\nclass IfStmt extends Statement {\n    constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {\n        super(StmtModifier.None, sourceSpan, leadingComments);\n        this.condition = condition;\n        this.trueCase = trueCase;\n        this.falseCase = falseCase;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) &&\n            areAllEquivalent(this.trueCase, stmt.trueCase) &&\n            areAllEquivalent(this.falseCase, stmt.falseCase);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitIfStmt(this, context);\n    }\n}\nclass RecursiveAstVisitor$1 {\n    visitType(ast, context) {\n        return ast;\n    }\n    visitExpression(ast, context) {\n        if (ast.type) {\n            ast.type.visitType(this, context);\n        }\n        return ast;\n    }\n    visitBuiltinType(type, context) {\n        return this.visitType(type, context);\n    }\n    visitExpressionType(type, context) {\n        type.value.visitExpression(this, context);\n        if (type.typeParams !== null) {\n            type.typeParams.forEach(param => this.visitType(param, context));\n        }\n        return this.visitType(type, context);\n    }\n    visitArrayType(type, context) {\n        return this.visitType(type, context);\n    }\n    visitMapType(type, context) {\n        return this.visitType(type, context);\n    }\n    visitTransplantedType(type, context) {\n        return type;\n    }\n    visitWrappedNodeExpr(ast, context) {\n        return ast;\n    }\n    visitTypeofExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitReadVarExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitWriteVarExpr(ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitWriteKeyExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitWritePropExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitDynamicImportExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitInvokeFunctionExpr(ast, context) {\n        ast.fn.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    }\n    visitTaggedTemplateExpr(ast, context) {\n        ast.tag.visitExpression(this, context);\n        this.visitAllExpressions(ast.template.expressions, context);\n        return this.visitExpression(ast, context);\n    }\n    visitInstantiateExpr(ast, context) {\n        ast.classExpr.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitLocalizedString(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitExternalExpr(ast, context) {\n        if (ast.typeParams) {\n            ast.typeParams.forEach(type => type.visitType(this, context));\n        }\n        return this.visitExpression(ast, context);\n    }\n    visitConditionalExpr(ast, context) {\n        ast.condition.visitExpression(this, context);\n        ast.trueCase.visitExpression(this, context);\n        ast.falseCase.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitNotExpr(ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitFunctionExpr(ast, context) {\n        this.visitAllStatements(ast.statements, context);\n        return this.visitExpression(ast, context);\n    }\n    visitArrowFunctionExpr(ast, context) {\n        if (Array.isArray(ast.body)) {\n            this.visitAllStatements(ast.body, context);\n        }\n        else {\n            this.visitExpression(ast.body, context);\n        }\n        return this.visitExpression(ast, context);\n    }\n    visitUnaryOperatorExpr(ast, context) {\n        ast.expr.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitBinaryOperatorExpr(ast, context) {\n        ast.lhs.visitExpression(this, context);\n        ast.rhs.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitReadPropExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitReadKeyExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralArrayExpr(ast, context) {\n        this.visitAllExpressions(ast.entries, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralMapExpr(ast, context) {\n        ast.entries.forEach((entry) => entry.value.visitExpression(this, context));\n        return this.visitExpression(ast, context);\n    }\n    visitCommaExpr(ast, context) {\n        this.visitAllExpressions(ast.parts, context);\n        return this.visitExpression(ast, context);\n    }\n    visitAllExpressions(exprs, context) {\n        exprs.forEach(expr => expr.visitExpression(this, context));\n    }\n    visitDeclareVarStmt(stmt, context) {\n        if (stmt.value) {\n            stmt.value.visitExpression(this, context);\n        }\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    }\n    visitDeclareFunctionStmt(stmt, context) {\n        this.visitAllStatements(stmt.statements, context);\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    }\n    visitExpressionStmt(stmt, context) {\n        stmt.expr.visitExpression(this, context);\n        return stmt;\n    }\n    visitReturnStmt(stmt, context) {\n        stmt.value.visitExpression(this, context);\n        return stmt;\n    }\n    visitIfStmt(stmt, context) {\n        stmt.condition.visitExpression(this, context);\n        this.visitAllStatements(stmt.trueCase, context);\n        this.visitAllStatements(stmt.falseCase, context);\n        return stmt;\n    }\n    visitAllStatements(stmts, context) {\n        stmts.forEach(stmt => stmt.visitStatement(this, context));\n    }\n}\nfunction leadingComment(text, multiline = false, trailingNewline = true) {\n    return new LeadingComment(text, multiline, trailingNewline);\n}\nfunction jsDocComment(tags = []) {\n    return new JSDocComment(tags);\n}\nfunction variable(name, type, sourceSpan) {\n    return new ReadVarExpr(name, type, sourceSpan);\n}\nfunction importExpr(id, typeParams = null, sourceSpan) {\n    return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\nfunction importType(id, typeParams, typeModifiers) {\n    return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\nfunction expressionType(expr, typeModifiers, typeParams) {\n    return new ExpressionType(expr, typeModifiers, typeParams);\n}\nfunction transplantedType(type, typeModifiers) {\n    return new TransplantedType(type, typeModifiers);\n}\nfunction typeofExpr(expr) {\n    return new TypeofExpr(expr);\n}\nfunction literalArr(values, type, sourceSpan) {\n    return new LiteralArrayExpr(values, type, sourceSpan);\n}\nfunction literalMap(values, type = null) {\n    return new LiteralMapExpr(values.map(e => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);\n}\nfunction unary(operator, expr, type, sourceSpan) {\n    return new UnaryOperatorExpr(operator, expr, type, sourceSpan);\n}\nfunction not(expr, sourceSpan) {\n    return new NotExpr(expr, sourceSpan);\n}\nfunction fn(params, body, type, sourceSpan, name) {\n    return new FunctionExpr(params, body, type, sourceSpan, name);\n}\nfunction arrowFn(params, body, type, sourceSpan) {\n    return new ArrowFunctionExpr(params, body, type, sourceSpan);\n}\nfunction ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {\n    return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);\n}\nfunction taggedTemplate(tag, template, type, sourceSpan) {\n    return new TaggedTemplateExpr(tag, template, type, sourceSpan);\n}\nfunction literal(value, type, sourceSpan) {\n    return new LiteralExpr(value, type, sourceSpan);\n}\nfunction localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {\n    return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);\n}\nfunction isNull(exp) {\n    return exp instanceof LiteralExpr && exp.value === null;\n}\n/*\n * Serializes a `Tag` into a string.\n * Returns a string like \" @foo {bar} baz\" (note the leading whitespace before `@foo`).\n */\nfunction tagToString(tag) {\n    let out = '';\n    if (tag.tagName) {\n        out += ` @${tag.tagName}`;\n    }\n    if (tag.text) {\n        if (tag.text.match(/\\/\\*|\\*\\//)) {\n            throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n        }\n        out += ' ' + tag.text.replace(/@/g, '\\\\@');\n    }\n    return out;\n}\nfunction serializeTags(tags) {\n    if (tags.length === 0)\n        return '';\n    if (tags.length === 1 && tags[0].tagName && !tags[0].text) {\n        // The JSDOC comment is a single simple tag: e.g `/** @tagname */`.\n        return `*${tagToString(tags[0])} `;\n    }\n    let out = '*\\n';\n    for (const tag of tags) {\n        out += ' *';\n        // If the tagToString is multi-line, insert \" * \" prefixes on lines.\n        out += tagToString(tag).replace(/\\n/g, '\\n * ');\n        out += '\\n';\n    }\n    out += ' ';\n    return out;\n}\n\nvar output_ast = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    get TypeModifier () { return TypeModifier; },\n    Type: Type,\n    get BuiltinTypeName () { return BuiltinTypeName; },\n    BuiltinType: BuiltinType,\n    ExpressionType: ExpressionType,\n    ArrayType: ArrayType,\n    MapType: MapType,\n    TransplantedType: TransplantedType,\n    DYNAMIC_TYPE: DYNAMIC_TYPE,\n    INFERRED_TYPE: INFERRED_TYPE,\n    BOOL_TYPE: BOOL_TYPE,\n    INT_TYPE: INT_TYPE,\n    NUMBER_TYPE: NUMBER_TYPE,\n    STRING_TYPE: STRING_TYPE,\n    FUNCTION_TYPE: FUNCTION_TYPE,\n    NONE_TYPE: NONE_TYPE,\n    get UnaryOperator () { return UnaryOperator; },\n    get BinaryOperator () { return BinaryOperator; },\n    nullSafeIsEquivalent: nullSafeIsEquivalent,\n    areAllEquivalent: areAllEquivalent,\n    Expression: Expression,\n    ReadVarExpr: ReadVarExpr,\n    TypeofExpr: TypeofExpr,\n    WrappedNodeExpr: WrappedNodeExpr,\n    WriteVarExpr: WriteVarExpr,\n    WriteKeyExpr: WriteKeyExpr,\n    WritePropExpr: WritePropExpr,\n    InvokeFunctionExpr: InvokeFunctionExpr,\n    TaggedTemplateExpr: TaggedTemplateExpr,\n    InstantiateExpr: InstantiateExpr,\n    LiteralExpr: LiteralExpr,\n    TemplateLiteral: TemplateLiteral,\n    TemplateLiteralElement: TemplateLiteralElement,\n    LiteralPiece: LiteralPiece,\n    PlaceholderPiece: PlaceholderPiece,\n    LocalizedString: LocalizedString,\n    ExternalExpr: ExternalExpr,\n    ExternalReference: ExternalReference,\n    ConditionalExpr: ConditionalExpr,\n    DynamicImportExpr: DynamicImportExpr,\n    NotExpr: NotExpr,\n    FnParam: FnParam,\n    FunctionExpr: FunctionExpr,\n    ArrowFunctionExpr: ArrowFunctionExpr,\n    UnaryOperatorExpr: UnaryOperatorExpr,\n    BinaryOperatorExpr: BinaryOperatorExpr,\n    ReadPropExpr: ReadPropExpr,\n    ReadKeyExpr: ReadKeyExpr,\n    LiteralArrayExpr: LiteralArrayExpr,\n    LiteralMapEntry: LiteralMapEntry,\n    LiteralMapExpr: LiteralMapExpr,\n    CommaExpr: CommaExpr,\n    NULL_EXPR: NULL_EXPR,\n    TYPED_NULL_EXPR: TYPED_NULL_EXPR,\n    get StmtModifier () { return StmtModifier; },\n    LeadingComment: LeadingComment,\n    JSDocComment: JSDocComment,\n    Statement: Statement,\n    DeclareVarStmt: DeclareVarStmt,\n    DeclareFunctionStmt: DeclareFunctionStmt,\n    ExpressionStatement: ExpressionStatement,\n    ReturnStatement: ReturnStatement,\n    IfStmt: IfStmt,\n    RecursiveAstVisitor: RecursiveAstVisitor$1,\n    leadingComment: leadingComment,\n    jsDocComment: jsDocComment,\n    variable: variable,\n    importExpr: importExpr,\n    importType: importType,\n    expressionType: expressionType,\n    transplantedType: transplantedType,\n    typeofExpr: typeofExpr,\n    literalArr: literalArr,\n    literalMap: literalMap,\n    unary: unary,\n    not: not,\n    fn: fn,\n    arrowFn: arrowFn,\n    ifStmt: ifStmt,\n    taggedTemplate: taggedTemplate,\n    literal: literal,\n    localizedString: localizedString,\n    isNull: isNull\n});\n\nconst CONSTANT_PREFIX = '_c';\n/**\n * `ConstantPool` tries to reuse literal factories when two or more literals are identical.\n * We determine whether literals are identical by creating a key out of their AST using the\n * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely\n * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what\n * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note\n * that we use a variable, rather than something like `null` in order to avoid collisions.\n */\nconst UNKNOWN_VALUE_KEY = variable('<unknown>');\n/**\n * Context to use when producing a key.\n *\n * This ensures we see the constant not the reference variable when producing\n * a key.\n */\nconst KEY_CONTEXT = {};\n/**\n * Generally all primitive values are excluded from the `ConstantPool`, but there is an exclusion\n * for strings that reach a certain length threshold. This constant defines the length threshold for\n * strings.\n */\nconst POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;\n/**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\nclass FixupExpression extends Expression {\n    constructor(resolved) {\n        super(resolved.type);\n        this.resolved = resolved;\n        this.shared = false;\n        this.original = resolved;\n    }\n    visitExpression(visitor, context) {\n        if (context === KEY_CONTEXT) {\n            // When producing a key we want to traverse the constant not the\n            // variable used to refer to it.\n            return this.original.visitExpression(visitor, context);\n        }\n        else {\n            return this.resolved.visitExpression(visitor, context);\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);\n    }\n    isConstant() {\n        return true;\n    }\n    clone() {\n        throw new Error(`Not supported.`);\n    }\n    fixup(expression) {\n        this.resolved = expression;\n        this.shared = true;\n    }\n}\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nclass ConstantPool {\n    constructor(isClosureCompilerEnabled = false) {\n        this.isClosureCompilerEnabled = isClosureCompilerEnabled;\n        this.statements = [];\n        this.literals = new Map();\n        this.literalFactories = new Map();\n        this.sharedConstants = new Map();\n        this.nextNameIndex = 0;\n    }\n    getConstLiteral(literal, forceShared) {\n        if ((literal instanceof LiteralExpr && !isLongStringLiteral(literal)) ||\n            literal instanceof FixupExpression) {\n            // Do no put simple literals into the constant pool or try to produce a constant for a\n            // reference to a constant.\n            return literal;\n        }\n        const key = GenericKeyFn.INSTANCE.keyOf(literal);\n        let fixup = this.literals.get(key);\n        let newValue = false;\n        if (!fixup) {\n            fixup = new FixupExpression(literal);\n            this.literals.set(key, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            // Replace the expression with a variable\n            const name = this.freshName();\n            let definition;\n            let usage;\n            if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {\n                // For string literals, Closure will **always** inline the string at\n                // **all** usages, duplicating it each time. For large strings, this\n                // unnecessarily bloats bundle size. To work around this restriction, we\n                // wrap the string in a function, and call that function for each usage.\n                // This tricks Closure into using inline logic for functions instead of\n                // string literals. Function calls are only inlined if the body is small\n                // enough to be worth it. By doing this, very large strings will be\n                // shared across multiple usages, rather than duplicating the string at\n                // each usage site.\n                //\n                // const myStr = function() { return \"very very very long string\"; };\n                // const usage1 = myStr();\n                // const usage2 = myStr();\n                definition = variable(name).set(new FunctionExpr([], // Params.\n                [\n                    // Statements.\n                    new ReturnStatement(literal),\n                ]));\n                usage = variable(name).callFn([]);\n            }\n            else {\n                // Just declare and use the variable directly, without a function call\n                // indirection. This saves a few bytes and avoids an unnecessary call.\n                definition = variable(name).set(literal);\n                usage = variable(name);\n            }\n            this.statements.push(definition.toDeclStmt(INFERRED_TYPE, StmtModifier.Final));\n            fixup.fixup(usage);\n        }\n        return fixup;\n    }\n    getSharedConstant(def, expr) {\n        const key = def.keyOf(expr);\n        if (!this.sharedConstants.has(key)) {\n            const id = this.freshName();\n            this.sharedConstants.set(key, variable(id));\n            this.statements.push(def.toSharedConstantDeclaration(id, expr));\n        }\n        return this.sharedConstants.get(key);\n    }\n    getLiteralFactory(literal) {\n        // Create a pure function that builds an array of a mix of constant and variable expressions\n        if (literal instanceof LiteralArrayExpr) {\n            const argumentsForKey = literal.entries.map(e => e.isConstant() ? e : UNKNOWN_VALUE_KEY);\n            const key = GenericKeyFn.INSTANCE.keyOf(literalArr(argumentsForKey));\n            return this._getLiteralFactory(key, literal.entries, entries => literalArr(entries));\n        }\n        else {\n            const expressionForKey = literalMap(literal.entries.map(e => ({\n                key: e.key,\n                value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,\n                quoted: e.quoted\n            })));\n            const key = GenericKeyFn.INSTANCE.keyOf(expressionForKey);\n            return this._getLiteralFactory(key, literal.entries.map(e => e.value), entries => literalMap(entries.map((value, index) => ({\n                key: literal.entries[index].key,\n                value,\n                quoted: literal.entries[index].quoted\n            }))));\n        }\n    }\n    // TODO: useUniqueName(false) is necessary for naming compatibility with\n    // TemplateDefinitionBuilder, but should be removed once Template Pipeline is the default.\n    getSharedFunctionReference(fn, prefix, useUniqueName = true) {\n        const isArrow = fn instanceof ArrowFunctionExpr;\n        for (const current of this.statements) {\n            // Arrow functions are saved as variables so we check if the\n            // value of the variable is the same as the arrow function.\n            if (isArrow && current instanceof DeclareVarStmt && current.value?.isEquivalent(fn)) {\n                return variable(current.name);\n            }\n            // Function declarations are saved as function statements\n            // so we compare them directly to the passed-in function.\n            if (!isArrow && current instanceof DeclareFunctionStmt && fn.isEquivalent(current)) {\n                return variable(current.name);\n            }\n        }\n        // Otherwise declare the function.\n        const name = useUniqueName ? this.uniqueName(prefix) : prefix;\n        this.statements.push(fn.toDeclStmt(name, StmtModifier.Final));\n        return variable(name);\n    }\n    _getLiteralFactory(key, values, resultMap) {\n        let literalFactory = this.literalFactories.get(key);\n        const literalFactoryArguments = values.filter((e => !e.isConstant()));\n        if (!literalFactory) {\n            const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));\n            const parameters = resultExpressions.filter(isVariable).map(e => new FnParam(e.name, DYNAMIC_TYPE));\n            const pureFunctionDeclaration = arrowFn(parameters, resultMap(resultExpressions), INFERRED_TYPE);\n            const name = this.freshName();\n            this.statements.push(variable(name)\n                .set(pureFunctionDeclaration)\n                .toDeclStmt(INFERRED_TYPE, StmtModifier.Final));\n            literalFactory = variable(name);\n            this.literalFactories.set(key, literalFactory);\n        }\n        return { literalFactory, literalFactoryArguments };\n    }\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     */\n    uniqueName(prefix) {\n        return `${prefix}${this.nextNameIndex++}`;\n    }\n    freshName() {\n        return this.uniqueName(CONSTANT_PREFIX);\n    }\n}\nclass GenericKeyFn {\n    static { this.INSTANCE = new GenericKeyFn(); }\n    keyOf(expr) {\n        if (expr instanceof LiteralExpr && typeof expr.value === 'string') {\n            return `\"${expr.value}\"`;\n        }\n        else if (expr instanceof LiteralExpr) {\n            return String(expr.value);\n        }\n        else if (expr instanceof LiteralArrayExpr) {\n            const entries = [];\n            for (const entry of expr.entries) {\n                entries.push(this.keyOf(entry));\n            }\n            return `[${entries.join(',')}]`;\n        }\n        else if (expr instanceof LiteralMapExpr) {\n            const entries = [];\n            for (const entry of expr.entries) {\n                let key = entry.key;\n                if (entry.quoted) {\n                    key = `\"${key}\"`;\n                }\n                entries.push(key + ':' + this.keyOf(entry.value));\n            }\n            return `{${entries.join(',')}}`;\n        }\n        else if (expr instanceof ExternalExpr) {\n            return `import(\"${expr.value.moduleName}\", ${expr.value.name})`;\n        }\n        else if (expr instanceof ReadVarExpr) {\n            return `read(${expr.name})`;\n        }\n        else if (expr instanceof TypeofExpr) {\n            return `typeof(${this.keyOf(expr.expr)})`;\n        }\n        else {\n            throw new Error(`${this.constructor.name} does not handle expressions of type ${expr.constructor.name}`);\n        }\n    }\n}\nfunction isVariable(e) {\n    return e instanceof ReadVarExpr;\n}\nfunction isLongStringLiteral(expr) {\n    return expr instanceof LiteralExpr && typeof expr.value === 'string' &&\n        expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;\n}\n\nconst CORE = '@angular/core';\nclass Identifiers {\n    /* Methods */\n    static { this.NEW_METHOD = 'factory'; }\n    static { this.TRANSFORM_METHOD = 'transform'; }\n    static { this.PATCH_DEPS = 'patchedDeps'; }\n    static { this.core = { name: null, moduleName: CORE }; }\n    /* Instructions */\n    static { this.namespaceHTML = { name: 'ɵɵnamespaceHTML', moduleName: CORE }; }\n    static { this.namespaceMathML = { name: 'ɵɵnamespaceMathML', moduleName: CORE }; }\n    static { this.namespaceSVG = { name: 'ɵɵnamespaceSVG', moduleName: CORE }; }\n    static { this.element = { name: 'ɵɵelement', moduleName: CORE }; }\n    static { this.elementStart = { name: 'ɵɵelementStart', moduleName: CORE }; }\n    static { this.elementEnd = { name: 'ɵɵelementEnd', moduleName: CORE }; }\n    static { this.advance = { name: 'ɵɵadvance', moduleName: CORE }; }\n    static { this.syntheticHostProperty = { name: 'ɵɵsyntheticHostProperty', moduleName: CORE }; }\n    static { this.syntheticHostListener = { name: 'ɵɵsyntheticHostListener', moduleName: CORE }; }\n    static { this.attribute = { name: 'ɵɵattribute', moduleName: CORE }; }\n    static { this.attributeInterpolate1 = { name: 'ɵɵattributeInterpolate1', moduleName: CORE }; }\n    static { this.attributeInterpolate2 = { name: 'ɵɵattributeInterpolate2', moduleName: CORE }; }\n    static { this.attributeInterpolate3 = { name: 'ɵɵattributeInterpolate3', moduleName: CORE }; }\n    static { this.attributeInterpolate4 = { name: 'ɵɵattributeInterpolate4', moduleName: CORE }; }\n    static { this.attributeInterpolate5 = { name: 'ɵɵattributeInterpolate5', moduleName: CORE }; }\n    static { this.attributeInterpolate6 = { name: 'ɵɵattributeInterpolate6', moduleName: CORE }; }\n    static { this.attributeInterpolate7 = { name: 'ɵɵattributeInterpolate7', moduleName: CORE }; }\n    static { this.attributeInterpolate8 = { name: 'ɵɵattributeInterpolate8', moduleName: CORE }; }\n    static { this.attributeInterpolateV = { name: 'ɵɵattributeInterpolateV', moduleName: CORE }; }\n    static { this.classProp = { name: 'ɵɵclassProp', moduleName: CORE }; }\n    static { this.elementContainerStart = { name: 'ɵɵelementContainerStart', moduleName: CORE }; }\n    static { this.elementContainerEnd = { name: 'ɵɵelementContainerEnd', moduleName: CORE }; }\n    static { this.elementContainer = { name: 'ɵɵelementContainer', moduleName: CORE }; }\n    static { this.styleMap = { name: 'ɵɵstyleMap', moduleName: CORE }; }\n    static { this.styleMapInterpolate1 = { name: 'ɵɵstyleMapInterpolate1', moduleName: CORE }; }\n    static { this.styleMapInterpolate2 = { name: 'ɵɵstyleMapInterpolate2', moduleName: CORE }; }\n    static { this.styleMapInterpolate3 = { name: 'ɵɵstyleMapInterpolate3', moduleName: CORE }; }\n    static { this.styleMapInterpolate4 = { name: 'ɵɵstyleMapInterpolate4', moduleName: CORE }; }\n    static { this.styleMapInterpolate5 = { name: 'ɵɵstyleMapInterpolate5', moduleName: CORE }; }\n    static { this.styleMapInterpolate6 = { name: 'ɵɵstyleMapInterpolate6', moduleName: CORE }; }\n    static { this.styleMapInterpolate7 = { name: 'ɵɵstyleMapInterpolate7', moduleName: CORE }; }\n    static { this.styleMapInterpolate8 = { name: 'ɵɵstyleMapInterpolate8', moduleName: CORE }; }\n    static { this.styleMapInterpolateV = { name: 'ɵɵstyleMapInterpolateV', moduleName: CORE }; }\n    static { this.classMap = { name: 'ɵɵclassMap', moduleName: CORE }; }\n    static { this.classMapInterpolate1 = { name: 'ɵɵclassMapInterpolate1', moduleName: CORE }; }\n    static { this.classMapInterpolate2 = { name: 'ɵɵclassMapInterpolate2', moduleName: CORE }; }\n    static { this.classMapInterpolate3 = { name: 'ɵɵclassMapInterpolate3', moduleName: CORE }; }\n    static { this.classMapInterpolate4 = { name: 'ɵɵclassMapInterpolate4', moduleName: CORE }; }\n    static { this.classMapInterpolate5 = { name: 'ɵɵclassMapInterpolate5', moduleName: CORE }; }\n    static { this.classMapInterpolate6 = { name: 'ɵɵclassMapInterpolate6', moduleName: CORE }; }\n    static { this.classMapInterpolate7 = { name: 'ɵɵclassMapInterpolate7', moduleName: CORE }; }\n    static { this.classMapInterpolate8 = { name: 'ɵɵclassMapInterpolate8', moduleName: CORE }; }\n    static { this.classMapInterpolateV = { name: 'ɵɵclassMapInterpolateV', moduleName: CORE }; }\n    static { this.styleProp = { name: 'ɵɵstyleProp', moduleName: CORE }; }\n    static { this.stylePropInterpolate1 = { name: 'ɵɵstylePropInterpolate1', moduleName: CORE }; }\n    static { this.stylePropInterpolate2 = { name: 'ɵɵstylePropInterpolate2', moduleName: CORE }; }\n    static { this.stylePropInterpolate3 = { name: 'ɵɵstylePropInterpolate3', moduleName: CORE }; }\n    static { this.stylePropInterpolate4 = { name: 'ɵɵstylePropInterpolate4', moduleName: CORE }; }\n    static { this.stylePropInterpolate5 = { name: 'ɵɵstylePropInterpolate5', moduleName: CORE }; }\n    static { this.stylePropInterpolate6 = { name: 'ɵɵstylePropInterpolate6', moduleName: CORE }; }\n    static { this.stylePropInterpolate7 = { name: 'ɵɵstylePropInterpolate7', moduleName: CORE }; }\n    static { this.stylePropInterpolate8 = { name: 'ɵɵstylePropInterpolate8', moduleName: CORE }; }\n    static { this.stylePropInterpolateV = { name: 'ɵɵstylePropInterpolateV', moduleName: CORE }; }\n    static { this.nextContext = { name: 'ɵɵnextContext', moduleName: CORE }; }\n    static { this.resetView = { name: 'ɵɵresetView', moduleName: CORE }; }\n    static { this.templateCreate = { name: 'ɵɵtemplate', moduleName: CORE }; }\n    static { this.defer = { name: 'ɵɵdefer', moduleName: CORE }; }\n    static { this.deferWhen = { name: 'ɵɵdeferWhen', moduleName: CORE }; }\n    static { this.deferOnIdle = { name: 'ɵɵdeferOnIdle', moduleName: CORE }; }\n    static { this.deferOnImmediate = { name: 'ɵɵdeferOnImmediate', moduleName: CORE }; }\n    static { this.deferOnTimer = { name: 'ɵɵdeferOnTimer', moduleName: CORE }; }\n    static { this.deferOnHover = { name: 'ɵɵdeferOnHover', moduleName: CORE }; }\n    static { this.deferOnInteraction = { name: 'ɵɵdeferOnInteraction', moduleName: CORE }; }\n    static { this.deferOnViewport = { name: 'ɵɵdeferOnViewport', moduleName: CORE }; }\n    static { this.deferPrefetchWhen = { name: 'ɵɵdeferPrefetchWhen', moduleName: CORE }; }\n    static { this.deferPrefetchOnIdle = { name: 'ɵɵdeferPrefetchOnIdle', moduleName: CORE }; }\n    static { this.deferPrefetchOnImmediate = { name: 'ɵɵdeferPrefetchOnImmediate', moduleName: CORE }; }\n    static { this.deferPrefetchOnTimer = { name: 'ɵɵdeferPrefetchOnTimer', moduleName: CORE }; }\n    static { this.deferPrefetchOnHover = { name: 'ɵɵdeferPrefetchOnHover', moduleName: CORE }; }\n    static { this.deferPrefetchOnInteraction = { name: 'ɵɵdeferPrefetchOnInteraction', moduleName: CORE }; }\n    static { this.deferPrefetchOnViewport = { name: 'ɵɵdeferPrefetchOnViewport', moduleName: CORE }; }\n    static { this.deferEnableTimerScheduling = { name: 'ɵɵdeferEnableTimerScheduling', moduleName: CORE }; }\n    static { this.conditional = { name: 'ɵɵconditional', moduleName: CORE }; }\n    static { this.repeater = { name: 'ɵɵrepeater', moduleName: CORE }; }\n    static { this.repeaterCreate = { name: 'ɵɵrepeaterCreate', moduleName: CORE }; }\n    static { this.repeaterTrackByIndex = { name: 'ɵɵrepeaterTrackByIndex', moduleName: CORE }; }\n    static { this.repeaterTrackByIdentity = { name: 'ɵɵrepeaterTrackByIdentity', moduleName: CORE }; }\n    static { this.componentInstance = { name: 'ɵɵcomponentInstance', moduleName: CORE }; }\n    static { this.text = { name: 'ɵɵtext', moduleName: CORE }; }\n    static { this.enableBindings = { name: 'ɵɵenableBindings', moduleName: CORE }; }\n    static { this.disableBindings = { name: 'ɵɵdisableBindings', moduleName: CORE }; }\n    static { this.getCurrentView = { name: 'ɵɵgetCurrentView', moduleName: CORE }; }\n    static { this.textInterpolate = { name: 'ɵɵtextInterpolate', moduleName: CORE }; }\n    static { this.textInterpolate1 = { name: 'ɵɵtextInterpolate1', moduleName: CORE }; }\n    static { this.textInterpolate2 = { name: 'ɵɵtextInterpolate2', moduleName: CORE }; }\n    static { this.textInterpolate3 = { name: 'ɵɵtextInterpolate3', moduleName: CORE }; }\n    static { this.textInterpolate4 = { name: 'ɵɵtextInterpolate4', moduleName: CORE }; }\n    static { this.textInterpolate5 = { name: 'ɵɵtextInterpolate5', moduleName: CORE }; }\n    static { this.textInterpolate6 = { name: 'ɵɵtextInterpolate6', moduleName: CORE }; }\n    static { this.textInterpolate7 = { name: 'ɵɵtextInterpolate7', moduleName: CORE }; }\n    static { this.textInterpolate8 = { name: 'ɵɵtextInterpolate8', moduleName: CORE }; }\n    static { this.textInterpolateV = { name: 'ɵɵtextInterpolateV', moduleName: CORE }; }\n    static { this.restoreView = { name: 'ɵɵrestoreView', moduleName: CORE }; }\n    static { this.pureFunction0 = { name: 'ɵɵpureFunction0', moduleName: CORE }; }\n    static { this.pureFunction1 = { name: 'ɵɵpureFunction1', moduleName: CORE }; }\n    static { this.pureFunction2 = { name: 'ɵɵpureFunction2', moduleName: CORE }; }\n    static { this.pureFunction3 = { name: 'ɵɵpureFunction3', moduleName: CORE }; }\n    static { this.pureFunction4 = { name: 'ɵɵpureFunction4', moduleName: CORE }; }\n    static { this.pureFunction5 = { name: 'ɵɵpureFunction5', moduleName: CORE }; }\n    static { this.pureFunction6 = { name: 'ɵɵpureFunction6', moduleName: CORE }; }\n    static { this.pureFunction7 = { name: 'ɵɵpureFunction7', moduleName: CORE }; }\n    static { this.pureFunction8 = { name: 'ɵɵpureFunction8', moduleName: CORE }; }\n    static { this.pureFunctionV = { name: 'ɵɵpureFunctionV', moduleName: CORE }; }\n    static { this.pipeBind1 = { name: 'ɵɵpipeBind1', moduleName: CORE }; }\n    static { this.pipeBind2 = { name: 'ɵɵpipeBind2', moduleName: CORE }; }\n    static { this.pipeBind3 = { name: 'ɵɵpipeBind3', moduleName: CORE }; }\n    static { this.pipeBind4 = { name: 'ɵɵpipeBind4', moduleName: CORE }; }\n    static { this.pipeBindV = { name: 'ɵɵpipeBindV', moduleName: CORE }; }\n    static { this.hostProperty = { name: 'ɵɵhostProperty', moduleName: CORE }; }\n    static { this.property = { name: 'ɵɵproperty', moduleName: CORE }; }\n    static { this.propertyInterpolate = { name: 'ɵɵpropertyInterpolate', moduleName: CORE }; }\n    static { this.propertyInterpolate1 = { name: 'ɵɵpropertyInterpolate1', moduleName: CORE }; }\n    static { this.propertyInterpolate2 = { name: 'ɵɵpropertyInterpolate2', moduleName: CORE }; }\n    static { this.propertyInterpolate3 = { name: 'ɵɵpropertyInterpolate3', moduleName: CORE }; }\n    static { this.propertyInterpolate4 = { name: 'ɵɵpropertyInterpolate4', moduleName: CORE }; }\n    static { this.propertyInterpolate5 = { name: 'ɵɵpropertyInterpolate5', moduleName: CORE }; }\n    static { this.propertyInterpolate6 = { name: 'ɵɵpropertyInterpolate6', moduleName: CORE }; }\n    static { this.propertyInterpolate7 = { name: 'ɵɵpropertyInterpolate7', moduleName: CORE }; }\n    static { this.propertyInterpolate8 = { name: 'ɵɵpropertyInterpolate8', moduleName: CORE }; }\n    static { this.propertyInterpolateV = { name: 'ɵɵpropertyInterpolateV', moduleName: CORE }; }\n    static { this.i18n = { name: 'ɵɵi18n', moduleName: CORE }; }\n    static { this.i18nAttributes = { name: 'ɵɵi18nAttributes', moduleName: CORE }; }\n    static { this.i18nExp = { name: 'ɵɵi18nExp', moduleName: CORE }; }\n    static { this.i18nStart = { name: 'ɵɵi18nStart', moduleName: CORE }; }\n    static { this.i18nEnd = { name: 'ɵɵi18nEnd', moduleName: CORE }; }\n    static { this.i18nApply = { name: 'ɵɵi18nApply', moduleName: CORE }; }\n    static { this.i18nPostprocess = { name: 'ɵɵi18nPostprocess', moduleName: CORE }; }\n    static { this.pipe = { name: 'ɵɵpipe', moduleName: CORE }; }\n    static { this.projection = { name: 'ɵɵprojection', moduleName: CORE }; }\n    static { this.projectionDef = { name: 'ɵɵprojectionDef', moduleName: CORE }; }\n    static { this.reference = { name: 'ɵɵreference', moduleName: CORE }; }\n    static { this.inject = { name: 'ɵɵinject', moduleName: CORE }; }\n    static { this.injectAttribute = { name: 'ɵɵinjectAttribute', moduleName: CORE }; }\n    static { this.directiveInject = { name: 'ɵɵdirectiveInject', moduleName: CORE }; }\n    static { this.invalidFactory = { name: 'ɵɵinvalidFactory', moduleName: CORE }; }\n    static { this.invalidFactoryDep = { name: 'ɵɵinvalidFactoryDep', moduleName: CORE }; }\n    static { this.templateRefExtractor = { name: 'ɵɵtemplateRefExtractor', moduleName: CORE }; }\n    static { this.forwardRef = { name: 'forwardRef', moduleName: CORE }; }\n    static { this.resolveForwardRef = { name: 'resolveForwardRef', moduleName: CORE }; }\n    static { this.ɵɵdefineInjectable = { name: 'ɵɵdefineInjectable', moduleName: CORE }; }\n    static { this.declareInjectable = { name: 'ɵɵngDeclareInjectable', moduleName: CORE }; }\n    static { this.InjectableDeclaration = { name: 'ɵɵInjectableDeclaration', moduleName: CORE }; }\n    static { this.resolveWindow = { name: 'ɵɵresolveWindow', moduleName: CORE }; }\n    static { this.resolveDocument = { name: 'ɵɵresolveDocument', moduleName: CORE }; }\n    static { this.resolveBody = { name: 'ɵɵresolveBody', moduleName: CORE }; }\n    static { this.getComponentDepsFactory = { name: 'ɵɵgetComponentDepsFactory', moduleName: CORE }; }\n    static { this.defineComponent = { name: 'ɵɵdefineComponent', moduleName: CORE }; }\n    static { this.declareComponent = { name: 'ɵɵngDeclareComponent', moduleName: CORE }; }\n    static { this.setComponentScope = { name: 'ɵɵsetComponentScope', moduleName: CORE }; }\n    static { this.ChangeDetectionStrategy = {\n        name: 'ChangeDetectionStrategy',\n        moduleName: CORE,\n    }; }\n    static { this.ViewEncapsulation = {\n        name: 'ViewEncapsulation',\n        moduleName: CORE,\n    }; }\n    static { this.ComponentDeclaration = {\n        name: 'ɵɵComponentDeclaration',\n        moduleName: CORE,\n    }; }\n    static { this.FactoryDeclaration = {\n        name: 'ɵɵFactoryDeclaration',\n        moduleName: CORE,\n    }; }\n    static { this.declareFactory = { name: 'ɵɵngDeclareFactory', moduleName: CORE }; }\n    static { this.FactoryTarget = { name: 'ɵɵFactoryTarget', moduleName: CORE }; }\n    static { this.defineDirective = { name: 'ɵɵdefineDirective', moduleName: CORE }; }\n    static { this.declareDirective = { name: 'ɵɵngDeclareDirective', moduleName: CORE }; }\n    static { this.DirectiveDeclaration = {\n        name: 'ɵɵDirectiveDeclaration',\n        moduleName: CORE,\n    }; }\n    static { this.InjectorDef = { name: 'ɵɵInjectorDef', moduleName: CORE }; }\n    static { this.InjectorDeclaration = { name: 'ɵɵInjectorDeclaration', moduleName: CORE }; }\n    static { this.defineInjector = { name: 'ɵɵdefineInjector', moduleName: CORE }; }\n    static { this.declareInjector = { name: 'ɵɵngDeclareInjector', moduleName: CORE }; }\n    static { this.NgModuleDeclaration = {\n        name: 'ɵɵNgModuleDeclaration',\n        moduleName: CORE,\n    }; }\n    static { this.ModuleWithProviders = {\n        name: 'ModuleWithProviders',\n        moduleName: CORE,\n    }; }\n    static { this.defineNgModule = { name: 'ɵɵdefineNgModule', moduleName: CORE }; }\n    static { this.declareNgModule = { name: 'ɵɵngDeclareNgModule', moduleName: CORE }; }\n    static { this.setNgModuleScope = { name: 'ɵɵsetNgModuleScope', moduleName: CORE }; }\n    static { this.registerNgModuleType = { name: 'ɵɵregisterNgModuleType', moduleName: CORE }; }\n    static { this.PipeDeclaration = { name: 'ɵɵPipeDeclaration', moduleName: CORE }; }\n    static { this.definePipe = { name: 'ɵɵdefinePipe', moduleName: CORE }; }\n    static { this.declarePipe = { name: 'ɵɵngDeclarePipe', moduleName: CORE }; }\n    static { this.declareClassMetadata = { name: 'ɵɵngDeclareClassMetadata', moduleName: CORE }; }\n    static { this.setClassMetadata = { name: 'ɵsetClassMetadata', moduleName: CORE }; }\n    static { this.setClassMetadataAsync = { name: 'ɵsetClassMetadataAsync', moduleName: CORE }; }\n    static { this.setClassDebugInfo = { name: 'ɵsetClassDebugInfo', moduleName: CORE }; }\n    static { this.queryRefresh = { name: 'ɵɵqueryRefresh', moduleName: CORE }; }\n    static { this.viewQuery = { name: 'ɵɵviewQuery', moduleName: CORE }; }\n    static { this.loadQuery = { name: 'ɵɵloadQuery', moduleName: CORE }; }\n    static { this.contentQuery = { name: 'ɵɵcontentQuery', moduleName: CORE }; }\n    static { this.NgOnChangesFeature = { name: 'ɵɵNgOnChangesFeature', moduleName: CORE }; }\n    static { this.InheritDefinitionFeature = { name: 'ɵɵInheritDefinitionFeature', moduleName: CORE }; }\n    static { this.CopyDefinitionFeature = { name: 'ɵɵCopyDefinitionFeature', moduleName: CORE }; }\n    static { this.StandaloneFeature = { name: 'ɵɵStandaloneFeature', moduleName: CORE }; }\n    static { this.ProvidersFeature = { name: 'ɵɵProvidersFeature', moduleName: CORE }; }\n    static { this.HostDirectivesFeature = { name: 'ɵɵHostDirectivesFeature', moduleName: CORE }; }\n    static { this.InputTransformsFeatureFeature = { name: 'ɵɵInputTransformsFeature', moduleName: CORE }; }\n    static { this.listener = { name: 'ɵɵlistener', moduleName: CORE }; }\n    static { this.getInheritedFactory = {\n        name: 'ɵɵgetInheritedFactory',\n        moduleName: CORE,\n    }; }\n    static { this.InputFlags = {\n        name: 'ɵɵInputFlags',\n        moduleName: CORE,\n    }; }\n    // sanitization-related functions\n    static { this.sanitizeHtml = { name: 'ɵɵsanitizeHtml', moduleName: CORE }; }\n    static { this.sanitizeStyle = { name: 'ɵɵsanitizeStyle', moduleName: CORE }; }\n    static { this.sanitizeResourceUrl = { name: 'ɵɵsanitizeResourceUrl', moduleName: CORE }; }\n    static { this.sanitizeScript = { name: 'ɵɵsanitizeScript', moduleName: CORE }; }\n    static { this.sanitizeUrl = { name: 'ɵɵsanitizeUrl', moduleName: CORE }; }\n    static { this.sanitizeUrlOrResourceUrl = { name: 'ɵɵsanitizeUrlOrResourceUrl', moduleName: CORE }; }\n    static { this.trustConstantHtml = { name: 'ɵɵtrustConstantHtml', moduleName: CORE }; }\n    static { this.trustConstantResourceUrl = { name: 'ɵɵtrustConstantResourceUrl', moduleName: CORE }; }\n    static { this.validateIframeAttribute = { name: 'ɵɵvalidateIframeAttribute', moduleName: CORE }; }\n    // type-checking\n    static { this.InputSignalBrandWriteType = { name: 'ɵINPUT_SIGNAL_BRAND_WRITE_TYPE', moduleName: CORE }; }\n    static { this.UnwrapDirectiveSignalInputs = { name: 'ɵUnwrapDirectiveSignalInputs', moduleName: CORE }; }\n}\n\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\n}\nfunction splitAtColon(input, defaultValues) {\n    return _splitAt(input, ':', defaultValues);\n}\nfunction splitAtPeriod(input, defaultValues) {\n    return _splitAt(input, '.', defaultValues);\n}\nfunction _splitAt(input, character, defaultValues) {\n    const characterIndex = input.indexOf(character);\n    if (characterIndex == -1)\n        return defaultValues;\n    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\nfunction noUndefined(val) {\n    return val === undefined ? null : val;\n}\nfunction error(msg) {\n    throw new Error(`Internal Error: ${msg}`);\n}\n// Escape characters that have a special meaning in Regular Expressions\nfunction escapeRegExp(s) {\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\nfunction utf8Encode(str) {\n    let encoded = [];\n    for (let index = 0; index < str.length; index++) {\n        let codePoint = str.charCodeAt(index);\n        // decode surrogate\n        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {\n            const low = str.charCodeAt(index + 1);\n            if (low >= 0xdc00 && low <= 0xdfff) {\n                index++;\n                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;\n            }\n        }\n        if (codePoint <= 0x7f) {\n            encoded.push(codePoint);\n        }\n        else if (codePoint <= 0x7ff) {\n            encoded.push(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0xffff) {\n            encoded.push((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0x1fffff) {\n            encoded.push(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n    }\n    return encoded;\n}\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (Array.isArray(token)) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    if (!token.toString) {\n        return 'object';\n    }\n    // WARNING: do not try to `JSON.stringify(token)` here\n    // see https://github.com/angular/angular/issues/23440\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\nclass Version {\n    constructor(full) {\n        this.full = full;\n        const splits = full.split('.');\n        this.major = splits[0];\n        this.minor = splits[1];\n        this.patch = splits.slice(2).join('.');\n    }\n}\nconst _global = globalThis;\nfunction newArray(size, value) {\n    const list = [];\n    for (let i = 0; i < size; i++) {\n        list.push(value);\n    }\n    return list;\n}\n/**\n * Partitions a given array into 2 arrays, based on a boolean value returned by the condition\n * function.\n *\n * @param arr Input array that should be partitioned\n * @param conditionFn Condition function that is called for each item in a given array and returns a\n * boolean value.\n */\nfunction partitionArray(arr, conditionFn) {\n    const truthy = [];\n    const falsy = [];\n    for (const item of arr) {\n        (conditionFn(item) ? truthy : falsy).push(item);\n    }\n    return [truthy, falsy];\n}\n\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\nconst VERSION$1 = 3;\nconst JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\nclass SourceMapGenerator {\n    constructor(file = null) {\n        this.file = file;\n        this.sourcesContent = new Map();\n        this.lines = [];\n        this.lastCol0 = 0;\n        this.hasMappings = false;\n    }\n    // The content is `null` when the content is expected to be loaded using the URL\n    addSource(url, content = null) {\n        if (!this.sourcesContent.has(url)) {\n            this.sourcesContent.set(url, content);\n        }\n        return this;\n    }\n    addLine() {\n        this.lines.push([]);\n        this.lastCol0 = 0;\n        return this;\n    }\n    addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {\n        if (!this.currentLine) {\n            throw new Error(`A line must be added before mappings can be added`);\n        }\n        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n            throw new Error(`Unknown source file \"${sourceUrl}\"`);\n        }\n        if (col0 == null) {\n            throw new Error(`The column in the generated code must be provided`);\n        }\n        if (col0 < this.lastCol0) {\n            throw new Error(`Mapping should be added in output order`);\n        }\n        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n            throw new Error(`The source location must be provided when a source url is provided`);\n        }\n        this.hasMappings = true;\n        this.lastCol0 = col0;\n        this.currentLine.push({ col0, sourceUrl, sourceLine0, sourceCol0 });\n        return this;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get currentLine() {\n        return this.lines.slice(-1)[0];\n    }\n    toJSON() {\n        if (!this.hasMappings) {\n            return null;\n        }\n        const sourcesIndex = new Map();\n        const sources = [];\n        const sourcesContent = [];\n        Array.from(this.sourcesContent.keys()).forEach((url, i) => {\n            sourcesIndex.set(url, i);\n            sources.push(url);\n            sourcesContent.push(this.sourcesContent.get(url) || null);\n        });\n        let mappings = '';\n        let lastCol0 = 0;\n        let lastSourceIndex = 0;\n        let lastSourceLine0 = 0;\n        let lastSourceCol0 = 0;\n        this.lines.forEach(segments => {\n            lastCol0 = 0;\n            mappings += segments\n                .map(segment => {\n                // zero-based starting column of the line in the generated code\n                let segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n                lastCol0 = segment.col0;\n                if (segment.sourceUrl != null) {\n                    // zero-based index into the “sources” list\n                    segAsStr +=\n                        toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);\n                    lastSourceIndex = sourcesIndex.get(segment.sourceUrl);\n                    // the zero-based starting line in the original source\n                    segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);\n                    lastSourceLine0 = segment.sourceLine0;\n                    // the zero-based starting column in the original source\n                    segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);\n                    lastSourceCol0 = segment.sourceCol0;\n                }\n                return segAsStr;\n            })\n                .join(',');\n            mappings += ';';\n        });\n        mappings = mappings.slice(0, -1);\n        return {\n            'file': this.file || '',\n            'version': VERSION$1,\n            'sourceRoot': '',\n            'sources': sources,\n            'sourcesContent': sourcesContent,\n            'mappings': mappings,\n        };\n    }\n    toJsComment() {\n        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\n            '';\n    }\n}\nfunction toBase64String(value) {\n    let b64 = '';\n    const encoded = utf8Encode(value);\n    for (let i = 0; i < encoded.length;) {\n        const i1 = encoded[i++];\n        const i2 = i < encoded.length ? encoded[i++] : null;\n        const i3 = i < encoded.length ? encoded[i++] : null;\n        b64 += toBase64Digit(i1 >> 2);\n        b64 += toBase64Digit(((i1 & 3) << 4) | (i2 === null ? 0 : i2 >> 4));\n        b64 += i2 === null ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 === null ? 0 : i3 >> 6));\n        b64 += i2 === null || i3 === null ? '=' : toBase64Digit(i3 & 63);\n    }\n    return b64;\n}\nfunction toBase64VLQ(value) {\n    value = value < 0 ? ((-value) << 1) + 1 : value << 1;\n    let out = '';\n    do {\n        let digit = value & 31;\n        value = value >> 5;\n        if (value > 0) {\n            digit = digit | 32;\n        }\n        out += toBase64Digit(digit);\n    } while (value > 0);\n    return out;\n}\nconst B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfunction toBase64Digit(value) {\n    if (value < 0 || value >= 64) {\n        throw new Error(`Can only encode value in the range [0, 63]`);\n    }\n    return B64_DIGITS[value];\n}\n\nconst _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nconst _INDENT_WITH = '  ';\nclass _EmittedLine {\n    constructor(indent) {\n        this.indent = indent;\n        this.partsLength = 0;\n        this.parts = [];\n        this.srcSpans = [];\n    }\n}\nclass EmitterVisitorContext {\n    static createRoot() {\n        return new EmitterVisitorContext(0);\n    }\n    constructor(_indent) {\n        this._indent = _indent;\n        this._lines = [new _EmittedLine(_indent)];\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get _currentLine() {\n        return this._lines[this._lines.length - 1];\n    }\n    println(from, lastPart = '') {\n        this.print(from || null, lastPart, true);\n    }\n    lineIsEmpty() {\n        return this._currentLine.parts.length === 0;\n    }\n    lineLength() {\n        return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n    }\n    print(from, part, newLine = false) {\n        if (part.length > 0) {\n            this._currentLine.parts.push(part);\n            this._currentLine.partsLength += part.length;\n            this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n        }\n        if (newLine) {\n            this._lines.push(new _EmittedLine(this._indent));\n        }\n    }\n    removeEmptyLastLine() {\n        if (this.lineIsEmpty()) {\n            this._lines.pop();\n        }\n    }\n    incIndent() {\n        this._indent++;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    }\n    decIndent() {\n        this._indent--;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    }\n    toSource() {\n        return this.sourceLines\n            .map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '')\n            .join('\\n');\n    }\n    toSourceMapGenerator(genFilePath, startsAtLine = 0) {\n        const map = new SourceMapGenerator(genFilePath);\n        let firstOffsetMapped = false;\n        const mapFirstOffsetIfNeeded = () => {\n            if (!firstOffsetMapped) {\n                // Add a single space so that tools won't try to load the file from disk.\n                // Note: We are using virtual urls like `ng:///`, so we have to\n                // provide a content here.\n                map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\n                firstOffsetMapped = true;\n            }\n        };\n        for (let i = 0; i < startsAtLine; i++) {\n            map.addLine();\n            mapFirstOffsetIfNeeded();\n        }\n        this.sourceLines.forEach((line, lineIdx) => {\n            map.addLine();\n            const spans = line.srcSpans;\n            const parts = line.parts;\n            let col0 = line.indent * _INDENT_WITH.length;\n            let spanIdx = 0;\n            // skip leading parts without source spans\n            while (spanIdx < spans.length && !spans[spanIdx]) {\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n            }\n            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n                firstOffsetMapped = true;\n            }\n            else {\n                mapFirstOffsetIfNeeded();\n            }\n            while (spanIdx < spans.length) {\n                const span = spans[spanIdx];\n                const source = span.start.file;\n                const sourceLine = span.start.line;\n                const sourceCol = span.start.col;\n                map.addSource(source.url, source.content)\n                    .addMapping(col0, source.url, sourceLine, sourceCol);\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n                // assign parts without span or the same span to the previous segment\n                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n                    col0 += parts[spanIdx].length;\n                    spanIdx++;\n                }\n            }\n        });\n        return map;\n    }\n    spanOf(line, column) {\n        const emittedLine = this._lines[line];\n        if (emittedLine) {\n            let columnsLeft = column - _createIndent(emittedLine.indent).length;\n            for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n                const part = emittedLine.parts[partIndex];\n                if (part.length > columnsLeft) {\n                    return emittedLine.srcSpans[partIndex];\n                }\n                columnsLeft -= part.length;\n            }\n        }\n        return null;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get sourceLines() {\n        if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n            return this._lines.slice(0, -1);\n        }\n        return this._lines;\n    }\n}\nclass AbstractEmitterVisitor {\n    constructor(_escapeDollarInStrings) {\n        this._escapeDollarInStrings = _escapeDollarInStrings;\n    }\n    printLeadingComments(stmt, ctx) {\n        if (stmt.leadingComments === undefined) {\n            return;\n        }\n        for (const comment of stmt.leadingComments) {\n            if (comment instanceof JSDocComment) {\n                ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);\n            }\n            else {\n                if (comment.multiline) {\n                    ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);\n                }\n                else {\n                    comment.text.split('\\n').forEach((line) => {\n                        ctx.println(stmt, `// ${line}`);\n                    });\n                }\n            }\n        }\n    }\n    visitExpressionStmt(stmt, ctx) {\n        this.printLeadingComments(stmt, ctx);\n        stmt.expr.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    }\n    visitReturnStmt(stmt, ctx) {\n        this.printLeadingComments(stmt, ctx);\n        ctx.print(stmt, `return `);\n        stmt.value.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    }\n    visitIfStmt(stmt, ctx) {\n        this.printLeadingComments(stmt, ctx);\n        ctx.print(stmt, `if (`);\n        stmt.condition.visitExpression(this, ctx);\n        ctx.print(stmt, `) {`);\n        const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n        if (stmt.trueCase.length <= 1 && !hasElseCase) {\n            ctx.print(stmt, ` `);\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.removeEmptyLastLine();\n            ctx.print(stmt, ` `);\n        }\n        else {\n            ctx.println();\n            ctx.incIndent();\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.decIndent();\n            if (hasElseCase) {\n                ctx.println(stmt, `} else {`);\n                ctx.incIndent();\n                this.visitAllStatements(stmt.falseCase, ctx);\n                ctx.decIndent();\n            }\n        }\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitWriteVarExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        ctx.print(expr, `${expr.name} = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitWriteKeyExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, `[`);\n        expr.index.visitExpression(this, ctx);\n        ctx.print(expr, `] = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitWritePropExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, `.${expr.name} = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitInvokeFunctionExpr(expr, ctx) {\n        const shouldParenthesize = expr.fn instanceof ArrowFunctionExpr;\n        if (shouldParenthesize) {\n            ctx.print(expr.fn, '(');\n        }\n        expr.fn.visitExpression(this, ctx);\n        if (shouldParenthesize) {\n            ctx.print(expr.fn, ')');\n        }\n        ctx.print(expr, `(`);\n        this.visitAllExpressions(expr.args, ctx, ',');\n        ctx.print(expr, `)`);\n        return null;\n    }\n    visitTaggedTemplateExpr(expr, ctx) {\n        expr.tag.visitExpression(this, ctx);\n        ctx.print(expr, '`' + expr.template.elements[0].rawText);\n        for (let i = 1; i < expr.template.elements.length; i++) {\n            ctx.print(expr, '${');\n            expr.template.expressions[i - 1].visitExpression(this, ctx);\n            ctx.print(expr, `}${expr.template.elements[i].rawText}`);\n        }\n        ctx.print(expr, '`');\n        return null;\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');\n    }\n    visitTypeofExpr(expr, ctx) {\n        ctx.print(expr, 'typeof ');\n        expr.expr.visitExpression(this, ctx);\n    }\n    visitReadVarExpr(ast, ctx) {\n        ctx.print(ast, ast.name);\n        return null;\n    }\n    visitInstantiateExpr(ast, ctx) {\n        ctx.print(ast, `new `);\n        ast.classExpr.visitExpression(this, ctx);\n        ctx.print(ast, `(`);\n        this.visitAllExpressions(ast.args, ctx, ',');\n        ctx.print(ast, `)`);\n        return null;\n    }\n    visitLiteralExpr(ast, ctx) {\n        const value = ast.value;\n        if (typeof value === 'string') {\n            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n        }\n        else {\n            ctx.print(ast, `${value}`);\n        }\n        return null;\n    }\n    visitLocalizedString(ast, ctx) {\n        const head = ast.serializeI18nHead();\n        ctx.print(ast, '$localize `' + head.raw);\n        for (let i = 1; i < ast.messageParts.length; i++) {\n            ctx.print(ast, '${');\n            ast.expressions[i - 1].visitExpression(this, ctx);\n            ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);\n        }\n        ctx.print(ast, '`');\n        return null;\n    }\n    visitConditionalExpr(ast, ctx) {\n        ctx.print(ast, `(`);\n        ast.condition.visitExpression(this, ctx);\n        ctx.print(ast, '? ');\n        ast.trueCase.visitExpression(this, ctx);\n        ctx.print(ast, ': ');\n        ast.falseCase.visitExpression(this, ctx);\n        ctx.print(ast, `)`);\n        return null;\n    }\n    visitDynamicImportExpr(ast, ctx) {\n        ctx.print(ast, `import(${ast.url})`);\n    }\n    visitNotExpr(ast, ctx) {\n        ctx.print(ast, '!');\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    }\n    visitUnaryOperatorExpr(ast, ctx) {\n        let opStr;\n        switch (ast.operator) {\n            case UnaryOperator.Plus:\n                opStr = '+';\n                break;\n            case UnaryOperator.Minus:\n                opStr = '-';\n                break;\n            default:\n                throw new Error(`Unknown operator ${ast.operator}`);\n        }\n        if (ast.parens)\n            ctx.print(ast, `(`);\n        ctx.print(ast, opStr);\n        ast.expr.visitExpression(this, ctx);\n        if (ast.parens)\n            ctx.print(ast, `)`);\n        return null;\n    }\n    visitBinaryOperatorExpr(ast, ctx) {\n        let opStr;\n        switch (ast.operator) {\n            case BinaryOperator.Equals:\n                opStr = '==';\n                break;\n            case BinaryOperator.Identical:\n                opStr = '===';\n                break;\n            case BinaryOperator.NotEquals:\n                opStr = '!=';\n                break;\n            case BinaryOperator.NotIdentical:\n                opStr = '!==';\n                break;\n            case BinaryOperator.And:\n                opStr = '&&';\n                break;\n            case BinaryOperator.BitwiseOr:\n                opStr = '|';\n                break;\n            case BinaryOperator.BitwiseAnd:\n                opStr = '&';\n                break;\n            case BinaryOperator.Or:\n                opStr = '||';\n                break;\n            case BinaryOperator.Plus:\n                opStr = '+';\n                break;\n            case BinaryOperator.Minus:\n                opStr = '-';\n                break;\n            case BinaryOperator.Divide:\n                opStr = '/';\n                break;\n            case BinaryOperator.Multiply:\n                opStr = '*';\n                break;\n            case BinaryOperator.Modulo:\n                opStr = '%';\n                break;\n            case BinaryOperator.Lower:\n                opStr = '<';\n                break;\n            case BinaryOperator.LowerEquals:\n                opStr = '<=';\n                break;\n            case BinaryOperator.Bigger:\n                opStr = '>';\n                break;\n            case BinaryOperator.BiggerEquals:\n                opStr = '>=';\n                break;\n            case BinaryOperator.NullishCoalesce:\n                opStr = '??';\n                break;\n            default:\n                throw new Error(`Unknown operator ${ast.operator}`);\n        }\n        if (ast.parens)\n            ctx.print(ast, `(`);\n        ast.lhs.visitExpression(this, ctx);\n        ctx.print(ast, ` ${opStr} `);\n        ast.rhs.visitExpression(this, ctx);\n        if (ast.parens)\n            ctx.print(ast, `)`);\n        return null;\n    }\n    visitReadPropExpr(ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, `.`);\n        ctx.print(ast, ast.name);\n        return null;\n    }\n    visitReadKeyExpr(ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, `[`);\n        ast.index.visitExpression(this, ctx);\n        ctx.print(ast, `]`);\n        return null;\n    }\n    visitLiteralArrayExpr(ast, ctx) {\n        ctx.print(ast, `[`);\n        this.visitAllExpressions(ast.entries, ctx, ',');\n        ctx.print(ast, `]`);\n        return null;\n    }\n    visitLiteralMapExpr(ast, ctx) {\n        ctx.print(ast, `{`);\n        this.visitAllObjects(entry => {\n            ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);\n            entry.value.visitExpression(this, ctx);\n        }, ast.entries, ctx, ',');\n        ctx.print(ast, `}`);\n        return null;\n    }\n    visitCommaExpr(ast, ctx) {\n        ctx.print(ast, '(');\n        this.visitAllExpressions(ast.parts, ctx, ',');\n        ctx.print(ast, ')');\n        return null;\n    }\n    visitAllExpressions(expressions, ctx, separator) {\n        this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator);\n    }\n    visitAllObjects(handler, expressions, ctx, separator) {\n        let incrementedIndent = false;\n        for (let i = 0; i < expressions.length; i++) {\n            if (i > 0) {\n                if (ctx.lineLength() > 80) {\n                    ctx.print(null, separator, true);\n                    if (!incrementedIndent) {\n                        // continuation are marked with double indent.\n                        ctx.incIndent();\n                        ctx.incIndent();\n                        incrementedIndent = true;\n                    }\n                }\n                else {\n                    ctx.print(null, separator, false);\n                }\n            }\n            handler(expressions[i]);\n        }\n        if (incrementedIndent) {\n            // continuation are marked with double indent.\n            ctx.decIndent();\n            ctx.decIndent();\n        }\n    }\n    visitAllStatements(statements, ctx) {\n        statements.forEach((stmt) => stmt.visitStatement(this, ctx));\n    }\n}\nfunction escapeIdentifier(input, escapeDollar, alwaysQuote = true) {\n    if (input == null) {\n        return null;\n    }\n    const body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {\n        if (match[0] == '$') {\n            return escapeDollar ? '\\\\$' : '$';\n        }\n        else if (match[0] == '\\n') {\n            return '\\\\n';\n        }\n        else if (match[0] == '\\r') {\n            return '\\\\r';\n        }\n        else {\n            return `\\\\${match[0]}`;\n        }\n    });\n    const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n    return requiresQuotes ? `'${body}'` : body;\n}\nfunction _createIndent(count) {\n    let res = '';\n    for (let i = 0; i < count; i++) {\n        res += _INDENT_WITH;\n    }\n    return res;\n}\n\nfunction typeWithParameters(type, numParams) {\n    if (numParams === 0) {\n        return expressionType(type);\n    }\n    const params = [];\n    for (let i = 0; i < numParams; i++) {\n        params.push(DYNAMIC_TYPE);\n    }\n    return expressionType(type, undefined, params);\n}\nconst ANIMATE_SYMBOL_PREFIX = '@';\nfunction prepareSyntheticPropertyName(name) {\n    return `${ANIMATE_SYMBOL_PREFIX}${name}`;\n}\nfunction prepareSyntheticListenerName(name, phase) {\n    return `${ANIMATE_SYMBOL_PREFIX}${name}.${phase}`;\n}\nfunction getSafePropertyAccessString(accessor, name) {\n    const escapedName = escapeIdentifier(name, false, false);\n    return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;\n}\nfunction prepareSyntheticListenerFunctionName(name, phase) {\n    return `animation_${name}_${phase}`;\n}\nfunction jitOnlyGuardedExpression(expr) {\n    return guardedExpression('ngJitMode', expr);\n}\nfunction devOnlyGuardedExpression(expr) {\n    return guardedExpression('ngDevMode', expr);\n}\nfunction guardedExpression(guard, expr) {\n    const guardExpr = new ExternalExpr({ name: guard, moduleName: null });\n    const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal('undefined'));\n    const guardUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, guardNotDefined, guardExpr, /* type */ undefined, \n    /* sourceSpan */ undefined, true);\n    return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);\n}\nfunction wrapReference(value) {\n    const wrapped = new WrappedNodeExpr(value);\n    return { value: wrapped, type: wrapped };\n}\nfunction refsToArray(refs, shouldForwardDeclare) {\n    const values = literalArr(refs.map(ref => ref.value));\n    return shouldForwardDeclare ? arrowFn([], values) : values;\n}\nfunction createMayBeForwardRefExpression(expression, forwardRef) {\n    return { expression, forwardRef };\n}\n/**\n * Convert a `MaybeForwardRefExpression` to an `Expression`, possibly wrapping its expression in a\n * `forwardRef()` call.\n *\n * If `MaybeForwardRefExpression.forwardRef` is `ForwardRefHandling.Unwrapped` then the expression\n * was originally wrapped in a `forwardRef()` call to prevent the value from being eagerly evaluated\n * in the code.\n *\n * See `packages/compiler-cli/src/ngtsc/annotations/src/injectable.ts` and\n * `packages/compiler/src/jit_compiler_facade.ts` for more information.\n */\nfunction convertFromMaybeForwardRefExpression({ expression, forwardRef }) {\n    switch (forwardRef) {\n        case 0 /* ForwardRefHandling.None */:\n        case 1 /* ForwardRefHandling.Wrapped */:\n            return expression;\n        case 2 /* ForwardRefHandling.Unwrapped */:\n            return generateForwardRef(expression);\n    }\n}\n/**\n * Generate an expression that has the given `expr` wrapped in the following form:\n *\n * ```\n * forwardRef(() => expr)\n * ```\n */\nfunction generateForwardRef(expr) {\n    return importExpr(Identifiers.forwardRef).callFn([arrowFn([], expr)]);\n}\n\nvar R3FactoryDelegateType;\n(function (R3FactoryDelegateType) {\n    R3FactoryDelegateType[R3FactoryDelegateType[\"Class\"] = 0] = \"Class\";\n    R3FactoryDelegateType[R3FactoryDelegateType[\"Function\"] = 1] = \"Function\";\n})(R3FactoryDelegateType || (R3FactoryDelegateType = {}));\nvar FactoryTarget$1;\n(function (FactoryTarget) {\n    FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n    FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n    FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n    FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n    FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget$1 || (FactoryTarget$1 = {}));\n/**\n * Construct a factory function expression for the given `R3FactoryMetadata`.\n */\nfunction compileFactoryFunction(meta) {\n    const t = variable('t');\n    let baseFactoryVar = null;\n    // The type to instantiate via constructor invocation. If there is no delegated factory, meaning\n    // this type is always created by constructor invocation, then this is the type-to-create\n    // parameter provided by the user (t) if specified, or the current type if not. If there is a\n    // delegated factory (which is used to create the current type) then this is only the type-to-\n    // create parameter (t).\n    const typeForCtor = !isDelegatedFactoryMetadata(meta) ?\n        new BinaryOperatorExpr(BinaryOperator.Or, t, meta.type.value) :\n        t;\n    let ctorExpr = null;\n    if (meta.deps !== null) {\n        // There is a constructor (either explicitly or implicitly defined).\n        if (meta.deps !== 'invalid') {\n            ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));\n        }\n    }\n    else {\n        // There is no constructor, use the base class' factory to construct typeForCtor.\n        baseFactoryVar = variable(`ɵ${meta.name}_BaseFactory`);\n        ctorExpr = baseFactoryVar.callFn([typeForCtor]);\n    }\n    const body = [];\n    let retExpr = null;\n    function makeConditionalFactory(nonCtorExpr) {\n        const r = variable('r');\n        body.push(r.set(NULL_EXPR).toDeclStmt());\n        const ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() :\n            importExpr(Identifiers.invalidFactory).callFn([]).toStmt();\n        body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));\n        return r;\n    }\n    if (isDelegatedFactoryMetadata(meta)) {\n        // This type is created with a delegated factory. If a type parameter is not specified, call\n        // the factory instead.\n        const delegateArgs = injectDependencies(meta.delegateDeps, meta.target);\n        // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.\n        const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ?\n            InstantiateExpr :\n            InvokeFunctionExpr)(meta.delegate, delegateArgs);\n        retExpr = makeConditionalFactory(factoryExpr);\n    }\n    else if (isExpressionFactoryMetadata(meta)) {\n        // TODO(alxhub): decide whether to lower the value here or in the caller\n        retExpr = makeConditionalFactory(meta.expression);\n    }\n    else {\n        retExpr = ctorExpr;\n    }\n    if (retExpr === null) {\n        // The expression cannot be formed so render an `ɵɵinvalidFactory()` call.\n        body.push(importExpr(Identifiers.invalidFactory).callFn([]).toStmt());\n    }\n    else if (baseFactoryVar !== null) {\n        // This factory uses a base factory, so call `ɵɵgetInheritedFactory()` to compute it.\n        const getInheritedFactoryCall = importExpr(Identifiers.getInheritedFactory).callFn([meta.type.value]);\n        // Memoize the base factoryFn: `baseFactory || (baseFactory = ɵɵgetInheritedFactory(...))`\n        const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));\n        body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));\n    }\n    else {\n        // This is straightforward factory, just return it.\n        body.push(new ReturnStatement(retExpr));\n    }\n    let factoryFn = fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, `${meta.name}_Factory`);\n    if (baseFactoryVar !== null) {\n        // There is a base factory variable so wrap its declaration along with the factory function into\n        // an IIFE.\n        factoryFn = arrowFn([], [\n            new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)\n        ]).callFn([], /* sourceSpan */ undefined, /* pure */ true);\n    }\n    return {\n        expression: factoryFn,\n        statements: [],\n        type: createFactoryType(meta),\n    };\n}\nfunction createFactoryType(meta) {\n    const ctorDepsType = meta.deps !== null && meta.deps !== 'invalid' ? createCtorDepsType(meta.deps) : NONE_TYPE;\n    return expressionType(importExpr(Identifiers.FactoryDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]));\n}\nfunction injectDependencies(deps, target) {\n    return deps.map((dep, index) => compileInjectDependency(dep, target, index));\n}\nfunction compileInjectDependency(dep, target, index) {\n    // Interpret the dependency according to its resolved type.\n    if (dep.token === null) {\n        return importExpr(Identifiers.invalidFactoryDep).callFn([literal(index)]);\n    }\n    else if (dep.attributeNameType === null) {\n        // Build up the injection flags according to the metadata.\n        const flags = 0 /* InjectFlags.Default */ | (dep.self ? 2 /* InjectFlags.Self */ : 0) |\n            (dep.skipSelf ? 4 /* InjectFlags.SkipSelf */ : 0) | (dep.host ? 1 /* InjectFlags.Host */ : 0) |\n            (dep.optional ? 8 /* InjectFlags.Optional */ : 0) |\n            (target === FactoryTarget$1.Pipe ? 16 /* InjectFlags.ForPipe */ : 0);\n        // If this dependency is optional or otherwise has non-default flags, then additional\n        // parameters describing how to inject the dependency must be passed to the inject function\n        // that's being used.\n        let flagsParam = (flags !== 0 /* InjectFlags.Default */ || dep.optional) ? literal(flags) : null;\n        // Build up the arguments to the injectFn call.\n        const injectArgs = [dep.token];\n        if (flagsParam) {\n            injectArgs.push(flagsParam);\n        }\n        const injectFn = getInjectFn(target);\n        return importExpr(injectFn).callFn(injectArgs);\n    }\n    else {\n        // The `dep.attributeTypeName` value is defined, which indicates that this is an `@Attribute()`\n        // type dependency. For the generated JS we still want to use the `dep.token` value in case the\n        // name given for the attribute is not a string literal. For example given `@Attribute(foo())`,\n        // we want to generate `ɵɵinjectAttribute(foo())`.\n        //\n        // The `dep.attributeTypeName` is only actually used (in `createCtorDepType()`) to generate\n        // typings.\n        return importExpr(Identifiers.injectAttribute).callFn([dep.token]);\n    }\n}\nfunction createCtorDepsType(deps) {\n    let hasTypes = false;\n    const attributeTypes = deps.map(dep => {\n        const type = createCtorDepType(dep);\n        if (type !== null) {\n            hasTypes = true;\n            return type;\n        }\n        else {\n            return literal(null);\n        }\n    });\n    if (hasTypes) {\n        return expressionType(literalArr(attributeTypes));\n    }\n    else {\n        return NONE_TYPE;\n    }\n}\nfunction createCtorDepType(dep) {\n    const entries = [];\n    if (dep.attributeNameType !== null) {\n        entries.push({ key: 'attribute', value: dep.attributeNameType, quoted: false });\n    }\n    if (dep.optional) {\n        entries.push({ key: 'optional', value: literal(true), quoted: false });\n    }\n    if (dep.host) {\n        entries.push({ key: 'host', value: literal(true), quoted: false });\n    }\n    if (dep.self) {\n        entries.push({ key: 'self', value: literal(true), quoted: false });\n    }\n    if (dep.skipSelf) {\n        entries.push({ key: 'skipSelf', value: literal(true), quoted: false });\n    }\n    return entries.length > 0 ? literalMap(entries) : null;\n}\nfunction isDelegatedFactoryMetadata(meta) {\n    return meta.delegateType !== undefined;\n}\nfunction isExpressionFactoryMetadata(meta) {\n    return meta.expression !== undefined;\n}\nfunction getInjectFn(target) {\n    switch (target) {\n        case FactoryTarget$1.Component:\n        case FactoryTarget$1.Directive:\n        case FactoryTarget$1.Pipe:\n            return Identifiers.directiveInject;\n        case FactoryTarget$1.NgModule:\n        case FactoryTarget$1.Injectable:\n        default:\n            return Identifiers.inject;\n    }\n}\n\nvar TagContentType;\n(function (TagContentType) {\n    TagContentType[TagContentType[\"RAW_TEXT\"] = 0] = \"RAW_TEXT\";\n    TagContentType[TagContentType[\"ESCAPABLE_RAW_TEXT\"] = 1] = \"ESCAPABLE_RAW_TEXT\";\n    TagContentType[TagContentType[\"PARSABLE_DATA\"] = 2] = \"PARSABLE_DATA\";\n})(TagContentType || (TagContentType = {}));\nfunction splitNsName(elementName, fatal = true) {\n    if (elementName[0] != ':') {\n        return [null, elementName];\n    }\n    const colonIndex = elementName.indexOf(':', 1);\n    if (colonIndex === -1) {\n        if (fatal) {\n            throw new Error(`Unsupported format \"${elementName}\" expecting \":namespace:name\"`);\n        }\n        else {\n            return [null, elementName];\n        }\n    }\n    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n// `<ng-container>` tags work the same regardless the namespace\nfunction isNgContainer(tagName) {\n    return splitNsName(tagName)[1] === 'ng-container';\n}\n// `<ng-content>` tags work the same regardless the namespace\nfunction isNgContent(tagName) {\n    return splitNsName(tagName)[1] === 'ng-content';\n}\n// `<ng-template>` tags work the same regardless the namespace\nfunction isNgTemplate(tagName) {\n    return splitNsName(tagName)[1] === 'ng-template';\n}\nfunction getNsPrefix(fullName) {\n    return fullName === null ? null : splitNsName(fullName)[0];\n}\nfunction mergeNsAndName(prefix, localName) {\n    return prefix ? `:${prefix}:${localName}` : localName;\n}\n\n/**\n * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently\n * require the implementation of a visitor for Comments as they are only collected at\n * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`\n * is true.\n */\nclass Comment$1 {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(_visitor) {\n        throw new Error('visit() not implemented for Comment');\n    }\n}\nclass Text$3 {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor) {\n        return visitor.visitText(this);\n    }\n}\nclass BoundText {\n    constructor(value, sourceSpan, i18n) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitBoundText(this);\n    }\n}\n/**\n * Represents a text attribute in the template.\n *\n * `valueSpan` may not be present in cases where there is no value `<div a></div>`.\n * `keySpan` may also not be present for synthetic attributes from ICU expansions.\n */\nclass TextAttribute {\n    constructor(name, value, sourceSpan, keySpan, valueSpan, i18n) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitTextAttribute(this);\n    }\n}\nclass BoundAttribute {\n    constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n        this.i18n = i18n;\n    }\n    static fromBoundElementProperty(prop, i18n) {\n        if (prop.keySpan === undefined) {\n            throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);\n        }\n        return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);\n    }\n    visit(visitor) {\n        return visitor.visitBoundAttribute(this);\n    }\n}\nclass BoundEvent {\n    constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {\n        this.name = name;\n        this.type = type;\n        this.handler = handler;\n        this.target = target;\n        this.phase = phase;\n        this.sourceSpan = sourceSpan;\n        this.handlerSpan = handlerSpan;\n        this.keySpan = keySpan;\n    }\n    static fromParsedEvent(event) {\n        const target = event.type === 0 /* ParsedEventType.Regular */ ? event.targetOrPhase : null;\n        const phase = event.type === 1 /* ParsedEventType.Animation */ ? event.targetOrPhase : null;\n        if (event.keySpan === undefined) {\n            throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);\n        }\n        return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);\n    }\n    visit(visitor) {\n        return visitor.visitBoundEvent(this);\n    }\n}\nclass Element$1 {\n    constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        this.name = name;\n        this.attributes = attributes;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.children = children;\n        this.references = references;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitElement(this);\n    }\n}\nclass DeferredTrigger {\n    constructor(nameSpan, sourceSpan, prefetchSpan, whenOrOnSourceSpan) {\n        this.nameSpan = nameSpan;\n        this.sourceSpan = sourceSpan;\n        this.prefetchSpan = prefetchSpan;\n        this.whenOrOnSourceSpan = whenOrOnSourceSpan;\n    }\n    visit(visitor) {\n        return visitor.visitDeferredTrigger(this);\n    }\n}\nclass BoundDeferredTrigger extends DeferredTrigger {\n    constructor(value, sourceSpan, prefetchSpan, whenSourceSpan) {\n        // BoundDeferredTrigger is for 'when' triggers. These aren't really \"triggers\" and don't have a\n        // nameSpan. Trigger names are the built in event triggers like hover, interaction, etc.\n        super(/** nameSpan */ null, sourceSpan, prefetchSpan, whenSourceSpan);\n        this.value = value;\n    }\n}\nclass IdleDeferredTrigger extends DeferredTrigger {\n}\nclass ImmediateDeferredTrigger extends DeferredTrigger {\n}\nclass HoverDeferredTrigger extends DeferredTrigger {\n    constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n        super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n        this.reference = reference;\n    }\n}\nclass TimerDeferredTrigger extends DeferredTrigger {\n    constructor(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n        super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n        this.delay = delay;\n    }\n}\nclass InteractionDeferredTrigger extends DeferredTrigger {\n    constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n        super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n        this.reference = reference;\n    }\n}\nclass ViewportDeferredTrigger extends DeferredTrigger {\n    constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n        super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n        this.reference = reference;\n    }\n}\nclass BlockNode {\n    constructor(nameSpan, sourceSpan, startSourceSpan, endSourceSpan) {\n        this.nameSpan = nameSpan;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n}\nclass DeferredBlockPlaceholder extends BlockNode {\n    constructor(children, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.children = children;\n        this.minimumTime = minimumTime;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitDeferredBlockPlaceholder(this);\n    }\n}\nclass DeferredBlockLoading extends BlockNode {\n    constructor(children, afterTime, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.children = children;\n        this.afterTime = afterTime;\n        this.minimumTime = minimumTime;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitDeferredBlockLoading(this);\n    }\n}\nclass DeferredBlockError extends BlockNode {\n    constructor(children, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.children = children;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitDeferredBlockError(this);\n    }\n}\nclass DeferredBlock extends BlockNode {\n    constructor(children, triggers, prefetchTriggers, placeholder, loading, error, nameSpan, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, i18n) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.children = children;\n        this.placeholder = placeholder;\n        this.loading = loading;\n        this.error = error;\n        this.mainBlockSpan = mainBlockSpan;\n        this.i18n = i18n;\n        this.triggers = triggers;\n        this.prefetchTriggers = prefetchTriggers;\n        // We cache the keys since we know that they won't change and we\n        // don't want to enumarate them every time we're traversing the AST.\n        this.definedTriggers = Object.keys(triggers);\n        this.definedPrefetchTriggers = Object.keys(prefetchTriggers);\n    }\n    visit(visitor) {\n        return visitor.visitDeferredBlock(this);\n    }\n    visitAll(visitor) {\n        this.visitTriggers(this.definedTriggers, this.triggers, visitor);\n        this.visitTriggers(this.definedPrefetchTriggers, this.prefetchTriggers, visitor);\n        visitAll$1(visitor, this.children);\n        const remainingBlocks = [this.placeholder, this.loading, this.error].filter(x => x !== null);\n        visitAll$1(visitor, remainingBlocks);\n    }\n    visitTriggers(keys, triggers, visitor) {\n        visitAll$1(visitor, keys.map(k => triggers[k]));\n    }\n}\nclass SwitchBlock extends BlockNode {\n    constructor(expression, cases, \n    /**\n     * These blocks are only captured to allow for autocompletion in the language service. They\n     * aren't meant to be processed in any other way.\n     */\n    unknownBlocks, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.expression = expression;\n        this.cases = cases;\n        this.unknownBlocks = unknownBlocks;\n    }\n    visit(visitor) {\n        return visitor.visitSwitchBlock(this);\n    }\n}\nclass SwitchBlockCase extends BlockNode {\n    constructor(expression, children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.expression = expression;\n        this.children = children;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitSwitchBlockCase(this);\n    }\n}\nclass ForLoopBlock extends BlockNode {\n    constructor(item, expression, trackBy, trackKeywordSpan, contextVariables, children, empty, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.item = item;\n        this.expression = expression;\n        this.trackBy = trackBy;\n        this.trackKeywordSpan = trackKeywordSpan;\n        this.contextVariables = contextVariables;\n        this.children = children;\n        this.empty = empty;\n        this.mainBlockSpan = mainBlockSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitForLoopBlock(this);\n    }\n}\nclass ForLoopBlockEmpty extends BlockNode {\n    constructor(children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.children = children;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitForLoopBlockEmpty(this);\n    }\n}\nclass IfBlock extends BlockNode {\n    constructor(branches, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.branches = branches;\n    }\n    visit(visitor) {\n        return visitor.visitIfBlock(this);\n    }\n}\nclass IfBlockBranch extends BlockNode {\n    constructor(expression, children, expressionAlias, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {\n        super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);\n        this.expression = expression;\n        this.children = children;\n        this.expressionAlias = expressionAlias;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitIfBlockBranch(this);\n    }\n}\nclass UnknownBlock {\n    constructor(name, sourceSpan, nameSpan) {\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n        this.nameSpan = nameSpan;\n    }\n    visit(visitor) {\n        return visitor.visitUnknownBlock(this);\n    }\n}\nclass Template {\n    constructor(\n    // tagName is the name of the container element, if applicable.\n    // `null` is a special case for when there is a structural directive on an `ng-template` so\n    // the renderer can differentiate between the synthetic template and the one written in the\n    // file.\n    tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        this.tagName = tagName;\n        this.attributes = attributes;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.templateAttrs = templateAttrs;\n        this.children = children;\n        this.references = references;\n        this.variables = variables;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitTemplate(this);\n    }\n}\nclass Content {\n    constructor(selector, attributes, sourceSpan, i18n) {\n        this.selector = selector;\n        this.attributes = attributes;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n        this.name = 'ng-content';\n    }\n    visit(visitor) {\n        return visitor.visitContent(this);\n    }\n}\nclass Variable {\n    constructor(name, value, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n    }\n    visit(visitor) {\n        return visitor.visitVariable(this);\n    }\n}\nclass Reference {\n    constructor(name, value, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n    }\n    visit(visitor) {\n        return visitor.visitReference(this);\n    }\n}\nclass Icu$1 {\n    constructor(vars, placeholders, sourceSpan, i18n) {\n        this.vars = vars;\n        this.placeholders = placeholders;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitIcu(this);\n    }\n}\nclass RecursiveVisitor$1 {\n    visitElement(element) {\n        visitAll$1(this, element.attributes);\n        visitAll$1(this, element.inputs);\n        visitAll$1(this, element.outputs);\n        visitAll$1(this, element.children);\n        visitAll$1(this, element.references);\n    }\n    visitTemplate(template) {\n        visitAll$1(this, template.attributes);\n        visitAll$1(this, template.inputs);\n        visitAll$1(this, template.outputs);\n        visitAll$1(this, template.children);\n        visitAll$1(this, template.references);\n        visitAll$1(this, template.variables);\n    }\n    visitDeferredBlock(deferred) {\n        deferred.visitAll(this);\n    }\n    visitDeferredBlockPlaceholder(block) {\n        visitAll$1(this, block.children);\n    }\n    visitDeferredBlockError(block) {\n        visitAll$1(this, block.children);\n    }\n    visitDeferredBlockLoading(block) {\n        visitAll$1(this, block.children);\n    }\n    visitSwitchBlock(block) {\n        visitAll$1(this, block.cases);\n    }\n    visitSwitchBlockCase(block) {\n        visitAll$1(this, block.children);\n    }\n    visitForLoopBlock(block) {\n        const blockItems = [block.item, ...Object.values(block.contextVariables), ...block.children];\n        block.empty && blockItems.push(block.empty);\n        visitAll$1(this, blockItems);\n    }\n    visitForLoopBlockEmpty(block) {\n        visitAll$1(this, block.children);\n    }\n    visitIfBlock(block) {\n        visitAll$1(this, block.branches);\n    }\n    visitIfBlockBranch(block) {\n        const blockItems = block.children;\n        block.expressionAlias && blockItems.push(block.expressionAlias);\n        visitAll$1(this, blockItems);\n    }\n    visitContent(content) { }\n    visitVariable(variable) { }\n    visitReference(reference) { }\n    visitTextAttribute(attribute) { }\n    visitBoundAttribute(attribute) { }\n    visitBoundEvent(attribute) { }\n    visitText(text) { }\n    visitBoundText(text) { }\n    visitIcu(icu) { }\n    visitDeferredTrigger(trigger) { }\n    visitUnknownBlock(block) { }\n}\nfunction visitAll$1(visitor, nodes) {\n    const result = [];\n    if (visitor.visit) {\n        for (const node of nodes) {\n            visitor.visit(node) || node.visit(visitor);\n        }\n    }\n    else {\n        for (const node of nodes) {\n            const newNode = node.visit(visitor);\n            if (newNode) {\n                result.push(newNode);\n            }\n        }\n    }\n    return result;\n}\n\nclass Message {\n    /**\n     * @param nodes message AST\n     * @param placeholders maps placeholder names to static content and their source spans\n     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n     * @param meaning\n     * @param description\n     * @param customId\n     */\n    constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {\n        this.nodes = nodes;\n        this.placeholders = placeholders;\n        this.placeholderToMessage = placeholderToMessage;\n        this.meaning = meaning;\n        this.description = description;\n        this.customId = customId;\n        /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */\n        this.legacyIds = [];\n        this.id = this.customId;\n        this.messageString = serializeMessage(this.nodes);\n        if (nodes.length) {\n            this.sources = [{\n                    filePath: nodes[0].sourceSpan.start.file.url,\n                    startLine: nodes[0].sourceSpan.start.line + 1,\n                    startCol: nodes[0].sourceSpan.start.col + 1,\n                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n                    endCol: nodes[0].sourceSpan.start.col + 1\n                }];\n        }\n        else {\n            this.sources = [];\n        }\n    }\n}\nclass Text$2 {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitText(this, context);\n    }\n}\n// TODO(vicb): do we really need this node (vs an array) ?\nclass Container {\n    constructor(children, sourceSpan) {\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitContainer(this, context);\n    }\n}\nclass Icu {\n    constructor(expression, type, cases, sourceSpan, expressionPlaceholder) {\n        this.expression = expression;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n        this.expressionPlaceholder = expressionPlaceholder;\n    }\n    visit(visitor, context) {\n        return visitor.visitIcu(this, context);\n    }\n}\nclass TagPlaceholder {\n    constructor(tag, attrs, startName, closeName, children, isVoid, \n    // TODO sourceSpan should cover all (we need a startSourceSpan and endSourceSpan)\n    sourceSpan, startSourceSpan, endSourceSpan) {\n        this.tag = tag;\n        this.attrs = attrs;\n        this.startName = startName;\n        this.closeName = closeName;\n        this.children = children;\n        this.isVoid = isVoid;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitTagPlaceholder(this, context);\n    }\n}\nclass Placeholder {\n    constructor(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitPlaceholder(this, context);\n    }\n}\nclass IcuPlaceholder {\n    constructor(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitIcuPlaceholder(this, context);\n    }\n}\nclass BlockPlaceholder {\n    constructor(name, parameters, startName, closeName, children, sourceSpan, startSourceSpan, endSourceSpan) {\n        this.name = name;\n        this.parameters = parameters;\n        this.startName = startName;\n        this.closeName = closeName;\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitBlockPlaceholder(this, context);\n    }\n}\n// Clone the AST\nclass CloneVisitor {\n    visitText(text, context) {\n        return new Text$2(text.value, text.sourceSpan);\n    }\n    visitContainer(container, context) {\n        const children = container.children.map(n => n.visit(this, context));\n        return new Container(children, container.sourceSpan);\n    }\n    visitIcu(icu, context) {\n        const cases = {};\n        Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));\n        const msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan, icu.expressionPlaceholder);\n        return msg;\n    }\n    visitTagPlaceholder(ph, context) {\n        const children = ph.children.map(n => n.visit(this, context));\n        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    }\n    visitPlaceholder(ph, context) {\n        return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n    }\n    visitIcuPlaceholder(ph, context) {\n        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n    }\n    visitBlockPlaceholder(ph, context) {\n        const children = ph.children.map(n => n.visit(this, context));\n        return new BlockPlaceholder(ph.name, ph.parameters, ph.startName, ph.closeName, children, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    }\n}\n// Visit all the nodes recursively\nclass RecurseVisitor {\n    visitText(text, context) { }\n    visitContainer(container, context) {\n        container.children.forEach(child => child.visit(this));\n    }\n    visitIcu(icu, context) {\n        Object.keys(icu.cases).forEach(k => {\n            icu.cases[k].visit(this);\n        });\n    }\n    visitTagPlaceholder(ph, context) {\n        ph.children.forEach(child => child.visit(this));\n    }\n    visitPlaceholder(ph, context) { }\n    visitIcuPlaceholder(ph, context) { }\n    visitBlockPlaceholder(ph, context) {\n        ph.children.forEach(child => child.visit(this));\n    }\n}\n/**\n * Serialize the message to the Localize backtick string format that would appear in compiled code.\n */\nfunction serializeMessage(messageNodes) {\n    const visitor = new LocalizeMessageStringVisitor();\n    const str = messageNodes.map(n => n.visit(visitor)).join('');\n    return str;\n}\nclass LocalizeMessageStringVisitor {\n    visitText(text) {\n        return text.value;\n    }\n    visitContainer(container) {\n        return container.children.map(child => child.visit(this)).join('');\n    }\n    visitIcu(icu) {\n        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n    }\n    visitTagPlaceholder(ph) {\n        const children = ph.children.map(child => child.visit(this)).join('');\n        return `{$${ph.startName}}${children}{$${ph.closeName}}`;\n    }\n    visitPlaceholder(ph) {\n        return `{$${ph.name}}`;\n    }\n    visitIcuPlaceholder(ph) {\n        return `{$${ph.name}}`;\n    }\n    visitBlockPlaceholder(ph) {\n        const children = ph.children.map(child => child.visit(this)).join('');\n        return `{$${ph.startName}}${children}{$${ph.closeName}}`;\n    }\n}\n\nclass Serializer {\n    // Creates a name mapper, see `PlaceholderMapper`\n    // Returning `null` means that no name mapping is used.\n    createNameMapper(message) {\n        return null;\n    }\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nclass SimplePlaceholderMapper extends RecurseVisitor {\n    // create a mapping from the message\n    constructor(message, mapName) {\n        super();\n        this.mapName = mapName;\n        this.internalToPublic = {};\n        this.publicToNextId = {};\n        this.publicToInternal = {};\n        message.nodes.forEach(node => node.visit(this));\n    }\n    toPublicName(internalName) {\n        return this.internalToPublic.hasOwnProperty(internalName) ?\n            this.internalToPublic[internalName] :\n            null;\n    }\n    toInternalName(publicName) {\n        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n            null;\n    }\n    visitText(text, context) {\n        return null;\n    }\n    visitTagPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.startName);\n        super.visitTagPlaceholder(ph, context);\n        this.visitPlaceholderName(ph.closeName);\n    }\n    visitPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.name);\n    }\n    visitBlockPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.startName);\n        super.visitBlockPlaceholder(ph, context);\n        this.visitPlaceholderName(ph.closeName);\n    }\n    visitIcuPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.name);\n    }\n    // XMB placeholders could only contains A-Z, 0-9 and _\n    visitPlaceholderName(internalName) {\n        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n            return;\n        }\n        let publicName = this.mapName(internalName);\n        if (this.publicToInternal.hasOwnProperty(publicName)) {\n            // Create a new XMB when it has already been used\n            const nextId = this.publicToNextId[publicName];\n            this.publicToNextId[publicName] = nextId + 1;\n            publicName = `${publicName}_${nextId}`;\n        }\n        else {\n            this.publicToNextId[publicName] = 1;\n        }\n        this.internalToPublic[internalName] = publicName;\n        this.publicToInternal[publicName] = internalName;\n    }\n}\n\nclass _Visitor$2 {\n    visitTag(tag) {\n        const strAttrs = this._serializeAttributes(tag.attrs);\n        if (tag.children.length == 0) {\n            return `<${tag.name}${strAttrs}/>`;\n        }\n        const strChildren = tag.children.map(node => node.visit(this));\n        return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\n    }\n    visitText(text) {\n        return text.value;\n    }\n    visitDeclaration(decl) {\n        return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n    }\n    _serializeAttributes(attrs) {\n        const strAttrs = Object.keys(attrs).map((name) => `${name}=\"${attrs[name]}\"`).join(' ');\n        return strAttrs.length > 0 ? ' ' + strAttrs : '';\n    }\n    visitDoctype(doctype) {\n        return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n    }\n}\nconst _visitor = new _Visitor$2();\nfunction serialize(nodes) {\n    return nodes.map((node) => node.visit(_visitor)).join('');\n}\nclass Declaration {\n    constructor(unescapedAttrs) {\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach((k) => {\n            this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    visit(visitor) {\n        return visitor.visitDeclaration(this);\n    }\n}\nclass Doctype {\n    constructor(rootTag, dtd) {\n        this.rootTag = rootTag;\n        this.dtd = dtd;\n    }\n    visit(visitor) {\n        return visitor.visitDoctype(this);\n    }\n}\nclass Tag {\n    constructor(name, unescapedAttrs = {}, children = []) {\n        this.name = name;\n        this.children = children;\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach((k) => {\n            this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    visit(visitor) {\n        return visitor.visitTag(this);\n    }\n}\nclass Text$1 {\n    constructor(unescapedValue) {\n        this.value = escapeXml(unescapedValue);\n    }\n    visit(visitor) {\n        return visitor.visitText(this);\n    }\n}\nclass CR extends Text$1 {\n    constructor(ws = 0) {\n        super(`\\n${new Array(ws + 1).join(' ')}`);\n    }\n}\nconst _ESCAPED_CHARS = [\n    [/&/g, '&amp;'],\n    [/\"/g, '&quot;'],\n    [/'/g, '&apos;'],\n    [/</g, '&lt;'],\n    [/>/g, '&gt;'],\n];\n// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\nfunction escapeXml(text) {\n    return _ESCAPED_CHARS.reduce((text, entry) => text.replace(entry[0], entry[1]), text);\n}\n\nconst _MESSAGES_TAG = 'messagebundle';\nconst _MESSAGE_TAG = 'msg';\nconst _PLACEHOLDER_TAG$3 = 'ph';\nconst _EXAMPLE_TAG = 'ex';\nconst _SOURCE_TAG$2 = 'source';\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\nclass Xmb extends Serializer {\n    write(messages, locale) {\n        const exampleVisitor = new ExampleVisitor();\n        const visitor = new _Visitor$1();\n        let rootNode = new Tag(_MESSAGES_TAG);\n        messages.forEach(message => {\n            const attrs = { id: message.id };\n            if (message.description) {\n                attrs['desc'] = message.description;\n            }\n            if (message.meaning) {\n                attrs['meaning'] = message.meaning;\n            }\n            let sourceTags = [];\n            message.sources.forEach((source) => {\n                sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [new Text$1(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));\n            });\n            rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));\n        });\n        rootNode.children.push(new CR());\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }),\n            new CR(),\n            new Doctype(_MESSAGES_TAG, _DOCTYPE),\n            new CR(),\n            exampleVisitor.addDefaultExamples(rootNode),\n            new CR(),\n        ]);\n    }\n    load(content, url) {\n        throw new Error('Unsupported');\n    }\n    digest(message) {\n        return digest(message);\n    }\n    createNameMapper(message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    }\n}\nclass _Visitor$1 {\n    visitText(text, context) {\n        return [new Text$1(text.value)];\n    }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n        });\n        nodes.push(new Text$1(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const startTagAsText = new Text$1(`<${ph.tag}>`);\n        const startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]);\n        // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n        const startTagPh = new Tag(_PLACEHOLDER_TAG$3, { name: ph.startName }, [startEx, startTagAsText]);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [startTagPh];\n        }\n        const closeTagAsText = new Text$1(`</${ph.tag}>`);\n        const closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]);\n        // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n        const closeTagPh = new Tag(_PLACEHOLDER_TAG$3, { name: ph.closeName }, [closeEx, closeTagAsText]);\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n    }\n    visitPlaceholder(ph, context) {\n        const interpolationAsText = new Text$1(`{{${ph.value}}}`);\n        // Example tag needs to be not-empty for TC.\n        const exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);\n        return [\n            // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n            new Tag(_PLACEHOLDER_TAG$3, { name: ph.name }, [exTag, interpolationAsText])\n        ];\n    }\n    visitBlockPlaceholder(ph, context) {\n        const startAsText = new Text$1(`@${ph.name}`);\n        const startEx = new Tag(_EXAMPLE_TAG, {}, [startAsText]);\n        // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n        const startTagPh = new Tag(_PLACEHOLDER_TAG$3, { name: ph.startName }, [startEx, startAsText]);\n        const closeAsText = new Text$1(`}`);\n        const closeEx = new Tag(_EXAMPLE_TAG, {}, [closeAsText]);\n        // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n        const closeTagPh = new Tag(_PLACEHOLDER_TAG$3, { name: ph.closeName }, [closeEx, closeAsText]);\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const icuExpression = ph.value.expression;\n        const icuType = ph.value.type;\n        const icuCases = Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ');\n        const icuAsText = new Text$1(`{${icuExpression}, ${icuType}, ${icuCases}}`);\n        const exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);\n        return [\n            // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n            new Tag(_PLACEHOLDER_TAG$3, { name: ph.name }, [exTag, icuAsText])\n        ];\n    }\n    serialize(nodes) {\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\nfunction digest(message) {\n    return decimalDigest(message);\n}\n// TC requires at least one non-empty example on placeholders\nclass ExampleVisitor {\n    addDefaultExamples(node) {\n        node.visit(this);\n        return node;\n    }\n    visitTag(tag) {\n        if (tag.name === _PLACEHOLDER_TAG$3) {\n            if (!tag.children || tag.children.length == 0) {\n                const exText = new Text$1(tag.attrs['name'] || '...');\n                tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];\n            }\n        }\n        else if (tag.children) {\n            tag.children.forEach(node => node.visit(this));\n        }\n    }\n    visitText(text) { }\n    visitDeclaration(decl) { }\n    visitDoctype(doctype) { }\n}\n// XMB/XTB placeholders can only contain A-Z, 0-9 and _\nfunction toPublicName(internalName) {\n    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n\n/* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */\nconst CLOSURE_TRANSLATION_VAR_PREFIX = 'MSG_';\n/**\n * Prefix for non-`goog.getMsg` i18n-related vars.\n * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that\n * considers variables like `I18N_0` as constants and throws an error when their value changes.\n */\nconst TRANSLATION_VAR_PREFIX$1 = 'i18n_';\n/** Name of the i18n attributes **/\nconst I18N_ATTR = 'i18n';\nconst I18N_ATTR_PREFIX = 'i18n-';\n/** Prefix of var expressions used in ICUs */\nconst I18N_ICU_VAR_PREFIX = 'VAR_';\n/** Prefix of ICU expressions for post processing */\nconst I18N_ICU_MAPPING_PREFIX$1 = 'I18N_EXP_';\n/** Placeholder wrapper for i18n expressions **/\nconst I18N_PLACEHOLDER_SYMBOL = '�';\nfunction isI18nAttribute(name) {\n    return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);\n}\nfunction isI18nRootNode(meta) {\n    return meta instanceof Message;\n}\nfunction isSingleI18nIcu(meta) {\n    return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu;\n}\nfunction hasI18nMeta(node) {\n    return !!node.i18n;\n}\nfunction hasI18nAttrs(element) {\n    return element.attrs.some((attr) => isI18nAttribute(attr.name));\n}\nfunction icuFromI18nMessage(message) {\n    return message.nodes[0];\n}\nfunction wrapI18nPlaceholder(content, contextId = 0) {\n    const blockId = contextId > 0 ? `:${contextId}` : '';\n    return `${I18N_PLACEHOLDER_SYMBOL}${content}${blockId}${I18N_PLACEHOLDER_SYMBOL}`;\n}\nfunction assembleI18nBoundString(strings, bindingStartIndex = 0, contextId = 0) {\n    if (!strings.length)\n        return '';\n    let acc = '';\n    const lastIdx = strings.length - 1;\n    for (let i = 0; i < lastIdx; i++) {\n        acc += `${strings[i]}${wrapI18nPlaceholder(bindingStartIndex + i, contextId)}`;\n    }\n    acc += strings[lastIdx];\n    return acc;\n}\nfunction getSeqNumberGenerator(startsAt = 0) {\n    let current = startsAt;\n    return () => current++;\n}\nfunction placeholdersToParams(placeholders) {\n    const params = {};\n    placeholders.forEach((values, key) => {\n        params[key] = literal(values.length > 1 ? `[${values.join('|')}]` : values[0]);\n    });\n    return params;\n}\nfunction updatePlaceholderMap(map, name, ...values) {\n    const current = map.get(name) || [];\n    current.push(...values);\n    map.set(name, current);\n}\nfunction assembleBoundTextPlaceholders(meta, bindingStartIndex = 0, contextId = 0) {\n    const startIdx = bindingStartIndex;\n    const placeholders = new Map();\n    const node = meta instanceof Message ? meta.nodes.find(node => node instanceof Container) : meta;\n    if (node) {\n        node\n            .children\n            .filter((child) => child instanceof Placeholder)\n            .forEach((child, idx) => {\n            const content = wrapI18nPlaceholder(startIdx + idx, contextId);\n            updatePlaceholderMap(placeholders, child.name, content);\n        });\n    }\n    return placeholders;\n}\n/**\n * Format the placeholder names in a map of placeholders to expressions.\n *\n * The placeholder names are converted from \"internal\" format (e.g. `START_TAG_DIV_1`) to \"external\"\n * format (e.g. `startTagDiv_1`).\n *\n * @param params A map of placeholder names to expressions.\n * @param useCamelCase whether to camelCase the placeholder name when formatting.\n * @returns A new map of formatted placeholder names to expressions.\n */\nfunction formatI18nPlaceholderNamesInMap(params = {}, useCamelCase) {\n    const _params = {};\n    if (params && Object.keys(params).length) {\n        Object.keys(params).forEach(key => _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]);\n    }\n    return _params;\n}\n/**\n * Converts internal placeholder names to public-facing format\n * (for example to use in goog.getMsg call).\n * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.\n *\n * @param name The placeholder name that should be formatted\n * @returns Formatted placeholder name\n */\nfunction formatI18nPlaceholderName(name, useCamelCase = true) {\n    const publicName = toPublicName(name);\n    if (!useCamelCase) {\n        return publicName;\n    }\n    const chunks = publicName.split('_');\n    if (chunks.length === 1) {\n        // if no \"_\" found - just lowercase the value\n        return name.toLowerCase();\n    }\n    let postfix;\n    // eject last element if it's a number\n    if (/^\\d+$/.test(chunks[chunks.length - 1])) {\n        postfix = chunks.pop();\n    }\n    let raw = chunks.shift().toLowerCase();\n    if (chunks.length) {\n        raw += chunks.map(c => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join('');\n    }\n    return postfix ? `${raw}_${postfix}` : raw;\n}\n/**\n * Generates a prefix for translation const name.\n *\n * @param extra Additional local prefix that should be injected into translation var name\n * @returns Complete translation const prefix\n */\nfunction getTranslationConstPrefix(extra) {\n    return `${CLOSURE_TRANSLATION_VAR_PREFIX}${extra}`.toUpperCase();\n}\n/**\n * Generate AST to declare a variable. E.g. `var I18N_1;`.\n * @param variable the name of the variable to declare.\n */\nfunction declareI18nVariable(variable) {\n    return new DeclareVarStmt(variable.name, undefined, INFERRED_TYPE, undefined, variable.sourceSpan);\n}\n\n/**\n * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in\n * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may\n * not work in some cases when object keys are mangled by a minifier.\n *\n * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with\n * inputs that contain potentially unsafe chars.\n */\nconst UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;\n/** Name of the temporary to use during data binding */\nconst TEMPORARY_NAME = '_t';\n/** Name of the context parameter passed into a template function */\nconst CONTEXT_NAME = 'ctx';\n/** Name of the RenderFlag passed into a template function */\nconst RENDER_FLAGS = 'rf';\n/** The prefix reference variables */\nconst REFERENCE_PREFIX = '_r';\n/** The name of the implicit context reference */\nconst IMPLICIT_REFERENCE = '$implicit';\n/** Non bindable attribute name **/\nconst NON_BINDABLE_ATTR = 'ngNonBindable';\n/** Name for the variable keeping track of the context returned by `ɵɵrestoreView`. */\nconst RESTORED_VIEW_CONTEXT_NAME = 'restoredCtx';\n/** Special value representing a direct access to a template's context. */\nconst DIRECT_CONTEXT_REFERENCE = '#context';\n/**\n * Maximum length of a single instruction chain. Because our output AST uses recursion, we're\n * limited in how many expressions we can nest before we reach the call stack limit. This\n * length is set very conservatively in order to reduce the chance of problems.\n */\nconst MAX_CHAIN_LENGTH = 500;\n/** Instructions that support chaining. */\nconst CHAINABLE_INSTRUCTIONS = new Set([\n    Identifiers.element,\n    Identifiers.elementStart,\n    Identifiers.elementEnd,\n    Identifiers.elementContainer,\n    Identifiers.elementContainerStart,\n    Identifiers.elementContainerEnd,\n    Identifiers.i18nExp,\n    Identifiers.listener,\n    Identifiers.classProp,\n    Identifiers.syntheticHostListener,\n    Identifiers.hostProperty,\n    Identifiers.syntheticHostProperty,\n    Identifiers.property,\n    Identifiers.propertyInterpolate1,\n    Identifiers.propertyInterpolate2,\n    Identifiers.propertyInterpolate3,\n    Identifiers.propertyInterpolate4,\n    Identifiers.propertyInterpolate5,\n    Identifiers.propertyInterpolate6,\n    Identifiers.propertyInterpolate7,\n    Identifiers.propertyInterpolate8,\n    Identifiers.propertyInterpolateV,\n    Identifiers.attribute,\n    Identifiers.attributeInterpolate1,\n    Identifiers.attributeInterpolate2,\n    Identifiers.attributeInterpolate3,\n    Identifiers.attributeInterpolate4,\n    Identifiers.attributeInterpolate5,\n    Identifiers.attributeInterpolate6,\n    Identifiers.attributeInterpolate7,\n    Identifiers.attributeInterpolate8,\n    Identifiers.attributeInterpolateV,\n    Identifiers.styleProp,\n    Identifiers.stylePropInterpolate1,\n    Identifiers.stylePropInterpolate2,\n    Identifiers.stylePropInterpolate3,\n    Identifiers.stylePropInterpolate4,\n    Identifiers.stylePropInterpolate5,\n    Identifiers.stylePropInterpolate6,\n    Identifiers.stylePropInterpolate7,\n    Identifiers.stylePropInterpolate8,\n    Identifiers.stylePropInterpolateV,\n    Identifiers.textInterpolate,\n    Identifiers.textInterpolate1,\n    Identifiers.textInterpolate2,\n    Identifiers.textInterpolate3,\n    Identifiers.textInterpolate4,\n    Identifiers.textInterpolate5,\n    Identifiers.textInterpolate6,\n    Identifiers.textInterpolate7,\n    Identifiers.textInterpolate8,\n    Identifiers.textInterpolateV,\n    Identifiers.templateCreate,\n]);\n/** Generates a call to a single instruction. */\nfunction invokeInstruction(span, reference, params) {\n    return importExpr(reference, null, span).callFn(params, span);\n}\n/**\n * Creates an allocator for a temporary variable.\n *\n * A variable declaration is added to the statements the first time the allocator is invoked.\n */\nfunction temporaryAllocator(statements, name) {\n    let temp = null;\n    return () => {\n        if (!temp) {\n            statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));\n            temp = variable(name);\n        }\n        return temp;\n    };\n}\nfunction invalid(arg) {\n    throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);\n}\nfunction asLiteral(value) {\n    if (Array.isArray(value)) {\n        return literalArr(value.map(asLiteral));\n    }\n    return literal(value, INFERRED_TYPE);\n}\n/**\n * Serializes inputs and outputs for `defineDirective` and `defineComponent`.\n *\n * This will attempt to generate optimized data structures to minimize memory or\n * file size of fully compiled applications.\n */\nfunction conditionallyCreateDirectiveBindingLiteral(map, forInputs) {\n    const keys = Object.getOwnPropertyNames(map);\n    if (keys.length === 0) {\n        return null;\n    }\n    return literalMap(keys.map(key => {\n        const value = map[key];\n        let declaredName;\n        let publicName;\n        let minifiedName;\n        let expressionValue;\n        if (typeof value === 'string') {\n            // canonical syntax: `dirProp: publicProp`\n            declaredName = key;\n            minifiedName = key;\n            publicName = value;\n            expressionValue = asLiteral(publicName);\n        }\n        else {\n            minifiedName = key;\n            declaredName = value.classPropertyName;\n            publicName = value.bindingPropertyName;\n            const differentDeclaringName = publicName !== declaredName;\n            const hasDecoratorInputTransform = value.transformFunction !== null;\n            // Build up input flags\n            let flags = null;\n            if (value.isSignal) {\n                flags = bitwiseOrInputFlagsExpr(InputFlags.SignalBased, flags);\n            }\n            if (hasDecoratorInputTransform) {\n                flags = bitwiseOrInputFlagsExpr(InputFlags.HasDecoratorInputTransform, flags);\n            }\n            // Inputs, compared to outputs, will track their declared name (for `ngOnChanges`), support\n            // decorator input transform functions, or store flag information if there is any.\n            if (forInputs && (differentDeclaringName || hasDecoratorInputTransform || flags !== null)) {\n                const flagsExpr = flags ?? importExpr(Identifiers.InputFlags).prop(InputFlags[InputFlags.None]);\n                const result = [flagsExpr, asLiteral(publicName)];\n                if (differentDeclaringName || hasDecoratorInputTransform) {\n                    result.push(asLiteral(declaredName));\n                    if (hasDecoratorInputTransform) {\n                        result.push(value.transformFunction);\n                    }\n                }\n                expressionValue = literalArr(result);\n            }\n            else {\n                expressionValue = asLiteral(publicName);\n            }\n        }\n        return {\n            key: minifiedName,\n            // put quotes around keys that contain potentially unsafe characters\n            quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),\n            value: expressionValue,\n        };\n    }));\n}\n/** Gets an output AST expression referencing the given flag. */\nfunction getInputFlagExpr(flag) {\n    return importExpr(Identifiers.InputFlags).prop(InputFlags[flag]);\n}\n/** Combines a given input flag with an existing flag expression, if present. */\nfunction bitwiseOrInputFlagsExpr(flag, expr) {\n    if (expr === null) {\n        return getInputFlagExpr(flag);\n    }\n    return getInputFlagExpr(flag).bitwiseOr(expr);\n}\n/**\n *  Remove trailing null nodes as they are implied.\n */\nfunction trimTrailingNulls(parameters) {\n    while (isNull(parameters[parameters.length - 1])) {\n        parameters.pop();\n    }\n    return parameters;\n}\nfunction getQueryPredicate(query, constantPool) {\n    if (Array.isArray(query.predicate)) {\n        let predicate = [];\n        query.predicate.forEach((selector) => {\n            // Each item in predicates array may contain strings with comma-separated refs\n            // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them\n            // as separate array entities\n            const selectors = selector.split(',').map(token => literal(token.trim()));\n            predicate.push(...selectors);\n        });\n        return constantPool.getConstLiteral(literalArr(predicate), true);\n    }\n    else {\n        // The original predicate may have been wrapped in a `forwardRef()` call.\n        switch (query.predicate.forwardRef) {\n            case 0 /* ForwardRefHandling.None */:\n            case 2 /* ForwardRefHandling.Unwrapped */:\n                return query.predicate.expression;\n            case 1 /* ForwardRefHandling.Wrapped */:\n                return importExpr(Identifiers.resolveForwardRef).callFn([query.predicate.expression]);\n        }\n    }\n}\n/**\n * A representation for an object literal used during codegen of definition objects. The generic\n * type `T` allows to reference a documented type of the generated structure, such that the\n * property names that are set can be resolved to their documented declaration.\n */\nclass DefinitionMap {\n    constructor() {\n        this.values = [];\n    }\n    set(key, value) {\n        if (value) {\n            const existing = this.values.find(value => value.key === key);\n            if (existing) {\n                existing.value = value;\n            }\n            else {\n                this.values.push({ key: key, value, quoted: false });\n            }\n        }\n    }\n    toLiteralMap() {\n        return literalMap(this.values);\n    }\n}\n/**\n * Creates a `CssSelector` from an AST node.\n */\nfunction createCssSelectorFromNode(node) {\n    const elementName = node instanceof Element$1 ? node.name : 'ng-template';\n    const attributes = getAttrsForDirectiveMatching(node);\n    const cssSelector = new CssSelector();\n    const elementNameNoNs = splitNsName(elementName)[1];\n    cssSelector.setElement(elementNameNoNs);\n    Object.getOwnPropertyNames(attributes).forEach((name) => {\n        const nameNoNs = splitNsName(name)[1];\n        const value = attributes[name];\n        cssSelector.addAttribute(nameNoNs, value);\n        if (name.toLowerCase() === 'class') {\n            const classes = value.trim().split(/\\s+/);\n            classes.forEach(className => cssSelector.addClassName(className));\n        }\n    });\n    return cssSelector;\n}\n/**\n * Extract a map of properties to values for a given element or template node, which can be used\n * by the directive matching machinery.\n *\n * @param elOrTpl the element or template in question\n * @return an object set up for directive matching. For attributes on the element/template, this\n * object maps a property name to its (static) value. For any bindings, this map simply maps the\n * property name to an empty string.\n */\nfunction getAttrsForDirectiveMatching(elOrTpl) {\n    const attributesMap = {};\n    if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {\n        elOrTpl.templateAttrs.forEach(a => attributesMap[a.name] = '');\n    }\n    else {\n        elOrTpl.attributes.forEach(a => {\n            if (!isI18nAttribute(a.name)) {\n                attributesMap[a.name] = a.value;\n            }\n        });\n        elOrTpl.inputs.forEach(i => {\n            if (i.type === 0 /* BindingType.Property */) {\n                attributesMap[i.name] = '';\n            }\n        });\n        elOrTpl.outputs.forEach(o => {\n            attributesMap[o.name] = '';\n        });\n    }\n    return attributesMap;\n}\n/**\n * Gets the number of arguments expected to be passed to a generated instruction in the case of\n * interpolation instructions.\n * @param interpolation An interpolation ast\n */\nfunction getInterpolationArgsLength(interpolation) {\n    const { expressions, strings } = interpolation;\n    if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {\n        // If the interpolation has one interpolated value, but the prefix and suffix are both empty\n        // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or\n        // `textInterpolate`.\n        return 1;\n    }\n    else {\n        return expressions.length + strings.length;\n    }\n}\n/**\n * Generates the final instruction call statements based on the passed in configuration.\n * Will try to chain instructions as much as possible, if chaining is supported.\n */\nfunction getInstructionStatements(instructions) {\n    const statements = [];\n    let pendingExpression = null;\n    let pendingExpressionType = null;\n    let chainLength = 0;\n    for (const current of instructions) {\n        const resolvedParams = (typeof current.paramsOrFn === 'function' ? current.paramsOrFn() : current.paramsOrFn) ??\n            [];\n        const params = Array.isArray(resolvedParams) ? resolvedParams : [resolvedParams];\n        // If the current instruction is the same as the previous one\n        // and it can be chained, add another call to the chain.\n        if (chainLength < MAX_CHAIN_LENGTH && pendingExpressionType === current.reference &&\n            CHAINABLE_INSTRUCTIONS.has(pendingExpressionType)) {\n            // We'll always have a pending expression when there's a pending expression type.\n            pendingExpression = pendingExpression.callFn(params, pendingExpression.sourceSpan);\n            chainLength++;\n        }\n        else {\n            if (pendingExpression !== null) {\n                statements.push(pendingExpression.toStmt());\n            }\n            pendingExpression = invokeInstruction(current.span, current.reference, params);\n            pendingExpressionType = current.reference;\n            chainLength = 0;\n        }\n    }\n    // Since the current instruction adds the previous one to the statements,\n    // we may be left with the final one at the end that is still pending.\n    if (pendingExpression !== null) {\n        statements.push(pendingExpression.toStmt());\n    }\n    return statements;\n}\n\nfunction compileInjectable(meta, resolveForwardRefs) {\n    let result = null;\n    const factoryMeta = {\n        name: meta.name,\n        type: meta.type,\n        typeArgumentCount: meta.typeArgumentCount,\n        deps: [],\n        target: FactoryTarget$1.Injectable,\n    };\n    if (meta.useClass !== undefined) {\n        // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is\n        // used to instantiate the class with dependencies injected, or deps are not specified and\n        // the factory of the class is used to instantiate it.\n        //\n        // A special case exists for useClass: Type where Type is the injectable type itself and no\n        // deps are specified, in which case 'useClass' is effectively ignored.\n        const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.type.value);\n        let deps = undefined;\n        if (meta.deps !== undefined) {\n            deps = meta.deps;\n        }\n        if (deps !== undefined) {\n            // factory: () => new meta.useClass(...deps)\n            result = compileFactoryFunction({\n                ...factoryMeta,\n                delegate: meta.useClass.expression,\n                delegateDeps: deps,\n                delegateType: R3FactoryDelegateType.Class,\n            });\n        }\n        else if (useClassOnSelf) {\n            result = compileFactoryFunction(factoryMeta);\n        }\n        else {\n            result = {\n                statements: [],\n                expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)\n            };\n        }\n    }\n    else if (meta.useFactory !== undefined) {\n        if (meta.deps !== undefined) {\n            result = compileFactoryFunction({\n                ...factoryMeta,\n                delegate: meta.useFactory,\n                delegateDeps: meta.deps || [],\n                delegateType: R3FactoryDelegateType.Function,\n            });\n        }\n        else {\n            result = { statements: [], expression: arrowFn([], meta.useFactory.callFn([])) };\n        }\n    }\n    else if (meta.useValue !== undefined) {\n        // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for\n        // client code because meta.useValue is an Expression which will be defined even if the actual\n        // value is undefined.\n        result = compileFactoryFunction({\n            ...factoryMeta,\n            expression: meta.useValue.expression,\n        });\n    }\n    else if (meta.useExisting !== undefined) {\n        // useExisting is an `inject` call on the existing token.\n        result = compileFactoryFunction({\n            ...factoryMeta,\n            expression: importExpr(Identifiers.inject).callFn([meta.useExisting.expression]),\n        });\n    }\n    else {\n        result = {\n            statements: [],\n            expression: delegateToFactory(meta.type.value, meta.type.value, resolveForwardRefs)\n        };\n    }\n    const token = meta.type.value;\n    const injectableProps = new DefinitionMap();\n    injectableProps.set('token', token);\n    injectableProps.set('factory', result.expression);\n    // Only generate providedIn property if it has a non-null value\n    if (meta.providedIn.expression.value !== null) {\n        injectableProps.set('providedIn', convertFromMaybeForwardRefExpression(meta.providedIn));\n    }\n    const expression = importExpr(Identifiers.ɵɵdefineInjectable)\n        .callFn([injectableProps.toLiteralMap()], undefined, true);\n    return {\n        expression,\n        type: createInjectableType(meta),\n        statements: result.statements,\n    };\n}\nfunction createInjectableType(meta) {\n    return new ExpressionType(importExpr(Identifiers.InjectableDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));\n}\nfunction delegateToFactory(type, useType, unwrapForwardRefs) {\n    if (type.node === useType.node) {\n        // The types are the same, so we can simply delegate directly to the type's factory.\n        // ```\n        // factory: type.ɵfac\n        // ```\n        return useType.prop('ɵfac');\n    }\n    if (!unwrapForwardRefs) {\n        // The type is not wrapped in a `forwardRef()`, so we create a simple factory function that\n        // accepts a sub-type as an argument.\n        // ```\n        // factory: function(t) { return useType.ɵfac(t); }\n        // ```\n        return createFactoryFunction(useType);\n    }\n    // The useType is actually wrapped in a `forwardRef()` so we need to resolve that before\n    // calling its factory.\n    // ```\n    // factory: function(t) { return core.resolveForwardRef(type).ɵfac(t); }\n    // ```\n    const unwrappedType = importExpr(Identifiers.resolveForwardRef).callFn([useType]);\n    return createFactoryFunction(unwrappedType);\n}\nfunction createFactoryFunction(type) {\n    return arrowFn([new FnParam('t', DYNAMIC_TYPE)], type.prop('ɵfac').callFn([variable('t')]));\n}\n\nconst UNUSABLE_INTERPOLATION_REGEXPS = [\n    /^\\s*$/, // empty\n    /[<>]/, // html tag\n    /^[{}]$/, // i18n expansion\n    /&(#|[a-z])/i, // character reference,\n    /^\\/\\//, // comment\n];\nfunction assertInterpolationSymbols(identifier, value) {\n    if (value != null && !(Array.isArray(value) && value.length == 2)) {\n        throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n    }\n    else if (value != null) {\n        const start = value[0];\n        const end = value[1];\n        // Check for unusable interpolation symbols\n        UNUSABLE_INTERPOLATION_REGEXPS.forEach(regexp => {\n            if (regexp.test(start) || regexp.test(end)) {\n                throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n            }\n        });\n    }\n}\n\nclass InterpolationConfig {\n    static fromArray(markers) {\n        if (!markers) {\n            return DEFAULT_INTERPOLATION_CONFIG;\n        }\n        assertInterpolationSymbols('interpolation', markers);\n        return new InterpolationConfig(markers[0], markers[1]);\n    }\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}\nconst DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\nconst DEFAULT_CONTAINER_BLOCKS = new Set(['switch']);\n\nconst $EOF = 0;\nconst $BSPACE = 8;\nconst $TAB = 9;\nconst $LF = 10;\nconst $VTAB = 11;\nconst $FF = 12;\nconst $CR = 13;\nconst $SPACE = 32;\nconst $BANG = 33;\nconst $DQ = 34;\nconst $HASH = 35;\nconst $$ = 36;\nconst $PERCENT = 37;\nconst $AMPERSAND = 38;\nconst $SQ = 39;\nconst $LPAREN = 40;\nconst $RPAREN = 41;\nconst $STAR = 42;\nconst $PLUS = 43;\nconst $COMMA = 44;\nconst $MINUS = 45;\nconst $PERIOD = 46;\nconst $SLASH = 47;\nconst $COLON = 58;\nconst $SEMICOLON = 59;\nconst $LT = 60;\nconst $EQ = 61;\nconst $GT = 62;\nconst $QUESTION = 63;\nconst $0 = 48;\nconst $7 = 55;\nconst $9 = 57;\nconst $A = 65;\nconst $E = 69;\nconst $F = 70;\nconst $X = 88;\nconst $Z = 90;\nconst $LBRACKET = 91;\nconst $BACKSLASH = 92;\nconst $RBRACKET = 93;\nconst $CARET = 94;\nconst $_ = 95;\nconst $a = 97;\nconst $b = 98;\nconst $e = 101;\nconst $f = 102;\nconst $n = 110;\nconst $r = 114;\nconst $t = 116;\nconst $u = 117;\nconst $v = 118;\nconst $x = 120;\nconst $z = 122;\nconst $LBRACE = 123;\nconst $BAR = 124;\nconst $RBRACE = 125;\nconst $NBSP = 160;\nconst $PIPE = 124;\nconst $TILDA = 126;\nconst $AT = 64;\nconst $BT = 96;\nfunction isWhitespace(code) {\n    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\nfunction isDigit(code) {\n    return $0 <= code && code <= $9;\n}\nfunction isAsciiLetter(code) {\n    return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\nfunction isAsciiHexDigit(code) {\n    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}\nfunction isNewLine(code) {\n    return code === $LF || code === $CR;\n}\nfunction isOctalDigit(code) {\n    return $0 <= code && code <= $7;\n}\nfunction isQuote(code) {\n    return code === $SQ || code === $DQ || code === $BT;\n}\n\nclass ParseLocation {\n    constructor(file, offset, line, col) {\n        this.file = file;\n        this.offset = offset;\n        this.line = line;\n        this.col = col;\n    }\n    toString() {\n        return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;\n    }\n    moveBy(delta) {\n        const source = this.file.content;\n        const len = source.length;\n        let offset = this.offset;\n        let line = this.line;\n        let col = this.col;\n        while (offset > 0 && delta < 0) {\n            offset--;\n            delta++;\n            const ch = source.charCodeAt(offset);\n            if (ch == $LF) {\n                line--;\n                const priorLine = source.substring(0, offset - 1).lastIndexOf(String.fromCharCode($LF));\n                col = priorLine > 0 ? offset - priorLine : offset;\n            }\n            else {\n                col--;\n            }\n        }\n        while (offset < len && delta > 0) {\n            const ch = source.charCodeAt(offset);\n            offset++;\n            delta--;\n            if (ch == $LF) {\n                line++;\n                col = 0;\n            }\n            else {\n                col++;\n            }\n        }\n        return new ParseLocation(this.file, offset, line, col);\n    }\n    // Return the source around the location\n    // Up to `maxChars` or `maxLines` on each side of the location\n    getContext(maxChars, maxLines) {\n        const content = this.file.content;\n        let startOffset = this.offset;\n        if (startOffset != null) {\n            if (startOffset > content.length - 1) {\n                startOffset = content.length - 1;\n            }\n            let endOffset = startOffset;\n            let ctxChars = 0;\n            let ctxLines = 0;\n            while (ctxChars < maxChars && startOffset > 0) {\n                startOffset--;\n                ctxChars++;\n                if (content[startOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            ctxChars = 0;\n            ctxLines = 0;\n            while (ctxChars < maxChars && endOffset < content.length - 1) {\n                endOffset++;\n                ctxChars++;\n                if (content[endOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            return {\n                before: content.substring(startOffset, this.offset),\n                after: content.substring(this.offset, endOffset + 1),\n            };\n        }\n        return null;\n    }\n}\nclass ParseSourceFile {\n    constructor(content, url) {\n        this.content = content;\n        this.url = url;\n    }\n}\nclass ParseSourceSpan {\n    /**\n     * Create an object that holds information about spans of tokens/nodes captured during\n     * lexing/parsing of text.\n     *\n     * @param start\n     * The location of the start of the span (having skipped leading trivia).\n     * Skipping leading trivia makes source-spans more \"user friendly\", since things like HTML\n     * elements will appear to begin at the start of the opening tag, rather than at the start of any\n     * leading trivia, which could include newlines.\n     *\n     * @param end\n     * The location of the end of the span.\n     *\n     * @param fullStart\n     * The start of the token without skipping the leading trivia.\n     * This is used by tooling that splits tokens further, such as extracting Angular interpolations\n     * from text tokens. Such tooling creates new source-spans relative to the original token's\n     * source-span. If leading trivia characters have been skipped then the new source-spans may be\n     * incorrectly offset.\n     *\n     * @param details\n     * Additional information (such as identifier names) that should be associated with the span.\n     */\n    constructor(start, end, fullStart = start, details = null) {\n        this.start = start;\n        this.end = end;\n        this.fullStart = fullStart;\n        this.details = details;\n    }\n    toString() {\n        return this.start.file.content.substring(this.start.offset, this.end.offset);\n    }\n}\nvar ParseErrorLevel;\n(function (ParseErrorLevel) {\n    ParseErrorLevel[ParseErrorLevel[\"WARNING\"] = 0] = \"WARNING\";\n    ParseErrorLevel[ParseErrorLevel[\"ERROR\"] = 1] = \"ERROR\";\n})(ParseErrorLevel || (ParseErrorLevel = {}));\nclass ParseError {\n    constructor(span, msg, level = ParseErrorLevel.ERROR) {\n        this.span = span;\n        this.msg = msg;\n        this.level = level;\n    }\n    contextualMessage() {\n        const ctx = this.span.start.getContext(100, 3);\n        return ctx ? `${this.msg} (\"${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}\")` :\n            this.msg;\n    }\n    toString() {\n        const details = this.span.details ? `, ${this.span.details}` : '';\n        return `${this.contextualMessage()}: ${this.span.start}${details}`;\n    }\n}\n/**\n * Generates Source Span object for a given R3 Type for JIT mode.\n *\n * @param kind Component or Directive.\n * @param typeName name of the Component or Directive.\n * @param sourceUrl reference to Component or Directive source.\n * @returns instance of ParseSourceSpan that represent a given Component or Directive.\n */\nfunction r3JitTypeSourceSpan(kind, typeName, sourceUrl) {\n    const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;\n    const sourceFile = new ParseSourceFile('', sourceFileName);\n    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\nlet _anonymousTypeIndex = 0;\nfunction identifierName(compileIdentifier) {\n    if (!compileIdentifier || !compileIdentifier.reference) {\n        return null;\n    }\n    const ref = compileIdentifier.reference;\n    if (ref['__anonymousType']) {\n        return ref['__anonymousType'];\n    }\n    if (ref['__forward_ref__']) {\n        // We do not want to try to stringify a `forwardRef()` function because that would cause the\n        // inner function to be evaluated too early, defeating the whole point of the `forwardRef`.\n        return '__forward_ref__';\n    }\n    let identifier = stringify(ref);\n    if (identifier.indexOf('(') >= 0) {\n        // case: anonymous functions!\n        identifier = `anonymous_${_anonymousTypeIndex++}`;\n        ref['__anonymousType'] = identifier;\n    }\n    else {\n        identifier = sanitizeIdentifier(identifier);\n    }\n    return identifier;\n}\nfunction sanitizeIdentifier(name) {\n    return name.replace(/\\W/g, '_');\n}\n\n/**\n * In TypeScript, tagged template functions expect a \"template object\", which is an array of\n * \"cooked\" strings plus a `raw` property that contains an array of \"raw\" strings. This is\n * typically constructed with a function called `__makeTemplateObject(cooked, raw)`, but it may not\n * be available in all environments.\n *\n * This is a JavaScript polyfill that uses __makeTemplateObject when it's available, but otherwise\n * creates an inline helper with the same functionality.\n *\n * In the inline function, if `Object.defineProperty` is available we use that to attach the `raw`\n * array.\n */\nconst makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,\"raw\",{value:t}):e.raw=t,e})';\nclass AbstractJsEmitterVisitor extends AbstractEmitterVisitor {\n    constructor() {\n        super(false);\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');\n    }\n    visitDeclareVarStmt(stmt, ctx) {\n        ctx.print(stmt, `var ${stmt.name}`);\n        if (stmt.value) {\n            ctx.print(stmt, ' = ');\n            stmt.value.visitExpression(this, ctx);\n        }\n        ctx.println(stmt, `;`);\n        return null;\n    }\n    visitTaggedTemplateExpr(ast, ctx) {\n        // The following convoluted piece of code is effectively the downlevelled equivalent of\n        // ```\n        // tag`...`\n        // ```\n        // which is effectively like:\n        // ```\n        // tag(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n        // ```\n        const elements = ast.template.elements;\n        ast.tag.visitExpression(this, ctx);\n        ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);\n        ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.text, false)).join(', ')}], `);\n        ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.rawText, false)).join(', ')}])`);\n        ast.template.expressions.forEach(expression => {\n            ctx.print(ast, ', ');\n            expression.visitExpression(this, ctx);\n        });\n        ctx.print(ast, ')');\n        return null;\n    }\n    visitFunctionExpr(ast, ctx) {\n        ctx.print(ast, `function${ast.name ? ' ' + ast.name : ''}(`);\n        this._visitParams(ast.params, ctx);\n        ctx.println(ast, `) {`);\n        ctx.incIndent();\n        this.visitAllStatements(ast.statements, ctx);\n        ctx.decIndent();\n        ctx.print(ast, `}`);\n        return null;\n    }\n    visitArrowFunctionExpr(ast, ctx) {\n        ctx.print(ast, '(');\n        this._visitParams(ast.params, ctx);\n        ctx.print(ast, ') =>');\n        if (Array.isArray(ast.body)) {\n            ctx.println(ast, `{`);\n            ctx.incIndent();\n            this.visitAllStatements(ast.body, ctx);\n            ctx.decIndent();\n            ctx.print(ast, `}`);\n        }\n        else {\n            const isObjectLiteral = ast.body instanceof LiteralMapExpr;\n            if (isObjectLiteral) {\n                ctx.print(ast, '(');\n            }\n            ast.body.visitExpression(this, ctx);\n            if (isObjectLiteral) {\n                ctx.print(ast, ')');\n            }\n        }\n        return null;\n    }\n    visitDeclareFunctionStmt(stmt, ctx) {\n        ctx.print(stmt, `function ${stmt.name}(`);\n        this._visitParams(stmt.params, ctx);\n        ctx.println(stmt, `) {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.statements, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitLocalizedString(ast, ctx) {\n        // The following convoluted piece of code is effectively the downlevelled equivalent of\n        // ```\n        // $localize `...`\n        // ```\n        // which is effectively like:\n        // ```\n        // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n        // ```\n        ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);\n        const parts = [ast.serializeI18nHead()];\n        for (let i = 1; i < ast.messageParts.length; i++) {\n            parts.push(ast.serializeI18nTemplatePart(i));\n        }\n        ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.cooked, false)).join(', ')}], `);\n        ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.raw, false)).join(', ')}])`);\n        ast.expressions.forEach(expression => {\n            ctx.print(ast, ', ');\n            expression.visitExpression(this, ctx);\n        });\n        ctx.print(ast, ')');\n        return null;\n    }\n    _visitParams(params, ctx) {\n        this.visitAllObjects(param => ctx.print(null, param.name), params, ctx, ',');\n    }\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy within the JIT\n * compiler. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        const trustedTypes = _global['trustedTypes'];\n        policy = null;\n        if (trustedTypes) {\n            try {\n                policy = trustedTypes.createPolicy('angular#unsafe-jit', {\n                    createScript: (s) => s,\n                });\n            }\n            catch {\n                // trustedTypes.createPolicy throws if called with a name that is\n                // already registered, even in report-only mode. Until the API changes,\n                // catch the error not to break the applications functionally. In such\n                // cases, the code will fall back to using strings.\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n    return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from the JIT compiler, as use in other code can lead to XSS\n * vulnerabilities.\n */\nfunction newTrustedFunctionForJIT(...args) {\n    if (!_global['trustedTypes']) {\n        // In environments that don't support Trusted Types, fall back to the most\n        // straightforward implementation:\n        return new Function(...args);\n    }\n    // Chrome currently does not support passing TrustedScript to the Function\n    // constructor. The following implements the workaround proposed on the page\n    // below, where the Chromium bug is also referenced:\n    // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n    const fnArgs = args.slice(0, -1).join(',');\n    const fnBody = args[args.length - 1];\n    const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n    // Using eval directly confuses the compiler and prevents this module from\n    // being stripped out of JS binaries even if not used. The global['eval']\n    // indirection fixes that.\n    const fn = _global['eval'](trustedScriptFromString(body));\n    if (fn.bind === undefined) {\n        // Workaround for a browser bug that only exists in Chrome 83, where passing\n        // a TrustedScript to eval just returns the TrustedScript back without\n        // evaluating it. In that case, fall back to the most straightforward\n        // implementation:\n        return new Function(...args);\n    }\n    // To completely mimic the behavior of calling \"new Function\", two more\n    // things need to happen:\n    // 1. Stringifying the resulting function should return its source code\n    fn.toString = () => body;\n    // 2. When calling the resulting function, `this` should refer to `global`\n    return fn.bind(_global);\n    // When Trusted Types support in Function constructors is widely available,\n    // the implementation of this function can be simplified to:\n    // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * A helper class to manage the evaluation of JIT generated code.\n */\nclass JitEvaluator {\n    /**\n     *\n     * @param sourceUrl The URL of the generated code.\n     * @param statements An array of Angular statement AST nodes to be evaluated.\n     * @param refResolver Resolves `o.ExternalReference`s into values.\n     * @param createSourceMaps If true then create a source-map for the generated code and include it\n     * inline as a source-map comment.\n     * @returns A map of all the variables in the generated code.\n     */\n    evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {\n        const converter = new JitEmitterVisitor(refResolver);\n        const ctx = EmitterVisitorContext.createRoot();\n        // Ensure generated code is in strict mode\n        if (statements.length > 0 && !isUseStrictStatement(statements[0])) {\n            statements = [\n                literal('use strict').toStmt(),\n                ...statements,\n            ];\n        }\n        converter.visitAllStatements(statements, ctx);\n        converter.createReturnStmt(ctx);\n        return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n    }\n    /**\n     * Evaluate a piece of JIT generated code.\n     * @param sourceUrl The URL of this generated code.\n     * @param ctx A context object that contains an AST of the code to be evaluated.\n     * @param vars A map containing the names and values of variables that the evaluated code might\n     * reference.\n     * @param createSourceMap If true then create a source-map for the generated code and include it\n     * inline as a source-map comment.\n     * @returns The result of evaluating the code.\n     */\n    evaluateCode(sourceUrl, ctx, vars, createSourceMap) {\n        let fnBody = `\"use strict\";${ctx.toSource()}\\n//# sourceURL=${sourceUrl}`;\n        const fnArgNames = [];\n        const fnArgValues = [];\n        for (const argName in vars) {\n            fnArgValues.push(vars[argName]);\n            fnArgNames.push(argName);\n        }\n        if (createSourceMap) {\n            // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n            // E.g. ```\n            // function anonymous(a,b,c\n            // /**/) { ... }```\n            // We don't want to hard code this fact, so we auto detect it via an empty function first.\n            const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat('return null;')).toString();\n            const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n            fnBody += `\\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;\n        }\n        const fn = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));\n        return this.executeFunction(fn, fnArgValues);\n    }\n    /**\n     * Execute a JIT generated function by calling it.\n     *\n     * This method can be overridden in tests to capture the functions that are generated\n     * by this `JitEvaluator` class.\n     *\n     * @param fn A function to execute.\n     * @param args The arguments to pass to the function being executed.\n     * @returns The return value of the executed function.\n     */\n    executeFunction(fn, args) {\n        return fn(...args);\n    }\n}\n/**\n * An Angular AST visitor that converts AST nodes into executable JavaScript code.\n */\nclass JitEmitterVisitor extends AbstractJsEmitterVisitor {\n    constructor(refResolver) {\n        super();\n        this.refResolver = refResolver;\n        this._evalArgNames = [];\n        this._evalArgValues = [];\n        this._evalExportedVars = [];\n    }\n    createReturnStmt(ctx) {\n        const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(resultVar => new LiteralMapEntry(resultVar, variable(resultVar), false))));\n        stmt.visitStatement(this, ctx);\n    }\n    getArgs() {\n        const result = {};\n        for (let i = 0; i < this._evalArgNames.length; i++) {\n            result[this._evalArgNames[i]] = this._evalArgValues[i];\n        }\n        return result;\n    }\n    visitExternalExpr(ast, ctx) {\n        this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);\n        return null;\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        this._emitReferenceToExternal(ast, ast.node, ctx);\n        return null;\n    }\n    visitDeclareVarStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return super.visitDeclareVarStmt(stmt, ctx);\n    }\n    visitDeclareFunctionStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return super.visitDeclareFunctionStmt(stmt, ctx);\n    }\n    _emitReferenceToExternal(ast, value, ctx) {\n        let id = this._evalArgValues.indexOf(value);\n        if (id === -1) {\n            id = this._evalArgValues.length;\n            this._evalArgValues.push(value);\n            const name = identifierName({ reference: value }) || 'val';\n            this._evalArgNames.push(`jit_${name}_${id}`);\n        }\n        ctx.print(ast, this._evalArgNames[id]);\n    }\n}\nfunction isUseStrictStatement(statement) {\n    return statement.isEquivalent(literal('use strict').toStmt());\n}\n\nfunction compileInjector(meta) {\n    const definitionMap = new DefinitionMap();\n    if (meta.providers !== null) {\n        definitionMap.set('providers', meta.providers);\n    }\n    if (meta.imports.length > 0) {\n        definitionMap.set('imports', literalArr(meta.imports));\n    }\n    const expression = importExpr(Identifiers.defineInjector).callFn([definitionMap.toLiteralMap()], undefined, true);\n    const type = createInjectorType(meta);\n    return { expression, type, statements: [] };\n}\nfunction createInjectorType(meta) {\n    return new ExpressionType(importExpr(Identifiers.InjectorDeclaration, [new ExpressionType(meta.type.type)]));\n}\n\n/**\n * Implementation of `CompileReflector` which resolves references to @angular/core\n * symbols at runtime, according to a consumer-provided mapping.\n *\n * Only supports `resolveExternalReference`, all other methods throw.\n */\nclass R3JitReflector {\n    constructor(context) {\n        this.context = context;\n    }\n    resolveExternalReference(ref) {\n        // This reflector only handles @angular/core imports.\n        if (ref.moduleName !== '@angular/core') {\n            throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);\n        }\n        if (!this.context.hasOwnProperty(ref.name)) {\n            throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);\n        }\n        return this.context[ref.name];\n    }\n}\n\n/**\n * How the selector scope of an NgModule (its declarations, imports, and exports) should be emitted\n * as a part of the NgModule definition.\n */\nvar R3SelectorScopeMode;\n(function (R3SelectorScopeMode) {\n    /**\n     * Emit the declarations inline into the module definition.\n     *\n     * This option is useful in certain contexts where it's known that JIT support is required. The\n     * tradeoff here is that this emit style prevents directives and pipes from being tree-shaken if\n     * they are unused, but the NgModule is used.\n     */\n    R3SelectorScopeMode[R3SelectorScopeMode[\"Inline\"] = 0] = \"Inline\";\n    /**\n     * Emit the declarations using a side effectful function call, `ɵɵsetNgModuleScope`, that is\n     * guarded with the `ngJitMode` flag.\n     *\n     * This form of emit supports JIT and can be optimized away if the `ngJitMode` flag is set to\n     * false, which allows unused directives and pipes to be tree-shaken.\n     */\n    R3SelectorScopeMode[R3SelectorScopeMode[\"SideEffect\"] = 1] = \"SideEffect\";\n    /**\n     * Don't generate selector scopes at all.\n     *\n     * This is useful for contexts where JIT support is known to be unnecessary.\n     */\n    R3SelectorScopeMode[R3SelectorScopeMode[\"Omit\"] = 2] = \"Omit\";\n})(R3SelectorScopeMode || (R3SelectorScopeMode = {}));\n/**\n * The type of the NgModule meta data.\n * - Global: Used for full and partial compilation modes which mainly includes R3References.\n * - Local: Used for the local compilation mode which mainly includes the raw expressions as appears\n * in the NgModule decorator.\n */\nvar R3NgModuleMetadataKind;\n(function (R3NgModuleMetadataKind) {\n    R3NgModuleMetadataKind[R3NgModuleMetadataKind[\"Global\"] = 0] = \"Global\";\n    R3NgModuleMetadataKind[R3NgModuleMetadataKind[\"Local\"] = 1] = \"Local\";\n})(R3NgModuleMetadataKind || (R3NgModuleMetadataKind = {}));\n/**\n * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.\n */\nfunction compileNgModule(meta) {\n    const statements = [];\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('type', meta.type.value);\n    // Assign bootstrap definition. In local compilation mode (i.e., for\n    // `R3NgModuleMetadataKind.LOCAL`) we assign the bootstrap field using the runtime\n    // `ɵɵsetNgModuleScope`.\n    if (meta.kind === R3NgModuleMetadataKind.Global && meta.bootstrap.length > 0) {\n        definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));\n    }\n    if (meta.selectorScopeMode === R3SelectorScopeMode.Inline) {\n        // If requested to emit scope information inline, pass the `declarations`, `imports` and\n        // `exports` to the `ɵɵdefineNgModule()` call directly.\n        if (meta.declarations.length > 0) {\n            definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n        }\n        if (meta.imports.length > 0) {\n            definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n        }\n        if (meta.exports.length > 0) {\n            definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n        }\n    }\n    else if (meta.selectorScopeMode === R3SelectorScopeMode.SideEffect) {\n        // In this mode, scope information is not passed into `ɵɵdefineNgModule` as it\n        // would prevent tree-shaking of the declarations, imports and exports references. Instead, it's\n        // patched onto the NgModule definition with a `ɵɵsetNgModuleScope` call that's guarded by the\n        // `ngJitMode` flag.\n        const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);\n        if (setNgModuleScopeCall !== null) {\n            statements.push(setNgModuleScopeCall);\n        }\n    }\n    else {\n        // Selector scope emit was not requested, so skip it.\n    }\n    if (meta.schemas !== null && meta.schemas.length > 0) {\n        definitionMap.set('schemas', literalArr(meta.schemas.map(ref => ref.value)));\n    }\n    if (meta.id !== null) {\n        definitionMap.set('id', meta.id);\n        // Generate a side-effectful call to register this NgModule by its id, as per the semantics of\n        // NgModule ids.\n        statements.push(importExpr(Identifiers.registerNgModuleType).callFn([meta.type.value, meta.id]).toStmt());\n    }\n    const expression = importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()], undefined, true);\n    const type = createNgModuleType(meta);\n    return { expression, type, statements };\n}\n/**\n * This function is used in JIT mode to generate the call to `ɵɵdefineNgModule()` from a call to\n * `ɵɵngDeclareNgModule()`.\n */\nfunction compileNgModuleDeclarationExpression(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('type', new WrappedNodeExpr(meta.type));\n    if (meta.bootstrap !== undefined) {\n        definitionMap.set('bootstrap', new WrappedNodeExpr(meta.bootstrap));\n    }\n    if (meta.declarations !== undefined) {\n        definitionMap.set('declarations', new WrappedNodeExpr(meta.declarations));\n    }\n    if (meta.imports !== undefined) {\n        definitionMap.set('imports', new WrappedNodeExpr(meta.imports));\n    }\n    if (meta.exports !== undefined) {\n        definitionMap.set('exports', new WrappedNodeExpr(meta.exports));\n    }\n    if (meta.schemas !== undefined) {\n        definitionMap.set('schemas', new WrappedNodeExpr(meta.schemas));\n    }\n    if (meta.id !== undefined) {\n        definitionMap.set('id', new WrappedNodeExpr(meta.id));\n    }\n    return importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);\n}\nfunction createNgModuleType(meta) {\n    if (meta.kind === R3NgModuleMetadataKind.Local) {\n        return new ExpressionType(meta.type.value);\n    }\n    const { type: moduleType, declarations, exports, imports, includeImportTypes, publicDeclarationTypes } = meta;\n    return new ExpressionType(importExpr(Identifiers.NgModuleDeclaration, [\n        new ExpressionType(moduleType.type),\n        publicDeclarationTypes === null ? tupleTypeOf(declarations) :\n            tupleOfTypes(publicDeclarationTypes),\n        includeImportTypes ? tupleTypeOf(imports) : NONE_TYPE,\n        tupleTypeOf(exports),\n    ]));\n}\n/**\n * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the\n * transitive module scope can be computed during runtime in JIT mode. This call is marked pure\n * such that the references to declarations, imports and exports may be elided causing these\n * symbols to become tree-shakeable.\n */\nfunction generateSetNgModuleScopeCall(meta) {\n    const scopeMap = new DefinitionMap();\n    if (meta.kind === R3NgModuleMetadataKind.Global) {\n        if (meta.declarations.length > 0) {\n            scopeMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n        }\n    }\n    else {\n        if (meta.declarationsExpression) {\n            scopeMap.set('declarations', meta.declarationsExpression);\n        }\n    }\n    if (meta.kind === R3NgModuleMetadataKind.Global) {\n        if (meta.imports.length > 0) {\n            scopeMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n        }\n    }\n    else {\n        if (meta.importsExpression) {\n            scopeMap.set('imports', meta.importsExpression);\n        }\n    }\n    if (meta.kind === R3NgModuleMetadataKind.Global) {\n        if (meta.exports.length > 0) {\n            scopeMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n        }\n    }\n    else {\n        if (meta.exportsExpression) {\n            scopeMap.set('exports', meta.exportsExpression);\n        }\n    }\n    if (meta.kind === R3NgModuleMetadataKind.Local && meta.bootstrapExpression) {\n        scopeMap.set('bootstrap', meta.bootstrapExpression);\n    }\n    if (Object.keys(scopeMap.values).length === 0) {\n        return null;\n    }\n    // setNgModuleScope(...)\n    const fnCall = new InvokeFunctionExpr(\n    /* fn */ importExpr(Identifiers.setNgModuleScope), \n    /* args */ [meta.type.value, scopeMap.toLiteralMap()]);\n    // (ngJitMode guard) && setNgModuleScope(...)\n    const guardedCall = jitOnlyGuardedExpression(fnCall);\n    // function() { (ngJitMode guard) && setNgModuleScope(...); }\n    const iife = new FunctionExpr(\n    /* params */ [], \n    /* statements */ [guardedCall.toStmt()]);\n    // (function() { (ngJitMode guard) && setNgModuleScope(...); })()\n    const iifeCall = new InvokeFunctionExpr(\n    /* fn */ iife, \n    /* args */ []);\n    return iifeCall.toStmt();\n}\nfunction tupleTypeOf(exp) {\n    const types = exp.map(ref => typeofExpr(ref.type));\n    return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;\n}\nfunction tupleOfTypes(types) {\n    const typeofTypes = types.map(type => typeofExpr(type));\n    return types.length > 0 ? expressionType(literalArr(typeofTypes)) : NONE_TYPE;\n}\n\nfunction compilePipeFromMetadata(metadata) {\n    const definitionMapValues = [];\n    // e.g. `name: 'myPipe'`\n    definitionMapValues.push({ key: 'name', value: literal(metadata.pipeName), quoted: false });\n    // e.g. `type: MyPipe`\n    definitionMapValues.push({ key: 'type', value: metadata.type.value, quoted: false });\n    // e.g. `pure: true`\n    definitionMapValues.push({ key: 'pure', value: literal(metadata.pure), quoted: false });\n    if (metadata.isStandalone) {\n        definitionMapValues.push({ key: 'standalone', value: literal(true), quoted: false });\n    }\n    const expression = importExpr(Identifiers.definePipe).callFn([literalMap(definitionMapValues)], undefined, true);\n    const type = createPipeType(metadata);\n    return { expression, type, statements: [] };\n}\nfunction createPipeType(metadata) {\n    return new ExpressionType(importExpr(Identifiers.PipeDeclaration, [\n        typeWithParameters(metadata.type.type, metadata.typeArgumentCount),\n        new ExpressionType(new LiteralExpr(metadata.pipeName)),\n        new ExpressionType(new LiteralExpr(metadata.isStandalone)),\n    ]));\n}\n\nvar R3TemplateDependencyKind;\n(function (R3TemplateDependencyKind) {\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n    R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\n\nclass ParserError {\n    constructor(message, input, errLocation, ctxLocation) {\n        this.input = input;\n        this.errLocation = errLocation;\n        this.ctxLocation = ctxLocation;\n        this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n    }\n}\nclass ParseSpan {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    toAbsolute(absoluteOffset) {\n        return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);\n    }\n}\nclass AST {\n    constructor(span, \n    /**\n     * Absolute location of the expression AST in a source code file.\n     */\n    sourceSpan) {\n        this.span = span;\n        this.sourceSpan = sourceSpan;\n    }\n    toString() {\n        return 'AST';\n    }\n}\nclass ASTWithName extends AST {\n    constructor(span, sourceSpan, nameSpan) {\n        super(span, sourceSpan);\n        this.nameSpan = nameSpan;\n    }\n}\nclass EmptyExpr$1 extends AST {\n    visit(visitor, context = null) {\n        // do nothing\n    }\n}\nclass ImplicitReceiver extends AST {\n    visit(visitor, context = null) {\n        return visitor.visitImplicitReceiver(this, context);\n    }\n}\n/**\n * Receiver when something is accessed through `this` (e.g. `this.foo`). Note that this class\n * inherits from `ImplicitReceiver`, because accessing something through `this` is treated the\n * same as accessing it implicitly inside of an Angular template (e.g. `[attr.title]=\"this.title\"`\n * is the same as `[attr.title]=\"title\"`.). Inheriting allows for the `this` accesses to be treated\n * the same as implicit ones, except for a couple of exceptions like `$event` and `$any`.\n * TODO: we should find a way for this class not to extend from `ImplicitReceiver` in the future.\n */\nclass ThisReceiver extends ImplicitReceiver {\n    visit(visitor, context = null) {\n        return visitor.visitThisReceiver?.(this, context);\n    }\n}\n/**\n * Multiple expressions separated by a semicolon.\n */\nclass Chain extends AST {\n    constructor(span, sourceSpan, expressions) {\n        super(span, sourceSpan);\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitChain(this, context);\n    }\n}\nclass Conditional extends AST {\n    constructor(span, sourceSpan, condition, trueExp, falseExp) {\n        super(span, sourceSpan);\n        this.condition = condition;\n        this.trueExp = trueExp;\n        this.falseExp = falseExp;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitConditional(this, context);\n    }\n}\nclass PropertyRead extends ASTWithName {\n    constructor(span, sourceSpan, nameSpan, receiver, name) {\n        super(span, sourceSpan, nameSpan);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPropertyRead(this, context);\n    }\n}\nclass PropertyWrite extends ASTWithName {\n    constructor(span, sourceSpan, nameSpan, receiver, name, value) {\n        super(span, sourceSpan, nameSpan);\n        this.receiver = receiver;\n        this.name = name;\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPropertyWrite(this, context);\n    }\n}\nclass SafePropertyRead extends ASTWithName {\n    constructor(span, sourceSpan, nameSpan, receiver, name) {\n        super(span, sourceSpan, nameSpan);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitSafePropertyRead(this, context);\n    }\n}\nclass KeyedRead extends AST {\n    constructor(span, sourceSpan, receiver, key) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.key = key;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitKeyedRead(this, context);\n    }\n}\nclass SafeKeyedRead extends AST {\n    constructor(span, sourceSpan, receiver, key) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.key = key;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitSafeKeyedRead(this, context);\n    }\n}\nclass KeyedWrite extends AST {\n    constructor(span, sourceSpan, receiver, key, value) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.key = key;\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitKeyedWrite(this, context);\n    }\n}\nclass BindingPipe extends ASTWithName {\n    constructor(span, sourceSpan, exp, name, args, nameSpan) {\n        super(span, sourceSpan, nameSpan);\n        this.exp = exp;\n        this.name = name;\n        this.args = args;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPipe(this, context);\n    }\n}\nclass LiteralPrimitive extends AST {\n    constructor(span, sourceSpan, value) {\n        super(span, sourceSpan);\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralPrimitive(this, context);\n    }\n}\nclass LiteralArray extends AST {\n    constructor(span, sourceSpan, expressions) {\n        super(span, sourceSpan);\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralArray(this, context);\n    }\n}\nclass LiteralMap extends AST {\n    constructor(span, sourceSpan, keys, values) {\n        super(span, sourceSpan);\n        this.keys = keys;\n        this.values = values;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralMap(this, context);\n    }\n}\nclass Interpolation$1 extends AST {\n    constructor(span, sourceSpan, strings, expressions) {\n        super(span, sourceSpan);\n        this.strings = strings;\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitInterpolation(this, context);\n    }\n}\nclass Binary extends AST {\n    constructor(span, sourceSpan, operation, left, right) {\n        super(span, sourceSpan);\n        this.operation = operation;\n        this.left = left;\n        this.right = right;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitBinary(this, context);\n    }\n}\n/**\n * For backwards compatibility reasons, `Unary` inherits from `Binary` and mimics the binary AST\n * node that was originally used. This inheritance relation can be deleted in some future major,\n * after consumers have been given a chance to fully support Unary.\n */\nclass Unary extends Binary {\n    /**\n     * Creates a unary minus expression \"-x\", represented as `Binary` using \"0 - x\".\n     */\n    static createMinus(span, sourceSpan, expr) {\n        return new Unary(span, sourceSpan, '-', expr, '-', new LiteralPrimitive(span, sourceSpan, 0), expr);\n    }\n    /**\n     * Creates a unary plus expression \"+x\", represented as `Binary` using \"x - 0\".\n     */\n    static createPlus(span, sourceSpan, expr) {\n        return new Unary(span, sourceSpan, '+', expr, '-', expr, new LiteralPrimitive(span, sourceSpan, 0));\n    }\n    /**\n     * During the deprecation period this constructor is private, to avoid consumers from creating\n     * a `Unary` with the fallback properties for `Binary`.\n     */\n    constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {\n        super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);\n        this.operator = operator;\n        this.expr = expr;\n        // Redeclare the properties that are inherited from `Binary` as `never`, as consumers should not\n        // depend on these fields when operating on `Unary`.\n        this.left = null;\n        this.right = null;\n        this.operation = null;\n    }\n    visit(visitor, context = null) {\n        if (visitor.visitUnary !== undefined) {\n            return visitor.visitUnary(this, context);\n        }\n        return visitor.visitBinary(this, context);\n    }\n}\nclass PrefixNot extends AST {\n    constructor(span, sourceSpan, expression) {\n        super(span, sourceSpan);\n        this.expression = expression;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPrefixNot(this, context);\n    }\n}\nclass NonNullAssert extends AST {\n    constructor(span, sourceSpan, expression) {\n        super(span, sourceSpan);\n        this.expression = expression;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitNonNullAssert(this, context);\n    }\n}\nclass Call extends AST {\n    constructor(span, sourceSpan, receiver, args, argumentSpan) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.args = args;\n        this.argumentSpan = argumentSpan;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitCall(this, context);\n    }\n}\nclass SafeCall extends AST {\n    constructor(span, sourceSpan, receiver, args, argumentSpan) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.args = args;\n        this.argumentSpan = argumentSpan;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitSafeCall(this, context);\n    }\n}\n/**\n * Records the absolute position of a text span in a source file, where `start` and `end` are the\n * starting and ending byte offsets, respectively, of the text span in a source file.\n */\nclass AbsoluteSourceSpan {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}\nclass ASTWithSource extends AST {\n    constructor(ast, source, location, absoluteOffset, errors) {\n        super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));\n        this.ast = ast;\n        this.source = source;\n        this.location = location;\n        this.errors = errors;\n    }\n    visit(visitor, context = null) {\n        if (visitor.visitASTWithSource) {\n            return visitor.visitASTWithSource(this, context);\n        }\n        return this.ast.visit(visitor, context);\n    }\n    toString() {\n        return `${this.source} in ${this.location}`;\n    }\n}\nclass VariableBinding {\n    /**\n     * @param sourceSpan entire span of the binding.\n     * @param key name of the LHS along with its span.\n     * @param value optional value for the RHS along with its span.\n     */\n    constructor(sourceSpan, key, value) {\n        this.sourceSpan = sourceSpan;\n        this.key = key;\n        this.value = value;\n    }\n}\nclass ExpressionBinding {\n    /**\n     * @param sourceSpan entire span of the binding.\n     * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its\n     * span. Note that the length of the span may not be the same as\n     * `key.source.length`. For example,\n     * 1. key.source = ngFor, key.span is for \"ngFor\"\n     * 2. key.source = ngForOf, key.span is for \"of\"\n     * 3. key.source = ngForTrackBy, key.span is for \"trackBy\"\n     * @param value optional expression for the RHS.\n     */\n    constructor(sourceSpan, key, value) {\n        this.sourceSpan = sourceSpan;\n        this.key = key;\n        this.value = value;\n    }\n}\nclass RecursiveAstVisitor {\n    visit(ast, context) {\n        // The default implementation just visits every node.\n        // Classes that extend RecursiveAstVisitor should override this function\n        // to selectively visit the specified node.\n        ast.visit(this, context);\n    }\n    visitUnary(ast, context) {\n        this.visit(ast.expr, context);\n    }\n    visitBinary(ast, context) {\n        this.visit(ast.left, context);\n        this.visit(ast.right, context);\n    }\n    visitChain(ast, context) {\n        this.visitAll(ast.expressions, context);\n    }\n    visitConditional(ast, context) {\n        this.visit(ast.condition, context);\n        this.visit(ast.trueExp, context);\n        this.visit(ast.falseExp, context);\n    }\n    visitPipe(ast, context) {\n        this.visit(ast.exp, context);\n        this.visitAll(ast.args, context);\n    }\n    visitImplicitReceiver(ast, context) { }\n    visitThisReceiver(ast, context) { }\n    visitInterpolation(ast, context) {\n        this.visitAll(ast.expressions, context);\n    }\n    visitKeyedRead(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visit(ast.key, context);\n    }\n    visitKeyedWrite(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visit(ast.key, context);\n        this.visit(ast.value, context);\n    }\n    visitLiteralArray(ast, context) {\n        this.visitAll(ast.expressions, context);\n    }\n    visitLiteralMap(ast, context) {\n        this.visitAll(ast.values, context);\n    }\n    visitLiteralPrimitive(ast, context) { }\n    visitPrefixNot(ast, context) {\n        this.visit(ast.expression, context);\n    }\n    visitNonNullAssert(ast, context) {\n        this.visit(ast.expression, context);\n    }\n    visitPropertyRead(ast, context) {\n        this.visit(ast.receiver, context);\n    }\n    visitPropertyWrite(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visit(ast.value, context);\n    }\n    visitSafePropertyRead(ast, context) {\n        this.visit(ast.receiver, context);\n    }\n    visitSafeKeyedRead(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visit(ast.key, context);\n    }\n    visitCall(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visitAll(ast.args, context);\n    }\n    visitSafeCall(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visitAll(ast.args, context);\n    }\n    // This is not part of the AstVisitor interface, just a helper method\n    visitAll(asts, context) {\n        for (const ast of asts) {\n            this.visit(ast, context);\n        }\n    }\n}\nclass AstTransformer {\n    visitImplicitReceiver(ast, context) {\n        return ast;\n    }\n    visitThisReceiver(ast, context) {\n        return ast;\n    }\n    visitInterpolation(ast, context) {\n        return new Interpolation$1(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));\n    }\n    visitLiteralPrimitive(ast, context) {\n        return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);\n    }\n    visitPropertyRead(ast, context) {\n        return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n    }\n    visitPropertyWrite(ast, context) {\n        return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n    }\n    visitSafePropertyRead(ast, context) {\n        return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n    }\n    visitLiteralArray(ast, context) {\n        return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n    }\n    visitLiteralMap(ast, context) {\n        return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));\n    }\n    visitUnary(ast, context) {\n        switch (ast.operator) {\n            case '+':\n                return Unary.createPlus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n            case '-':\n                return Unary.createMinus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n            default:\n                throw new Error(`Unknown unary operator ${ast.operator}`);\n        }\n    }\n    visitBinary(ast, context) {\n        return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));\n    }\n    visitPrefixNot(ast, context) {\n        return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));\n    }\n    visitNonNullAssert(ast, context) {\n        return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));\n    }\n    visitConditional(ast, context) {\n        return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n    }\n    visitPipe(ast, context) {\n        return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);\n    }\n    visitKeyedRead(ast, context) {\n        return new KeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n    }\n    visitKeyedWrite(ast, context) {\n        return new KeyedWrite(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this), ast.value.visit(this));\n    }\n    visitCall(ast, context) {\n        return new Call(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);\n    }\n    visitSafeCall(ast, context) {\n        return new SafeCall(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);\n    }\n    visitAll(asts) {\n        const res = [];\n        for (let i = 0; i < asts.length; ++i) {\n            res[i] = asts[i].visit(this);\n        }\n        return res;\n    }\n    visitChain(ast, context) {\n        return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n    }\n    visitSafeKeyedRead(ast, context) {\n        return new SafeKeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n    }\n}\n// A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\nclass AstMemoryEfficientTransformer {\n    visitImplicitReceiver(ast, context) {\n        return ast;\n    }\n    visitThisReceiver(ast, context) {\n        return ast;\n    }\n    visitInterpolation(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions)\n            return new Interpolation$1(ast.span, ast.sourceSpan, ast.strings, expressions);\n        return ast;\n    }\n    visitLiteralPrimitive(ast, context) {\n        return ast;\n    }\n    visitPropertyRead(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n        }\n        return ast;\n    }\n    visitPropertyWrite(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        const value = ast.value.visit(this);\n        if (receiver !== ast.receiver || value !== ast.value) {\n            return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, value);\n        }\n        return ast;\n    }\n    visitSafePropertyRead(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n        }\n        return ast;\n    }\n    visitLiteralArray(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new LiteralArray(ast.span, ast.sourceSpan, expressions);\n        }\n        return ast;\n    }\n    visitLiteralMap(ast, context) {\n        const values = this.visitAll(ast.values);\n        if (values !== ast.values) {\n            return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);\n        }\n        return ast;\n    }\n    visitUnary(ast, context) {\n        const expr = ast.expr.visit(this);\n        if (expr !== ast.expr) {\n            switch (ast.operator) {\n                case '+':\n                    return Unary.createPlus(ast.span, ast.sourceSpan, expr);\n                case '-':\n                    return Unary.createMinus(ast.span, ast.sourceSpan, expr);\n                default:\n                    throw new Error(`Unknown unary operator ${ast.operator}`);\n            }\n        }\n        return ast;\n    }\n    visitBinary(ast, context) {\n        const left = ast.left.visit(this);\n        const right = ast.right.visit(this);\n        if (left !== ast.left || right !== ast.right) {\n            return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);\n        }\n        return ast;\n    }\n    visitPrefixNot(ast, context) {\n        const expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new PrefixNot(ast.span, ast.sourceSpan, expression);\n        }\n        return ast;\n    }\n    visitNonNullAssert(ast, context) {\n        const expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new NonNullAssert(ast.span, ast.sourceSpan, expression);\n        }\n        return ast;\n    }\n    visitConditional(ast, context) {\n        const condition = ast.condition.visit(this);\n        const trueExp = ast.trueExp.visit(this);\n        const falseExp = ast.falseExp.visit(this);\n        if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {\n            return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);\n        }\n        return ast;\n    }\n    visitPipe(ast, context) {\n        const exp = ast.exp.visit(this);\n        const args = this.visitAll(ast.args);\n        if (exp !== ast.exp || args !== ast.args) {\n            return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);\n        }\n        return ast;\n    }\n    visitKeyedRead(ast, context) {\n        const obj = ast.receiver.visit(this);\n        const key = ast.key.visit(this);\n        if (obj !== ast.receiver || key !== ast.key) {\n            return new KeyedRead(ast.span, ast.sourceSpan, obj, key);\n        }\n        return ast;\n    }\n    visitKeyedWrite(ast, context) {\n        const obj = ast.receiver.visit(this);\n        const key = ast.key.visit(this);\n        const value = ast.value.visit(this);\n        if (obj !== ast.receiver || key !== ast.key || value !== ast.value) {\n            return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);\n        }\n        return ast;\n    }\n    visitAll(asts) {\n        const res = [];\n        let modified = false;\n        for (let i = 0; i < asts.length; ++i) {\n            const original = asts[i];\n            const value = original.visit(this);\n            res[i] = value;\n            modified = modified || value !== original;\n        }\n        return modified ? res : asts;\n    }\n    visitChain(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new Chain(ast.span, ast.sourceSpan, expressions);\n        }\n        return ast;\n    }\n    visitCall(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        const args = this.visitAll(ast.args);\n        if (receiver !== ast.receiver || args !== ast.args) {\n            return new Call(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);\n        }\n        return ast;\n    }\n    visitSafeCall(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        const args = this.visitAll(ast.args);\n        if (receiver !== ast.receiver || args !== ast.args) {\n            return new SafeCall(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);\n        }\n        return ast;\n    }\n    visitSafeKeyedRead(ast, context) {\n        const obj = ast.receiver.visit(this);\n        const key = ast.key.visit(this);\n        if (obj !== ast.receiver || key !== ast.key) {\n            return new SafeKeyedRead(ast.span, ast.sourceSpan, obj, key);\n        }\n        return ast;\n    }\n}\n// Bindings\nclass ParsedProperty {\n    constructor(name, expression, type, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.expression = expression;\n        this.type = type;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n        this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n        this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n    }\n}\nvar ParsedPropertyType;\n(function (ParsedPropertyType) {\n    ParsedPropertyType[ParsedPropertyType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    ParsedPropertyType[ParsedPropertyType[\"LITERAL_ATTR\"] = 1] = \"LITERAL_ATTR\";\n    ParsedPropertyType[ParsedPropertyType[\"ANIMATION\"] = 2] = \"ANIMATION\";\n})(ParsedPropertyType || (ParsedPropertyType = {}));\nclass ParsedEvent {\n    // Regular events have a target\n    // Animation events have a phase\n    constructor(name, targetOrPhase, type, handler, sourceSpan, handlerSpan, keySpan) {\n        this.name = name;\n        this.targetOrPhase = targetOrPhase;\n        this.type = type;\n        this.handler = handler;\n        this.sourceSpan = sourceSpan;\n        this.handlerSpan = handlerSpan;\n        this.keySpan = keySpan;\n    }\n}\n/**\n * ParsedVariable represents a variable declaration in a microsyntax expression.\n */\nclass ParsedVariable {\n    constructor(name, value, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n    }\n}\nclass BoundElementProperty {\n    constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n    }\n}\n\nclass EventHandlerVars {\n    static { this.event = variable('$event'); }\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n */\nfunction convertActionBinding(localResolver, implicitReceiver, action, bindingId, baseSourceSpan, implicitReceiverAccesses, globals) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver(globals);\n    }\n    const actionWithoutBuiltins = convertPropertyBindingBuiltins({\n        createLiteralArrayConverter: (argCount) => {\n            // Note: no caching for literal arrays in actions.\n            return (args) => literalArr(args);\n        },\n        createLiteralMapConverter: (keys) => {\n            // Note: no caching for literal maps in actions.\n            return (values) => {\n                const entries = keys.map((k, i) => ({\n                    key: k.key,\n                    value: values[i],\n                    quoted: k.quoted,\n                }));\n                return literalMap(entries);\n            };\n        },\n        createPipeConverter: (name) => {\n            throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);\n        }\n    }, action);\n    const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, /* supportsInterpolation */ false, baseSourceSpan, implicitReceiverAccesses);\n    const actionStmts = [];\n    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n    if (visitor.usesImplicitReceiver) {\n        localResolver.notifyImplicitReceiverUse();\n    }\n    const lastIndex = actionStmts.length - 1;\n    if (lastIndex >= 0) {\n        const lastStatement = actionStmts[lastIndex];\n        // Ensure that the value of the last expression statement is returned\n        if (lastStatement instanceof ExpressionStatement) {\n            actionStmts[lastIndex] = new ReturnStatement(lastStatement.expr);\n        }\n    }\n    return actionStmts;\n}\nfunction convertPropertyBindingBuiltins(converterFactory, ast) {\n    return convertBuiltins(converterFactory, ast);\n}\nclass ConvertPropertyBindingResult {\n    constructor(stmts, currValExpr) {\n        this.stmts = stmts;\n        this.currValExpr = currValExpr;\n    }\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression\n * is used in property binding. The expression has to be preprocessed via\n * `convertPropertyBindingBuiltins`.\n */\nfunction convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver();\n    }\n    const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, /* supportsInterpolation */ false);\n    const outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n    const stmts = getStatementsFromVisitor(visitor, bindingId);\n    if (visitor.usesImplicitReceiver) {\n        localResolver.notifyImplicitReceiverUse();\n    }\n    return new ConvertPropertyBindingResult(stmts, outputExpr);\n}\n/** Converts an AST to a pure function that may have access to the component scope. */\nfunction convertPureComponentScopeFunction(ast, localResolver, implicitReceiver, bindingId) {\n    const converted = convertPropertyBindingBuiltins({\n        createLiteralArrayConverter: () => args => literalArr(args),\n        createLiteralMapConverter: keys => values => literalMap(keys.map((key, index) => {\n            return ({\n                key: key.key,\n                value: values[index],\n                quoted: key.quoted,\n            });\n        })),\n        createPipeConverter: () => {\n            throw new Error('Illegal State: Pipes are not allowed in this context');\n        }\n    }, ast);\n    const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, false);\n    const statements = [];\n    flattenStatements(converted.visit(visitor, _Mode.Statement), statements);\n    return statements;\n}\n/**\n * Given some expression, such as a binding or interpolation expression, and a context expression to\n * look values up on, visit each facet of the given expression resolving values from the context\n * expression such that a list of arguments can be derived from the found values that can be used as\n * arguments to an external update instruction.\n *\n * @param localResolver The resolver to use to look up expressions by name appropriately\n * @param contextVariableExpression The expression representing the context variable used to create\n * the final argument expressions\n * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to\n * be resolved and what arguments list to build.\n * @param bindingId A name prefix used to create temporary variable names if they're needed for the\n * arguments generated\n * @returns An array of expressions that can be passed as arguments to instruction expressions like\n * `o.importExpr(R3.propertyInterpolate).callFn(result)`\n */\nfunction convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {\n    const visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, /* supportsInterpolation */ true);\n    const outputExpr = visitor.visitInterpolation(expressionWithArgumentsToExtract, _Mode.Expression);\n    if (visitor.usesImplicitReceiver) {\n        localResolver.notifyImplicitReceiverUse();\n    }\n    const stmts = getStatementsFromVisitor(visitor, bindingId);\n    const args = outputExpr.args;\n    return { stmts, args };\n}\nfunction getStatementsFromVisitor(visitor, bindingId) {\n    const stmts = [];\n    for (let i = 0; i < visitor.temporaryCount; i++) {\n        stmts.push(temporaryDeclaration(bindingId, i));\n    }\n    return stmts;\n}\nfunction convertBuiltins(converterFactory, ast) {\n    const visitor = new _BuiltinAstConverter(converterFactory);\n    return ast.visit(visitor);\n}\nfunction temporaryName(bindingId, temporaryNumber) {\n    return `tmp_${bindingId}_${temporaryNumber}`;\n}\nfunction temporaryDeclaration(bindingId, temporaryNumber) {\n    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber));\n}\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\n    for (let i = temporaryCount - 1; i >= 0; i--) {\n        statements.unshift(temporaryDeclaration(bindingId, i));\n    }\n}\nvar _Mode;\n(function (_Mode) {\n    _Mode[_Mode[\"Statement\"] = 0] = \"Statement\";\n    _Mode[_Mode[\"Expression\"] = 1] = \"Expression\";\n})(_Mode || (_Mode = {}));\nfunction ensureStatementMode(mode, ast) {\n    if (mode !== _Mode.Statement) {\n        throw new Error(`Expected a statement, but saw ${ast}`);\n    }\n}\nfunction ensureExpressionMode(mode, ast) {\n    if (mode !== _Mode.Expression) {\n        throw new Error(`Expected an expression, but saw ${ast}`);\n    }\n}\nfunction convertToStatementIfNeeded(mode, expr) {\n    if (mode === _Mode.Statement) {\n        return expr.toStmt();\n    }\n    else {\n        return expr;\n    }\n}\nclass _BuiltinAstConverter extends AstTransformer {\n    constructor(_converterFactory) {\n        super();\n        this._converterFactory = _converterFactory;\n    }\n    visitPipe(ast, context) {\n        const args = [ast.exp, ...ast.args].map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n    }\n    visitLiteralArray(ast, context) {\n        const args = ast.expressions.map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n    }\n    visitLiteralMap(ast, context) {\n        const args = ast.values.map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n    }\n}\nclass _AstToIrVisitor {\n    constructor(_localResolver, _implicitReceiver, bindingId, supportsInterpolation, baseSourceSpan, implicitReceiverAccesses) {\n        this._localResolver = _localResolver;\n        this._implicitReceiver = _implicitReceiver;\n        this.bindingId = bindingId;\n        this.supportsInterpolation = supportsInterpolation;\n        this.baseSourceSpan = baseSourceSpan;\n        this.implicitReceiverAccesses = implicitReceiverAccesses;\n        this._nodeMap = new Map();\n        this._resultMap = new Map();\n        this._currentTemporary = 0;\n        this.temporaryCount = 0;\n        this.usesImplicitReceiver = false;\n    }\n    visitUnary(ast, mode) {\n        let op;\n        switch (ast.operator) {\n            case '+':\n                op = UnaryOperator.Plus;\n                break;\n            case '-':\n                op = UnaryOperator.Minus;\n                break;\n            default:\n                throw new Error(`Unsupported operator ${ast.operator}`);\n        }\n        return convertToStatementIfNeeded(mode, new UnaryOperatorExpr(op, this._visit(ast.expr, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n    }\n    visitBinary(ast, mode) {\n        let op;\n        switch (ast.operation) {\n            case '+':\n                op = BinaryOperator.Plus;\n                break;\n            case '-':\n                op = BinaryOperator.Minus;\n                break;\n            case '*':\n                op = BinaryOperator.Multiply;\n                break;\n            case '/':\n                op = BinaryOperator.Divide;\n                break;\n            case '%':\n                op = BinaryOperator.Modulo;\n                break;\n            case '&&':\n                op = BinaryOperator.And;\n                break;\n            case '||':\n                op = BinaryOperator.Or;\n                break;\n            case '==':\n                op = BinaryOperator.Equals;\n                break;\n            case '!=':\n                op = BinaryOperator.NotEquals;\n                break;\n            case '===':\n                op = BinaryOperator.Identical;\n                break;\n            case '!==':\n                op = BinaryOperator.NotIdentical;\n                break;\n            case '<':\n                op = BinaryOperator.Lower;\n                break;\n            case '>':\n                op = BinaryOperator.Bigger;\n                break;\n            case '<=':\n                op = BinaryOperator.LowerEquals;\n                break;\n            case '>=':\n                op = BinaryOperator.BiggerEquals;\n                break;\n            case '??':\n                return this.convertNullishCoalesce(ast, mode);\n            default:\n                throw new Error(`Unsupported operation ${ast.operation}`);\n        }\n        return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n    }\n    visitChain(ast, mode) {\n        ensureStatementMode(mode, ast);\n        return this.visitAll(ast.expressions, mode);\n    }\n    visitConditional(ast, mode) {\n        const value = this._visit(ast.condition, _Mode.Expression);\n        return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));\n    }\n    visitPipe(ast, mode) {\n        throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);\n    }\n    visitImplicitReceiver(ast, mode) {\n        ensureExpressionMode(mode, ast);\n        this.usesImplicitReceiver = true;\n        return this._implicitReceiver;\n    }\n    visitThisReceiver(ast, mode) {\n        return this.visitImplicitReceiver(ast, mode);\n    }\n    visitInterpolation(ast, mode) {\n        if (!this.supportsInterpolation) {\n            throw new Error('Unexpected interpolation');\n        }\n        ensureExpressionMode(mode, ast);\n        let args = [];\n        for (let i = 0; i < ast.strings.length - 1; i++) {\n            args.push(literal(ast.strings[i]));\n            args.push(this._visit(ast.expressions[i], _Mode.Expression));\n        }\n        args.push(literal(ast.strings[ast.strings.length - 1]));\n        // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the\n        // args returned to just the value, because we're going to pass it to a special instruction.\n        const strings = ast.strings;\n        if (strings.length === 2 && strings[0] === '' && strings[1] === '') {\n            // Single argument interpolate instructions.\n            args = [args[1]];\n        }\n        else if (ast.expressions.length >= 9) {\n            // 9 or more arguments must be passed to the `interpolateV`-style instructions, which accept\n            // an array of arguments\n            args = [literalArr(args)];\n        }\n        return new InterpolationExpression(args);\n    }\n    visitKeyedRead(ast, mode) {\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            return convertToStatementIfNeeded(mode, this._visit(ast.receiver, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\n        }\n    }\n    visitKeyedWrite(ast, mode) {\n        const obj = this._visit(ast.receiver, _Mode.Expression);\n        const key = this._visit(ast.key, _Mode.Expression);\n        const value = this._visit(ast.value, _Mode.Expression);\n        if (obj === this._implicitReceiver) {\n            this._localResolver.maybeRestoreView();\n        }\n        return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n    }\n    visitLiteralArray(ast, mode) {\n        throw new Error(`Illegal State: literal arrays should have been converted into functions`);\n    }\n    visitLiteralMap(ast, mode) {\n        throw new Error(`Illegal State: literal maps should have been converted into functions`);\n    }\n    visitLiteralPrimitive(ast, mode) {\n        // For literal values of null, undefined, true, or false allow type interference\n        // to infer the type.\n        const type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ?\n            INFERRED_TYPE :\n            undefined;\n        return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));\n    }\n    _getLocal(name, receiver) {\n        if (this._localResolver.globals?.has(name) && receiver instanceof ThisReceiver) {\n            return null;\n        }\n        return this._localResolver.getLocal(name);\n    }\n    visitPrefixNot(ast, mode) {\n        return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));\n    }\n    visitNonNullAssert(ast, mode) {\n        return convertToStatementIfNeeded(mode, this._visit(ast.expression, _Mode.Expression));\n    }\n    visitPropertyRead(ast, mode) {\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            let result = null;\n            const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n            const receiver = this._visit(ast.receiver, _Mode.Expression);\n            if (receiver === this._implicitReceiver) {\n                result = this._getLocal(ast.name, ast.receiver);\n                if (result) {\n                    // Restore the previous \"usesImplicitReceiver\" state since the implicit\n                    // receiver has been replaced with a resolved local expression.\n                    this.usesImplicitReceiver = prevUsesImplicitReceiver;\n                    this.addImplicitReceiverAccess(ast.name);\n                }\n            }\n            if (result == null) {\n                result = receiver.prop(ast.name, this.convertSourceSpan(ast.span));\n            }\n            return convertToStatementIfNeeded(mode, result);\n        }\n    }\n    visitPropertyWrite(ast, mode) {\n        const receiver = this._visit(ast.receiver, _Mode.Expression);\n        const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n        let varExpr = null;\n        if (receiver === this._implicitReceiver) {\n            const localExpr = this._getLocal(ast.name, ast.receiver);\n            if (localExpr) {\n                if (localExpr instanceof ReadPropExpr) {\n                    // If the local variable is a property read expression, it's a reference\n                    // to a 'context.property' value and will be used as the target of the\n                    // write expression.\n                    varExpr = localExpr;\n                    // Restore the previous \"usesImplicitReceiver\" state since the implicit\n                    // receiver has been replaced with a resolved local expression.\n                    this.usesImplicitReceiver = prevUsesImplicitReceiver;\n                    this.addImplicitReceiverAccess(ast.name);\n                }\n                else {\n                    // Otherwise it's an error.\n                    const receiver = ast.name;\n                    const value = (ast.value instanceof PropertyRead) ? ast.value.name : undefined;\n                    throw new Error(`Cannot assign value \"${value}\" to template variable \"${receiver}\". Template variables are read-only.`);\n                }\n            }\n        }\n        // If no local expression could be produced, use the original receiver's\n        // property as the target.\n        if (varExpr === null) {\n            varExpr = receiver.prop(ast.name, this.convertSourceSpan(ast.span));\n        }\n        return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));\n    }\n    visitSafePropertyRead(ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n    visitSafeKeyedRead(ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n    visitAll(asts, mode) {\n        return asts.map(ast => this._visit(ast, mode));\n    }\n    visitCall(ast, mode) {\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        const convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n        if (ast instanceof BuiltinFunctionCall) {\n            return convertToStatementIfNeeded(mode, ast.converter(convertedArgs));\n        }\n        const receiver = ast.receiver;\n        if (receiver instanceof PropertyRead &&\n            receiver.receiver instanceof ImplicitReceiver &&\n            !(receiver.receiver instanceof ThisReceiver) && receiver.name === '$any') {\n            if (convertedArgs.length !== 1) {\n                throw new Error(`Invalid call to $any, expected 1 argument but received ${convertedArgs.length || 'none'}`);\n            }\n            return convertToStatementIfNeeded(mode, convertedArgs[0]);\n        }\n        const call = this._visit(receiver, _Mode.Expression)\n            .callFn(convertedArgs, this.convertSourceSpan(ast.span));\n        return convertToStatementIfNeeded(mode, call);\n    }\n    visitSafeCall(ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n    _visit(ast, mode) {\n        const result = this._resultMap.get(ast);\n        if (result)\n            return result;\n        return (this._nodeMap.get(ast) || ast).visit(this, mode);\n    }\n    convertSafeAccess(ast, leftMostSafe, mode) {\n        // If the expression contains a safe access node on the left it needs to be converted to\n        // an expression that guards the access to the member by checking the receiver for blank. As\n        // execution proceeds from left to right, the left most part of the expression must be guarded\n        // first but, because member access is left associative, the right side of the expression is at\n        // the top of the AST. The desired result requires lifting a copy of the left part of the\n        // expression up to test it for blank before generating the unguarded version.\n        // Consider, for example the following expression: a?.b.c?.d.e\n        // This results in the ast:\n        //         .\n        //        / \\\n        //       ?.   e\n        //      /  \\\n        //     .    d\n        //    / \\\n        //   ?.  c\n        //  /  \\\n        // a    b\n        // The following tree should be generated:\n        //\n        //        /---- ? ----\\\n        //       /      |      \\\n        //     a   /--- ? ---\\  null\n        //        /     |     \\\n        //       .      .     null\n        //      / \\    / \\\n        //     .  c   .   e\n        //    / \\    / \\\n        //   a   b  .   d\n        //         / \\\n        //        .   c\n        //       / \\\n        //      a   b\n        //\n        // Notice that the first guard condition is the left hand of the left most safe access node\n        // which comes in as leftMostSafe to this routine.\n        let guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\n        let temporary = undefined;\n        if (this.needsTemporaryInSafeAccess(leftMostSafe.receiver)) {\n            // If the expression has method calls or pipes then we need to save the result into a\n            // temporary variable to avoid calling stateful or impure code more than once.\n            temporary = this.allocateTemporary();\n            // Preserve the result in the temporary variable\n            guardedExpression = temporary.set(guardedExpression);\n            // Ensure all further references to the guarded expression refer to the temporary instead.\n            this._resultMap.set(leftMostSafe.receiver, temporary);\n        }\n        const condition = guardedExpression.isBlank();\n        // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n        // leftMostNode with its unguarded version in the call to `this.visit()`.\n        if (leftMostSafe instanceof SafeCall) {\n            this._nodeMap.set(leftMostSafe, new Call(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.args, leftMostSafe.argumentSpan));\n        }\n        else if (leftMostSafe instanceof SafeKeyedRead) {\n            this._nodeMap.set(leftMostSafe, new KeyedRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.key));\n        }\n        else {\n            this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name));\n        }\n        // Recursively convert the node now without the guarded member access.\n        const access = this._visit(ast, _Mode.Expression);\n        // Remove the mapping. This is not strictly required as the converter only traverses each node\n        // once but is safer if the conversion is changed to traverse the nodes more than once.\n        this._nodeMap.delete(leftMostSafe);\n        // If we allocated a temporary, release it.\n        if (temporary) {\n            this.releaseTemporary(temporary);\n        }\n        // Produce the conditional\n        return convertToStatementIfNeeded(mode, condition.conditional(NULL_EXPR, access));\n    }\n    convertNullishCoalesce(ast, mode) {\n        const left = this._visit(ast.left, _Mode.Expression);\n        const right = this._visit(ast.right, _Mode.Expression);\n        const temporary = this.allocateTemporary();\n        this.releaseTemporary(temporary);\n        // Generate the following expression. It is identical to how TS\n        // transpiles binary expressions with a nullish coalescing operator.\n        // let temp;\n        // (temp = a) !== null && temp !== undefined ? temp : b;\n        return convertToStatementIfNeeded(mode, temporary.set(left)\n            .notIdentical(NULL_EXPR)\n            .and(temporary.notIdentical(literal(undefined)))\n            .conditional(temporary, right));\n    }\n    // Given an expression of the form a?.b.c?.d.e then the left most safe node is\n    // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n    // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n    // safe method call as this needs to be transformed initially to:\n    //   a == null ? null : a.c.b.c?.d.e\n    // then to:\n    //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n    leftMostSafeNode(ast) {\n        const visit = (visitor, ast) => {\n            return (this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        return ast.visit({\n            visitUnary(ast) {\n                return null;\n            },\n            visitBinary(ast) {\n                return null;\n            },\n            visitChain(ast) {\n                return null;\n            },\n            visitConditional(ast) {\n                return null;\n            },\n            visitCall(ast) {\n                return visit(this, ast.receiver);\n            },\n            visitSafeCall(ast) {\n                return visit(this, ast.receiver) || ast;\n            },\n            visitImplicitReceiver(ast) {\n                return null;\n            },\n            visitThisReceiver(ast) {\n                return null;\n            },\n            visitInterpolation(ast) {\n                return null;\n            },\n            visitKeyedRead(ast) {\n                return visit(this, ast.receiver);\n            },\n            visitKeyedWrite(ast) {\n                return null;\n            },\n            visitLiteralArray(ast) {\n                return null;\n            },\n            visitLiteralMap(ast) {\n                return null;\n            },\n            visitLiteralPrimitive(ast) {\n                return null;\n            },\n            visitPipe(ast) {\n                return null;\n            },\n            visitPrefixNot(ast) {\n                return null;\n            },\n            visitNonNullAssert(ast) {\n                return visit(this, ast.expression);\n            },\n            visitPropertyRead(ast) {\n                return visit(this, ast.receiver);\n            },\n            visitPropertyWrite(ast) {\n                return null;\n            },\n            visitSafePropertyRead(ast) {\n                return visit(this, ast.receiver) || ast;\n            },\n            visitSafeKeyedRead(ast) {\n                return visit(this, ast.receiver) || ast;\n            }\n        });\n    }\n    // Returns true of the AST includes a method or a pipe indicating that, if the\n    // expression is used as the target of a safe property or method access then\n    // the expression should be stored into a temporary variable.\n    needsTemporaryInSafeAccess(ast) {\n        const visit = (visitor, ast) => {\n            return ast && (this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        const visitSome = (visitor, ast) => {\n            return ast.some(ast => visit(visitor, ast));\n        };\n        return ast.visit({\n            visitUnary(ast) {\n                return visit(this, ast.expr);\n            },\n            visitBinary(ast) {\n                return visit(this, ast.left) || visit(this, ast.right);\n            },\n            visitChain(ast) {\n                return false;\n            },\n            visitConditional(ast) {\n                return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);\n            },\n            visitCall(ast) {\n                return true;\n            },\n            visitSafeCall(ast) {\n                return true;\n            },\n            visitImplicitReceiver(ast) {\n                return false;\n            },\n            visitThisReceiver(ast) {\n                return false;\n            },\n            visitInterpolation(ast) {\n                return visitSome(this, ast.expressions);\n            },\n            visitKeyedRead(ast) {\n                return false;\n            },\n            visitKeyedWrite(ast) {\n                return false;\n            },\n            visitLiteralArray(ast) {\n                return true;\n            },\n            visitLiteralMap(ast) {\n                return true;\n            },\n            visitLiteralPrimitive(ast) {\n                return false;\n            },\n            visitPipe(ast) {\n                return true;\n            },\n            visitPrefixNot(ast) {\n                return visit(this, ast.expression);\n            },\n            visitNonNullAssert(ast) {\n                return visit(this, ast.expression);\n            },\n            visitPropertyRead(ast) {\n                return false;\n            },\n            visitPropertyWrite(ast) {\n                return false;\n            },\n            visitSafePropertyRead(ast) {\n                return false;\n            },\n            visitSafeKeyedRead(ast) {\n                return false;\n            }\n        });\n    }\n    allocateTemporary() {\n        const tempNumber = this._currentTemporary++;\n        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n        return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n    }\n    releaseTemporary(temporary) {\n        this._currentTemporary--;\n        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n            throw new Error(`Temporary ${temporary.name} released out of order`);\n        }\n    }\n    /**\n     * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.\n     *\n     * `ParseSpan` objects are relative to the start of the expression.\n     * This method converts these to full `ParseSourceSpan` objects that\n     * show where the span is within the overall source file.\n     *\n     * @param span the relative span to convert.\n     * @returns a `ParseSourceSpan` for the given span or null if no\n     * `baseSourceSpan` was provided to this class.\n     */\n    convertSourceSpan(span) {\n        if (this.baseSourceSpan) {\n            const start = this.baseSourceSpan.start.moveBy(span.start);\n            const end = this.baseSourceSpan.start.moveBy(span.end);\n            const fullStart = this.baseSourceSpan.fullStart.moveBy(span.start);\n            return new ParseSourceSpan(start, end, fullStart);\n        }\n        else {\n            return null;\n        }\n    }\n    /** Adds the name of an AST to the list of implicit receiver accesses. */\n    addImplicitReceiverAccess(name) {\n        if (this.implicitReceiverAccesses) {\n            this.implicitReceiverAccesses.add(name);\n        }\n    }\n}\nfunction flattenStatements(arg, output) {\n    if (Array.isArray(arg)) {\n        arg.forEach((entry) => flattenStatements(entry, output));\n    }\n    else {\n        output.push(arg);\n    }\n}\nfunction unsupported() {\n    throw new Error('Unsupported operation');\n}\nclass InterpolationExpression extends Expression {\n    constructor(args) {\n        super(null, null);\n        this.args = args;\n        this.isConstant = unsupported;\n        this.isEquivalent = unsupported;\n        this.visitExpression = unsupported;\n        this.clone = unsupported;\n    }\n}\nclass DefaultLocalResolver {\n    constructor(globals) {\n        this.globals = globals;\n    }\n    notifyImplicitReceiverUse() { }\n    maybeRestoreView() { }\n    getLocal(name) {\n        if (name === EventHandlerVars.event.name) {\n            return EventHandlerVars.event;\n        }\n        return null;\n    }\n}\nclass BuiltinFunctionCall extends Call {\n    constructor(span, sourceSpan, args, converter) {\n        super(span, sourceSpan, new EmptyExpr$1(span, sourceSpan), args, null);\n        this.converter = converter;\n    }\n}\n\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!\n//                               Reach out to mprobst for details.\n//\n// =================================================================================================\n/** Map from tagName|propertyName to SecurityContext. Properties applying to all tags use '*'. */\nlet _SECURITY_SCHEMA;\nfunction SECURITY_SCHEMA() {\n    if (!_SECURITY_SCHEMA) {\n        _SECURITY_SCHEMA = {};\n        // Case is insignificant below, all element and attribute names are lower-cased for lookup.\n        registerContext(SecurityContext.HTML, [\n            'iframe|srcdoc',\n            '*|innerHTML',\n            '*|outerHTML',\n        ]);\n        registerContext(SecurityContext.STYLE, ['*|style']);\n        // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\n        registerContext(SecurityContext.URL, [\n            '*|formAction',\n            'area|href',\n            'area|ping',\n            'audio|src',\n            'a|href',\n            'a|ping',\n            'blockquote|cite',\n            'body|background',\n            'del|cite',\n            'form|action',\n            'img|src',\n            'input|src',\n            'ins|cite',\n            'q|cite',\n            'source|src',\n            'track|src',\n            'video|poster',\n            'video|src',\n        ]);\n        registerContext(SecurityContext.RESOURCE_URL, [\n            'applet|code',\n            'applet|codebase',\n            'base|href',\n            'embed|src',\n            'frame|src',\n            'head|profile',\n            'html|manifest',\n            'iframe|src',\n            'link|href',\n            'media|src',\n            'object|codebase',\n            'object|data',\n            'script|src',\n        ]);\n    }\n    return _SECURITY_SCHEMA;\n}\nfunction registerContext(ctx, specs) {\n    for (const spec of specs)\n        _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n}\n/**\n * The set of security-sensitive attributes of an `<iframe>` that *must* be\n * applied as a static attribute only. This ensures that all security-sensitive\n * attributes are taken into account while creating an instance of an `<iframe>`\n * at runtime.\n *\n * Note: avoid using this set directly, use the `isIframeSecuritySensitiveAttr` function\n * in the code instead.\n */\nconst IFRAME_SECURITY_SENSITIVE_ATTRS = new Set(['sandbox', 'allow', 'allowfullscreen', 'referrerpolicy', 'csp', 'fetchpriority']);\n/**\n * Checks whether a given attribute name might represent a security-sensitive\n * attribute of an <iframe>.\n */\nfunction isIframeSecuritySensitiveAttr(attrName) {\n    // The `setAttribute` DOM API is case-insensitive, so we lowercase the value\n    // before checking it against a known security-sensitive attributes.\n    return IFRAME_SECURITY_SENSITIVE_ATTRS.has(attrName.toLowerCase());\n}\n\n/**\n * The following set contains all keywords that can be used in the animation css shorthand\n * property and is used during the scoping of keyframes to make sure such keywords\n * are not modified.\n */\nconst animationKeywords = new Set([\n    // global values\n    'inherit', 'initial', 'revert', 'unset',\n    // animation-direction\n    'alternate', 'alternate-reverse', 'normal', 'reverse',\n    // animation-fill-mode\n    'backwards', 'both', 'forwards', 'none',\n    // animation-play-state\n    'paused', 'running',\n    // animation-timing-function\n    'ease', 'ease-in', 'ease-in-out', 'ease-out', 'linear', 'step-start', 'step-end',\n    // `steps()` function\n    'end', 'jump-both', 'jump-end', 'jump-none', 'jump-start', 'start'\n]);\n/**\n * The following class has its origin from a port of shadowCSS from webcomponents.js to TypeScript.\n * It has since diverge in many ways to tailor Angular's needs.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM.\n  The selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nclass ShadowCss {\n    constructor() {\n        /**\n         * Regular expression used to extrapolate the possible keyframes from an\n         * animation declaration (with possibly multiple animation definitions)\n         *\n         * The regular expression can be divided in three parts\n         *  - (^|\\s+)\n         *    simply captures how many (if any) leading whitespaces are present\n         *  - (?:(?:(['\"])((?:\\\\\\\\|\\\\\\2|(?!\\2).)+)\\2)|(-?[A-Za-z][\\w\\-]*))\n         *    captures two different possible keyframes, ones which are quoted or ones which are valid css\n         * idents (custom properties excluded)\n         *  - (?=[,\\s;]|$)\n         *    simply matches the end of the possible keyframe, valid endings are: a comma, a space, a\n         * semicolon or the end of the string\n         */\n        this._animationDeclarationKeyframesRe = /(^|\\s+)(?:(?:(['\"])((?:\\\\\\\\|\\\\\\2|(?!\\2).)+)\\2)|(-?[A-Za-z][\\w\\-]*))(?=[,\\s]|$)/g;\n    }\n    /*\n     * Shim some cssText with the given selector. Returns cssText that can be included in the document\n     *\n     * The selector is the attribute added to all elements inside the host,\n     * The hostSelector is the attribute added to the host itself.\n     */\n    shimCssText(cssText, selector, hostSelector = '') {\n        // **NOTE**: Do not strip comments as this will cause component sourcemaps to break\n        // due to shift in lines.\n        // Collect comments and replace them with a placeholder, this is done to avoid complicating\n        // the rule parsing RegExp and keep it safer.\n        const comments = [];\n        cssText = cssText.replace(_commentRe, (m) => {\n            if (m.match(_commentWithHashRe)) {\n                comments.push(m);\n            }\n            else {\n                // Replace non hash comments with empty lines.\n                // This is done so that we do not leak any senstive data in comments.\n                const newLinesMatches = m.match(_newLinesRe);\n                comments.push((newLinesMatches?.join('') ?? '') + '\\n');\n            }\n            return COMMENT_PLACEHOLDER;\n        });\n        cssText = this._insertDirectives(cssText);\n        const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n        // Add back comments at the original position.\n        let commentIdx = 0;\n        return scopedCssText.replace(_commentWithHashPlaceHolderRe, () => comments[commentIdx++]);\n    }\n    _insertDirectives(cssText) {\n        cssText = this._insertPolyfillDirectivesInCssText(cssText);\n        return this._insertPolyfillRulesInCssText(cssText);\n    }\n    /**\n     * Process styles to add scope to keyframes.\n     *\n     * Modify both the names of the keyframes defined in the component styles and also the css\n     * animation rules using them.\n     *\n     * Animation rules using keyframes defined elsewhere are not modified to allow for globally\n     * defined keyframes.\n     *\n     * For example, we convert this css:\n     *\n     * ```\n     * .box {\n     *   animation: box-animation 1s forwards;\n     * }\n     *\n     * @keyframes box-animation {\n     *   to {\n     *     background-color: green;\n     *   }\n     * }\n     * ```\n     *\n     * to this:\n     *\n     * ```\n     * .box {\n     *   animation: scopeName_box-animation 1s forwards;\n     * }\n     *\n     * @keyframes scopeName_box-animation {\n     *   to {\n     *     background-color: green;\n     *   }\n     * }\n     * ```\n     *\n     * @param cssText the component's css text that needs to be scoped.\n     * @param scopeSelector the component's scope selector.\n     *\n     * @returns the scoped css text.\n     */\n    _scopeKeyframesRelatedCss(cssText, scopeSelector) {\n        const unscopedKeyframesSet = new Set();\n        const scopedKeyframesCssText = processRules(cssText, rule => this._scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet));\n        return processRules(scopedKeyframesCssText, rule => this._scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet));\n    }\n    /**\n     * Scopes local keyframes names, returning the updated css rule and it also\n     * adds the original keyframe name to a provided set to collect all keyframes names\n     * so that it can later be used to scope the animation rules.\n     *\n     * For example, it takes a rule such as:\n     *\n     * ```\n     * @keyframes box-animation {\n     *   to {\n     *     background-color: green;\n     *   }\n     * }\n     * ```\n     *\n     * and returns:\n     *\n     * ```\n     * @keyframes scopeName_box-animation {\n     *   to {\n     *     background-color: green;\n     *   }\n     * }\n     * ```\n     * and as a side effect it adds \"box-animation\" to the `unscopedKeyframesSet` set\n     *\n     * @param cssRule the css rule to process.\n     * @param scopeSelector the component's scope selector.\n     * @param unscopedKeyframesSet the set of unscoped keyframes names (which can be\n     * modified as a side effect)\n     *\n     * @returns the css rule modified with the scoped keyframes name.\n     */\n    _scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet) {\n        return {\n            ...rule,\n            selector: rule.selector.replace(/(^@(?:-webkit-)?keyframes(?:\\s+))(['\"]?)(.+)\\2(\\s*)$/, (_, start, quote, keyframeName, endSpaces) => {\n                unscopedKeyframesSet.add(unescapeQuotes(keyframeName, quote));\n                return `${start}${quote}${scopeSelector}_${keyframeName}${quote}${endSpaces}`;\n            }),\n        };\n    }\n    /**\n     * Function used to scope a keyframes name (obtained from an animation declaration)\n     * using an existing set of unscopedKeyframes names to discern if the scoping needs to be\n     * performed (keyframes names of keyframes not defined in the component's css need not to be\n     * scoped).\n     *\n     * @param keyframe the keyframes name to check.\n     * @param scopeSelector the component's scope selector.\n     * @param unscopedKeyframesSet the set of unscoped keyframes names.\n     *\n     * @returns the scoped name of the keyframe, or the original name is the name need not to be\n     * scoped.\n     */\n    _scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet) {\n        return keyframe.replace(/^(\\s*)(['\"]?)(.+?)\\2(\\s*)$/, (_, spaces1, quote, name, spaces2) => {\n            name = `${unscopedKeyframesSet.has(unescapeQuotes(name, quote)) ? scopeSelector + '_' : ''}${name}`;\n            return `${spaces1}${quote}${name}${quote}${spaces2}`;\n        });\n    }\n    /**\n     * Scope an animation rule so that the keyframes mentioned in such rule\n     * are scoped if defined in the component's css and left untouched otherwise.\n     *\n     * It can scope values of both the 'animation' and 'animation-name' properties.\n     *\n     * @param rule css rule to scope.\n     * @param scopeSelector the component's scope selector.\n     * @param unscopedKeyframesSet the set of unscoped keyframes names.\n     *\n     * @returns the updated css rule.\n     **/\n    _scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet) {\n        let content = rule.content.replace(/((?:^|\\s+|;)(?:-webkit-)?animation(?:\\s*):(?:\\s*))([^;]+)/g, (_, start, animationDeclarations) => start +\n            animationDeclarations.replace(this._animationDeclarationKeyframesRe, (original, leadingSpaces, quote = '', quotedName, nonQuotedName) => {\n                if (quotedName) {\n                    return `${leadingSpaces}${this._scopeAnimationKeyframe(`${quote}${quotedName}${quote}`, scopeSelector, unscopedKeyframesSet)}`;\n                }\n                else {\n                    return animationKeywords.has(nonQuotedName) ?\n                        original :\n                        `${leadingSpaces}${this._scopeAnimationKeyframe(nonQuotedName, scopeSelector, unscopedKeyframesSet)}`;\n                }\n            }));\n        content = content.replace(/((?:^|\\s+|;)(?:-webkit-)?animation-name(?:\\s*):(?:\\s*))([^;]+)/g, (_match, start, commaSeparatedKeyframes) => `${start}${commaSeparatedKeyframes.split(',')\n            .map((keyframe) => this._scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet))\n            .join(',')}`);\n        return { ...rule, content };\n    }\n    /*\n     * Process styles to convert native ShadowDOM rules that will trip\n     * up the css parser; we rely on decorating the stylesheet with inert rules.\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-next-selector { content: ':host menu-item'; }\n     * ::content menu-item {\n     *\n     * to this:\n     *\n     * scopeName menu-item {\n     *\n     **/\n    _insertPolyfillDirectivesInCssText(cssText) {\n        return cssText.replace(_cssContentNextSelectorRe, function (...m) {\n            return m[2] + '{';\n        });\n    }\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-rule {\n     *   content: ':host menu-item';\n     * ...\n     * }\n     *\n     * to this:\n     *\n     * scopeName menu-item {...}\n     *\n     **/\n    _insertPolyfillRulesInCssText(cssText) {\n        return cssText.replace(_cssContentRuleRe, (...m) => {\n            const rule = m[0].replace(m[1], '').replace(m[2], '');\n            return m[4] + rule;\n        });\n    }\n    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n     *\n     *  .foo {... }\n     *\n     *  and converts this to\n     *\n     *  scopeName .foo { ... }\n     */\n    _scopeCssText(cssText, scopeSelector, hostSelector) {\n        const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeSelector) {\n            cssText = this._scopeKeyframesRelatedCss(cssText, scopeSelector);\n            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n        }\n        cssText = cssText + '\\n' + unscopedRules;\n        return cssText.trim();\n    }\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n     * occasions, e.g. -webkit-calc on Safari.)\n     * For example, we convert this rule:\n     *\n     * @polyfill-unscoped-rule {\n     *   content: 'menu-item';\n     * ... }\n     *\n     * to this:\n     *\n     * menu-item {...}\n     *\n     **/\n    _extractUnscopedRulesFromCssText(cssText) {\n        let r = '';\n        let m;\n        _cssContentUnscopedRuleRe.lastIndex = 0;\n        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n            const rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n            r += rule + '\\n\\n';\n        }\n        return r;\n    }\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n     */\n    _convertColonHost(cssText) {\n        return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {\n            if (hostSelectors) {\n                const convertedSelectors = [];\n                const hostSelectorArray = hostSelectors.split(',').map((p) => p.trim());\n                for (const hostSelector of hostSelectorArray) {\n                    if (!hostSelector)\n                        break;\n                    const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;\n                    convertedSelectors.push(convertedSelector);\n                }\n                return convertedSelectors.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + otherSelectors;\n            }\n        });\n    }\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n     */\n    _convertColonHostContext(cssText) {\n        return cssText.replace(_cssColonHostContextReGlobal, (selectorText) => {\n            // We have captured a selector that contains a `:host-context` rule.\n            // For backward compatibility `:host-context` may contain a comma separated list of selectors.\n            // Each context selector group will contain a list of host-context selectors that must match\n            // an ancestor of the host.\n            // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)\n            const contextSelectorGroups = [[]];\n            // There may be more than `:host-context` in this selector so `selectorText` could look like:\n            // `:host-context(.one):host-context(.two)`.\n            // Execute `_cssColonHostContextRe` over and over until we have extracted all the\n            // `:host-context` selectors from this selector.\n            let match;\n            while ((match = _cssColonHostContextRe.exec(selectorText))) {\n                // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]\n                // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.\n                const newContextSelectors = (match[1] ?? '').trim().split(',').map((m) => m.trim()).filter((m) => m !== '');\n                // We must duplicate the current selector group for each of these new selectors.\n                // For example if the current groups are:\n                // ```\n                // [\n                //   ['a', 'b', 'c'],\n                //   ['x', 'y', 'z'],\n                // ]\n                // ```\n                // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new\n                // groups are:\n                // ```\n                // [\n                //   ['a', 'b', 'c', 'm'],\n                //   ['x', 'y', 'z', 'm'],\n                //   ['a', 'b', 'c', 'n'],\n                //   ['x', 'y', 'z', 'n'],\n                // ]\n                // ```\n                const contextSelectorGroupsLength = contextSelectorGroups.length;\n                repeatGroups(contextSelectorGroups, newContextSelectors.length);\n                for (let i = 0; i < newContextSelectors.length; i++) {\n                    for (let j = 0; j < contextSelectorGroupsLength; j++) {\n                        contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);\n                    }\n                }\n                // Update the `selectorText` and see repeat to see if there are more `:host-context`s.\n                selectorText = match[2];\n            }\n            // The context selectors now must be combined with each other to capture all the possible\n            // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more\n            // info about how this is done.\n            return contextSelectorGroups\n                .map((contextSelectors) => combineHostContextSelectors(contextSelectors, selectorText))\n                .join(', ');\n        });\n    }\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n     */\n    _convertShadowDOMSelectors(cssText) {\n        return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n    }\n    // change a selector like 'div' to 'name div'\n    _scopeSelectors(cssText, scopeSelector, hostSelector) {\n        return processRules(cssText, (rule) => {\n            let selector = rule.selector;\n            let content = rule.content;\n            if (rule.selector[0] !== '@') {\n                selector = this._scopeSelector(rule.selector, scopeSelector, hostSelector);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@document') || rule.selector.startsWith('@layer') ||\n                rule.selector.startsWith('@container') || rule.selector.startsWith('@scope')) {\n                content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n            }\n            else if (rule.selector.startsWith('@font-face') || rule.selector.startsWith('@page')) {\n                content = this._stripScopingSelectors(rule.content);\n            }\n            return new CssRule(selector, content);\n        });\n    }\n    /**\n     * Handle a css text that is within a rule that should not contain scope selectors by simply\n     * removing them! An example of such a rule is `@font-face`.\n     *\n     * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.\n     * Normally this would be a syntax error by the author of the styles. But in some rare cases, such\n     * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we\n     * can end up with broken css if the imported styles happen to contain @font-face rules.\n     *\n     * For example:\n     *\n     * ```\n     * :host ::ng-deep {\n     *   import 'some/lib/containing/font-face';\n     * }\n     *\n     * Similar logic applies to `@page` rules which can contain a particular set of properties,\n     * as well as some specific at-rules. Since they can't be encapsulated, we have to strip\n     * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3\n     * ```\n     */\n    _stripScopingSelectors(cssText) {\n        return processRules(cssText, (rule) => {\n            const selector = rule.selector.replace(_shadowDeepSelectors, ' ')\n                .replace(_polyfillHostNoCombinatorRe, ' ');\n            return new CssRule(selector, rule.content);\n        });\n    }\n    _scopeSelector(selector, scopeSelector, hostSelector) {\n        return selector.split(',')\n            .map((part) => part.trim().split(_shadowDeepSelectors))\n            .map((deepParts) => {\n            const [shallowPart, ...otherParts] = deepParts;\n            const applyScope = (shallowPart) => {\n                if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                    return this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n                }\n                else {\n                    return shallowPart;\n                }\n            };\n            return [applyScope(shallowPart), ...otherParts].join(' ');\n        })\n            .join(', ');\n    }\n    _selectorNeedsScoping(selector, scopeSelector) {\n        const re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    }\n    _makeScopeMatcher(scopeSelector) {\n        const lre = /\\[/g;\n        const rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    }\n    // scope via name and [is=name]\n    _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            const replaceBy = `[${hostSelector}]`;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {\n                return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                    return before + replaceBy + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    }\n    // return a selector with [name] suffix on each simple selector\n    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n    _applySelectorScope(selector, scopeSelector, hostSelector) {\n        const isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n        const attrName = '[' + scopeSelector + ']';\n        const _scopeSelectorPart = (p) => {\n            let scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                const t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    const matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + attrName + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        const safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        let scopedSelector = '';\n        let startIndex = 0;\n        let res;\n        const sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        let shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            const separator = res[1];\n            const part = selector.slice(startIndex, res.index).trim();\n            // A space following an escaped hex value and followed by another hex character\n            // (ie: \".\\fc ber\" for \".über\") is not a separator between 2 selectors\n            // also keep in mind that backslashes are replaced by a placeholder by SafeSelector\n            // These escaped selectors happen for example when esbuild runs with optimization.minify.\n            if (part.match(/__esc-ph-(\\d+)__/) && selector[res.index + 1]?.match(/[a-fA-F\\d]/)) {\n                continue;\n            }\n            shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n            const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n            scopedSelector += `${scopedPart} ${separator} `;\n            startIndex = sep.lastIndex;\n        }\n        const part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    }\n    _insertPolyfillHostInCssText(selector) {\n        return selector.replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost);\n    }\n}\nclass SafeSelector {\n    constructor(selector) {\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = this._escapeRegexMatches(selector, /(\\[[^\\]]*\\])/g);\n        // CSS allows for certain special characters to be used in selectors if they're escaped.\n        // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a\n        // pseudo-class, but writing `.foo\\:blue` will match, because the colon was escaped.\n        // Replace all escape sequences (`\\` followed by a character) with a placeholder so\n        // that our handling of pseudo-selectors doesn't mess with them.\n        // Escaped characters have a specific placeholder so they can be detected separately.\n        selector = selector.replace(/(\\\\.)/g, (_, keep) => {\n            const replaceBy = `__esc-ph-${this.index}__`;\n            this.placeholders.push(keep);\n            this.index++;\n            return replaceBy;\n        });\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(exp);\n            this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    restore(content) {\n        return content.replace(/__(?:ph|esc-ph)-(\\d+)__/g, (_ph, index) => this.placeholders[+index]);\n    }\n    content() {\n        return this._content;\n    }\n    /**\n     * Replaces all of the substrings that match a regex within a\n     * special string (e.g. `__ph-0__`, `__ph-1__`, etc).\n     */\n    _escapeRegexMatches(content, pattern) {\n        return content.replace(pattern, (_, keep) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(keep);\n            this.index++;\n            return replaceBy;\n        });\n    }\n}\nconst _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nconst _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _polyfillHost = '-shadowcsshost';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = '(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g,\n    // Deprecated selectors\n    /\\/shadow-deep\\//g,\n    /\\/shadow\\//g,\n];\n// The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\nconst _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _newLinesRe = /\\r?\\n/g;\nconst _commentRe = /\\/\\*[\\s\\S]*?\\*\\//g;\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=/g;\nconst COMMENT_PLACEHOLDER = '%COMMENT%';\nconst _commentWithHashPlaceHolderRe = new RegExp(COMMENT_PLACEHOLDER, 'g');\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst _ruleRe = new RegExp(`(\\\\s*(?:${COMMENT_PLACEHOLDER}\\\\s*)*)([^;\\\\{\\\\}]+?)(\\\\s*)((?:{%BLOCK%}?\\\\s*;?)|(?:\\\\s*;))`, 'g');\nconst CONTENT_PAIRS = new Map([['{', '}']]);\nconst COMMA_IN_PLACEHOLDER = '%COMMA_IN_PLACEHOLDER%';\nconst SEMI_IN_PLACEHOLDER = '%SEMI_IN_PLACEHOLDER%';\nconst COLON_IN_PLACEHOLDER = '%COLON_IN_PLACEHOLDER%';\nconst _cssCommaInPlaceholderReGlobal = new RegExp(COMMA_IN_PLACEHOLDER, 'g');\nconst _cssSemiInPlaceholderReGlobal = new RegExp(SEMI_IN_PLACEHOLDER, 'g');\nconst _cssColonInPlaceholderReGlobal = new RegExp(COLON_IN_PLACEHOLDER, 'g');\nclass CssRule {\n    constructor(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n}\nfunction processRules(input, ruleCallback) {\n    const escaped = escapeInStrings(input);\n    const inputWithEscapedBlocks = escapeBlocks(escaped, CONTENT_PAIRS, BLOCK_PLACEHOLDER);\n    let nextBlockIndex = 0;\n    const escapedResult = inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const rule = ruleCallback(new CssRule(selector, content));\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n    return unescapeInStrings(escapedResult);\n}\nclass StringWithEscapedBlocks {\n    constructor(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n}\nfunction escapeBlocks(input, charPairs, placeholder) {\n    const resultParts = [];\n    const escapedBlocks = [];\n    let openCharCount = 0;\n    let nonBlockStartIndex = 0;\n    let blockStartIndex = -1;\n    let openChar;\n    let closeChar;\n    for (let i = 0; i < input.length; i++) {\n        const char = input[i];\n        if (char === '\\\\') {\n            i++;\n        }\n        else if (char === closeChar) {\n            openCharCount--;\n            if (openCharCount === 0) {\n                escapedBlocks.push(input.substring(blockStartIndex, i));\n                resultParts.push(placeholder);\n                nonBlockStartIndex = i;\n                blockStartIndex = -1;\n                openChar = closeChar = undefined;\n            }\n        }\n        else if (char === openChar) {\n            openCharCount++;\n        }\n        else if (openCharCount === 0 && charPairs.has(char)) {\n            openChar = char;\n            closeChar = charPairs.get(char);\n            openCharCount = 1;\n            blockStartIndex = i + 1;\n            resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));\n        }\n    }\n    if (blockStartIndex !== -1) {\n        escapedBlocks.push(input.substring(blockStartIndex));\n        resultParts.push(placeholder);\n    }\n    else {\n        resultParts.push(input.substring(nonBlockStartIndex));\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n/**\n * Object containing as keys characters that should be substituted by placeholders\n * when found in strings during the css text parsing, and as values the respective\n * placeholders\n */\nconst ESCAPE_IN_STRING_MAP = {\n    ';': SEMI_IN_PLACEHOLDER,\n    ',': COMMA_IN_PLACEHOLDER,\n    ':': COLON_IN_PLACEHOLDER\n};\n/**\n * Parse the provided css text and inside strings (meaning, inside pairs of unescaped single or\n * double quotes) replace specific characters with their respective placeholders as indicated\n * by the `ESCAPE_IN_STRING_MAP` map.\n *\n * For example convert the text\n *  `animation: \"my-anim:at\\\"ion\" 1s;`\n * to\n *  `animation: \"my-anim%COLON_IN_PLACEHOLDER%at\\\"ion\" 1s;`\n *\n * This is necessary in order to remove the meaning of some characters when found inside strings\n * (for example `;` indicates the end of a css declaration, `,` the sequence of values and `:` the\n * division between property and value during a declaration, none of these meanings apply when such\n * characters are within strings and so in order to prevent parsing issues they need to be replaced\n * with placeholder text for the duration of the css manipulation process).\n *\n * @param input the original css text.\n *\n * @returns the css text with specific characters in strings replaced by placeholders.\n **/\nfunction escapeInStrings(input) {\n    let result = input;\n    let currentQuoteChar = null;\n    for (let i = 0; i < result.length; i++) {\n        const char = result[i];\n        if (char === '\\\\') {\n            i++;\n        }\n        else {\n            if (currentQuoteChar !== null) {\n                // index i is inside a quoted sub-string\n                if (char === currentQuoteChar) {\n                    currentQuoteChar = null;\n                }\n                else {\n                    const placeholder = ESCAPE_IN_STRING_MAP[char];\n                    if (placeholder) {\n                        result = `${result.substr(0, i)}${placeholder}${result.substr(i + 1)}`;\n                        i += placeholder.length - 1;\n                    }\n                }\n            }\n            else if (char === '\\'' || char === '\"') {\n                currentQuoteChar = char;\n            }\n        }\n    }\n    return result;\n}\n/**\n * Replace in a string all occurrences of keys in the `ESCAPE_IN_STRING_MAP` map with their\n * original representation, this is simply used to revert the changes applied by the\n * escapeInStrings function.\n *\n * For example it reverts the text:\n *  `animation: \"my-anim%COLON_IN_PLACEHOLDER%at\\\"ion\" 1s;`\n * to it's original form of:\n *  `animation: \"my-anim:at\\\"ion\" 1s;`\n *\n * Note: For the sake of simplicity this function does not check that the placeholders are\n * actually inside strings as it would anyway be extremely unlikely to find them outside of strings.\n *\n * @param input the css text containing the placeholders.\n *\n * @returns the css text without the placeholders.\n */\nfunction unescapeInStrings(input) {\n    let result = input.replace(_cssCommaInPlaceholderReGlobal, ',');\n    result = result.replace(_cssSemiInPlaceholderReGlobal, ';');\n    result = result.replace(_cssColonInPlaceholderReGlobal, ':');\n    return result;\n}\n/**\n * Unescape all quotes present in a string, but only if the string was actually already\n * quoted.\n *\n * This generates a \"canonical\" representation of strings which can be used to match strings\n * which would otherwise only differ because of differently escaped quotes.\n *\n * For example it converts the string (assumed to be quoted):\n *  `this \\\\\"is\\\\\" a \\\\'\\\\\\\\'test`\n * to:\n *  `this \"is\" a '\\\\\\\\'test`\n * (note that the latter backslashes are not removed as they are not actually escaping the single\n * quote)\n *\n *\n * @param input the string possibly containing escaped quotes.\n * @param isQuoted boolean indicating whether the string was quoted inside a bigger string (if not\n * then it means that it doesn't represent an inner string and thus no unescaping is required)\n *\n * @returns the string in the \"canonical\" representation without escaped quotes.\n */\nfunction unescapeQuotes(str, isQuoted) {\n    return !isQuoted ? str : str.replace(/((?:^|[^\\\\])(?:\\\\\\\\)*)\\\\(?=['\"])/g, '$1');\n}\n/**\n * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`\n * to create a selector that matches the same as `:host-context()`.\n *\n * Given a single context selector `A` we need to output selectors that match on the host and as an\n * ancestor of the host:\n *\n * ```\n * A <hostMarker>, A<hostMarker> {}\n * ```\n *\n * When there is more than one context selector we also have to create combinations of those\n * selectors with each other. For example if there are `A` and `B` selectors the output is:\n *\n * ```\n * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,\n * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}\n * ```\n *\n * And so on...\n *\n * @param contextSelectors an array of context selectors that will be combined.\n * @param otherSelectors the rest of the selectors that are not context selectors.\n */\nfunction combineHostContextSelectors(contextSelectors, otherSelectors) {\n    const hostMarker = _polyfillHostNoCombinator;\n    _polyfillHostRe.lastIndex = 0; // reset the regex to ensure we get an accurate test\n    const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);\n    // If there are no context selectors then just output a host marker\n    if (contextSelectors.length === 0) {\n        return hostMarker + otherSelectors;\n    }\n    const combined = [contextSelectors.pop() || ''];\n    while (contextSelectors.length > 0) {\n        const length = combined.length;\n        const contextSelector = contextSelectors.pop();\n        for (let i = 0; i < length; i++) {\n            const previousSelectors = combined[i];\n            // Add the new selector as a descendant of the previous selectors\n            combined[length * 2 + i] = previousSelectors + ' ' + contextSelector;\n            // Add the new selector as an ancestor of the previous selectors\n            combined[length + i] = contextSelector + ' ' + previousSelectors;\n            // Add the new selector to act on the same element as the previous selectors\n            combined[i] = contextSelector + previousSelectors;\n        }\n    }\n    // Finally connect the selector to the `hostMarker`s: either acting directly on the host\n    // (A<hostMarker>) or as an ancestor (A <hostMarker>).\n    return combined\n        .map(s => otherSelectorsHasHost ?\n        `${s}${otherSelectors}` :\n        `${s}${hostMarker}${otherSelectors}, ${s} ${hostMarker}${otherSelectors}`)\n        .join(',');\n}\n/**\n * Mutate the given `groups` array so that there are `multiples` clones of the original array\n * stored.\n *\n * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the\n * newly added groups will be clones of the original.\n *\n * @param groups An array of groups of strings that will be repeated. This array is mutated\n *     in-place.\n * @param multiples The number of times the current groups should appear.\n */\nfunction repeatGroups(groups, multiples) {\n    const length = groups.length;\n    for (let i = 1; i < multiples; i++) {\n        for (let j = 0; j < length; j++) {\n            groups[j + (i * length)] = groups[j].slice(0);\n        }\n    }\n}\n\n/**\n * Distinguishes different kinds of IR operations.\n *\n * Includes both creation and update operations.\n */\nvar OpKind;\n(function (OpKind) {\n    /**\n     * A special operation type which is used to represent the beginning and end nodes of a linked\n     * list of operations.\n     */\n    OpKind[OpKind[\"ListEnd\"] = 0] = \"ListEnd\";\n    /**\n     * An operation which wraps an output AST statement.\n     */\n    OpKind[OpKind[\"Statement\"] = 1] = \"Statement\";\n    /**\n     * An operation which declares and initializes a `SemanticVariable`.\n     */\n    OpKind[OpKind[\"Variable\"] = 2] = \"Variable\";\n    /**\n     * An operation to begin rendering of an element.\n     */\n    OpKind[OpKind[\"ElementStart\"] = 3] = \"ElementStart\";\n    /**\n     * An operation to render an element with no children.\n     */\n    OpKind[OpKind[\"Element\"] = 4] = \"Element\";\n    /**\n     * An operation which declares an embedded view.\n     */\n    OpKind[OpKind[\"Template\"] = 5] = \"Template\";\n    /**\n     * An operation to end rendering of an element previously started with `ElementStart`.\n     */\n    OpKind[OpKind[\"ElementEnd\"] = 6] = \"ElementEnd\";\n    /**\n     * An operation to begin an `ng-container`.\n     */\n    OpKind[OpKind[\"ContainerStart\"] = 7] = \"ContainerStart\";\n    /**\n     * An operation for an `ng-container` with no children.\n     */\n    OpKind[OpKind[\"Container\"] = 8] = \"Container\";\n    /**\n     * An operation to end an `ng-container`.\n     */\n    OpKind[OpKind[\"ContainerEnd\"] = 9] = \"ContainerEnd\";\n    /**\n     * An operation disable binding for subsequent elements, which are descendants of a non-bindable\n     * node.\n     */\n    OpKind[OpKind[\"DisableBindings\"] = 10] = \"DisableBindings\";\n    /**\n     * An op to conditionally render a template.\n     */\n    OpKind[OpKind[\"Conditional\"] = 11] = \"Conditional\";\n    /**\n     * An operation to re-enable binding, after it was previously disabled.\n     */\n    OpKind[OpKind[\"EnableBindings\"] = 12] = \"EnableBindings\";\n    /**\n     * An operation to render a text node.\n     */\n    OpKind[OpKind[\"Text\"] = 13] = \"Text\";\n    /**\n     * An operation declaring an event listener for an element.\n     */\n    OpKind[OpKind[\"Listener\"] = 14] = \"Listener\";\n    /**\n     * An operation to interpolate text into a text node.\n     */\n    OpKind[OpKind[\"InterpolateText\"] = 15] = \"InterpolateText\";\n    /**\n     * An intermediate binding op, that has not yet been processed into an individual property,\n     * attribute, style, etc.\n     */\n    OpKind[OpKind[\"Binding\"] = 16] = \"Binding\";\n    /**\n     * An operation to bind an expression to a property of an element.\n     */\n    OpKind[OpKind[\"Property\"] = 17] = \"Property\";\n    /**\n     * An operation to bind an expression to a style property of an element.\n     */\n    OpKind[OpKind[\"StyleProp\"] = 18] = \"StyleProp\";\n    /**\n     * An operation to bind an expression to a class property of an element.\n     */\n    OpKind[OpKind[\"ClassProp\"] = 19] = \"ClassProp\";\n    /**\n     * An operation to bind an expression to the styles of an element.\n     */\n    OpKind[OpKind[\"StyleMap\"] = 20] = \"StyleMap\";\n    /**\n     * An operation to bind an expression to the classes of an element.\n     */\n    OpKind[OpKind[\"ClassMap\"] = 21] = \"ClassMap\";\n    /**\n     * An operation to advance the runtime's implicit slot context during the update phase of a view.\n     */\n    OpKind[OpKind[\"Advance\"] = 22] = \"Advance\";\n    /**\n     * An operation to instantiate a pipe.\n     */\n    OpKind[OpKind[\"Pipe\"] = 23] = \"Pipe\";\n    /**\n     * An operation to associate an attribute with an element.\n     */\n    OpKind[OpKind[\"Attribute\"] = 24] = \"Attribute\";\n    /**\n     * An attribute that has been extracted for inclusion in the consts array.\n     */\n    OpKind[OpKind[\"ExtractedAttribute\"] = 25] = \"ExtractedAttribute\";\n    /**\n     * An operation that configures a `@defer` block.\n     */\n    OpKind[OpKind[\"Defer\"] = 26] = \"Defer\";\n    /**\n     * An operation that controls when a `@defer` loads.\n     */\n    OpKind[OpKind[\"DeferOn\"] = 27] = \"DeferOn\";\n    /**\n     * An operation that controls when a `@defer` loads, using a custom expression as the condition.\n     */\n    OpKind[OpKind[\"DeferWhen\"] = 28] = \"DeferWhen\";\n    /**\n     * An i18n message that has been extracted for inclusion in the consts array.\n     */\n    OpKind[OpKind[\"I18nMessage\"] = 29] = \"I18nMessage\";\n    /**\n     * A host binding property.\n     */\n    OpKind[OpKind[\"HostProperty\"] = 30] = \"HostProperty\";\n    /**\n     * A namespace change, which causes the subsequent elements to be processed as either HTML or SVG.\n     */\n    OpKind[OpKind[\"Namespace\"] = 31] = \"Namespace\";\n    /**\n     * Configure a content projeciton definition for the view.\n     */\n    OpKind[OpKind[\"ProjectionDef\"] = 32] = \"ProjectionDef\";\n    /**\n     * Create a content projection slot.\n     */\n    OpKind[OpKind[\"Projection\"] = 33] = \"Projection\";\n    /**\n     * Create a repeater creation instruction op.\n     */\n    OpKind[OpKind[\"RepeaterCreate\"] = 34] = \"RepeaterCreate\";\n    /**\n     * An update up for a repeater.\n     */\n    OpKind[OpKind[\"Repeater\"] = 35] = \"Repeater\";\n    /**\n     * The start of an i18n block.\n     */\n    OpKind[OpKind[\"I18nStart\"] = 36] = \"I18nStart\";\n    /**\n     * A self-closing i18n on a single element.\n     */\n    OpKind[OpKind[\"I18n\"] = 37] = \"I18n\";\n    /**\n     * The end of an i18n block.\n     */\n    OpKind[OpKind[\"I18nEnd\"] = 38] = \"I18nEnd\";\n    /**\n     * An expression in an i18n message.\n     */\n    OpKind[OpKind[\"I18nExpression\"] = 39] = \"I18nExpression\";\n    /**\n     * An instruction that applies a set of i18n expressions.\n     */\n    OpKind[OpKind[\"I18nApply\"] = 40] = \"I18nApply\";\n    /**\n     * An instruction to create an ICU expression.\n     */\n    OpKind[OpKind[\"IcuStart\"] = 41] = \"IcuStart\";\n    /**\n     * An instruction to update an ICU expression.\n     */\n    OpKind[OpKind[\"IcuEnd\"] = 42] = \"IcuEnd\";\n    /**\n     * An instruction representing a placeholder in an ICU expression.\n     */\n    OpKind[OpKind[\"IcuPlaceholder\"] = 43] = \"IcuPlaceholder\";\n    /**\n     * An i18n context containing information needed to generate an i18n message.\n     */\n    OpKind[OpKind[\"I18nContext\"] = 44] = \"I18nContext\";\n    /**\n     * A creation op that corresponds to i18n attributes on an element.\n     */\n    OpKind[OpKind[\"I18nAttributes\"] = 45] = \"I18nAttributes\";\n})(OpKind || (OpKind = {}));\n/**\n * Distinguishes different kinds of IR expressions.\n */\nvar ExpressionKind;\n(function (ExpressionKind) {\n    /**\n     * Read of a variable in a lexical scope.\n     */\n    ExpressionKind[ExpressionKind[\"LexicalRead\"] = 0] = \"LexicalRead\";\n    /**\n     * A reference to the current view context.\n     */\n    ExpressionKind[ExpressionKind[\"Context\"] = 1] = \"Context\";\n    /**\n     * A reference to the view context, for use inside a track function.\n     */\n    ExpressionKind[ExpressionKind[\"TrackContext\"] = 2] = \"TrackContext\";\n    /**\n     * Read of a variable declared in a `VariableOp`.\n     */\n    ExpressionKind[ExpressionKind[\"ReadVariable\"] = 3] = \"ReadVariable\";\n    /**\n     * Runtime operation to navigate to the next view context in the view hierarchy.\n     */\n    ExpressionKind[ExpressionKind[\"NextContext\"] = 4] = \"NextContext\";\n    /**\n     * Runtime operation to retrieve the value of a local reference.\n     */\n    ExpressionKind[ExpressionKind[\"Reference\"] = 5] = \"Reference\";\n    /**\n     * Runtime operation to snapshot the current view context.\n     */\n    ExpressionKind[ExpressionKind[\"GetCurrentView\"] = 6] = \"GetCurrentView\";\n    /**\n     * Runtime operation to restore a snapshotted view.\n     */\n    ExpressionKind[ExpressionKind[\"RestoreView\"] = 7] = \"RestoreView\";\n    /**\n     * Runtime operation to reset the current view context after `RestoreView`.\n     */\n    ExpressionKind[ExpressionKind[\"ResetView\"] = 8] = \"ResetView\";\n    /**\n     * Defines and calls a function with change-detected arguments.\n     */\n    ExpressionKind[ExpressionKind[\"PureFunctionExpr\"] = 9] = \"PureFunctionExpr\";\n    /**\n     * Indicates a positional parameter to a pure function definition.\n     */\n    ExpressionKind[ExpressionKind[\"PureFunctionParameterExpr\"] = 10] = \"PureFunctionParameterExpr\";\n    /**\n     * Binding to a pipe transformation.\n     */\n    ExpressionKind[ExpressionKind[\"PipeBinding\"] = 11] = \"PipeBinding\";\n    /**\n     * Binding to a pipe transformation with a variable number of arguments.\n     */\n    ExpressionKind[ExpressionKind[\"PipeBindingVariadic\"] = 12] = \"PipeBindingVariadic\";\n    /*\n     * A safe property read requiring expansion into a null check.\n     */\n    ExpressionKind[ExpressionKind[\"SafePropertyRead\"] = 13] = \"SafePropertyRead\";\n    /**\n     * A safe keyed read requiring expansion into a null check.\n     */\n    ExpressionKind[ExpressionKind[\"SafeKeyedRead\"] = 14] = \"SafeKeyedRead\";\n    /**\n     * A safe function call requiring expansion into a null check.\n     */\n    ExpressionKind[ExpressionKind[\"SafeInvokeFunction\"] = 15] = \"SafeInvokeFunction\";\n    /**\n     * An intermediate expression that will be expanded from a safe read into an explicit ternary.\n     */\n    ExpressionKind[ExpressionKind[\"SafeTernaryExpr\"] = 16] = \"SafeTernaryExpr\";\n    /**\n     * An empty expression that will be stipped before generating the final output.\n     */\n    ExpressionKind[ExpressionKind[\"EmptyExpr\"] = 17] = \"EmptyExpr\";\n    /*\n     * An assignment to a temporary variable.\n     */\n    ExpressionKind[ExpressionKind[\"AssignTemporaryExpr\"] = 18] = \"AssignTemporaryExpr\";\n    /**\n     * A reference to a temporary variable.\n     */\n    ExpressionKind[ExpressionKind[\"ReadTemporaryExpr\"] = 19] = \"ReadTemporaryExpr\";\n    /**\n     * An expression representing a sanitizer function.\n     */\n    ExpressionKind[ExpressionKind[\"SanitizerExpr\"] = 20] = \"SanitizerExpr\";\n    /**\n     * An expression representing a function to create trusted values.\n     */\n    ExpressionKind[ExpressionKind[\"TrustedValueFnExpr\"] = 21] = \"TrustedValueFnExpr\";\n    /**\n     * An expression that will cause a literal slot index to be emitted.\n     */\n    ExpressionKind[ExpressionKind[\"SlotLiteralExpr\"] = 22] = \"SlotLiteralExpr\";\n    /**\n     * A test expression for a conditional op.\n     */\n    ExpressionKind[ExpressionKind[\"ConditionalCase\"] = 23] = \"ConditionalCase\";\n    /**\n     * A variable for use inside a repeater, providing one of the ambiently-available context\n     * properties ($even, $first, etc.).\n     */\n    ExpressionKind[ExpressionKind[\"DerivedRepeaterVar\"] = 24] = \"DerivedRepeaterVar\";\n    /**\n     * An expression that will be automatically extracted to the component const array.\n     */\n    ExpressionKind[ExpressionKind[\"ConstCollected\"] = 25] = \"ConstCollected\";\n})(ExpressionKind || (ExpressionKind = {}));\nvar VariableFlags;\n(function (VariableFlags) {\n    VariableFlags[VariableFlags[\"None\"] = 0] = \"None\";\n    /**\n     * Always inline this variable, regardless of the number of times it's used.\n     * An `AlwaysInline` variable may not depend on context, because doing so may cause side effects\n     * that are illegal when multi-inlined. (The optimizer will enforce this constraint.)\n     */\n    VariableFlags[VariableFlags[\"AlwaysInline\"] = 1] = \"AlwaysInline\";\n})(VariableFlags || (VariableFlags = {}));\n/**\n * Distinguishes between different kinds of `SemanticVariable`s.\n */\nvar SemanticVariableKind;\n(function (SemanticVariableKind) {\n    /**\n     * Represents the context of a particular view.\n     */\n    SemanticVariableKind[SemanticVariableKind[\"Context\"] = 0] = \"Context\";\n    /**\n     * Represents an identifier declared in the lexical scope of a view.\n     */\n    SemanticVariableKind[SemanticVariableKind[\"Identifier\"] = 1] = \"Identifier\";\n    /**\n     * Represents a saved state that can be used to restore a view in a listener handler function.\n     */\n    SemanticVariableKind[SemanticVariableKind[\"SavedView\"] = 2] = \"SavedView\";\n    /**\n     * An alias generated by a special embedded view type (e.g. a `@for` block).\n     */\n    SemanticVariableKind[SemanticVariableKind[\"Alias\"] = 3] = \"Alias\";\n})(SemanticVariableKind || (SemanticVariableKind = {}));\n/**\n * Whether to compile in compatibilty mode. In compatibility mode, the template pipeline will\n * attempt to match the output of `TemplateDefinitionBuilder` as exactly as possible, at the cost\n * of producing quirky or larger code in some cases.\n */\nvar CompatibilityMode;\n(function (CompatibilityMode) {\n    CompatibilityMode[CompatibilityMode[\"Normal\"] = 0] = \"Normal\";\n    CompatibilityMode[CompatibilityMode[\"TemplateDefinitionBuilder\"] = 1] = \"TemplateDefinitionBuilder\";\n})(CompatibilityMode || (CompatibilityMode = {}));\n/**\n * Enumeration of the different kinds of `@defer` secondary blocks.\n */\nvar DeferSecondaryKind;\n(function (DeferSecondaryKind) {\n    DeferSecondaryKind[DeferSecondaryKind[\"Loading\"] = 0] = \"Loading\";\n    DeferSecondaryKind[DeferSecondaryKind[\"Placeholder\"] = 1] = \"Placeholder\";\n    DeferSecondaryKind[DeferSecondaryKind[\"Error\"] = 2] = \"Error\";\n})(DeferSecondaryKind || (DeferSecondaryKind = {}));\n/**\n * Enumeration of the types of attributes which can be applied to an element.\n */\nvar BindingKind;\n(function (BindingKind) {\n    /**\n     * Static attributes.\n     */\n    BindingKind[BindingKind[\"Attribute\"] = 0] = \"Attribute\";\n    /**\n     * Class bindings.\n     */\n    BindingKind[BindingKind[\"ClassName\"] = 1] = \"ClassName\";\n    /**\n     * Style bindings.\n     */\n    BindingKind[BindingKind[\"StyleProperty\"] = 2] = \"StyleProperty\";\n    /**\n     * Dynamic property bindings.\n     */\n    BindingKind[BindingKind[\"Property\"] = 3] = \"Property\";\n    /**\n     * Property or attribute bindings on a template.\n     */\n    BindingKind[BindingKind[\"Template\"] = 4] = \"Template\";\n    /**\n     * Internationalized attributes.\n     */\n    BindingKind[BindingKind[\"I18n\"] = 5] = \"I18n\";\n    /**\n     * Animation property bindings.\n     */\n    BindingKind[BindingKind[\"Animation\"] = 6] = \"Animation\";\n})(BindingKind || (BindingKind = {}));\n/**\n * Enumeration of possible times i18n params can be resolved.\n */\nvar I18nParamResolutionTime;\n(function (I18nParamResolutionTime) {\n    /**\n     * Param is resolved at message creation time. Most params should be resolved at message creation\n     * time. However, ICU params need to be handled in post-processing.\n     */\n    I18nParamResolutionTime[I18nParamResolutionTime[\"Creation\"] = 0] = \"Creation\";\n    /**\n     * Param is resolved during post-processing. This should be used for params who's value comes from\n     * an ICU.\n     */\n    I18nParamResolutionTime[I18nParamResolutionTime[\"Postproccessing\"] = 1] = \"Postproccessing\";\n})(I18nParamResolutionTime || (I18nParamResolutionTime = {}));\n/**\n * The contexts in which an i18n expression can be used.\n */\nvar I18nExpressionFor;\n(function (I18nExpressionFor) {\n    /**\n     * This expression is used as a value (i.e. inside an i18n block).\n     */\n    I18nExpressionFor[I18nExpressionFor[\"I18nText\"] = 0] = \"I18nText\";\n    /**\n     * This expression is used in a binding.\n     */\n    I18nExpressionFor[I18nExpressionFor[\"I18nAttribute\"] = 1] = \"I18nAttribute\";\n})(I18nExpressionFor || (I18nExpressionFor = {}));\n/**\n * Flags that describe what an i18n param value. These determine how the value is serialized into\n * the final map.\n */\nvar I18nParamValueFlags;\n(function (I18nParamValueFlags) {\n    I18nParamValueFlags[I18nParamValueFlags[\"None\"] = 0] = \"None\";\n    /**\n     *  This value represtents an element tag.\n     */\n    I18nParamValueFlags[I18nParamValueFlags[\"ElementTag\"] = 1] = \"ElementTag\";\n    /**\n     * This value represents a template tag.\n     */\n    I18nParamValueFlags[I18nParamValueFlags[\"TemplateTag\"] = 2] = \"TemplateTag\";\n    /**\n     * This value represents the opening of a tag.\n     */\n    I18nParamValueFlags[I18nParamValueFlags[\"OpenTag\"] = 4] = \"OpenTag\";\n    /**\n     * This value represents the closing of a tag.\n     */\n    I18nParamValueFlags[I18nParamValueFlags[\"CloseTag\"] = 8] = \"CloseTag\";\n    /**\n     * This value represents an i18n expression index.\n     */\n    I18nParamValueFlags[I18nParamValueFlags[\"ExpressionIndex\"] = 16] = \"ExpressionIndex\";\n})(I18nParamValueFlags || (I18nParamValueFlags = {}));\n/**\n * Whether the active namespace is HTML, MathML, or SVG mode.\n */\nvar Namespace;\n(function (Namespace) {\n    Namespace[Namespace[\"HTML\"] = 0] = \"HTML\";\n    Namespace[Namespace[\"SVG\"] = 1] = \"SVG\";\n    Namespace[Namespace[\"Math\"] = 2] = \"Math\";\n})(Namespace || (Namespace = {}));\n/**\n * The type of a `@defer` trigger, for use in the ir.\n */\nvar DeferTriggerKind;\n(function (DeferTriggerKind) {\n    DeferTriggerKind[DeferTriggerKind[\"Idle\"] = 0] = \"Idle\";\n    DeferTriggerKind[DeferTriggerKind[\"Immediate\"] = 1] = \"Immediate\";\n    DeferTriggerKind[DeferTriggerKind[\"Timer\"] = 2] = \"Timer\";\n    DeferTriggerKind[DeferTriggerKind[\"Hover\"] = 3] = \"Hover\";\n    DeferTriggerKind[DeferTriggerKind[\"Interaction\"] = 4] = \"Interaction\";\n    DeferTriggerKind[DeferTriggerKind[\"Viewport\"] = 5] = \"Viewport\";\n})(DeferTriggerKind || (DeferTriggerKind = {}));\n/**\n * Kinds of i18n contexts. They can be created because of root i18n blocks, or ICUs.\n */\nvar I18nContextKind;\n(function (I18nContextKind) {\n    I18nContextKind[I18nContextKind[\"RootI18n\"] = 0] = \"RootI18n\";\n    I18nContextKind[I18nContextKind[\"Icu\"] = 1] = \"Icu\";\n    I18nContextKind[I18nContextKind[\"Attr\"] = 2] = \"Attr\";\n})(I18nContextKind || (I18nContextKind = {}));\nvar TemplateKind;\n(function (TemplateKind) {\n    TemplateKind[TemplateKind[\"NgTemplate\"] = 0] = \"NgTemplate\";\n    TemplateKind[TemplateKind[\"Structural\"] = 1] = \"Structural\";\n    TemplateKind[TemplateKind[\"Block\"] = 2] = \"Block\";\n})(TemplateKind || (TemplateKind = {}));\n\n/**\n * Marker symbol for `ConsumesSlotOpTrait`.\n */\nconst ConsumesSlot = Symbol('ConsumesSlot');\n/**\n * Marker symbol for `DependsOnSlotContextOpTrait`.\n */\nconst DependsOnSlotContext = Symbol('DependsOnSlotContext');\n/**\n * Marker symbol for `ConsumesVars` trait.\n */\nconst ConsumesVarsTrait = Symbol('ConsumesVars');\n/**\n * Marker symbol for `UsesVarOffset` trait.\n */\nconst UsesVarOffset = Symbol('UsesVarOffset');\n/**\n * Default values for most `ConsumesSlotOpTrait` fields (used with the spread operator to initialize\n * implementors of the trait).\n */\nconst TRAIT_CONSUMES_SLOT = {\n    [ConsumesSlot]: true,\n    numSlotsUsed: 1,\n};\n/**\n * Default values for most `DependsOnSlotContextOpTrait` fields (used with the spread operator to\n * initialize implementors of the trait).\n */\nconst TRAIT_DEPENDS_ON_SLOT_CONTEXT = {\n    [DependsOnSlotContext]: true,\n};\n/**\n * Default values for `UsesVars` fields (used with the spread operator to initialize\n * implementors of the trait).\n */\nconst TRAIT_CONSUMES_VARS = {\n    [ConsumesVarsTrait]: true,\n};\n/**\n * Default values for `UsesVarOffset` fields (used with the spread operator to initialize\n * implementors of this trait).\n */\nconst TRAIT_USES_VAR_OFFSET = {\n    [UsesVarOffset]: true,\n    varOffset: null,\n};\n/**\n * Test whether an operation implements `ConsumesSlotOpTrait`.\n */\nfunction hasConsumesSlotTrait(op) {\n    return op[ConsumesSlot] === true;\n}\n/**\n * Test whether an operation implements `DependsOnSlotContextOpTrait`.\n */\nfunction hasDependsOnSlotContextTrait(op) {\n    return op[DependsOnSlotContext] === true;\n}\nfunction hasConsumesVarsTrait(value) {\n    return value[ConsumesVarsTrait] === true;\n}\n/**\n * Test whether an expression implements `UsesVarOffsetTrait`.\n */\nfunction hasUsesVarOffsetTrait(expr) {\n    return expr[UsesVarOffset] === true;\n}\n\n/**\n * Create a `StatementOp`.\n */\nfunction createStatementOp(statement) {\n    return {\n        kind: OpKind.Statement,\n        statement,\n        ...NEW_OP,\n    };\n}\n/**\n * Create a `VariableOp`.\n */\nfunction createVariableOp(xref, variable, initializer, flags) {\n    return {\n        kind: OpKind.Variable,\n        xref,\n        variable,\n        initializer,\n        flags,\n        ...NEW_OP,\n    };\n}\n/**\n * Static structure shared by all operations.\n *\n * Used as a convenience via the spread operator (`...NEW_OP`) when creating new operations, and\n * ensures the fields are always in the same order.\n */\nconst NEW_OP = {\n    debugListId: null,\n    prev: null,\n    next: null,\n};\n\n/**\n * Create an `InterpolationTextOp`.\n */\nfunction createInterpolateTextOp(xref, interpolation, sourceSpan) {\n    return {\n        kind: OpKind.InterpolateText,\n        target: xref,\n        interpolation,\n        sourceSpan,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n        ...NEW_OP,\n    };\n}\nclass Interpolation {\n    constructor(strings, expressions, i18nPlaceholders) {\n        this.strings = strings;\n        this.expressions = expressions;\n        this.i18nPlaceholders = i18nPlaceholders;\n        if (i18nPlaceholders.length !== 0 && i18nPlaceholders.length !== expressions.length) {\n            throw new Error(`Expected ${expressions.length} placeholders to match interpolation expression count, but got ${i18nPlaceholders.length}`);\n        }\n    }\n}\n/**\n * Create a `BindingOp`, not yet transformed into a particular type of binding.\n */\nfunction createBindingOp(target, kind, name, expression, unit, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {\n    return {\n        kind: OpKind.Binding,\n        bindingKind: kind,\n        target,\n        name,\n        expression,\n        unit,\n        securityContext,\n        isTextAttribute,\n        isStructuralTemplateAttribute,\n        templateKind,\n        i18nContext: null,\n        i18nMessage,\n        sourceSpan,\n        ...NEW_OP,\n    };\n}\n/**\n * Create a `PropertyOp`.\n */\nfunction createPropertyOp(target, name, expression, isAnimationTrigger, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {\n    return {\n        kind: OpKind.Property,\n        target,\n        name,\n        expression,\n        isAnimationTrigger,\n        securityContext,\n        sanitizer: null,\n        isStructuralTemplateAttribute,\n        templateKind,\n        i18nContext,\n        i18nMessage,\n        sourceSpan,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n        ...NEW_OP,\n    };\n}\n/** Create a `StylePropOp`. */\nfunction createStylePropOp(xref, name, expression, unit, sourceSpan) {\n    return {\n        kind: OpKind.StyleProp,\n        target: xref,\n        name,\n        expression,\n        unit,\n        sourceSpan,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n        ...NEW_OP,\n    };\n}\n/**\n * Create a `ClassPropOp`.\n */\nfunction createClassPropOp(xref, name, expression, sourceSpan) {\n    return {\n        kind: OpKind.ClassProp,\n        target: xref,\n        name,\n        expression,\n        sourceSpan,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n        ...NEW_OP,\n    };\n}\n/** Create a `StyleMapOp`. */\nfunction createStyleMapOp(xref, expression, sourceSpan) {\n    return {\n        kind: OpKind.StyleMap,\n        target: xref,\n        expression,\n        sourceSpan,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n        ...NEW_OP,\n    };\n}\n/**\n * Create a `ClassMapOp`.\n */\nfunction createClassMapOp(xref, expression, sourceSpan) {\n    return {\n        kind: OpKind.ClassMap,\n        target: xref,\n        expression,\n        sourceSpan,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n        ...NEW_OP,\n    };\n}\n/**\n * Create an `AttributeOp`.\n */\nfunction createAttributeOp(target, namespace, name, expression, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {\n    return {\n        kind: OpKind.Attribute,\n        target,\n        namespace,\n        name,\n        expression,\n        securityContext,\n        sanitizer: null,\n        isTextAttribute,\n        isStructuralTemplateAttribute,\n        templateKind,\n        i18nContext: null,\n        i18nMessage,\n        sourceSpan,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n        ...NEW_OP,\n    };\n}\n/**\n * Create an `AdvanceOp`.\n */\nfunction createAdvanceOp(delta, sourceSpan) {\n    return {\n        kind: OpKind.Advance,\n        delta,\n        sourceSpan,\n        ...NEW_OP,\n    };\n}\n/**\n * Create a conditional op, which will display an embedded view according to a condtion.\n */\nfunction createConditionalOp(target, targetSlot, test, conditions, sourceSpan) {\n    return {\n        kind: OpKind.Conditional,\n        target,\n        targetSlot,\n        test,\n        conditions,\n        processed: null,\n        sourceSpan,\n        contextValue: null,\n        ...NEW_OP,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n    };\n}\nfunction createRepeaterOp(repeaterCreate, targetSlot, collection, sourceSpan) {\n    return {\n        kind: OpKind.Repeater,\n        target: repeaterCreate,\n        targetSlot,\n        collection,\n        sourceSpan,\n        ...NEW_OP,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    };\n}\nfunction createDeferWhenOp(target, expr, prefetch, sourceSpan) {\n    return {\n        kind: OpKind.DeferWhen,\n        target,\n        expr,\n        prefetch,\n        sourceSpan,\n        ...NEW_OP,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n        ...TRAIT_CONSUMES_VARS,\n    };\n}\n/**\n * Create an i18n expression op.\n */\nfunction createI18nExpressionOp(context, target, i18nOwner, handle, expression, icuPlaceholder, i18nPlaceholder, resolutionTime, usage, name, sourceSpan) {\n    return {\n        kind: OpKind.I18nExpression,\n        context,\n        target,\n        i18nOwner,\n        handle,\n        expression,\n        icuPlaceholder,\n        i18nPlaceholder,\n        resolutionTime,\n        usage,\n        name,\n        sourceSpan,\n        ...NEW_OP,\n        ...TRAIT_CONSUMES_VARS,\n        ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,\n    };\n}\n/**\n * Creates an op to apply i18n expression ops.\n */\nfunction createI18nApplyOp(owner, handle, sourceSpan) {\n    return {\n        kind: OpKind.I18nApply,\n        owner,\n        handle,\n        sourceSpan,\n        ...NEW_OP,\n    };\n}\n\nvar _a, _b, _c, _d, _e, _f;\n/**\n * Check whether a given `o.Expression` is a logical IR expression type.\n */\nfunction isIrExpression(expr) {\n    return expr instanceof ExpressionBase;\n}\n/**\n * Base type used for all logical IR expressions.\n */\nclass ExpressionBase extends Expression {\n    constructor(sourceSpan = null) {\n        super(null, sourceSpan);\n    }\n}\n/**\n * Logical expression representing a lexical read of a variable name.\n */\nclass LexicalReadExpr extends ExpressionBase {\n    constructor(name) {\n        super();\n        this.name = name;\n        this.kind = ExpressionKind.LexicalRead;\n    }\n    visitExpression(visitor, context) { }\n    isEquivalent(other) {\n        // We assume that the lexical reads are in the same context, which must be true for parent\n        // expressions to be equivalent.\n        // TODO: is this generally safe?\n        return this.name === other.name;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions() { }\n    clone() {\n        return new LexicalReadExpr(this.name);\n    }\n}\n/**\n * Runtime operation to retrieve the value of a local reference.\n */\nclass ReferenceExpr extends ExpressionBase {\n    constructor(target, targetSlot, offset) {\n        super();\n        this.target = target;\n        this.targetSlot = targetSlot;\n        this.offset = offset;\n        this.kind = ExpressionKind.Reference;\n    }\n    visitExpression() { }\n    isEquivalent(e) {\n        return e instanceof ReferenceExpr && e.target === this.target;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions() { }\n    clone() {\n        return new ReferenceExpr(this.target, this.targetSlot, this.offset);\n    }\n}\n/**\n * A reference to the current view context (usually the `ctx` variable in a template function).\n */\nclass ContextExpr extends ExpressionBase {\n    constructor(view) {\n        super();\n        this.view = view;\n        this.kind = ExpressionKind.Context;\n    }\n    visitExpression() { }\n    isEquivalent(e) {\n        return e instanceof ContextExpr && e.view === this.view;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions() { }\n    clone() {\n        return new ContextExpr(this.view);\n    }\n}\n/**\n * A reference to the current view context inside a track function.\n */\nclass TrackContextExpr extends ExpressionBase {\n    constructor(view) {\n        super();\n        this.view = view;\n        this.kind = ExpressionKind.TrackContext;\n    }\n    visitExpression() { }\n    isEquivalent(e) {\n        return e instanceof TrackContextExpr && e.view === this.view;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions() { }\n    clone() {\n        return new TrackContextExpr(this.view);\n    }\n}\n/**\n * Runtime operation to navigate to the next view context in the view hierarchy.\n */\nclass NextContextExpr extends ExpressionBase {\n    constructor() {\n        super();\n        this.kind = ExpressionKind.NextContext;\n        this.steps = 1;\n    }\n    visitExpression() { }\n    isEquivalent(e) {\n        return e instanceof NextContextExpr && e.steps === this.steps;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions() { }\n    clone() {\n        const expr = new NextContextExpr();\n        expr.steps = this.steps;\n        return expr;\n    }\n}\n/**\n * Runtime operation to snapshot the current view context.\n *\n * The result of this operation can be stored in a variable and later used with the `RestoreView`\n * operation.\n */\nclass GetCurrentViewExpr extends ExpressionBase {\n    constructor() {\n        super();\n        this.kind = ExpressionKind.GetCurrentView;\n    }\n    visitExpression() { }\n    isEquivalent(e) {\n        return e instanceof GetCurrentViewExpr;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions() { }\n    clone() {\n        return new GetCurrentViewExpr();\n    }\n}\n/**\n * Runtime operation to restore a snapshotted view.\n */\nclass RestoreViewExpr extends ExpressionBase {\n    constructor(view) {\n        super();\n        this.view = view;\n        this.kind = ExpressionKind.RestoreView;\n    }\n    visitExpression(visitor, context) {\n        if (typeof this.view !== 'number') {\n            this.view.visitExpression(visitor, context);\n        }\n    }\n    isEquivalent(e) {\n        if (!(e instanceof RestoreViewExpr) || typeof e.view !== typeof this.view) {\n            return false;\n        }\n        if (typeof this.view === 'number') {\n            return this.view === e.view;\n        }\n        else {\n            return this.view.isEquivalent(e.view);\n        }\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        if (typeof this.view !== 'number') {\n            this.view = transformExpressionsInExpression(this.view, transform, flags);\n        }\n    }\n    clone() {\n        return new RestoreViewExpr(this.view instanceof Expression ? this.view.clone() : this.view);\n    }\n}\n/**\n * Runtime operation to reset the current view context after `RestoreView`.\n */\nclass ResetViewExpr extends ExpressionBase {\n    constructor(expr) {\n        super();\n        this.expr = expr;\n        this.kind = ExpressionKind.ResetView;\n    }\n    visitExpression(visitor, context) {\n        this.expr.visitExpression(visitor, context);\n    }\n    isEquivalent(e) {\n        return e instanceof ResetViewExpr && this.expr.isEquivalent(e.expr);\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        this.expr = transformExpressionsInExpression(this.expr, transform, flags);\n    }\n    clone() {\n        return new ResetViewExpr(this.expr.clone());\n    }\n}\n/**\n * Read of a variable declared as an `ir.VariableOp` and referenced through its `ir.XrefId`.\n */\nclass ReadVariableExpr extends ExpressionBase {\n    constructor(xref) {\n        super();\n        this.xref = xref;\n        this.kind = ExpressionKind.ReadVariable;\n        this.name = null;\n    }\n    visitExpression() { }\n    isEquivalent(other) {\n        return other instanceof ReadVariableExpr && other.xref === this.xref;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions() { }\n    clone() {\n        const expr = new ReadVariableExpr(this.xref);\n        expr.name = this.name;\n        return expr;\n    }\n}\nclass PureFunctionExpr extends ExpressionBase {\n    static { _a = ConsumesVarsTrait, _b = UsesVarOffset; }\n    constructor(expression, args) {\n        super();\n        this.kind = ExpressionKind.PureFunctionExpr;\n        this[_a] = true;\n        this[_b] = true;\n        this.varOffset = null;\n        /**\n         * Once extracted to the `ConstantPool`, a reference to the function which defines the computation\n         * of `body`.\n         */\n        this.fn = null;\n        this.body = expression;\n        this.args = args;\n    }\n    visitExpression(visitor, context) {\n        this.body?.visitExpression(visitor, context);\n        for (const arg of this.args) {\n            arg.visitExpression(visitor, context);\n        }\n    }\n    isEquivalent(other) {\n        if (!(other instanceof PureFunctionExpr) || other.args.length !== this.args.length) {\n            return false;\n        }\n        return other.body !== null && this.body !== null && other.body.isEquivalent(this.body) &&\n            other.args.every((arg, idx) => arg.isEquivalent(this.args[idx]));\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        if (this.body !== null) {\n            // TODO: figure out if this is the right flag to pass here.\n            this.body = transformExpressionsInExpression(this.body, transform, flags | VisitorContextFlag.InChildOperation);\n        }\n        else if (this.fn !== null) {\n            this.fn = transformExpressionsInExpression(this.fn, transform, flags);\n        }\n        for (let i = 0; i < this.args.length; i++) {\n            this.args[i] = transformExpressionsInExpression(this.args[i], transform, flags);\n        }\n    }\n    clone() {\n        const expr = new PureFunctionExpr(this.body?.clone() ?? null, this.args.map(arg => arg.clone()));\n        expr.fn = this.fn?.clone() ?? null;\n        expr.varOffset = this.varOffset;\n        return expr;\n    }\n}\nclass PureFunctionParameterExpr extends ExpressionBase {\n    constructor(index) {\n        super();\n        this.index = index;\n        this.kind = ExpressionKind.PureFunctionParameterExpr;\n    }\n    visitExpression() { }\n    isEquivalent(other) {\n        return other instanceof PureFunctionParameterExpr && other.index === this.index;\n    }\n    isConstant() {\n        return true;\n    }\n    transformInternalExpressions() { }\n    clone() {\n        return new PureFunctionParameterExpr(this.index);\n    }\n}\nclass PipeBindingExpr extends ExpressionBase {\n    static { _c = ConsumesVarsTrait, _d = UsesVarOffset; }\n    constructor(target, targetSlot, name, args) {\n        super();\n        this.target = target;\n        this.targetSlot = targetSlot;\n        this.name = name;\n        this.args = args;\n        this.kind = ExpressionKind.PipeBinding;\n        this[_c] = true;\n        this[_d] = true;\n        this.varOffset = null;\n    }\n    visitExpression(visitor, context) {\n        for (const arg of this.args) {\n            arg.visitExpression(visitor, context);\n        }\n    }\n    isEquivalent() {\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        for (let idx = 0; idx < this.args.length; idx++) {\n            this.args[idx] = transformExpressionsInExpression(this.args[idx], transform, flags);\n        }\n    }\n    clone() {\n        const r = new PipeBindingExpr(this.target, this.targetSlot, this.name, this.args.map(a => a.clone()));\n        r.varOffset = this.varOffset;\n        return r;\n    }\n}\nclass PipeBindingVariadicExpr extends ExpressionBase {\n    static { _e = ConsumesVarsTrait, _f = UsesVarOffset; }\n    constructor(target, targetSlot, name, args, numArgs) {\n        super();\n        this.target = target;\n        this.targetSlot = targetSlot;\n        this.name = name;\n        this.args = args;\n        this.numArgs = numArgs;\n        this.kind = ExpressionKind.PipeBindingVariadic;\n        this[_e] = true;\n        this[_f] = true;\n        this.varOffset = null;\n    }\n    visitExpression(visitor, context) {\n        this.args.visitExpression(visitor, context);\n    }\n    isEquivalent() {\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        this.args = transformExpressionsInExpression(this.args, transform, flags);\n    }\n    clone() {\n        const r = new PipeBindingVariadicExpr(this.target, this.targetSlot, this.name, this.args.clone(), this.numArgs);\n        r.varOffset = this.varOffset;\n        return r;\n    }\n}\nclass SafePropertyReadExpr extends ExpressionBase {\n    constructor(receiver, name) {\n        super();\n        this.receiver = receiver;\n        this.name = name;\n        this.kind = ExpressionKind.SafePropertyRead;\n    }\n    // An alias for name, which allows other logic to handle property reads and keyed reads together.\n    get index() {\n        return this.name;\n    }\n    visitExpression(visitor, context) {\n        this.receiver.visitExpression(visitor, context);\n    }\n    isEquivalent() {\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);\n    }\n    clone() {\n        return new SafePropertyReadExpr(this.receiver.clone(), this.name);\n    }\n}\nclass SafeKeyedReadExpr extends ExpressionBase {\n    constructor(receiver, index, sourceSpan) {\n        super(sourceSpan);\n        this.receiver = receiver;\n        this.index = index;\n        this.kind = ExpressionKind.SafeKeyedRead;\n    }\n    visitExpression(visitor, context) {\n        this.receiver.visitExpression(visitor, context);\n        this.index.visitExpression(visitor, context);\n    }\n    isEquivalent() {\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);\n        this.index = transformExpressionsInExpression(this.index, transform, flags);\n    }\n    clone() {\n        return new SafeKeyedReadExpr(this.receiver.clone(), this.index.clone(), this.sourceSpan);\n    }\n}\nclass SafeInvokeFunctionExpr extends ExpressionBase {\n    constructor(receiver, args) {\n        super();\n        this.receiver = receiver;\n        this.args = args;\n        this.kind = ExpressionKind.SafeInvokeFunction;\n    }\n    visitExpression(visitor, context) {\n        this.receiver.visitExpression(visitor, context);\n        for (const a of this.args) {\n            a.visitExpression(visitor, context);\n        }\n    }\n    isEquivalent() {\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);\n        for (let i = 0; i < this.args.length; i++) {\n            this.args[i] = transformExpressionsInExpression(this.args[i], transform, flags);\n        }\n    }\n    clone() {\n        return new SafeInvokeFunctionExpr(this.receiver.clone(), this.args.map(a => a.clone()));\n    }\n}\nclass SafeTernaryExpr extends ExpressionBase {\n    constructor(guard, expr) {\n        super();\n        this.guard = guard;\n        this.expr = expr;\n        this.kind = ExpressionKind.SafeTernaryExpr;\n    }\n    visitExpression(visitor, context) {\n        this.guard.visitExpression(visitor, context);\n        this.expr.visitExpression(visitor, context);\n    }\n    isEquivalent() {\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        this.guard = transformExpressionsInExpression(this.guard, transform, flags);\n        this.expr = transformExpressionsInExpression(this.expr, transform, flags);\n    }\n    clone() {\n        return new SafeTernaryExpr(this.guard.clone(), this.expr.clone());\n    }\n}\nclass EmptyExpr extends ExpressionBase {\n    constructor() {\n        super(...arguments);\n        this.kind = ExpressionKind.EmptyExpr;\n    }\n    visitExpression(visitor, context) { }\n    isEquivalent(e) {\n        return e instanceof EmptyExpr;\n    }\n    isConstant() {\n        return true;\n    }\n    clone() {\n        return new EmptyExpr();\n    }\n    transformInternalExpressions() { }\n}\nclass AssignTemporaryExpr extends ExpressionBase {\n    constructor(expr, xref) {\n        super();\n        this.expr = expr;\n        this.xref = xref;\n        this.kind = ExpressionKind.AssignTemporaryExpr;\n        this.name = null;\n    }\n    visitExpression(visitor, context) {\n        this.expr.visitExpression(visitor, context);\n    }\n    isEquivalent() {\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) {\n        this.expr = transformExpressionsInExpression(this.expr, transform, flags);\n    }\n    clone() {\n        const a = new AssignTemporaryExpr(this.expr.clone(), this.xref);\n        a.name = this.name;\n        return a;\n    }\n}\nclass ReadTemporaryExpr extends ExpressionBase {\n    constructor(xref) {\n        super();\n        this.xref = xref;\n        this.kind = ExpressionKind.ReadTemporaryExpr;\n        this.name = null;\n    }\n    visitExpression(visitor, context) { }\n    isEquivalent() {\n        return this.xref === this.xref;\n    }\n    isConstant() {\n        return false;\n    }\n    transformInternalExpressions(transform, flags) { }\n    clone() {\n        const r = new ReadTemporaryExpr(this.xref);\n        r.name = this.name;\n        return r;\n    }\n}\nclass SlotLiteralExpr extends ExpressionBase {\n    constructor(slot) {\n        super();\n        this.slot = slot;\n        this.kind = ExpressionKind.SlotLiteralExpr;\n    }\n    visitExpression(visitor, context) { }\n    isEquivalent(e) {\n        return e instanceof SlotLiteralExpr && e.slot === this.slot;\n    }\n    isConstant() {\n        return true;\n    }\n    clone() {\n        return new SlotLiteralExpr(this.slot);\n    }\n    transformInternalExpressions() { }\n}\nclass ConditionalCaseExpr extends ExpressionBase {\n    /**\n     * Create an expression for one branch of a conditional.\n     * @param expr The expression to be tested for this case. Might be null, as in an `else` case.\n     * @param target The Xref of the view to be displayed if this condition is true.\n     */\n    constructor(expr, target, targetSlot, alias = null) {\n        super();\n        this.expr = expr;\n        this.target = target;\n        this.targetSlot = targetSlot;\n        this.alias = alias;\n        this.kind = ExpressionKind.ConditionalCase;\n    }\n    visitExpression(visitor, context) {\n        if (this.expr !== null) {\n            this.expr.visitExpression(visitor, context);\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof ConditionalCaseExpr && e.expr === this.expr;\n    }\n    isConstant() {\n        return true;\n    }\n    clone() {\n        return new ConditionalCaseExpr(this.expr, this.target, this.targetSlot);\n    }\n    transformInternalExpressions(transform, flags) {\n        if (this.expr !== null) {\n            this.expr = transformExpressionsInExpression(this.expr, transform, flags);\n        }\n    }\n}\nclass ConstCollectedExpr extends ExpressionBase {\n    constructor(expr) {\n        super();\n        this.expr = expr;\n        this.kind = ExpressionKind.ConstCollected;\n    }\n    transformInternalExpressions(transform, flags) {\n        this.expr = transform(this.expr, flags);\n    }\n    visitExpression(visitor, context) {\n        this.expr.visitExpression(visitor, context);\n    }\n    isEquivalent(e) {\n        if (!(e instanceof ConstCollectedExpr)) {\n            return false;\n        }\n        return this.expr.isEquivalent(e.expr);\n    }\n    isConstant() {\n        return this.expr.isConstant();\n    }\n    clone() {\n        return new ConstCollectedExpr(this.expr);\n    }\n}\n/**\n * Visits all `Expression`s in the AST of `op` with the `visitor` function.\n */\nfunction visitExpressionsInOp(op, visitor) {\n    transformExpressionsInOp(op, (expr, flags) => {\n        visitor(expr, flags);\n        return expr;\n    }, VisitorContextFlag.None);\n}\nvar VisitorContextFlag;\n(function (VisitorContextFlag) {\n    VisitorContextFlag[VisitorContextFlag[\"None\"] = 0] = \"None\";\n    VisitorContextFlag[VisitorContextFlag[\"InChildOperation\"] = 1] = \"InChildOperation\";\n})(VisitorContextFlag || (VisitorContextFlag = {}));\nfunction transformExpressionsInInterpolation(interpolation, transform, flags) {\n    for (let i = 0; i < interpolation.expressions.length; i++) {\n        interpolation.expressions[i] =\n            transformExpressionsInExpression(interpolation.expressions[i], transform, flags);\n    }\n}\n/**\n * Transform all `Expression`s in the AST of `op` with the `transform` function.\n *\n * All such operations will be replaced with the result of applying `transform`, which may be an\n * identity transformation.\n */\nfunction transformExpressionsInOp(op, transform, flags) {\n    switch (op.kind) {\n        case OpKind.StyleProp:\n        case OpKind.StyleMap:\n        case OpKind.ClassProp:\n        case OpKind.ClassMap:\n        case OpKind.Binding:\n            if (op.expression instanceof Interpolation) {\n                transformExpressionsInInterpolation(op.expression, transform, flags);\n            }\n            else {\n                op.expression = transformExpressionsInExpression(op.expression, transform, flags);\n            }\n            break;\n        case OpKind.Property:\n        case OpKind.HostProperty:\n        case OpKind.Attribute:\n            if (op.expression instanceof Interpolation) {\n                transformExpressionsInInterpolation(op.expression, transform, flags);\n            }\n            else {\n                op.expression = transformExpressionsInExpression(op.expression, transform, flags);\n            }\n            op.sanitizer =\n                op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform, flags);\n            break;\n        case OpKind.I18nExpression:\n            op.expression = transformExpressionsInExpression(op.expression, transform, flags);\n            break;\n        case OpKind.InterpolateText:\n            transformExpressionsInInterpolation(op.interpolation, transform, flags);\n            break;\n        case OpKind.Statement:\n            transformExpressionsInStatement(op.statement, transform, flags);\n            break;\n        case OpKind.Variable:\n            op.initializer = transformExpressionsInExpression(op.initializer, transform, flags);\n            break;\n        case OpKind.Conditional:\n            for (const condition of op.conditions) {\n                if (condition.expr === null) {\n                    // This is a default case.\n                    continue;\n                }\n                condition.expr = transformExpressionsInExpression(condition.expr, transform, flags);\n            }\n            if (op.processed !== null) {\n                op.processed = transformExpressionsInExpression(op.processed, transform, flags);\n            }\n            if (op.contextValue !== null) {\n                op.contextValue = transformExpressionsInExpression(op.contextValue, transform, flags);\n            }\n            break;\n        case OpKind.Listener:\n            for (const innerOp of op.handlerOps) {\n                transformExpressionsInOp(innerOp, transform, flags | VisitorContextFlag.InChildOperation);\n            }\n            break;\n        case OpKind.ExtractedAttribute:\n            op.expression =\n                op.expression && transformExpressionsInExpression(op.expression, transform, flags);\n            op.trustedValueFn = op.trustedValueFn &&\n                transformExpressionsInExpression(op.trustedValueFn, transform, flags);\n            break;\n        case OpKind.RepeaterCreate:\n            op.track = transformExpressionsInExpression(op.track, transform, flags);\n            if (op.trackByFn !== null) {\n                op.trackByFn = transformExpressionsInExpression(op.trackByFn, transform, flags);\n            }\n            break;\n        case OpKind.Repeater:\n            op.collection = transformExpressionsInExpression(op.collection, transform, flags);\n            break;\n        case OpKind.Defer:\n            if (op.loadingConfig !== null) {\n                op.loadingConfig = transformExpressionsInExpression(op.loadingConfig, transform, flags);\n            }\n            if (op.placeholderConfig !== null) {\n                op.placeholderConfig =\n                    transformExpressionsInExpression(op.placeholderConfig, transform, flags);\n            }\n            if (op.resolverFn !== null) {\n                op.resolverFn = transformExpressionsInExpression(op.resolverFn, transform, flags);\n            }\n            break;\n        case OpKind.I18nMessage:\n            for (const [placeholder, expr] of op.params) {\n                op.params.set(placeholder, transformExpressionsInExpression(expr, transform, flags));\n            }\n            for (const [placeholder, expr] of op.postprocessingParams) {\n                op.postprocessingParams.set(placeholder, transformExpressionsInExpression(expr, transform, flags));\n            }\n            break;\n        case OpKind.DeferWhen:\n            op.expr = transformExpressionsInExpression(op.expr, transform, flags);\n            break;\n        case OpKind.Advance:\n        case OpKind.Container:\n        case OpKind.ContainerEnd:\n        case OpKind.ContainerStart:\n        case OpKind.DeferOn:\n        case OpKind.DisableBindings:\n        case OpKind.Element:\n        case OpKind.ElementEnd:\n        case OpKind.ElementStart:\n        case OpKind.EnableBindings:\n        case OpKind.I18n:\n        case OpKind.I18nApply:\n        case OpKind.I18nContext:\n        case OpKind.I18nEnd:\n        case OpKind.I18nStart:\n        case OpKind.IcuEnd:\n        case OpKind.IcuStart:\n        case OpKind.Namespace:\n        case OpKind.Pipe:\n        case OpKind.Projection:\n        case OpKind.ProjectionDef:\n        case OpKind.Template:\n        case OpKind.Text:\n        case OpKind.I18nAttributes:\n        case OpKind.IcuPlaceholder:\n            // These operations contain no expressions.\n            break;\n        default:\n            throw new Error(`AssertionError: transformExpressionsInOp doesn't handle ${OpKind[op.kind]}`);\n    }\n}\n/**\n * Transform all `Expression`s in the AST of `expr` with the `transform` function.\n *\n * All such operations will be replaced with the result of applying `transform`, which may be an\n * identity transformation.\n */\nfunction transformExpressionsInExpression(expr, transform, flags) {\n    if (expr instanceof ExpressionBase) {\n        expr.transformInternalExpressions(transform, flags);\n    }\n    else if (expr instanceof BinaryOperatorExpr) {\n        expr.lhs = transformExpressionsInExpression(expr.lhs, transform, flags);\n        expr.rhs = transformExpressionsInExpression(expr.rhs, transform, flags);\n    }\n    else if (expr instanceof UnaryOperatorExpr) {\n        expr.expr = transformExpressionsInExpression(expr.expr, transform, flags);\n    }\n    else if (expr instanceof ReadPropExpr) {\n        expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);\n    }\n    else if (expr instanceof ReadKeyExpr) {\n        expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);\n        expr.index = transformExpressionsInExpression(expr.index, transform, flags);\n    }\n    else if (expr instanceof WritePropExpr) {\n        expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);\n        expr.value = transformExpressionsInExpression(expr.value, transform, flags);\n    }\n    else if (expr instanceof WriteKeyExpr) {\n        expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);\n        expr.index = transformExpressionsInExpression(expr.index, transform, flags);\n        expr.value = transformExpressionsInExpression(expr.value, transform, flags);\n    }\n    else if (expr instanceof InvokeFunctionExpr) {\n        expr.fn = transformExpressionsInExpression(expr.fn, transform, flags);\n        for (let i = 0; i < expr.args.length; i++) {\n            expr.args[i] = transformExpressionsInExpression(expr.args[i], transform, flags);\n        }\n    }\n    else if (expr instanceof LiteralArrayExpr) {\n        for (let i = 0; i < expr.entries.length; i++) {\n            expr.entries[i] = transformExpressionsInExpression(expr.entries[i], transform, flags);\n        }\n    }\n    else if (expr instanceof LiteralMapExpr) {\n        for (let i = 0; i < expr.entries.length; i++) {\n            expr.entries[i].value =\n                transformExpressionsInExpression(expr.entries[i].value, transform, flags);\n        }\n    }\n    else if (expr instanceof ConditionalExpr) {\n        expr.condition = transformExpressionsInExpression(expr.condition, transform, flags);\n        expr.trueCase = transformExpressionsInExpression(expr.trueCase, transform, flags);\n        if (expr.falseCase !== null) {\n            expr.falseCase = transformExpressionsInExpression(expr.falseCase, transform, flags);\n        }\n    }\n    else if (expr instanceof TypeofExpr) {\n        expr.expr = transformExpressionsInExpression(expr.expr, transform, flags);\n    }\n    else if (expr instanceof WriteVarExpr) {\n        expr.value = transformExpressionsInExpression(expr.value, transform, flags);\n    }\n    else if (expr instanceof LocalizedString) {\n        for (let i = 0; i < expr.expressions.length; i++) {\n            expr.expressions[i] = transformExpressionsInExpression(expr.expressions[i], transform, flags);\n        }\n    }\n    else if (expr instanceof NotExpr) {\n        expr.condition = transformExpressionsInExpression(expr.condition, transform, flags);\n    }\n    else if (expr instanceof TaggedTemplateExpr) {\n        expr.tag = transformExpressionsInExpression(expr.tag, transform, flags);\n        expr.template.expressions =\n            expr.template.expressions.map(e => transformExpressionsInExpression(e, transform, flags));\n    }\n    else if (expr instanceof ArrowFunctionExpr) {\n        if (Array.isArray(expr.body)) {\n            for (let i = 0; i < expr.body.length; i++) {\n                transformExpressionsInStatement(expr.body[i], transform, flags);\n            }\n        }\n        else {\n            expr.body = transformExpressionsInExpression(expr.body, transform, flags);\n        }\n    }\n    else if (expr instanceof WrappedNodeExpr) {\n        // TODO: Do we need to transform any TS nodes nested inside of this expression?\n    }\n    else if (expr instanceof ReadVarExpr || expr instanceof ExternalExpr ||\n        expr instanceof LiteralExpr) {\n        // No action for these types.\n    }\n    else {\n        throw new Error(`Unhandled expression kind: ${expr.constructor.name}`);\n    }\n    return transform(expr, flags);\n}\n/**\n * Transform all `Expression`s in the AST of `stmt` with the `transform` function.\n *\n * All such operations will be replaced with the result of applying `transform`, which may be an\n * identity transformation.\n */\nfunction transformExpressionsInStatement(stmt, transform, flags) {\n    if (stmt instanceof ExpressionStatement) {\n        stmt.expr = transformExpressionsInExpression(stmt.expr, transform, flags);\n    }\n    else if (stmt instanceof ReturnStatement) {\n        stmt.value = transformExpressionsInExpression(stmt.value, transform, flags);\n    }\n    else if (stmt instanceof DeclareVarStmt) {\n        if (stmt.value !== undefined) {\n            stmt.value = transformExpressionsInExpression(stmt.value, transform, flags);\n        }\n    }\n    else if (stmt instanceof IfStmt) {\n        stmt.condition = transformExpressionsInExpression(stmt.condition, transform, flags);\n        for (const caseStatement of stmt.trueCase) {\n            transformExpressionsInStatement(caseStatement, transform, flags);\n        }\n        for (const caseStatement of stmt.falseCase) {\n            transformExpressionsInStatement(caseStatement, transform, flags);\n        }\n    }\n    else {\n        throw new Error(`Unhandled statement kind: ${stmt.constructor.name}`);\n    }\n}\n/**\n * Checks whether the given expression is a string literal.\n */\nfunction isStringLiteral(expr) {\n    return expr instanceof LiteralExpr && typeof expr.value === 'string';\n}\n\n/**\n * A linked list of `Op` nodes of a given subtype.\n *\n * @param OpT specific subtype of `Op` nodes which this list contains.\n */\nclass OpList {\n    static { this.nextListId = 0; }\n    constructor() {\n        /**\n         * Debug ID of this `OpList` instance.\n         */\n        this.debugListId = OpList.nextListId++;\n        // OpList uses static head/tail nodes of a special `ListEnd` type.\n        // This avoids the need for special casing of the first and last list\n        // elements in all list operations.\n        this.head = {\n            kind: OpKind.ListEnd,\n            next: null,\n            prev: null,\n            debugListId: this.debugListId,\n        };\n        this.tail = {\n            kind: OpKind.ListEnd,\n            next: null,\n            prev: null,\n            debugListId: this.debugListId,\n        };\n        // Link `head` and `tail` together at the start (list is empty).\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    }\n    /**\n     * Push a new operation to the tail of the list.\n     */\n    push(op) {\n        if (Array.isArray(op)) {\n            for (const o of op) {\n                this.push(o);\n            }\n            return;\n        }\n        OpList.assertIsNotEnd(op);\n        OpList.assertIsUnowned(op);\n        op.debugListId = this.debugListId;\n        // The old \"previous\" node (which might be the head, if the list is empty).\n        const oldLast = this.tail.prev;\n        // Insert `op` following the old last node.\n        op.prev = oldLast;\n        oldLast.next = op;\n        // Connect `op` with the list tail.\n        op.next = this.tail;\n        this.tail.prev = op;\n    }\n    /**\n     * Prepend one or more nodes to the start of the list.\n     */\n    prepend(ops) {\n        if (ops.length === 0) {\n            return;\n        }\n        for (const op of ops) {\n            OpList.assertIsNotEnd(op);\n            OpList.assertIsUnowned(op);\n            op.debugListId = this.debugListId;\n        }\n        const first = this.head.next;\n        let prev = this.head;\n        for (const op of ops) {\n            prev.next = op;\n            op.prev = prev;\n            prev = op;\n        }\n        prev.next = first;\n        first.prev = prev;\n    }\n    /**\n     * `OpList` is iterable via the iteration protocol.\n     *\n     * It's safe to mutate the part of the list that has already been returned by the iterator, up to\n     * and including the last operation returned. Mutations beyond that point _may_ be safe, but may\n     * also corrupt the iteration position and should be avoided.\n     */\n    *[Symbol.iterator]() {\n        let current = this.head.next;\n        while (current !== this.tail) {\n            // Guards against corruption of the iterator state by mutations to the tail of the list during\n            // iteration.\n            OpList.assertIsOwned(current, this.debugListId);\n            const next = current.next;\n            yield current;\n            current = next;\n        }\n    }\n    *reversed() {\n        let current = this.tail.prev;\n        while (current !== this.head) {\n            OpList.assertIsOwned(current, this.debugListId);\n            const prev = current.prev;\n            yield current;\n            current = prev;\n        }\n    }\n    /**\n     * Replace `oldOp` with `newOp` in the list.\n     */\n    static replace(oldOp, newOp) {\n        OpList.assertIsNotEnd(oldOp);\n        OpList.assertIsNotEnd(newOp);\n        OpList.assertIsOwned(oldOp);\n        OpList.assertIsUnowned(newOp);\n        newOp.debugListId = oldOp.debugListId;\n        if (oldOp.prev !== null) {\n            oldOp.prev.next = newOp;\n            newOp.prev = oldOp.prev;\n        }\n        if (oldOp.next !== null) {\n            oldOp.next.prev = newOp;\n            newOp.next = oldOp.next;\n        }\n        oldOp.debugListId = null;\n        oldOp.prev = null;\n        oldOp.next = null;\n    }\n    /**\n     * Replace `oldOp` with some number of new operations in the list (which may include `oldOp`).\n     */\n    static replaceWithMany(oldOp, newOps) {\n        if (newOps.length === 0) {\n            // Replacing with an empty list -> pure removal.\n            OpList.remove(oldOp);\n            return;\n        }\n        OpList.assertIsNotEnd(oldOp);\n        OpList.assertIsOwned(oldOp);\n        const listId = oldOp.debugListId;\n        oldOp.debugListId = null;\n        for (const newOp of newOps) {\n            OpList.assertIsNotEnd(newOp);\n            // `newOp` might be `oldOp`, but at this point it's been marked as unowned.\n            OpList.assertIsUnowned(newOp);\n        }\n        // It should be safe to reuse `oldOp` in the `newOps` list - maybe you want to sandwich an\n        // operation between two new ops.\n        const { prev: oldPrev, next: oldNext } = oldOp;\n        oldOp.prev = null;\n        oldOp.next = null;\n        let prev = oldPrev;\n        for (const newOp of newOps) {\n            this.assertIsUnowned(newOp);\n            newOp.debugListId = listId;\n            prev.next = newOp;\n            newOp.prev = prev;\n            // This _should_ be the case, but set it just in case.\n            newOp.next = null;\n            prev = newOp;\n        }\n        // At the end of iteration, `prev` holds the last node in the list.\n        const first = newOps[0];\n        const last = prev;\n        // Replace `oldOp` with the chain `first` -> `last`.\n        if (oldPrev !== null) {\n            oldPrev.next = first;\n            first.prev = oldPrev;\n        }\n        if (oldNext !== null) {\n            oldNext.prev = last;\n            last.next = oldNext;\n        }\n    }\n    /**\n     * Remove the given node from the list which contains it.\n     */\n    static remove(op) {\n        OpList.assertIsNotEnd(op);\n        OpList.assertIsOwned(op);\n        op.prev.next = op.next;\n        op.next.prev = op.prev;\n        // Break any link between the node and this list to safeguard against its usage in future\n        // operations.\n        op.debugListId = null;\n        op.prev = null;\n        op.next = null;\n    }\n    /**\n     * Insert `op` before `target`.\n     */\n    static insertBefore(op, target) {\n        if (Array.isArray(op)) {\n            for (const o of op) {\n                this.insertBefore(o, target);\n            }\n            return;\n        }\n        OpList.assertIsOwned(target);\n        if (target.prev === null) {\n            throw new Error(`AssertionError: illegal operation on list start`);\n        }\n        OpList.assertIsNotEnd(op);\n        OpList.assertIsUnowned(op);\n        op.debugListId = target.debugListId;\n        // Just in case.\n        op.prev = null;\n        target.prev.next = op;\n        op.prev = target.prev;\n        op.next = target;\n        target.prev = op;\n    }\n    /**\n     * Insert `op` after `target`.\n     */\n    static insertAfter(op, target) {\n        OpList.assertIsOwned(target);\n        if (target.next === null) {\n            throw new Error(`AssertionError: illegal operation on list end`);\n        }\n        OpList.assertIsNotEnd(op);\n        OpList.assertIsUnowned(op);\n        op.debugListId = target.debugListId;\n        target.next.prev = op;\n        op.next = target.next;\n        op.prev = target;\n        target.next = op;\n    }\n    /**\n     * Asserts that `op` does not currently belong to a list.\n     */\n    static assertIsUnowned(op) {\n        if (op.debugListId !== null) {\n            throw new Error(`AssertionError: illegal operation on owned node: ${OpKind[op.kind]}`);\n        }\n    }\n    /**\n     * Asserts that `op` currently belongs to a list. If `byList` is passed, `op` is asserted to\n     * specifically belong to that list.\n     */\n    static assertIsOwned(op, byList) {\n        if (op.debugListId === null) {\n            throw new Error(`AssertionError: illegal operation on unowned node: ${OpKind[op.kind]}`);\n        }\n        else if (byList !== undefined && op.debugListId !== byList) {\n            throw new Error(`AssertionError: node belongs to the wrong list (expected ${byList}, actual ${op.debugListId})`);\n        }\n    }\n    /**\n     * Asserts that `op` is not a special `ListEnd` node.\n     */\n    static assertIsNotEnd(op) {\n        if (op.kind === OpKind.ListEnd) {\n            throw new Error(`AssertionError: illegal operation on list head or tail`);\n        }\n    }\n}\n\nclass SlotHandle {\n    constructor() {\n        this.slot = null;\n    }\n}\n\n/**\n * The set of OpKinds that represent the creation of an element or container\n */\nconst elementContainerOpKinds = new Set([\n    OpKind.Element, OpKind.ElementStart, OpKind.Container, OpKind.ContainerStart, OpKind.Template,\n    OpKind.RepeaterCreate\n]);\n/**\n * Checks whether the given operation represents the creation of an element or container.\n */\nfunction isElementOrContainerOp(op) {\n    return elementContainerOpKinds.has(op.kind);\n}\n/**\n * Create an `ElementStartOp`.\n */\nfunction createElementStartOp(tag, xref, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {\n    return {\n        kind: OpKind.ElementStart,\n        xref,\n        tag,\n        handle: new SlotHandle(),\n        attributes: null,\n        localRefs: [],\n        nonBindable: false,\n        namespace,\n        i18nPlaceholder,\n        startSourceSpan,\n        wholeSourceSpan,\n        ...TRAIT_CONSUMES_SLOT,\n        ...NEW_OP,\n    };\n}\n/**\n * Create a `TemplateOp`.\n */\nfunction createTemplateOp(xref, templateKind, tag, functionNameSuffix, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {\n    return {\n        kind: OpKind.Template,\n        xref,\n        templateKind,\n        attributes: null,\n        tag,\n        handle: new SlotHandle(),\n        functionNameSuffix,\n        decls: null,\n        vars: null,\n        localRefs: [],\n        nonBindable: false,\n        namespace,\n        i18nPlaceholder,\n        startSourceSpan,\n        wholeSourceSpan,\n        ...TRAIT_CONSUMES_SLOT,\n        ...NEW_OP,\n    };\n}\nfunction createRepeaterCreateOp(primaryView, emptyView, tag, track, varNames, emptyTag, i18nPlaceholder, emptyI18nPlaceholder, startSourceSpan, wholeSourceSpan) {\n    return {\n        kind: OpKind.RepeaterCreate,\n        attributes: null,\n        xref: primaryView,\n        handle: new SlotHandle(),\n        emptyView,\n        track,\n        trackByFn: null,\n        tag,\n        emptyTag,\n        emptyAttributes: null,\n        functionNameSuffix: 'For',\n        namespace: Namespace.HTML,\n        nonBindable: false,\n        localRefs: [],\n        decls: null,\n        vars: null,\n        varNames,\n        usesComponentInstance: false,\n        i18nPlaceholder,\n        emptyI18nPlaceholder,\n        startSourceSpan,\n        wholeSourceSpan,\n        ...TRAIT_CONSUMES_SLOT,\n        ...NEW_OP,\n        ...TRAIT_CONSUMES_VARS,\n        numSlotsUsed: emptyView === null ? 2 : 3,\n    };\n}\n/**\n * Create an `ElementEndOp`.\n */\nfunction createElementEndOp(xref, sourceSpan) {\n    return {\n        kind: OpKind.ElementEnd,\n        xref,\n        sourceSpan,\n        ...NEW_OP,\n    };\n}\nfunction createDisableBindingsOp(xref) {\n    return {\n        kind: OpKind.DisableBindings,\n        xref,\n        ...NEW_OP,\n    };\n}\nfunction createEnableBindingsOp(xref) {\n    return {\n        kind: OpKind.EnableBindings,\n        xref,\n        ...NEW_OP,\n    };\n}\n/**\n * Create a `TextOp`.\n */\nfunction createTextOp(xref, initialValue, icuPlaceholder, sourceSpan) {\n    return {\n        kind: OpKind.Text,\n        xref,\n        handle: new SlotHandle(),\n        initialValue,\n        icuPlaceholder,\n        sourceSpan,\n        ...TRAIT_CONSUMES_SLOT,\n        ...NEW_OP,\n    };\n}\n/**\n * Create a `ListenerOp`. Host bindings reuse all the listener logic.\n */\nfunction createListenerOp(target, targetSlot, name, tag, handlerOps, animationPhase, eventTarget, hostListener, sourceSpan) {\n    const handlerList = new OpList();\n    handlerList.push(handlerOps);\n    return {\n        kind: OpKind.Listener,\n        target,\n        targetSlot,\n        tag,\n        hostListener,\n        name,\n        handlerOps: handlerList,\n        handlerFnName: null,\n        consumesDollarEvent: false,\n        isAnimationListener: animationPhase !== null,\n        animationPhase,\n        eventTarget,\n        sourceSpan,\n        ...NEW_OP,\n    };\n}\nfunction createPipeOp(xref, slot, name) {\n    return {\n        kind: OpKind.Pipe,\n        xref,\n        handle: slot,\n        name,\n        ...NEW_OP,\n        ...TRAIT_CONSUMES_SLOT,\n    };\n}\nfunction createNamespaceOp(namespace) {\n    return {\n        kind: OpKind.Namespace,\n        active: namespace,\n        ...NEW_OP,\n    };\n}\nfunction createProjectionDefOp(def) {\n    return {\n        kind: OpKind.ProjectionDef,\n        def,\n        ...NEW_OP,\n    };\n}\nfunction createProjectionOp(xref, selector, i18nPlaceholder, sourceSpan) {\n    return {\n        kind: OpKind.Projection,\n        xref,\n        handle: new SlotHandle(),\n        selector,\n        i18nPlaceholder,\n        projectionSlotIndex: 0,\n        attributes: null,\n        localRefs: [],\n        sourceSpan,\n        ...NEW_OP,\n        ...TRAIT_CONSUMES_SLOT,\n    };\n}\n/**\n * Create an `ExtractedAttributeOp`.\n */\nfunction createExtractedAttributeOp(target, bindingKind, namespace, name, expression, i18nContext, i18nMessage, securityContext) {\n    return {\n        kind: OpKind.ExtractedAttribute,\n        target,\n        bindingKind,\n        namespace,\n        name,\n        expression,\n        i18nContext,\n        i18nMessage,\n        securityContext,\n        trustedValueFn: null,\n        ...NEW_OP,\n    };\n}\nfunction createDeferOp(xref, main, mainSlot, metadata, sourceSpan) {\n    return {\n        kind: OpKind.Defer,\n        xref,\n        handle: new SlotHandle(),\n        mainView: main,\n        mainSlot,\n        loadingView: null,\n        loadingSlot: null,\n        loadingConfig: null,\n        loadingMinimumTime: null,\n        loadingAfterTime: null,\n        placeholderView: null,\n        placeholderSlot: null,\n        placeholderConfig: null,\n        placeholderMinimumTime: null,\n        errorView: null,\n        errorSlot: null,\n        metadata,\n        resolverFn: null,\n        sourceSpan,\n        ...NEW_OP,\n        ...TRAIT_CONSUMES_SLOT,\n        numSlotsUsed: 2,\n    };\n}\nfunction createDeferOnOp(defer, trigger, prefetch, sourceSpan) {\n    return {\n        kind: OpKind.DeferOn,\n        defer,\n        trigger,\n        prefetch,\n        sourceSpan,\n        ...NEW_OP,\n    };\n}\n/**\n * Create an `ExtractedMessageOp`.\n */\nfunction createI18nMessageOp(xref, i18nContext, i18nBlock, message, messagePlaceholder, params, postprocessingParams, needsPostprocessing) {\n    return {\n        kind: OpKind.I18nMessage,\n        xref,\n        i18nContext,\n        i18nBlock,\n        message,\n        messagePlaceholder,\n        params,\n        postprocessingParams,\n        needsPostprocessing,\n        subMessages: [],\n        ...NEW_OP,\n    };\n}\n/**\n * Create an `I18nStartOp`.\n */\nfunction createI18nStartOp(xref, message, root, sourceSpan) {\n    return {\n        kind: OpKind.I18nStart,\n        xref,\n        handle: new SlotHandle(),\n        root: root ?? xref,\n        message,\n        messageIndex: null,\n        subTemplateIndex: null,\n        context: null,\n        sourceSpan,\n        ...NEW_OP,\n        ...TRAIT_CONSUMES_SLOT,\n    };\n}\n/**\n * Create an `I18nEndOp`.\n */\nfunction createI18nEndOp(xref, sourceSpan) {\n    return {\n        kind: OpKind.I18nEnd,\n        xref,\n        sourceSpan,\n        ...NEW_OP,\n    };\n}\n/**\n * Creates an ICU start op.\n */\nfunction createIcuStartOp(xref, message, messagePlaceholder, sourceSpan) {\n    return {\n        kind: OpKind.IcuStart,\n        xref,\n        message,\n        messagePlaceholder,\n        context: null,\n        sourceSpan,\n        ...NEW_OP,\n    };\n}\n/**\n * Creates an ICU end op.\n */\nfunction createIcuEndOp(xref) {\n    return {\n        kind: OpKind.IcuEnd,\n        xref,\n        ...NEW_OP,\n    };\n}\n/**\n * Creates an ICU placeholder op.\n */\nfunction createIcuPlaceholderOp(xref, name, strings) {\n    return {\n        kind: OpKind.IcuPlaceholder,\n        xref,\n        name,\n        strings,\n        expressionPlaceholders: [],\n        ...NEW_OP,\n    };\n}\nfunction createI18nContextOp(contextKind, xref, i18nBlock, message, sourceSpan) {\n    if (i18nBlock === null && contextKind !== I18nContextKind.Attr) {\n        throw new Error('AssertionError: i18nBlock must be provided for non-attribute contexts.');\n    }\n    return {\n        kind: OpKind.I18nContext,\n        contextKind,\n        xref,\n        i18nBlock,\n        message,\n        sourceSpan,\n        params: new Map(),\n        postprocessingParams: new Map(),\n        ...NEW_OP,\n    };\n}\nfunction createI18nAttributesOp(xref, handle, target) {\n    return {\n        kind: OpKind.I18nAttributes,\n        xref,\n        handle,\n        target,\n        i18nAttributesConfig: null,\n        ...NEW_OP,\n        ...TRAIT_CONSUMES_SLOT,\n    };\n}\nfunction literalOrArrayLiteral$1(value) {\n    if (Array.isArray(value)) {\n        return literalArr(value.map(literalOrArrayLiteral$1));\n    }\n    return literal(value, INFERRED_TYPE);\n}\n\nfunction createHostPropertyOp(name, expression, isAnimationTrigger, i18nContext, securityContext, sourceSpan) {\n    return {\n        kind: OpKind.HostProperty,\n        name,\n        expression,\n        isAnimationTrigger,\n        i18nContext,\n        securityContext,\n        sanitizer: null,\n        sourceSpan,\n        ...TRAIT_CONSUMES_VARS,\n        ...NEW_OP,\n    };\n}\n\n/**\n * When referenced in the template's context parameters, this indicates a reference to the entire\n * context object, rather than a specific parameter.\n */\nconst CTX_REF = 'CTX_REF_MARKER';\n\nvar CompilationJobKind;\n(function (CompilationJobKind) {\n    CompilationJobKind[CompilationJobKind[\"Tmpl\"] = 0] = \"Tmpl\";\n    CompilationJobKind[CompilationJobKind[\"Host\"] = 1] = \"Host\";\n    CompilationJobKind[CompilationJobKind[\"Both\"] = 2] = \"Both\";\n})(CompilationJobKind || (CompilationJobKind = {}));\n/**\n * An entire ongoing compilation, which will result in one or more template functions when complete.\n * Contains one or more corresponding compilation units.\n */\nclass CompilationJob {\n    constructor(componentName, pool, compatibility) {\n        this.componentName = componentName;\n        this.pool = pool;\n        this.compatibility = compatibility;\n        this.kind = CompilationJobKind.Both;\n        /**\n         * Tracks the next `ir.XrefId` which can be assigned as template structures are ingested.\n         */\n        this.nextXrefId = 0;\n    }\n    /**\n     * Generate a new unique `ir.XrefId` in this job.\n     */\n    allocateXrefId() {\n        return this.nextXrefId++;\n    }\n}\n/**\n * Compilation-in-progress of a whole component's template, including the main template and any\n * embedded views or host bindings.\n */\nclass ComponentCompilationJob extends CompilationJob {\n    constructor(componentName, pool, compatibility, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta) {\n        super(componentName, pool, compatibility);\n        this.relativeContextFilePath = relativeContextFilePath;\n        this.i18nUseExternalIds = i18nUseExternalIds;\n        this.deferBlocksMeta = deferBlocksMeta;\n        this.kind = CompilationJobKind.Tmpl;\n        this.fnSuffix = 'Template';\n        this.views = new Map();\n        /**\n         * Causes ngContentSelectors to be emitted, for content projection slots in the view. Possibly a\n         * reference into the constant pool.\n         */\n        this.contentSelectors = null;\n        /**\n         * Constant expressions used by operations within this component's compilation.\n         *\n         * This will eventually become the `consts` array in the component definition.\n         */\n        this.consts = [];\n        /**\n         * Initialization statements needed to set up the consts.\n         */\n        this.constsInitializers = [];\n        this.root = new ViewCompilationUnit(this, this.allocateXrefId(), null);\n        this.views.set(this.root.xref, this.root);\n    }\n    /**\n     * Add a `ViewCompilation` for a new embedded view to this compilation.\n     */\n    allocateView(parent) {\n        const view = new ViewCompilationUnit(this, this.allocateXrefId(), parent);\n        this.views.set(view.xref, view);\n        return view;\n    }\n    get units() {\n        return this.views.values();\n    }\n    /**\n     * Add a constant `o.Expression` to the compilation and return its index in the `consts` array.\n     */\n    addConst(newConst, initializers) {\n        for (let idx = 0; idx < this.consts.length; idx++) {\n            if (this.consts[idx].isEquivalent(newConst)) {\n                return idx;\n            }\n        }\n        const idx = this.consts.length;\n        this.consts.push(newConst);\n        if (initializers) {\n            this.constsInitializers.push(...initializers);\n        }\n        return idx;\n    }\n}\n/**\n * A compilation unit is compiled into a template function. Some example units are views and host\n * bindings.\n */\nclass CompilationUnit {\n    constructor(xref) {\n        this.xref = xref;\n        /**\n         * List of creation operations for this view.\n         *\n         * Creation operations may internally contain other operations, including update operations.\n         */\n        this.create = new OpList();\n        /**\n         * List of update operations for this view.\n         */\n        this.update = new OpList();\n        /**\n         * Name of the function which will be generated for this unit.\n         *\n         * May be `null` if not yet determined.\n         */\n        this.fnName = null;\n        /**\n         * Number of variable slots used within this view, or `null` if variables have not yet been\n         * counted.\n         */\n        this.vars = null;\n    }\n    /**\n     * Iterate over all `ir.Op`s within this view.\n     *\n     * Some operations may have child operations, which this iterator will visit.\n     */\n    *ops() {\n        for (const op of this.create) {\n            yield op;\n            if (op.kind === OpKind.Listener) {\n                for (const listenerOp of op.handlerOps) {\n                    yield listenerOp;\n                }\n            }\n        }\n        for (const op of this.update) {\n            yield op;\n        }\n    }\n}\n/**\n * Compilation-in-progress of an individual view within a template.\n */\nclass ViewCompilationUnit extends CompilationUnit {\n    constructor(job, xref, parent) {\n        super(xref);\n        this.job = job;\n        this.parent = parent;\n        /**\n         * Map of declared variables available within this view to the property on the context object\n         * which they alias.\n         */\n        this.contextVariables = new Map();\n        /**\n         * Set of aliases available within this view. An alias is a variable whose provided expression is\n         * inlined at every location it is used. It may also depend on context variables, by name.\n         */\n        this.aliases = new Set();\n        /**\n         * Number of declaration slots used within this view, or `null` if slots have not yet been\n         * allocated.\n         */\n        this.decls = null;\n    }\n}\n/**\n * Compilation-in-progress of a host binding, which contains a single unit for that host binding.\n */\nclass HostBindingCompilationJob extends CompilationJob {\n    constructor(componentName, pool, compatibility) {\n        super(componentName, pool, compatibility);\n        this.kind = CompilationJobKind.Host;\n        this.fnSuffix = 'HostBindings';\n        this.root = new HostBindingCompilationUnit(this);\n    }\n    get units() {\n        return [this.root];\n    }\n}\nclass HostBindingCompilationUnit extends CompilationUnit {\n    constructor(job) {\n        super(0);\n        this.job = job;\n        /**\n         * Much like an element can have attributes, so can a host binding function.\n         */\n        this.attributes = null;\n    }\n}\n\n/**\n * Find any function calls to `$any`, excluding `this.$any`, and delete them, since they have no\n * runtime effects.\n */\nfunction deleteAnyCasts(job) {\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            transformExpressionsInOp(op, removeAnys, VisitorContextFlag.None);\n        }\n    }\n}\nfunction removeAnys(e) {\n    if (e instanceof InvokeFunctionExpr && e.fn instanceof LexicalReadExpr &&\n        e.fn.name === '$any') {\n        if (e.args.length !== 1) {\n            throw new Error('The $any builtin function expects exactly one argument.');\n        }\n        return e.args[0];\n    }\n    return e;\n}\n\n/**\n * Adds apply operations after i18n expressions.\n */\nfunction applyI18nExpressions(job) {\n    const i18nContexts = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.I18nContext) {\n                i18nContexts.set(op.xref, op);\n            }\n        }\n    }\n    for (const unit of job.units) {\n        for (const op of unit.update) {\n            // Only add apply after expressions that are not followed by more expressions.\n            if (op.kind === OpKind.I18nExpression && needsApplication(i18nContexts, op)) {\n                // TODO: what should be the source span for the apply op?\n                OpList.insertAfter(createI18nApplyOp(op.i18nOwner, op.handle, null), op);\n            }\n        }\n    }\n}\n/**\n * Checks whether the given expression op needs to be followed with an apply op.\n */\nfunction needsApplication(i18nContexts, op) {\n    // If the next op is not another expression, we need to apply.\n    if (op.next?.kind !== OpKind.I18nExpression) {\n        return true;\n    }\n    const context = i18nContexts.get(op.context);\n    const nextContext = i18nContexts.get(op.next.context);\n    if (context === undefined) {\n        throw new Error('AssertionError: expected an I18nContextOp to exist for the I18nExpressionOp\\'s context');\n    }\n    if (nextContext === undefined) {\n        throw new Error('AssertionError: expected an I18nContextOp to exist for the next I18nExpressionOp\\'s context');\n    }\n    // If the next op is an expression targeting a different i18n block (or different element, in the\n    // case of i18n attributes), we need to apply.\n    // First, handle the case of i18n blocks.\n    if (context.i18nBlock !== null) {\n        // This is a block context. Compare the blocks.\n        if (context.i18nBlock !== nextContext.i18nBlock) {\n            return true;\n        }\n        return false;\n    }\n    // Second, handle the case of i18n attributes.\n    if (op.i18nOwner !== op.next.i18nOwner) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Updates i18n expression ops to target the last slot in their owning i18n block, and moves them\n * after the last update instruction that depends on that slot.\n */\nfunction assignI18nSlotDependencies(job) {\n    for (const unit of job.units) {\n        // The first update op.\n        let updateOp = unit.update.head;\n        // I18n expressions currently being moved during the iteration.\n        let i18nExpressionsInProgress = [];\n        // Non-null  while we are iterating through an i18nStart/i18nEnd pair\n        let state = null;\n        for (const createOp of unit.create) {\n            if (createOp.kind === OpKind.I18nStart) {\n                state = {\n                    blockXref: createOp.xref,\n                    lastSlotConsumer: createOp.xref,\n                };\n            }\n            else if (createOp.kind === OpKind.I18nEnd) {\n                for (const op of i18nExpressionsInProgress) {\n                    op.target = state.lastSlotConsumer;\n                    OpList.insertBefore(op, updateOp);\n                }\n                i18nExpressionsInProgress.length = 0;\n                state = null;\n            }\n            if (hasConsumesSlotTrait(createOp)) {\n                if (state !== null) {\n                    state.lastSlotConsumer = createOp.xref;\n                }\n                while (true) {\n                    if (updateOp.next === null) {\n                        break;\n                    }\n                    if (state !== null && updateOp.kind === OpKind.I18nExpression &&\n                        updateOp.usage === I18nExpressionFor.I18nText &&\n                        updateOp.i18nOwner === state.blockXref) {\n                        const opToRemove = updateOp;\n                        updateOp = updateOp.next;\n                        OpList.remove(opToRemove);\n                        i18nExpressionsInProgress.push(opToRemove);\n                        continue;\n                    }\n                    if (hasDependsOnSlotContextTrait(updateOp) && updateOp.target !== createOp.xref) {\n                        break;\n                    }\n                    updateOp = updateOp.next;\n                }\n            }\n        }\n    }\n}\n\n/**\n * Gets a map of all elements in the given view by their xref id.\n */\nfunction createOpXrefMap(unit) {\n    const map = new Map();\n    for (const op of unit.create) {\n        if (!hasConsumesSlotTrait(op)) {\n            continue;\n        }\n        map.set(op.xref, op);\n        // TODO(dylhunn): `@for` loops with `@empty` blocks need to be special-cased here,\n        // because the slot consumer trait currently only supports one slot per consumer and we\n        // need two. This should be revisited when making the refactors mentioned in:\n        // https://github.com/angular/angular/pull/53620#discussion_r1430918822\n        if (op.kind === OpKind.RepeaterCreate && op.emptyView !== null) {\n            map.set(op.emptyView, op);\n        }\n    }\n    return map;\n}\n\n/**\n * Find all extractable attribute and binding ops, and create ExtractedAttributeOps for them.\n * In cases where no instruction needs to be generated for the attribute or binding, it is removed.\n */\nfunction extractAttributes(job) {\n    for (const unit of job.units) {\n        const elements = createOpXrefMap(unit);\n        for (const op of unit.ops()) {\n            switch (op.kind) {\n                case OpKind.Attribute:\n                    extractAttributeOp(unit, op, elements);\n                    break;\n                case OpKind.Property:\n                    if (!op.isAnimationTrigger) {\n                        let bindingKind;\n                        if (op.i18nMessage !== null && op.templateKind === null) {\n                            // If the binding has an i18n context, it is an i18n attribute, and should have that\n                            // kind in the consts array.\n                            bindingKind = BindingKind.I18n;\n                        }\n                        else if (op.isStructuralTemplateAttribute) {\n                            bindingKind = BindingKind.Template;\n                        }\n                        else {\n                            bindingKind = BindingKind.Property;\n                        }\n                        OpList.insertBefore(\n                        // Deliberaly null i18nMessage value\n                        createExtractedAttributeOp(op.target, bindingKind, null, op.name, /* expression */ null, \n                        /* i18nContext */ null, \n                        /* i18nMessage */ null, op.securityContext), lookupElement$2(elements, op.target));\n                    }\n                    break;\n                case OpKind.StyleProp:\n                case OpKind.ClassProp:\n                    // TODO: Can style or class bindings be i18n attributes?\n                    // The old compiler treated empty style bindings as regular bindings for the purpose of\n                    // directive matching. That behavior is incorrect, but we emulate it in compatibility\n                    // mode.\n                    if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder &&\n                        op.expression instanceof EmptyExpr) {\n                        OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.Property, null, op.name, /* expression */ null, \n                        /* i18nContext */ null, \n                        /* i18nMessage */ null, SecurityContext.STYLE), lookupElement$2(elements, op.target));\n                    }\n                    break;\n                case OpKind.Listener:\n                    if (!op.isAnimationListener) {\n                        const extractedAttributeOp = createExtractedAttributeOp(op.target, BindingKind.Property, null, op.name, /* expression */ null, \n                        /* i18nContext */ null, \n                        /* i18nMessage */ null, SecurityContext.NONE);\n                        if (job.kind === CompilationJobKind.Host) {\n                            if (job.compatibility) {\n                                // TemplateDefinitionBuilder does not extract listener bindings to the const array\n                                // (which is honestly pretty inconsistent).\n                                break;\n                            }\n                            // This attribute will apply to the enclosing host binding compilation unit, so order\n                            // doesn't matter.\n                            unit.create.push(extractedAttributeOp);\n                        }\n                        else {\n                            OpList.insertBefore(extractedAttributeOp, lookupElement$2(elements, op.target));\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n}\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupElement$2(elements, xref) {\n    const el = elements.get(xref);\n    if (el === undefined) {\n        throw new Error('All attributes should have an element-like target.');\n    }\n    return el;\n}\n/**\n * Extracts an attribute binding.\n */\nfunction extractAttributeOp(unit, op, elements) {\n    if (op.expression instanceof Interpolation) {\n        return;\n    }\n    let extractable = op.isTextAttribute || op.expression.isConstant();\n    if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {\n        // TemplateDefinitionBuilder only extracts text attributes. It does not extract attriibute\n        // bindings, even if they are constants.\n        extractable &&= op.isTextAttribute;\n    }\n    if (extractable) {\n        const extractedAttributeOp = createExtractedAttributeOp(op.target, op.isStructuralTemplateAttribute ? BindingKind.Template : BindingKind.Attribute, op.namespace, op.name, op.expression, op.i18nContext, op.i18nMessage, op.securityContext);\n        if (unit.job.kind === CompilationJobKind.Host) {\n            // This attribute will apply to the enclosing host binding compilation unit, so order doesn't\n            // matter.\n            unit.create.push(extractedAttributeOp);\n        }\n        else {\n            const ownerOp = lookupElement$2(elements, op.target);\n            OpList.insertBefore(extractedAttributeOp, ownerOp);\n        }\n        OpList.remove(op);\n    }\n}\n\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupElement$1(elements, xref) {\n    const el = elements.get(xref);\n    if (el === undefined) {\n        throw new Error('All attributes should have an element-like target.');\n    }\n    return el;\n}\nfunction specializeBindings(job) {\n    const elements = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (!isElementOrContainerOp(op)) {\n                continue;\n            }\n            elements.set(op.xref, op);\n        }\n    }\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            if (op.kind !== OpKind.Binding) {\n                continue;\n            }\n            switch (op.bindingKind) {\n                case BindingKind.Attribute:\n                    if (op.name === 'ngNonBindable') {\n                        OpList.remove(op);\n                        const target = lookupElement$1(elements, op.target);\n                        target.nonBindable = true;\n                    }\n                    else {\n                        const [namespace, name] = splitNsName(op.name);\n                        OpList.replace(op, createAttributeOp(op.target, namespace, name, op.expression, op.securityContext, op.isTextAttribute, op.isStructuralTemplateAttribute, op.templateKind, op.i18nMessage, op.sourceSpan));\n                    }\n                    break;\n                case BindingKind.Property:\n                case BindingKind.Animation:\n                    if (job.kind === CompilationJobKind.Host) {\n                        OpList.replace(op, createHostPropertyOp(op.name, op.expression, op.bindingKind === BindingKind.Animation, op.i18nContext, op.securityContext, op.sourceSpan));\n                    }\n                    else {\n                        OpList.replace(op, createPropertyOp(op.target, op.name, op.expression, op.bindingKind === BindingKind.Animation, op.securityContext, op.isStructuralTemplateAttribute, op.templateKind, op.i18nContext, op.i18nMessage, op.sourceSpan));\n                    }\n                    break;\n                case BindingKind.I18n:\n                case BindingKind.ClassName:\n                case BindingKind.StyleProperty:\n                    throw new Error(`Unhandled binding of kind ${BindingKind[op.bindingKind]}`);\n            }\n        }\n    }\n}\n\nconst CHAINABLE = new Set([\n    Identifiers.attribute,\n    Identifiers.classProp,\n    Identifiers.element,\n    Identifiers.elementContainer,\n    Identifiers.elementContainerEnd,\n    Identifiers.elementContainerStart,\n    Identifiers.elementEnd,\n    Identifiers.elementStart,\n    Identifiers.hostProperty,\n    Identifiers.i18nExp,\n    Identifiers.listener,\n    Identifiers.listener,\n    Identifiers.property,\n    Identifiers.styleProp,\n    Identifiers.stylePropInterpolate1,\n    Identifiers.stylePropInterpolate2,\n    Identifiers.stylePropInterpolate3,\n    Identifiers.stylePropInterpolate4,\n    Identifiers.stylePropInterpolate5,\n    Identifiers.stylePropInterpolate6,\n    Identifiers.stylePropInterpolate7,\n    Identifiers.stylePropInterpolate8,\n    Identifiers.stylePropInterpolateV,\n    Identifiers.syntheticHostListener,\n    Identifiers.syntheticHostProperty,\n    Identifiers.templateCreate,\n]);\n/**\n * Post-process a reified view compilation and convert sequential calls to chainable instructions\n * into chain calls.\n *\n * For example, two `elementStart` operations in sequence:\n *\n * ```typescript\n * elementStart(0, 'div');\n * elementStart(1, 'span');\n * ```\n *\n * Can be called as a chain instead:\n *\n * ```typescript\n * elementStart(0, 'div')(1, 'span');\n * ```\n */\nfunction chain(job) {\n    for (const unit of job.units) {\n        chainOperationsInList(unit.create);\n        chainOperationsInList(unit.update);\n    }\n}\nfunction chainOperationsInList(opList) {\n    let chain = null;\n    for (const op of opList) {\n        if (op.kind !== OpKind.Statement || !(op.statement instanceof ExpressionStatement)) {\n            // This type of statement isn't chainable.\n            chain = null;\n            continue;\n        }\n        if (!(op.statement.expr instanceof InvokeFunctionExpr) ||\n            !(op.statement.expr.fn instanceof ExternalExpr)) {\n            // This is a statement, but not an instruction-type call, so not chainable.\n            chain = null;\n            continue;\n        }\n        const instruction = op.statement.expr.fn.value;\n        if (!CHAINABLE.has(instruction)) {\n            // This instruction isn't chainable.\n            chain = null;\n            continue;\n        }\n        // This instruction can be chained. It can either be added on to the previous chain (if\n        // compatible) or it can be the start of a new chain.\n        if (chain !== null && chain.instruction === instruction) {\n            // This instruction can be added onto the previous chain.\n            const expression = chain.expression.callFn(op.statement.expr.args, op.statement.expr.sourceSpan, op.statement.expr.pure);\n            chain.expression = expression;\n            chain.op.statement = expression.toStmt();\n            OpList.remove(op);\n        }\n        else {\n            // Leave this instruction alone for now, but consider it the start of a new chain.\n            chain = {\n                op,\n                instruction,\n                expression: op.statement.expr,\n            };\n        }\n    }\n}\n\n/**\n * Attribute interpolations of the form `[attr.foo]=\"{{foo}}\"\"` should be \"collapsed\" into a plain\n * attribute instruction, instead of an `attributeInterpolate` instruction.\n *\n * (We cannot do this for singleton property interpolations, because `propertyInterpolate`\n * stringifies its expression.)\n *\n * The reification step is also capable of performing this transformation, but doing it early in the\n * pipeline allows other phases to accurately know what instruction will be emitted.\n */\nfunction collapseSingletonInterpolations(job) {\n    for (const unit of job.units) {\n        for (const op of unit.update) {\n            const eligibleOpKind = op.kind === OpKind.Attribute;\n            if (eligibleOpKind && op.expression instanceof Interpolation &&\n                op.expression.strings.length === 2 &&\n                op.expression.strings.every((s) => s === '')) {\n                op.expression = op.expression.expressions[0];\n            }\n        }\n    }\n}\n\n/**\n * Collapse the various conditions of conditional ops (if, switch) into a single test expression.\n */\nfunction generateConditionalExpressions(job) {\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            if (op.kind !== OpKind.Conditional) {\n                continue;\n            }\n            let test;\n            // Any case with a `null` condition is `default`. If one exists, default to it instead.\n            const defaultCase = op.conditions.findIndex((cond) => cond.expr === null);\n            if (defaultCase >= 0) {\n                const slot = op.conditions.splice(defaultCase, 1)[0].targetSlot;\n                test = new SlotLiteralExpr(slot);\n            }\n            else {\n                // By default, a switch evaluates to `-1`, causing no template to be displayed.\n                test = literal(-1);\n            }\n            // Switch expressions assign their main test to a temporary, to avoid re-executing it.\n            let tmp = op.test == null ? null : new AssignTemporaryExpr(op.test, job.allocateXrefId());\n            // For each remaining condition, test whether the temporary satifies the check. (If no temp is\n            // present, just check each expression directly.)\n            for (let i = op.conditions.length - 1; i >= 0; i--) {\n                let conditionalCase = op.conditions[i];\n                if (conditionalCase.expr === null) {\n                    continue;\n                }\n                if (tmp !== null) {\n                    const useTmp = i === 0 ? tmp : new ReadTemporaryExpr(tmp.xref);\n                    conditionalCase.expr =\n                        new BinaryOperatorExpr(BinaryOperator.Identical, useTmp, conditionalCase.expr);\n                }\n                else if (conditionalCase.alias !== null) {\n                    const caseExpressionTemporaryXref = job.allocateXrefId();\n                    conditionalCase.expr =\n                        new AssignTemporaryExpr(conditionalCase.expr, caseExpressionTemporaryXref);\n                    op.contextValue = new ReadTemporaryExpr(caseExpressionTemporaryXref);\n                }\n                test = new ConditionalExpr(conditionalCase.expr, new SlotLiteralExpr(conditionalCase.targetSlot), test);\n            }\n            // Save the resulting aggregate Joost-expression.\n            op.processed = test;\n            // Clear the original conditions array, since we no longer need it, and don't want it to\n            // affect subsequent phases (e.g. pipe creation).\n            op.conditions = [];\n        }\n    }\n}\n\nconst BINARY_OPERATORS = new Map([\n    ['&&', BinaryOperator.And],\n    ['>', BinaryOperator.Bigger],\n    ['>=', BinaryOperator.BiggerEquals],\n    ['|', BinaryOperator.BitwiseOr],\n    ['&', BinaryOperator.BitwiseAnd],\n    ['/', BinaryOperator.Divide],\n    ['==', BinaryOperator.Equals],\n    ['===', BinaryOperator.Identical],\n    ['<', BinaryOperator.Lower],\n    ['<=', BinaryOperator.LowerEquals],\n    ['-', BinaryOperator.Minus],\n    ['%', BinaryOperator.Modulo],\n    ['*', BinaryOperator.Multiply],\n    ['!=', BinaryOperator.NotEquals],\n    ['!==', BinaryOperator.NotIdentical],\n    ['??', BinaryOperator.NullishCoalesce],\n    ['||', BinaryOperator.Or],\n    ['+', BinaryOperator.Plus],\n]);\nfunction namespaceForKey(namespacePrefixKey) {\n    const NAMESPACES = new Map([['svg', Namespace.SVG], ['math', Namespace.Math]]);\n    if (namespacePrefixKey === null) {\n        return Namespace.HTML;\n    }\n    return NAMESPACES.get(namespacePrefixKey) ?? Namespace.HTML;\n}\nfunction keyForNamespace(namespace) {\n    const NAMESPACES = new Map([['svg', Namespace.SVG], ['math', Namespace.Math]]);\n    for (const [k, n] of NAMESPACES.entries()) {\n        if (n === namespace) {\n            return k;\n        }\n    }\n    return null; // No namespace prefix for HTML\n}\nfunction prefixWithNamespace(strippedTag, namespace) {\n    if (namespace === Namespace.HTML) {\n        return strippedTag;\n    }\n    return `:${keyForNamespace(namespace)}:${strippedTag}`;\n}\nfunction literalOrArrayLiteral(value) {\n    if (Array.isArray(value)) {\n        return literalArr(value.map(literalOrArrayLiteral));\n    }\n    return literal(value);\n}\n\n/**\n * Converts the semantic attributes of element-like operations (elements, templates) into constant\n * array expressions, and lifts them into the overall component `consts`.\n */\nfunction collectElementConsts(job) {\n    // Collect all extracted attributes.\n    const allElementAttributes = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.ExtractedAttribute) {\n                const attributes = allElementAttributes.get(op.target) || new ElementAttributes(job.compatibility);\n                allElementAttributes.set(op.target, attributes);\n                attributes.add(op.bindingKind, op.name, op.expression, op.namespace, op.trustedValueFn);\n                OpList.remove(op);\n            }\n        }\n    }\n    // Serialize the extracted attributes into the const array.\n    if (job instanceof ComponentCompilationJob) {\n        for (const unit of job.units) {\n            for (const op of unit.create) {\n                // TODO: Simplify and combine these cases.\n                if (op.kind == OpKind.Projection) {\n                    const attributes = allElementAttributes.get(op.xref);\n                    if (attributes !== undefined) {\n                        const attrArray = serializeAttributes(attributes);\n                        if (attrArray.entries.length > 0) {\n                            op.attributes = attrArray;\n                        }\n                    }\n                }\n                else if (isElementOrContainerOp(op)) {\n                    op.attributes = getConstIndex(job, allElementAttributes, op.xref);\n                    // TODO(dylhunn): `@for` loops with `@empty` blocks need to be special-cased here,\n                    // because the slot consumer trait currently only supports one slot per consumer and we\n                    // need two. This should be revisited when making the refactors mentioned in:\n                    // https://github.com/angular/angular/pull/53620#discussion_r1430918822\n                    if (op.kind === OpKind.RepeaterCreate && op.emptyView !== null) {\n                        op.emptyAttributes = getConstIndex(job, allElementAttributes, op.emptyView);\n                    }\n                }\n            }\n        }\n    }\n    else if (job instanceof HostBindingCompilationJob) {\n        // TODO: If the host binding case further diverges, we may want to split it into its own\n        // phase.\n        for (const [xref, attributes] of allElementAttributes.entries()) {\n            if (xref !== job.root.xref) {\n                throw new Error(`An attribute would be const collected into the host binding's template function, but is not associated with the root xref.`);\n            }\n            const attrArray = serializeAttributes(attributes);\n            if (attrArray.entries.length > 0) {\n                job.root.attributes = attrArray;\n            }\n        }\n    }\n}\nfunction getConstIndex(job, allElementAttributes, xref) {\n    const attributes = allElementAttributes.get(xref);\n    if (attributes !== undefined) {\n        const attrArray = serializeAttributes(attributes);\n        if (attrArray.entries.length > 0) {\n            return job.addConst(attrArray);\n        }\n    }\n    return null;\n}\n/**\n * Shared instance of an empty array to avoid unnecessary array allocations.\n */\nconst FLYWEIGHT_ARRAY = Object.freeze([]);\n/**\n * Container for all of the various kinds of attributes which are applied on an element.\n */\nclass ElementAttributes {\n    get attributes() {\n        return this.byKind.get(BindingKind.Attribute) ?? FLYWEIGHT_ARRAY;\n    }\n    get classes() {\n        return this.byKind.get(BindingKind.ClassName) ?? FLYWEIGHT_ARRAY;\n    }\n    get styles() {\n        return this.byKind.get(BindingKind.StyleProperty) ?? FLYWEIGHT_ARRAY;\n    }\n    get bindings() {\n        return this.byKind.get(BindingKind.Property) ?? FLYWEIGHT_ARRAY;\n    }\n    get template() {\n        return this.byKind.get(BindingKind.Template) ?? FLYWEIGHT_ARRAY;\n    }\n    get i18n() {\n        return this.byKind.get(BindingKind.I18n) ?? FLYWEIGHT_ARRAY;\n    }\n    constructor(compatibility) {\n        this.compatibility = compatibility;\n        this.known = new Map();\n        this.byKind = new Map;\n        this.projectAs = null;\n    }\n    isKnown(kind, name, value) {\n        const nameToValue = this.known.get(kind) ?? new Set();\n        this.known.set(kind, nameToValue);\n        if (nameToValue.has(name)) {\n            return true;\n        }\n        nameToValue.add(name);\n        return false;\n    }\n    add(kind, name, value, namespace, trustedValueFn) {\n        // TemplateDefinitionBuilder puts duplicate attribute, class, and style values into the consts\n        // array. This seems inefficient, we can probably keep just the first one or the last value\n        // (whichever actually gets applied when multiple values are listed for the same attribute).\n        const allowDuplicates = this.compatibility === CompatibilityMode.TemplateDefinitionBuilder &&\n            (kind === BindingKind.Attribute || kind === BindingKind.ClassName ||\n                kind === BindingKind.StyleProperty);\n        if (!allowDuplicates && this.isKnown(kind, name, value)) {\n            return;\n        }\n        // TODO: Can this be its own phase\n        if (name === 'ngProjectAs') {\n            if (value === null || !(value instanceof LiteralExpr) || (value.value == null) ||\n                (typeof value.value?.toString() !== 'string')) {\n                throw Error('ngProjectAs must have a string literal value');\n            }\n            this.projectAs = value.value.toString();\n            // TODO: TemplateDefinitionBuilder allows `ngProjectAs` to also be assigned as a literal\n            // attribute. Is this sane?\n        }\n        const array = this.arrayFor(kind);\n        array.push(...getAttributeNameLiterals$1(namespace, name));\n        if (kind === BindingKind.Attribute || kind === BindingKind.StyleProperty) {\n            if (value === null) {\n                throw Error('Attribute, i18n attribute, & style element attributes must have a value');\n            }\n            if (trustedValueFn !== null) {\n                if (!isStringLiteral(value)) {\n                    throw Error('AssertionError: extracted attribute value should be string literal');\n                }\n                array.push(taggedTemplate(trustedValueFn, new TemplateLiteral([new TemplateLiteralElement(value.value)], []), undefined, value.sourceSpan));\n            }\n            else {\n                array.push(value);\n            }\n        }\n    }\n    arrayFor(kind) {\n        if (!this.byKind.has(kind)) {\n            this.byKind.set(kind, []);\n        }\n        return this.byKind.get(kind);\n    }\n}\n/**\n * Gets an array of literal expressions representing the attribute's namespaced name.\n */\nfunction getAttributeNameLiterals$1(namespace, name) {\n    const nameLiteral = literal(name);\n    if (namespace) {\n        return [literal(0 /* core.AttributeMarker.NamespaceURI */), literal(namespace), nameLiteral];\n    }\n    return [nameLiteral];\n}\n/**\n * Serializes an ElementAttributes object into an array expression.\n */\nfunction serializeAttributes({ attributes, bindings, classes, i18n, projectAs, styles, template }) {\n    const attrArray = [...attributes];\n    if (projectAs !== null) {\n        // Parse the attribute value into a CssSelectorList. Note that we only take the\n        // first selector, because we don't support multiple selectors in ngProjectAs.\n        const parsedR3Selector = parseSelectorToR3Selector(projectAs)[0];\n        attrArray.push(literal(5 /* core.AttributeMarker.ProjectAs */), literalOrArrayLiteral(parsedR3Selector));\n    }\n    if (classes.length > 0) {\n        attrArray.push(literal(1 /* core.AttributeMarker.Classes */), ...classes);\n    }\n    if (styles.length > 0) {\n        attrArray.push(literal(2 /* core.AttributeMarker.Styles */), ...styles);\n    }\n    if (bindings.length > 0) {\n        attrArray.push(literal(3 /* core.AttributeMarker.Bindings */), ...bindings);\n    }\n    if (template.length > 0) {\n        attrArray.push(literal(4 /* core.AttributeMarker.Template */), ...template);\n    }\n    if (i18n.length > 0) {\n        attrArray.push(literal(6 /* core.AttributeMarker.I18n */), ...i18n);\n    }\n    return literalArr(attrArray);\n}\n\n/**\n * Some binding instructions in the update block may actually correspond to i18n bindings. In that\n * case, they should be replaced with i18nExp instructions for the dynamic portions.\n */\nfunction convertI18nBindings(job) {\n    const i18nAttributesByElem = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.I18nAttributes) {\n                i18nAttributesByElem.set(op.target, op);\n            }\n        }\n        for (const op of unit.update) {\n            switch (op.kind) {\n                case OpKind.Property:\n                case OpKind.Attribute:\n                    if (op.i18nContext === null) {\n                        continue;\n                    }\n                    if (!(op.expression instanceof Interpolation)) {\n                        continue;\n                    }\n                    const i18nAttributesForElem = i18nAttributesByElem.get(op.target);\n                    if (i18nAttributesForElem === undefined) {\n                        throw new Error('AssertionError: An i18n attribute binding instruction requires the owning element to have an I18nAttributes create instruction');\n                    }\n                    if (i18nAttributesForElem.target !== op.target) {\n                        throw new Error('AssertionError: Expected i18nAttributes target element to match binding target element');\n                    }\n                    const ops = [];\n                    for (let i = 0; i < op.expression.expressions.length; i++) {\n                        const expr = op.expression.expressions[i];\n                        if (op.expression.i18nPlaceholders.length !== op.expression.expressions.length) {\n                            throw new Error(`AssertionError: An i18n attribute binding instruction requires the same number of expressions and placeholders, but found ${op.expression.i18nPlaceholders.length} placeholders and ${op.expression.expressions.length} expressions`);\n                        }\n                        ops.push(createI18nExpressionOp(op.i18nContext, i18nAttributesForElem.target, i18nAttributesForElem.xref, i18nAttributesForElem.handle, expr, null, op.expression.i18nPlaceholders[i], I18nParamResolutionTime.Creation, I18nExpressionFor.I18nAttribute, op.name, op.sourceSpan));\n                    }\n                    OpList.replaceWithMany(op, ops);\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * Create extracted deps functions for defer ops.\n */\nfunction createDeferDepsFns(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.Defer) {\n                if (op.metadata.deps.length === 0) {\n                    continue;\n                }\n                const dependencies = [];\n                for (const dep of op.metadata.deps) {\n                    if (dep.isDeferrable) {\n                        // Callback function, e.g. `m () => m.MyCmp;`.\n                        const innerFn = arrowFn([new FnParam('m', DYNAMIC_TYPE)], variable('m').prop(dep.symbolName));\n                        // Dynamic import, e.g. `import('./a').then(...)`.\n                        const importExpr = (new DynamicImportExpr(dep.importPath)).prop('then').callFn([innerFn]);\n                        dependencies.push(importExpr);\n                    }\n                    else {\n                        // Non-deferrable symbol, just use a reference to the type.\n                        dependencies.push(dep.type);\n                    }\n                }\n                const depsFnExpr = arrowFn([], literalArr(dependencies));\n                if (op.handle.slot === null) {\n                    throw new Error('AssertionError: slot must be assigned bfore extracting defer deps functions');\n                }\n                op.resolverFn = job.pool.getSharedFunctionReference(depsFnExpr, `${job.componentName}_Defer_${op.handle.slot}_DepsFn`, \n                /* Don't use unique names for TDB compatibility */ false);\n            }\n        }\n    }\n}\n\n/**\n * Create one helper context op per i18n block (including generate descending blocks).\n *\n * Also, if an ICU exists inside an i18n block that also contains other localizable content (such as\n * string), create an additional helper context op for the ICU.\n *\n * These context ops are later used for generating i18n messages. (Although we generate at least one\n * context op per nested view, we will collect them up the tree later, to generate a top-level\n * message.)\n */\nfunction createI18nContexts(job) {\n    // Create i18n context ops for i18n attrs.\n    const attrContextByMessage = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            switch (op.kind) {\n                case OpKind.Binding:\n                case OpKind.Property:\n                case OpKind.Attribute:\n                case OpKind.ExtractedAttribute:\n                    if (op.i18nMessage === null) {\n                        continue;\n                    }\n                    if (!attrContextByMessage.has(op.i18nMessage)) {\n                        const i18nContext = createI18nContextOp(I18nContextKind.Attr, job.allocateXrefId(), null, op.i18nMessage, null);\n                        unit.create.push(i18nContext);\n                        attrContextByMessage.set(op.i18nMessage, i18nContext.xref);\n                    }\n                    op.i18nContext = attrContextByMessage.get(op.i18nMessage);\n                    break;\n            }\n        }\n    }\n    // Create i18n context ops for root i18n blocks.\n    const blockContextByI18nBlock = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nStart:\n                    if (op.xref === op.root) {\n                        const contextOp = createI18nContextOp(I18nContextKind.RootI18n, job.allocateXrefId(), op.xref, op.message, null);\n                        unit.create.push(contextOp);\n                        op.context = contextOp.xref;\n                        blockContextByI18nBlock.set(op.xref, contextOp);\n                    }\n                    break;\n            }\n        }\n    }\n    // Assign i18n contexts for child i18n blocks. These don't need their own conext, instead they\n    // should inherit from their root i18n block.\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.I18nStart && op.xref !== op.root) {\n                const rootContext = blockContextByI18nBlock.get(op.root);\n                if (rootContext === undefined) {\n                    throw Error('AssertionError: Root i18n block i18n context should have been created.');\n                }\n                op.context = rootContext.xref;\n                blockContextByI18nBlock.set(op.xref, rootContext);\n            }\n        }\n    }\n    // Create or assign i18n contexts for ICUs.\n    let currentI18nOp = null;\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nStart:\n                    currentI18nOp = op;\n                    break;\n                case OpKind.I18nEnd:\n                    currentI18nOp = null;\n                    break;\n                case OpKind.IcuStart:\n                    if (currentI18nOp === null) {\n                        throw Error('AssertionError: Unexpected ICU outside of an i18n block.');\n                    }\n                    if (op.message.id !== currentI18nOp.message.id) {\n                        // This ICU is a sub-message inside its parent i18n block message. We need to give it\n                        // its own context.\n                        const contextOp = createI18nContextOp(I18nContextKind.Icu, job.allocateXrefId(), currentI18nOp.xref, op.message, null);\n                        unit.create.push(contextOp);\n                        op.context = contextOp.xref;\n                    }\n                    else {\n                        // This ICU is the only translatable content in its parent i18n block. We need to\n                        // convert the parent's context into an ICU context.\n                        op.context = currentI18nOp.context;\n                        blockContextByI18nBlock.get(currentI18nOp.xref).contextKind = I18nContextKind.Icu;\n                    }\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * Deduplicate text bindings, e.g. <div class=\"cls1\" class=\"cls2\">\n */\nfunction deduplicateTextBindings(job) {\n    const seen = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.update.reversed()) {\n            if (op.kind === OpKind.Binding && op.isTextAttribute) {\n                const seenForElement = seen.get(op.target) || new Set();\n                if (seenForElement.has(op.name)) {\n                    if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {\n                        // For most duplicated attributes, TemplateDefinitionBuilder lists all of the values in\n                        // the consts array. However, for style and class attributes it only keeps the last one.\n                        // We replicate that behavior here since it has actual consequences for apps with\n                        // duplicate class or style attrs.\n                        if (op.name === 'style' || op.name === 'class') {\n                            OpList.remove(op);\n                        }\n                    }\n                    else {\n                        // TODO: Determine the correct behavior. It would probably make sense to merge multiple\n                        // style and class attributes. Alternatively we could just throw an error, as HTML\n                        // doesn't permit duplicate attributes.\n                    }\n                }\n                seenForElement.add(op.name);\n                seen.set(op.target, seenForElement);\n            }\n        }\n    }\n}\n\n/**\n * Defer instructions take a configuration array, which should be collected into the component\n * consts. This phase finds the config options, and creates the corresponding const array.\n */\nfunction configureDeferInstructions(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind !== OpKind.Defer) {\n                continue;\n            }\n            if (op.placeholderMinimumTime !== null) {\n                op.placeholderConfig =\n                    new ConstCollectedExpr(literalOrArrayLiteral([op.placeholderMinimumTime]));\n            }\n            if (op.loadingMinimumTime !== null || op.loadingAfterTime !== null) {\n                op.loadingConfig = new ConstCollectedExpr(literalOrArrayLiteral([op.loadingMinimumTime, op.loadingAfterTime]));\n            }\n        }\n    }\n}\n\n/**\n * Some `defer` conditions can reference other elements in the template, using their local reference\n * names. However, the semantics are quite different from the normal local reference system: in\n * particular, we need to look at local reference names in enclosing views. This phase resolves\n * all such references to actual xrefs.\n */\nfunction resolveDeferTargetNames(job) {\n    const scopes = new Map();\n    function getScopeForView(view) {\n        if (scopes.has(view.xref)) {\n            return scopes.get(view.xref);\n        }\n        const scope = new Scope$1();\n        for (const op of view.create) {\n            // add everything that can be referenced.\n            if (!isElementOrContainerOp(op) || op.localRefs === null) {\n                continue;\n            }\n            if (!Array.isArray(op.localRefs)) {\n                throw new Error('LocalRefs were already processed, but were needed to resolve defer targets.');\n            }\n            for (const ref of op.localRefs) {\n                if (ref.target !== '') {\n                    continue;\n                }\n                scope.targets.set(ref.name, { xref: op.xref, slot: op.handle });\n            }\n        }\n        scopes.set(view.xref, scope);\n        return scope;\n    }\n    function resolveTrigger(deferOwnerView, op, placeholderView) {\n        switch (op.trigger.kind) {\n            case DeferTriggerKind.Idle:\n            case DeferTriggerKind.Immediate:\n            case DeferTriggerKind.Timer:\n                return;\n            case DeferTriggerKind.Hover:\n            case DeferTriggerKind.Interaction:\n            case DeferTriggerKind.Viewport:\n                if (op.trigger.targetName === null) {\n                    // A `null` target name indicates we should default to the first element in the\n                    // placeholder block.\n                    if (placeholderView === null) {\n                        throw new Error('defer on trigger with no target name must have a placeholder block');\n                    }\n                    const placeholder = job.views.get(placeholderView);\n                    if (placeholder == undefined) {\n                        throw new Error('AssertionError: could not find placeholder view for defer on trigger');\n                    }\n                    for (const placeholderOp of placeholder.create) {\n                        if (hasConsumesSlotTrait(placeholderOp) &&\n                            (isElementOrContainerOp(placeholderOp) ||\n                                placeholderOp.kind === OpKind.Projection)) {\n                            op.trigger.targetXref = placeholderOp.xref;\n                            op.trigger.targetView = placeholderView;\n                            op.trigger.targetSlotViewSteps = -1;\n                            op.trigger.targetSlot = placeholderOp.handle;\n                            return;\n                        }\n                    }\n                    return;\n                }\n                let view = placeholderView !== null ? job.views.get(placeholderView) : deferOwnerView;\n                let step = placeholderView !== null ? -1 : 0;\n                while (view !== null) {\n                    const scope = getScopeForView(view);\n                    if (scope.targets.has(op.trigger.targetName)) {\n                        const { xref, slot } = scope.targets.get(op.trigger.targetName);\n                        op.trigger.targetXref = xref;\n                        op.trigger.targetView = view.xref;\n                        op.trigger.targetSlotViewSteps = step;\n                        op.trigger.targetSlot = slot;\n                        return;\n                    }\n                    view = view.parent !== null ? job.views.get(view.parent) : null;\n                    step++;\n                }\n                break;\n            default:\n                throw new Error(`Trigger kind ${op.trigger.kind} not handled`);\n        }\n    }\n    // Find the defer ops, and assign the data about their targets.\n    for (const unit of job.units) {\n        const defers = new Map();\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.Defer:\n                    defers.set(op.xref, op);\n                    break;\n                case OpKind.DeferOn:\n                    const deferOp = defers.get(op.defer);\n                    resolveTrigger(unit, op, deferOp.placeholderView);\n                    break;\n            }\n        }\n    }\n}\nclass Scope$1 {\n    constructor() {\n        this.targets = new Map();\n    }\n}\n\nconst REPLACEMENTS = new Map([\n    [OpKind.ElementEnd, [OpKind.ElementStart, OpKind.Element]],\n    [OpKind.ContainerEnd, [OpKind.ContainerStart, OpKind.Container]],\n    [OpKind.I18nEnd, [OpKind.I18nStart, OpKind.I18n]],\n]);\n/**\n * Op kinds that should not prevent merging of start/end ops.\n */\nconst IGNORED_OP_KINDS = new Set([OpKind.Pipe]);\n/**\n * Replace sequences of mergable instructions (e.g. `ElementStart` and `ElementEnd`) with a\n * consolidated instruction (e.g. `Element`).\n */\nfunction collapseEmptyInstructions(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            // Find end ops that may be able to be merged.\n            const opReplacements = REPLACEMENTS.get(op.kind);\n            if (opReplacements === undefined) {\n                continue;\n            }\n            const [startKind, mergedKind] = opReplacements;\n            // Locate the previous (non-ignored) op.\n            let prevOp = op.prev;\n            while (prevOp !== null && IGNORED_OP_KINDS.has(prevOp.kind)) {\n                prevOp = prevOp.prev;\n            }\n            // If the previous op is the corresponding start op, we can megre.\n            if (prevOp !== null && prevOp.kind === startKind) {\n                // Transmute the start instruction to the merged version. This is safe as they're designed\n                // to be identical apart from the `kind`.\n                prevOp.kind = mergedKind;\n                // Remove the end instruction.\n                OpList.remove(op);\n            }\n        }\n    }\n}\n\n/**\n * Safe read expressions such as `a?.b` have different semantics in Angular templates as\n * compared to JavaScript. In particular, they default to `null` instead of `undefined`. This phase\n * finds all unresolved safe read expressions, and converts them into the appropriate output AST\n * reads, guarded by null checks. We generate temporaries as needed, to avoid re-evaluating the same\n * sub-expression multiple times.\n */\nfunction expandSafeReads(job) {\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            transformExpressionsInOp(op, e => safeTransform(e, { job }), VisitorContextFlag.None);\n            transformExpressionsInOp(op, ternaryTransform, VisitorContextFlag.None);\n        }\n    }\n}\n// A lookup set of all the expression kinds that require a temporary variable to be generated.\nconst requiresTemporary = [\n    InvokeFunctionExpr, LiteralArrayExpr, LiteralMapExpr, SafeInvokeFunctionExpr,\n    PipeBindingExpr\n].map(e => e.constructor.name);\nfunction needsTemporaryInSafeAccess(e) {\n    // TODO: We probably want to use an expression visitor to recursively visit all descendents.\n    // However, that would potentially do a lot of extra work (because it cannot short circuit), so we\n    // implement the logic ourselves for now.\n    if (e instanceof UnaryOperatorExpr) {\n        return needsTemporaryInSafeAccess(e.expr);\n    }\n    else if (e instanceof BinaryOperatorExpr) {\n        return needsTemporaryInSafeAccess(e.lhs) || needsTemporaryInSafeAccess(e.rhs);\n    }\n    else if (e instanceof ConditionalExpr) {\n        if (e.falseCase && needsTemporaryInSafeAccess(e.falseCase))\n            return true;\n        return needsTemporaryInSafeAccess(e.condition) || needsTemporaryInSafeAccess(e.trueCase);\n    }\n    else if (e instanceof NotExpr) {\n        return needsTemporaryInSafeAccess(e.condition);\n    }\n    else if (e instanceof AssignTemporaryExpr) {\n        return needsTemporaryInSafeAccess(e.expr);\n    }\n    else if (e instanceof ReadPropExpr) {\n        return needsTemporaryInSafeAccess(e.receiver);\n    }\n    else if (e instanceof ReadKeyExpr) {\n        return needsTemporaryInSafeAccess(e.receiver) || needsTemporaryInSafeAccess(e.index);\n    }\n    // TODO: Switch to a method which is exhaustive of newly added expression subtypes.\n    return e instanceof InvokeFunctionExpr || e instanceof LiteralArrayExpr ||\n        e instanceof LiteralMapExpr || e instanceof SafeInvokeFunctionExpr ||\n        e instanceof PipeBindingExpr;\n}\nfunction temporariesIn(e) {\n    const temporaries = new Set();\n    // TODO: Although it's not currently supported by the transform helper, we should be able to\n    // short-circuit exploring the tree to do less work. In particular, we don't have to penetrate\n    // into the subexpressions of temporary assignments.\n    transformExpressionsInExpression(e, e => {\n        if (e instanceof AssignTemporaryExpr) {\n            temporaries.add(e.xref);\n        }\n        return e;\n    }, VisitorContextFlag.None);\n    return temporaries;\n}\nfunction eliminateTemporaryAssignments(e, tmps, ctx) {\n    // TODO: We can be more efficient than the transform helper here. We don't need to visit any\n    // descendents of temporary assignments.\n    transformExpressionsInExpression(e, e => {\n        if (e instanceof AssignTemporaryExpr && tmps.has(e.xref)) {\n            const read = new ReadTemporaryExpr(e.xref);\n            // `TemplateDefinitionBuilder` has the (accidental?) behavior of generating assignments of\n            // temporary variables to themselves. This happens because some subexpression that the\n            // temporary refers to, possibly through nested temporaries, has a function call. We copy that\n            // behavior here.\n            return ctx.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder ?\n                new AssignTemporaryExpr(read, read.xref) :\n                read;\n        }\n        return e;\n    }, VisitorContextFlag.None);\n    return e;\n}\n/**\n * Creates a safe ternary guarded by the input expression, and with a body generated by the provided\n * callback on the input expression. Generates a temporary variable assignment if needed, and\n * deduplicates nested temporary assignments if needed.\n */\nfunction safeTernaryWithTemporary(guard, body, ctx) {\n    let result;\n    if (needsTemporaryInSafeAccess(guard)) {\n        const xref = ctx.job.allocateXrefId();\n        result = [new AssignTemporaryExpr(guard, xref), new ReadTemporaryExpr(xref)];\n    }\n    else {\n        result = [guard, guard.clone()];\n        // Consider an expression like `a?.[b?.c()]?.d`. The `b?.c()` will be transformed first,\n        // introducing a temporary assignment into the key. Then, as part of expanding the `?.d`. That\n        // assignment will be duplicated into both the guard and expression sides. We de-duplicate it,\n        // by transforming it from an assignment into a read on the expression side.\n        eliminateTemporaryAssignments(result[1], temporariesIn(result[0]), ctx);\n    }\n    return new SafeTernaryExpr(result[0], body(result[1]));\n}\nfunction isSafeAccessExpression(e) {\n    return e instanceof SafePropertyReadExpr || e instanceof SafeKeyedReadExpr ||\n        e instanceof SafeInvokeFunctionExpr;\n}\nfunction isUnsafeAccessExpression(e) {\n    return e instanceof ReadPropExpr || e instanceof ReadKeyExpr ||\n        e instanceof InvokeFunctionExpr;\n}\nfunction isAccessExpression(e) {\n    return isSafeAccessExpression(e) || isUnsafeAccessExpression(e);\n}\nfunction deepestSafeTernary(e) {\n    if (isAccessExpression(e) && e.receiver instanceof SafeTernaryExpr) {\n        let st = e.receiver;\n        while (st.expr instanceof SafeTernaryExpr) {\n            st = st.expr;\n        }\n        return st;\n    }\n    return null;\n}\n// TODO: When strict compatibility with TemplateDefinitionBuilder is not required, we can use `&&`\n// instead to save some code size.\nfunction safeTransform(e, ctx) {\n    if (!isAccessExpression(e)) {\n        return e;\n    }\n    const dst = deepestSafeTernary(e);\n    if (dst) {\n        if (e instanceof InvokeFunctionExpr) {\n            dst.expr = dst.expr.callFn(e.args);\n            return e.receiver;\n        }\n        if (e instanceof ReadPropExpr) {\n            dst.expr = dst.expr.prop(e.name);\n            return e.receiver;\n        }\n        if (e instanceof ReadKeyExpr) {\n            dst.expr = dst.expr.key(e.index);\n            return e.receiver;\n        }\n        if (e instanceof SafeInvokeFunctionExpr) {\n            dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.callFn(e.args), ctx);\n            return e.receiver;\n        }\n        if (e instanceof SafePropertyReadExpr) {\n            dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.prop(e.name), ctx);\n            return e.receiver;\n        }\n        if (e instanceof SafeKeyedReadExpr) {\n            dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.key(e.index), ctx);\n            return e.receiver;\n        }\n    }\n    else {\n        if (e instanceof SafeInvokeFunctionExpr) {\n            return safeTernaryWithTemporary(e.receiver, (r) => r.callFn(e.args), ctx);\n        }\n        if (e instanceof SafePropertyReadExpr) {\n            return safeTernaryWithTemporary(e.receiver, (r) => r.prop(e.name), ctx);\n        }\n        if (e instanceof SafeKeyedReadExpr) {\n            return safeTernaryWithTemporary(e.receiver, (r) => r.key(e.index), ctx);\n        }\n    }\n    return e;\n}\nfunction ternaryTransform(e) {\n    if (!(e instanceof SafeTernaryExpr)) {\n        return e;\n    }\n    return new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.Equals, e.guard, NULL_EXPR), NULL_EXPR, e.expr);\n}\n\n/**\n * The escape sequence used indicate message param values.\n */\nconst ESCAPE$1 = '\\uFFFD';\n/**\n * Marker used to indicate an element tag.\n */\nconst ELEMENT_MARKER = '#';\n/**\n * Marker used to indicate a template tag.\n */\nconst TEMPLATE_MARKER = '*';\n/**\n * Marker used to indicate closing of an element or template tag.\n */\nconst TAG_CLOSE_MARKER = '/';\n/**\n * Marker used to indicate the sub-template context.\n */\nconst CONTEXT_MARKER = ':';\n/**\n * Marker used to indicate the start of a list of values.\n */\nconst LIST_START_MARKER = '[';\n/**\n * Marker used to indicate the end of a list of values.\n */\nconst LIST_END_MARKER = ']';\n/**\n * Delimiter used to separate multiple values in a list.\n */\nconst LIST_DELIMITER = '|';\n/**\n * Formats the param maps on extracted message ops into a maps of `Expression` objects that can be\n * used in the final output.\n */\nfunction extractI18nMessages(job) {\n    // Create an i18n message for each context.\n    // TODO: Merge the context op with the message op since they're 1:1 anyways.\n    const i18nMessagesByContext = new Map();\n    const i18nBlocks = new Map();\n    const i18nContexts = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nContext:\n                    const i18nMessageOp = createI18nMessage(job, op);\n                    unit.create.push(i18nMessageOp);\n                    i18nMessagesByContext.set(op.xref, i18nMessageOp);\n                    i18nContexts.set(op.xref, op);\n                    break;\n                case OpKind.I18nStart:\n                    i18nBlocks.set(op.xref, op);\n                    break;\n            }\n        }\n    }\n    // Associate sub-messages for ICUs with their root message. At this point we can also remove the\n    // ICU start/end ops, as they are no longer needed.\n    let currentIcu = null;\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.IcuStart:\n                    currentIcu = op;\n                    OpList.remove(op);\n                    // Skip any contexts not associated with an ICU.\n                    const icuContext = i18nContexts.get(op.context);\n                    if (icuContext.contextKind !== I18nContextKind.Icu) {\n                        continue;\n                    }\n                    // Skip ICUs that share a context with their i18n message. These represent root-level\n                    // ICUs, not sub-messages.\n                    const i18nBlock = i18nBlocks.get(icuContext.i18nBlock);\n                    if (i18nBlock.context === icuContext.xref) {\n                        continue;\n                    }\n                    // Find the root message and push this ICUs message as a sub-message.\n                    const rootI18nBlock = i18nBlocks.get(i18nBlock.root);\n                    const rootMessage = i18nMessagesByContext.get(rootI18nBlock.context);\n                    if (rootMessage === undefined) {\n                        throw Error('AssertionError: ICU sub-message should belong to a root message.');\n                    }\n                    const subMessage = i18nMessagesByContext.get(icuContext.xref);\n                    subMessage.messagePlaceholder = op.messagePlaceholder;\n                    rootMessage.subMessages.push(subMessage.xref);\n                    break;\n                case OpKind.IcuEnd:\n                    currentIcu = null;\n                    OpList.remove(op);\n                    break;\n                case OpKind.IcuPlaceholder:\n                    // Add ICU placeholders to the message, then remove the ICU placeholder ops.\n                    if (currentIcu === null || currentIcu.context == null) {\n                        throw Error('AssertionError: Unexpected ICU placeholder outside of i18n context');\n                    }\n                    const msg = i18nMessagesByContext.get(currentIcu.context);\n                    msg.postprocessingParams.set(op.name, literal(formatIcuPlaceholder(op)));\n                    OpList.remove(op);\n                    break;\n            }\n        }\n    }\n}\n/**\n * Create an i18n message op from an i18n context op.\n */\nfunction createI18nMessage(job, context, messagePlaceholder) {\n    let formattedParams = formatParams(context.params);\n    const formattedPostprocessingParams = formatParams(context.postprocessingParams);\n    let needsPostprocessing = [...context.params.values()].some(v => v.length > 1);\n    return createI18nMessageOp(job.allocateXrefId(), context.xref, context.i18nBlock, context.message, messagePlaceholder ?? null, formattedParams, formattedPostprocessingParams, needsPostprocessing);\n}\n/**\n * Formats an ICU placeholder into a single string with expression placeholders.\n */\nfunction formatIcuPlaceholder(op) {\n    if (op.strings.length !== op.expressionPlaceholders.length + 1) {\n        throw Error(`AsserionError: Invalid ICU placeholder with ${op.strings.length} strings and ${op.expressionPlaceholders.length} expressions`);\n    }\n    const values = op.expressionPlaceholders.map(formatValue);\n    return op.strings.flatMap((str, i) => [str, values[i] || '']).join('');\n}\n/**\n * Formats a map of `I18nParamValue[]` values into a map of `Expression` values.\n */\nfunction formatParams(params) {\n    const formattedParams = new Map();\n    for (const [placeholder, placeholderValues] of params) {\n        const serializedValues = formatParamValues(placeholderValues);\n        if (serializedValues !== null) {\n            formattedParams.set(placeholder, literal(serializedValues));\n        }\n    }\n    return formattedParams;\n}\n/**\n * Formats an `I18nParamValue[]` into a string (or null for empty array).\n */\nfunction formatParamValues(values) {\n    if (values.length === 0) {\n        return null;\n    }\n    const serializedValues = values.map(value => formatValue(value));\n    return serializedValues.length === 1 ?\n        serializedValues[0] :\n        `${LIST_START_MARKER}${serializedValues.join(LIST_DELIMITER)}${LIST_END_MARKER}`;\n}\n/**\n * Formats a single `I18nParamValue` into a string\n */\nfunction formatValue(value) {\n    // Element tags with a structural directive use a special form that concatenates the element and\n    // template values.\n    if ((value.flags & I18nParamValueFlags.ElementTag) &&\n        (value.flags & I18nParamValueFlags.TemplateTag)) {\n        if (typeof value.value !== 'object') {\n            throw Error('AssertionError: Expected i18n param value to have an element and template slot');\n        }\n        const elementValue = formatValue({\n            ...value,\n            value: value.value.element,\n            flags: value.flags & ~I18nParamValueFlags.TemplateTag\n        });\n        const templateValue = formatValue({\n            ...value,\n            value: value.value.template,\n            flags: value.flags & ~I18nParamValueFlags.ElementTag\n        });\n        // TODO(mmalerba): This is likely a bug in TemplateDefinitionBuilder, we should not need to\n        // record the template value twice. For now I'm re-implementing the behavior here to keep the\n        // output consistent with TemplateDefinitionBuilder.\n        if ((value.flags & I18nParamValueFlags.OpenTag) &&\n            (value.flags & I18nParamValueFlags.CloseTag)) {\n            return `${templateValue}${elementValue}${templateValue}`;\n        }\n        // To match the TemplateDefinitionBuilder output, flip the order depending on whether the\n        // values represent a closing or opening tag (or both).\n        // TODO(mmalerba): Figure out if this makes a difference in terms of either functionality,\n        // or the resulting message ID. If not, we can remove the special-casing in the future.\n        return value.flags & I18nParamValueFlags.CloseTag ? `${elementValue}${templateValue}` :\n            `${templateValue}${elementValue}`;\n    }\n    // Self-closing tags use a special form that concatenates the start and close tag values.\n    if ((value.flags & I18nParamValueFlags.OpenTag) &&\n        (value.flags & I18nParamValueFlags.CloseTag)) {\n        return `${formatValue({ ...value, flags: value.flags & ~I18nParamValueFlags.CloseTag })}${formatValue({ ...value, flags: value.flags & ~I18nParamValueFlags.OpenTag })}`;\n    }\n    // If there are no special flags, just return the raw value.\n    if (value.flags === I18nParamValueFlags.None) {\n        return `${value.value}`;\n    }\n    // Encode the remaining flags as part of the value.\n    let tagMarker = '';\n    let closeMarker = '';\n    if (value.flags & I18nParamValueFlags.ElementTag) {\n        tagMarker = ELEMENT_MARKER;\n    }\n    else if (value.flags & I18nParamValueFlags.TemplateTag) {\n        tagMarker = TEMPLATE_MARKER;\n    }\n    if (tagMarker !== '') {\n        closeMarker = value.flags & I18nParamValueFlags.CloseTag ? TAG_CLOSE_MARKER : '';\n    }\n    const context = value.subTemplateIndex === null ? '' : `${CONTEXT_MARKER}${value.subTemplateIndex}`;\n    return `${ESCAPE$1}${closeMarker}${tagMarker}${value.value}${context}${ESCAPE$1}`;\n}\n\n/**\n * Generate `ir.AdvanceOp`s in between `ir.UpdateOp`s that ensure the runtime's implicit slot\n * context will be advanced correctly.\n */\nfunction generateAdvance(job) {\n    for (const unit of job.units) {\n        // First build a map of all of the declarations in the view that have assigned slots.\n        const slotMap = new Map();\n        for (const op of unit.create) {\n            if (!hasConsumesSlotTrait(op)) {\n                continue;\n            }\n            else if (op.handle.slot === null) {\n                throw new Error(`AssertionError: expected slots to have been allocated before generating advance() calls`);\n            }\n            slotMap.set(op.xref, op.handle.slot);\n        }\n        // Next, step through the update operations and generate `ir.AdvanceOp`s as required to ensure\n        // the runtime's implicit slot counter will be set to the correct slot before executing each\n        // update operation which depends on it.\n        //\n        // To do that, we track what the runtime's slot counter will be through the update operations.\n        let slotContext = 0;\n        for (const op of unit.update) {\n            if (!hasDependsOnSlotContextTrait(op)) {\n                // `op` doesn't depend on the slot counter, so it can be skipped.\n                continue;\n            }\n            else if (!slotMap.has(op.target)) {\n                // We expect ops that _do_ depend on the slot counter to point at declarations that exist in\n                // the `slotMap`.\n                throw new Error(`AssertionError: reference to unknown slot for target ${op.target}`);\n            }\n            const slot = slotMap.get(op.target);\n            // Does the slot counter need to be adjusted?\n            if (slotContext !== slot) {\n                // If so, generate an `ir.AdvanceOp` to advance the counter.\n                const delta = slot - slotContext;\n                if (delta < 0) {\n                    throw new Error(`AssertionError: slot counter should never need to move backwards`);\n                }\n                OpList.insertBefore(createAdvanceOp(delta, op.sourceSpan), op);\n                slotContext = slot;\n            }\n        }\n    }\n}\n\n/**\n * Locate projection slots, populate the each component's `ngContentSelectors` literal field,\n * populate `project` arguments, and generate the required `projectionDef` instruction for the job's\n * root view.\n */\nfunction generateProjectionDefs(job) {\n    // TODO: Why does TemplateDefinitionBuilder force a shared constant?\n    const share = job.compatibility === CompatibilityMode.TemplateDefinitionBuilder;\n    // Collect all selectors from this component, and its nested views. Also, assign each projection a\n    // unique ascending projection slot index.\n    const selectors = [];\n    let projectionSlotIndex = 0;\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.Projection) {\n                selectors.push(op.selector);\n                op.projectionSlotIndex = projectionSlotIndex++;\n            }\n        }\n    }\n    if (selectors.length > 0) {\n        // Create the projectionDef array. If we only found a single wildcard selector, then we use the\n        // default behavior with no arguments instead.\n        let defExpr = null;\n        if (selectors.length > 1 || selectors[0] !== '*') {\n            const def = selectors.map(s => s === '*' ? s : parseSelectorToR3Selector(s));\n            defExpr = job.pool.getConstLiteral(literalOrArrayLiteral(def), share);\n        }\n        // Create the ngContentSelectors constant.\n        job.contentSelectors = job.pool.getConstLiteral(literalOrArrayLiteral(selectors), share);\n        // The projection def instruction goes at the beginning of the root view, before any\n        // `projection` instructions.\n        job.root.create.prepend([createProjectionDefOp(defExpr)]);\n    }\n}\n\n/**\n * Generate a preamble sequence for each view creation block and listener function which declares\n * any variables that be referenced in other operations in the block.\n *\n * Variables generated include:\n *   * a saved view context to be used to restore the current view in event listeners.\n *   * the context of the restored view within event listener handlers.\n *   * context variables from the current view as well as all parent views (including the root\n *     context if needed).\n *   * local references from elements within the current view and any lexical parents.\n *\n * Variables are generated here unconditionally, and may optimized away in future operations if it\n * turns out their values (and any side effects) are unused.\n */\nfunction generateVariables(job) {\n    recursivelyProcessView(job.root, /* there is no parent scope for the root view */ null);\n}\n/**\n * Process the given `ViewCompilation` and generate preambles for it and any listeners that it\n * declares.\n *\n * @param `parentScope` a scope extracted from the parent view which captures any variables which\n *     should be inherited by this view. `null` if the current view is the root view.\n */\nfunction recursivelyProcessView(view, parentScope) {\n    // Extract a `Scope` from this view.\n    const scope = getScopeForView(view, parentScope);\n    for (const op of view.create) {\n        switch (op.kind) {\n            case OpKind.Template:\n                // Descend into child embedded views.\n                recursivelyProcessView(view.job.views.get(op.xref), scope);\n                break;\n            case OpKind.RepeaterCreate:\n                // Descend into child embedded views.\n                recursivelyProcessView(view.job.views.get(op.xref), scope);\n                if (op.emptyView) {\n                    recursivelyProcessView(view.job.views.get(op.emptyView), scope);\n                }\n                break;\n            case OpKind.Listener:\n                // Prepend variables to listener handler functions.\n                op.handlerOps.prepend(generateVariablesInScopeForView(view, scope));\n                break;\n        }\n    }\n    // Prepend the declarations for all available variables in scope to the `update` block.\n    const preambleOps = generateVariablesInScopeForView(view, scope);\n    view.update.prepend(preambleOps);\n}\n/**\n * Process a view and generate a `Scope` representing the variables available for reference within\n * that view.\n */\nfunction getScopeForView(view, parent) {\n    const scope = {\n        view: view.xref,\n        viewContextVariable: {\n            kind: SemanticVariableKind.Context,\n            name: null,\n            view: view.xref,\n        },\n        contextVariables: new Map(),\n        aliases: view.aliases,\n        references: [],\n        parent,\n    };\n    for (const identifier of view.contextVariables.keys()) {\n        scope.contextVariables.set(identifier, {\n            kind: SemanticVariableKind.Identifier,\n            name: null,\n            identifier,\n        });\n    }\n    for (const op of view.create) {\n        switch (op.kind) {\n            case OpKind.ElementStart:\n            case OpKind.Template:\n                if (!Array.isArray(op.localRefs)) {\n                    throw new Error(`AssertionError: expected localRefs to be an array`);\n                }\n                // Record available local references from this element.\n                for (let offset = 0; offset < op.localRefs.length; offset++) {\n                    scope.references.push({\n                        name: op.localRefs[offset].name,\n                        targetId: op.xref,\n                        targetSlot: op.handle,\n                        offset,\n                        variable: {\n                            kind: SemanticVariableKind.Identifier,\n                            name: null,\n                            identifier: op.localRefs[offset].name,\n                        },\n                    });\n                }\n                break;\n        }\n    }\n    return scope;\n}\n/**\n * Generate declarations for all variables that are in scope for a given view.\n *\n * This is a recursive process, as views inherit variables available from their parent view, which\n * itself may have inherited variables, etc.\n */\nfunction generateVariablesInScopeForView(view, scope) {\n    const newOps = [];\n    if (scope.view !== view.xref) {\n        // Before generating variables for a parent view, we need to switch to the context of the parent\n        // view with a `nextContext` expression. This context switching operation itself declares a\n        // variable, because the context of the view may be referenced directly.\n        newOps.push(createVariableOp(view.job.allocateXrefId(), scope.viewContextVariable, new NextContextExpr(), VariableFlags.None));\n    }\n    // Add variables for all context variables available in this scope's view.\n    const scopeView = view.job.views.get(scope.view);\n    for (const [name, value] of scopeView.contextVariables) {\n        const context = new ContextExpr(scope.view);\n        // We either read the context, or, if the variable is CTX_REF, use the context directly.\n        const variable = value === CTX_REF ? context : new ReadPropExpr(context, value);\n        // Add the variable declaration.\n        newOps.push(createVariableOp(view.job.allocateXrefId(), scope.contextVariables.get(name), variable, VariableFlags.None));\n    }\n    for (const alias of scopeView.aliases) {\n        newOps.push(createVariableOp(view.job.allocateXrefId(), alias, alias.expression.clone(), VariableFlags.AlwaysInline));\n    }\n    // Add variables for all local references declared for elements in this scope.\n    for (const ref of scope.references) {\n        newOps.push(createVariableOp(view.job.allocateXrefId(), ref.variable, new ReferenceExpr(ref.targetId, ref.targetSlot, ref.offset), VariableFlags.None));\n    }\n    if (scope.parent !== null) {\n        // Recursively add variables from the parent scope.\n        newOps.push(...generateVariablesInScopeForView(view, scope.parent));\n    }\n    return newOps;\n}\n\n/**\n * `ir.ConstCollectedExpr` may be present in any IR expression. This means that expression needs to\n * be lifted into the component const array, and replaced with a reference to the const array at its\n *\n * usage site. This phase walks the IR and performs this transformation.\n */\nfunction collectConstExpressions(job) {\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            transformExpressionsInOp(op, expr => {\n                if (!(expr instanceof ConstCollectedExpr)) {\n                    return expr;\n                }\n                return literal(job.addConst(expr.expr));\n            }, VisitorContextFlag.None);\n        }\n    }\n}\n\nconst STYLE_DOT = 'style.';\nconst CLASS_DOT = 'class.';\nconst STYLE_BANG = 'style!';\nconst CLASS_BANG = 'class!';\nconst BANG_IMPORTANT = '!important';\n/**\n * Host bindings are compiled using a different parser entrypoint, and are parsed quite differently\n * as a result. Therefore, we need to do some extra parsing for host style properties, as compared\n * to non-host style properties.\n * TODO: Unify host bindings and non-host bindings in the parser.\n */\nfunction parseHostStyleProperties(job) {\n    for (const op of job.root.update) {\n        if (!(op.kind === OpKind.Binding && op.bindingKind === BindingKind.Property)) {\n            continue;\n        }\n        if (op.name.endsWith(BANG_IMPORTANT)) {\n            // Delete any `!important` suffixes from the binding name.\n            op.name = op.name.substring(0, op.name.length - BANG_IMPORTANT.length);\n        }\n        if (op.name.startsWith(STYLE_DOT)) {\n            op.bindingKind = BindingKind.StyleProperty;\n            op.name = op.name.substring(STYLE_DOT.length);\n            if (!isCssCustomProperty$1(op.name)) {\n                op.name = hyphenate$1(op.name);\n            }\n            const { property, suffix } = parseProperty$1(op.name);\n            op.name = property;\n            op.unit = suffix;\n        }\n        else if (op.name.startsWith(STYLE_BANG)) {\n            op.bindingKind = BindingKind.StyleProperty;\n            op.name = 'style';\n        }\n        else if (op.name.startsWith(CLASS_DOT)) {\n            op.bindingKind = BindingKind.ClassName;\n            op.name = parseProperty$1(op.name.substring(CLASS_DOT.length)).property;\n        }\n        else if (op.name.startsWith(CLASS_BANG)) {\n            op.bindingKind = BindingKind.ClassName;\n            op.name = parseProperty$1(op.name.substring(CLASS_BANG.length)).property;\n        }\n    }\n}\n/**\n * Checks whether property name is a custom CSS property.\n * See: https://www.w3.org/TR/css-variables-1\n */\nfunction isCssCustomProperty$1(name) {\n    return name.startsWith('--');\n}\nfunction hyphenate$1(value) {\n    return value\n        .replace(/[a-z][A-Z]/g, v => {\n        return v.charAt(0) + '-' + v.charAt(1);\n    })\n        .toLowerCase();\n}\nfunction parseProperty$1(name) {\n    const overrideIndex = name.indexOf('!important');\n    if (overrideIndex !== -1) {\n        name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';\n    }\n    let suffix = null;\n    let property = name;\n    const unitIndex = name.lastIndexOf('.');\n    if (unitIndex > 0) {\n        suffix = name.slice(unitIndex + 1);\n        property = name.substring(0, unitIndex);\n    }\n    return { property, suffix };\n}\n\nfunction mapEntry(key, value) {\n    return { key, value, quoted: false };\n}\nfunction mapLiteral(obj, quoted = false) {\n    return literalMap(Object.keys(obj).map(key => ({\n        key,\n        quoted,\n        value: obj[key],\n    })));\n}\n\nclass IcuSerializerVisitor {\n    visitText(text) {\n        return text.value;\n    }\n    visitContainer(container) {\n        return container.children.map(child => child.visit(this)).join('');\n    }\n    visitIcu(icu) {\n        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n        return result;\n    }\n    visitTagPlaceholder(ph) {\n        return ph.isVoid ?\n            this.formatPh(ph.startName) :\n            `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n    }\n    visitPlaceholder(ph) {\n        return this.formatPh(ph.name);\n    }\n    visitBlockPlaceholder(ph) {\n        return `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n    }\n    visitIcuPlaceholder(ph, context) {\n        return this.formatPh(ph.name);\n    }\n    formatPh(value) {\n        return `{${formatI18nPlaceholderName(value, /* useCamelCase */ false)}}`;\n    }\n}\nconst serializer = new IcuSerializerVisitor();\nfunction serializeIcuNode(icu) {\n    return icu.visit(serializer);\n}\n\nvar TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"Character\"] = 0] = \"Character\";\n    TokenType[TokenType[\"Identifier\"] = 1] = \"Identifier\";\n    TokenType[TokenType[\"PrivateIdentifier\"] = 2] = \"PrivateIdentifier\";\n    TokenType[TokenType[\"Keyword\"] = 3] = \"Keyword\";\n    TokenType[TokenType[\"String\"] = 4] = \"String\";\n    TokenType[TokenType[\"Operator\"] = 5] = \"Operator\";\n    TokenType[TokenType[\"Number\"] = 6] = \"Number\";\n    TokenType[TokenType[\"Error\"] = 7] = \"Error\";\n})(TokenType || (TokenType = {}));\nconst KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\nclass Lexer {\n    tokenize(text) {\n        const scanner = new _Scanner(text);\n        const tokens = [];\n        let token = scanner.scanToken();\n        while (token != null) {\n            tokens.push(token);\n            token = scanner.scanToken();\n        }\n        return tokens;\n    }\n}\nclass Token {\n    constructor(index, end, type, numValue, strValue) {\n        this.index = index;\n        this.end = end;\n        this.type = type;\n        this.numValue = numValue;\n        this.strValue = strValue;\n    }\n    isCharacter(code) {\n        return this.type == TokenType.Character && this.numValue == code;\n    }\n    isNumber() {\n        return this.type == TokenType.Number;\n    }\n    isString() {\n        return this.type == TokenType.String;\n    }\n    isOperator(operator) {\n        return this.type == TokenType.Operator && this.strValue == operator;\n    }\n    isIdentifier() {\n        return this.type == TokenType.Identifier;\n    }\n    isPrivateIdentifier() {\n        return this.type == TokenType.PrivateIdentifier;\n    }\n    isKeyword() {\n        return this.type == TokenType.Keyword;\n    }\n    isKeywordLet() {\n        return this.type == TokenType.Keyword && this.strValue == 'let';\n    }\n    isKeywordAs() {\n        return this.type == TokenType.Keyword && this.strValue == 'as';\n    }\n    isKeywordNull() {\n        return this.type == TokenType.Keyword && this.strValue == 'null';\n    }\n    isKeywordUndefined() {\n        return this.type == TokenType.Keyword && this.strValue == 'undefined';\n    }\n    isKeywordTrue() {\n        return this.type == TokenType.Keyword && this.strValue == 'true';\n    }\n    isKeywordFalse() {\n        return this.type == TokenType.Keyword && this.strValue == 'false';\n    }\n    isKeywordThis() {\n        return this.type == TokenType.Keyword && this.strValue == 'this';\n    }\n    isError() {\n        return this.type == TokenType.Error;\n    }\n    toNumber() {\n        return this.type == TokenType.Number ? this.numValue : -1;\n    }\n    toString() {\n        switch (this.type) {\n            case TokenType.Character:\n            case TokenType.Identifier:\n            case TokenType.Keyword:\n            case TokenType.Operator:\n            case TokenType.PrivateIdentifier:\n            case TokenType.String:\n            case TokenType.Error:\n                return this.strValue;\n            case TokenType.Number:\n                return this.numValue.toString();\n            default:\n                return null;\n        }\n    }\n}\nfunction newCharacterToken(index, end, code) {\n    return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));\n}\nfunction newIdentifierToken(index, end, text) {\n    return new Token(index, end, TokenType.Identifier, 0, text);\n}\nfunction newPrivateIdentifierToken(index, end, text) {\n    return new Token(index, end, TokenType.PrivateIdentifier, 0, text);\n}\nfunction newKeywordToken(index, end, text) {\n    return new Token(index, end, TokenType.Keyword, 0, text);\n}\nfunction newOperatorToken(index, end, text) {\n    return new Token(index, end, TokenType.Operator, 0, text);\n}\nfunction newStringToken(index, end, text) {\n    return new Token(index, end, TokenType.String, 0, text);\n}\nfunction newNumberToken(index, end, n) {\n    return new Token(index, end, TokenType.Number, n, '');\n}\nfunction newErrorToken(index, end, message) {\n    return new Token(index, end, TokenType.Error, 0, message);\n}\nconst EOF = new Token(-1, -1, TokenType.Character, 0, '');\nclass _Scanner {\n    constructor(input) {\n        this.input = input;\n        this.peek = 0;\n        this.index = -1;\n        this.length = input.length;\n        this.advance();\n    }\n    advance() {\n        this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\n    }\n    scanToken() {\n        const input = this.input, length = this.length;\n        let peek = this.peek, index = this.index;\n        // Skip whitespace.\n        while (peek <= $SPACE) {\n            if (++index >= length) {\n                peek = $EOF;\n                break;\n            }\n            else {\n                peek = input.charCodeAt(index);\n            }\n        }\n        this.peek = peek;\n        this.index = index;\n        if (index >= length) {\n            return null;\n        }\n        // Handle identifiers and numbers.\n        if (isIdentifierStart(peek))\n            return this.scanIdentifier();\n        if (isDigit(peek))\n            return this.scanNumber(index);\n        const start = index;\n        switch (peek) {\n            case $PERIOD:\n                this.advance();\n                return isDigit(this.peek) ? this.scanNumber(start) :\n                    newCharacterToken(start, this.index, $PERIOD);\n            case $LPAREN:\n            case $RPAREN:\n            case $LBRACE:\n            case $RBRACE:\n            case $LBRACKET:\n            case $RBRACKET:\n            case $COMMA:\n            case $COLON:\n            case $SEMICOLON:\n                return this.scanCharacter(start, peek);\n            case $SQ:\n            case $DQ:\n                return this.scanString();\n            case $HASH:\n                return this.scanPrivateIdentifier();\n            case $PLUS:\n            case $MINUS:\n            case $STAR:\n            case $SLASH:\n            case $PERCENT:\n            case $CARET:\n                return this.scanOperator(start, String.fromCharCode(peek));\n            case $QUESTION:\n                return this.scanQuestion(start);\n            case $LT:\n            case $GT:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');\n            case $BANG:\n            case $EQ:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');\n            case $AMPERSAND:\n                return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n            case $BAR:\n                return this.scanComplexOperator(start, '|', $BAR, '|');\n            case $NBSP:\n                while (isWhitespace(this.peek))\n                    this.advance();\n                return this.scanToken();\n        }\n        this.advance();\n        return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\n    }\n    scanCharacter(start, code) {\n        this.advance();\n        return newCharacterToken(start, this.index, code);\n    }\n    scanOperator(start, str) {\n        this.advance();\n        return newOperatorToken(start, this.index, str);\n    }\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param start start index in the expression\n     * @param one first symbol (always part of the operator)\n     * @param twoCode code point for the second symbol\n     * @param two second symbol (part of the operator when the second code point matches)\n     * @param threeCode code point for the third symbol\n     * @param three third symbol (part of the operator when provided and matches source expression)\n     */\n    scanComplexOperator(start, one, twoCode, two, threeCode, three) {\n        this.advance();\n        let str = one;\n        if (this.peek == twoCode) {\n            this.advance();\n            str += two;\n        }\n        if (threeCode != null && this.peek == threeCode) {\n            this.advance();\n            str += three;\n        }\n        return newOperatorToken(start, this.index, str);\n    }\n    scanIdentifier() {\n        const start = this.index;\n        this.advance();\n        while (isIdentifierPart(this.peek))\n            this.advance();\n        const str = this.input.substring(start, this.index);\n        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) :\n            newIdentifierToken(start, this.index, str);\n    }\n    /** Scans an ECMAScript private identifier. */\n    scanPrivateIdentifier() {\n        const start = this.index;\n        this.advance();\n        if (!isIdentifierStart(this.peek)) {\n            return this.error('Invalid character [#]', -1);\n        }\n        while (isIdentifierPart(this.peek))\n            this.advance();\n        const identifierName = this.input.substring(start, this.index);\n        return newPrivateIdentifierToken(start, this.index, identifierName);\n    }\n    scanNumber(start) {\n        let simple = (this.index === start);\n        let hasSeparators = false;\n        this.advance(); // Skip initial digit.\n        while (true) {\n            if (isDigit(this.peek)) {\n                // Do nothing.\n            }\n            else if (this.peek === $_) {\n                // Separators are only valid when they're surrounded by digits. E.g. `1_0_1` is\n                // valid while `_101` and `101_` are not. The separator can't be next to the decimal\n                // point or another separator either. Note that it's unlikely that we'll hit a case where\n                // the underscore is at the start, because that's a valid identifier and it will be picked\n                // up earlier in the parsing. We validate for it anyway just in case.\n                if (!isDigit(this.input.charCodeAt(this.index - 1)) ||\n                    !isDigit(this.input.charCodeAt(this.index + 1))) {\n                    return this.error('Invalid numeric separator', 0);\n                }\n                hasSeparators = true;\n            }\n            else if (this.peek === $PERIOD) {\n                simple = false;\n            }\n            else if (isExponentStart(this.peek)) {\n                this.advance();\n                if (isExponentSign(this.peek))\n                    this.advance();\n                if (!isDigit(this.peek))\n                    return this.error('Invalid exponent', -1);\n                simple = false;\n            }\n            else {\n                break;\n            }\n            this.advance();\n        }\n        let str = this.input.substring(start, this.index);\n        if (hasSeparators) {\n            str = str.replace(/_/g, '');\n        }\n        const value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n        return newNumberToken(start, this.index, value);\n    }\n    scanString() {\n        const start = this.index;\n        const quote = this.peek;\n        this.advance(); // Skip initial quote.\n        let buffer = '';\n        let marker = this.index;\n        const input = this.input;\n        while (this.peek != quote) {\n            if (this.peek == $BACKSLASH) {\n                buffer += input.substring(marker, this.index);\n                let unescapedCode;\n                this.advance(); // mutates this.peek\n                // @ts-expect-error see microsoft/TypeScript#9998\n                if (this.peek == $u) {\n                    // 4 character hex code for unicode character.\n                    const hex = input.substring(this.index + 1, this.index + 5);\n                    if (/^[0-9a-f]+$/i.test(hex)) {\n                        unescapedCode = parseInt(hex, 16);\n                    }\n                    else {\n                        return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n                    }\n                    for (let i = 0; i < 5; i++) {\n                        this.advance();\n                    }\n                }\n                else {\n                    unescapedCode = unescape(this.peek);\n                    this.advance();\n                }\n                buffer += String.fromCharCode(unescapedCode);\n                marker = this.index;\n            }\n            else if (this.peek == $EOF) {\n                return this.error('Unterminated quote', 0);\n            }\n            else {\n                this.advance();\n            }\n        }\n        const last = input.substring(marker, this.index);\n        this.advance(); // Skip terminating quote.\n        return newStringToken(start, this.index, buffer + last);\n    }\n    scanQuestion(start) {\n        this.advance();\n        let str = '?';\n        // Either `a ?? b` or 'a?.b'.\n        if (this.peek === $QUESTION || this.peek === $PERIOD) {\n            str += this.peek === $PERIOD ? '.' : '?';\n            this.advance();\n        }\n        return newOperatorToken(start, this.index, str);\n    }\n    error(message, offset) {\n        const position = this.index + offset;\n        return newErrorToken(position, this.index, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n    }\n}\nfunction isIdentifierStart(code) {\n    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||\n        (code == $_) || (code == $$);\n}\nfunction isIdentifier(input) {\n    if (input.length == 0)\n        return false;\n    const scanner = new _Scanner(input);\n    if (!isIdentifierStart(scanner.peek))\n        return false;\n    scanner.advance();\n    while (scanner.peek !== $EOF) {\n        if (!isIdentifierPart(scanner.peek))\n            return false;\n        scanner.advance();\n    }\n    return true;\n}\nfunction isIdentifierPart(code) {\n    return isAsciiLetter(code) || isDigit(code) || (code == $_) ||\n        (code == $$);\n}\nfunction isExponentStart(code) {\n    return code == $e || code == $E;\n}\nfunction isExponentSign(code) {\n    return code == $MINUS || code == $PLUS;\n}\nfunction unescape(code) {\n    switch (code) {\n        case $n:\n            return $LF;\n        case $f:\n            return $FF;\n        case $r:\n            return $CR;\n        case $t:\n            return $TAB;\n        case $v:\n            return $VTAB;\n        default:\n            return code;\n    }\n}\nfunction parseIntAutoRadix(text) {\n    const result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n\nclass SplitInterpolation {\n    constructor(strings, expressions, offsets) {\n        this.strings = strings;\n        this.expressions = expressions;\n        this.offsets = offsets;\n    }\n}\nclass TemplateBindingParseResult {\n    constructor(templateBindings, warnings, errors) {\n        this.templateBindings = templateBindings;\n        this.warnings = warnings;\n        this.errors = errors;\n    }\n}\nclass Parser$1 {\n    constructor(_lexer) {\n        this._lexer = _lexer;\n        this.errors = [];\n    }\n    parseAction(input, isAssignmentEvent, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        const sourceToLex = this._stripComments(input);\n        const tokens = this._lexer.tokenize(sourceToLex);\n        let flags = 1 /* ParseFlags.Action */;\n        if (isAssignmentEvent) {\n            flags |= 2 /* ParseFlags.AssignmentEvent */;\n        }\n        const ast = new _ParseAST(input, location, absoluteOffset, tokens, flags, this.errors, 0).parseChain();\n        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n    parseBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n    checkSimpleExpression(ast) {\n        const checker = new SimpleExpressionChecker();\n        ast.visit(checker);\n        return checker.errors;\n    }\n    // Host bindings parsed here\n    parseSimpleBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n        const errors = this.checkSimpleExpression(ast);\n        if (errors.length > 0) {\n            this._reportError(`Host binding expression cannot contain ${errors.join(' ')}`, input, location);\n        }\n        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n    _reportError(message, input, errLocation, ctxLocation) {\n        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n    }\n    _parseBindingAst(input, location, absoluteOffset, interpolationConfig) {\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        const sourceToLex = this._stripComments(input);\n        const tokens = this._lexer.tokenize(sourceToLex);\n        return new _ParseAST(input, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0)\n            .parseChain();\n    }\n    /**\n     * Parse microsyntax template expression and return a list of bindings or\n     * parsing errors in case the given expression is invalid.\n     *\n     * For example,\n     * ```\n     *   <div *ngFor=\"let item of items\">\n     *         ^      ^ absoluteValueOffset for `templateValue`\n     *         absoluteKeyOffset for `templateKey`\n     * ```\n     * contains three bindings:\n     * 1. ngFor -> null\n     * 2. item -> NgForOfContext.$implicit\n     * 3. ngForOf -> items\n     *\n     * This is apparent from the de-sugared template:\n     * ```\n     *   <ng-template ngFor let-item [ngForOf]=\"items\">\n     * ```\n     *\n     * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor\n     * @param templateValue RHS of the microsyntax attribute\n     * @param templateUrl template filename if it's external, component filename if it's inline\n     * @param absoluteKeyOffset start of the `templateKey`\n     * @param absoluteValueOffset start of the `templateValue`\n     */\n    parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {\n        const tokens = this._lexer.tokenize(templateValue);\n        const parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0 /* relative offset */);\n        return parser.parseTemplateBindings({\n            source: templateKey,\n            span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length),\n        });\n    }\n    parseInterpolation(input, location, absoluteOffset, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const { strings, expressions, offsets } = this.splitInterpolation(input, location, interpolatedTokens, interpolationConfig);\n        if (expressions.length === 0)\n            return null;\n        const expressionNodes = [];\n        for (let i = 0; i < expressions.length; ++i) {\n            const expressionText = expressions[i].text;\n            const sourceToLex = this._stripComments(expressionText);\n            const tokens = this._lexer.tokenize(sourceToLex);\n            const ast = new _ParseAST(input, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, offsets[i])\n                .parseChain();\n            expressionNodes.push(ast);\n        }\n        return this.createInterpolationAst(strings.map(s => s.text), expressionNodes, input, location, absoluteOffset);\n    }\n    /**\n     * Similar to `parseInterpolation`, but treats the provided string as a single expression\n     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n     * This is used for parsing the switch expression in ICUs.\n     */\n    parseInterpolationExpression(expression, location, absoluteOffset) {\n        const sourceToLex = this._stripComments(expression);\n        const tokens = this._lexer.tokenize(sourceToLex);\n        const ast = new _ParseAST(expression, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0)\n            .parseChain();\n        const strings = ['', '']; // The prefix and suffix strings are both empty\n        return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);\n    }\n    createInterpolationAst(strings, expressions, input, location, absoluteOffset) {\n        const span = new ParseSpan(0, input.length);\n        const interpolation = new Interpolation$1(span, span.toAbsolute(absoluteOffset), strings, expressions);\n        return new ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);\n    }\n    /**\n     * Splits a string of text into \"raw\" text segments and expressions present in interpolations in\n     * the string.\n     * Returns `null` if there are no interpolations, otherwise a\n     * `SplitInterpolation` with splits that look like\n     *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>\n     */\n    splitInterpolation(input, location, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const strings = [];\n        const expressions = [];\n        const offsets = [];\n        const inputToTemplateIndexMap = interpolatedTokens ? getIndexMapForOriginalTemplate(interpolatedTokens) : null;\n        let i = 0;\n        let atInterpolation = false;\n        let extendLastString = false;\n        let { start: interpStart, end: interpEnd } = interpolationConfig;\n        while (i < input.length) {\n            if (!atInterpolation) {\n                // parse until starting {{\n                const start = i;\n                i = input.indexOf(interpStart, i);\n                if (i === -1) {\n                    i = input.length;\n                }\n                const text = input.substring(start, i);\n                strings.push({ text, start, end: i });\n                atInterpolation = true;\n            }\n            else {\n                // parse from starting {{ to ending }} while ignoring content inside quotes.\n                const fullStart = i;\n                const exprStart = fullStart + interpStart.length;\n                const exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);\n                if (exprEnd === -1) {\n                    // Could not find the end of the interpolation; do not parse an expression.\n                    // Instead we should extend the content on the last raw string.\n                    atInterpolation = false;\n                    extendLastString = true;\n                    break;\n                }\n                const fullEnd = exprEnd + interpEnd.length;\n                const text = input.substring(exprStart, exprEnd);\n                if (text.trim().length === 0) {\n                    this._reportError('Blank expressions are not allowed in interpolated strings', input, `at column ${i} in`, location);\n                }\n                expressions.push({ text, start: fullStart, end: fullEnd });\n                const startInOriginalTemplate = inputToTemplateIndexMap?.get(fullStart) ?? fullStart;\n                const offset = startInOriginalTemplate + interpStart.length;\n                offsets.push(offset);\n                i = fullEnd;\n                atInterpolation = false;\n            }\n        }\n        if (!atInterpolation) {\n            // If we are now at a text section, add the remaining content as a raw string.\n            if (extendLastString) {\n                const piece = strings[strings.length - 1];\n                piece.text += input.substring(i);\n                piece.end = input.length;\n            }\n            else {\n                strings.push({ text: input.substring(i), start: i, end: input.length });\n            }\n        }\n        return new SplitInterpolation(strings, expressions, offsets);\n    }\n    wrapLiteralPrimitive(input, location, absoluteOffset) {\n        const span = new ParseSpan(0, input == null ? 0 : input.length);\n        return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);\n    }\n    _stripComments(input) {\n        const i = this._commentStart(input);\n        return i != null ? input.substring(0, i) : input;\n    }\n    _commentStart(input) {\n        let outerQuote = null;\n        for (let i = 0; i < input.length - 1; i++) {\n            const char = input.charCodeAt(i);\n            const nextChar = input.charCodeAt(i + 1);\n            if (char === $SLASH && nextChar == $SLASH && outerQuote == null)\n                return i;\n            if (outerQuote === char) {\n                outerQuote = null;\n            }\n            else if (outerQuote == null && isQuote(char)) {\n                outerQuote = char;\n            }\n        }\n        return null;\n    }\n    _checkNoInterpolation(input, location, { start, end }) {\n        let startIndex = -1;\n        let endIndex = -1;\n        for (const charIndex of this._forEachUnquotedChar(input, 0)) {\n            if (startIndex === -1) {\n                if (input.startsWith(start)) {\n                    startIndex = charIndex;\n                }\n            }\n            else {\n                endIndex = this._getInterpolationEndIndex(input, end, charIndex);\n                if (endIndex > -1) {\n                    break;\n                }\n            }\n        }\n        if (startIndex > -1 && endIndex > -1) {\n            this._reportError(`Got interpolation (${start}${end}) where expression was expected`, input, `at column ${startIndex} in`, location);\n        }\n    }\n    /**\n     * Finds the index of the end of an interpolation expression\n     * while ignoring comments and quoted content.\n     */\n    _getInterpolationEndIndex(input, expressionEnd, start) {\n        for (const charIndex of this._forEachUnquotedChar(input, start)) {\n            if (input.startsWith(expressionEnd, charIndex)) {\n                return charIndex;\n            }\n            // Nothing else in the expression matters after we've\n            // hit a comment so look directly for the end token.\n            if (input.startsWith('//', charIndex)) {\n                return input.indexOf(expressionEnd, charIndex);\n            }\n        }\n        return -1;\n    }\n    /**\n     * Generator used to iterate over the character indexes of a string that are outside of quotes.\n     * @param input String to loop through.\n     * @param start Index within the string at which to start.\n     */\n    *_forEachUnquotedChar(input, start) {\n        let currentQuote = null;\n        let escapeCount = 0;\n        for (let i = start; i < input.length; i++) {\n            const char = input[i];\n            // Skip the characters inside quotes. Note that we only care about the outer-most\n            // quotes matching up and we need to account for escape characters.\n            if (isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === char) &&\n                escapeCount % 2 === 0) {\n                currentQuote = currentQuote === null ? char : null;\n            }\n            else if (currentQuote === null) {\n                yield i;\n            }\n            escapeCount = char === '\\\\' ? escapeCount + 1 : 0;\n        }\n    }\n}\n/** Describes a stateful context an expression parser is in. */\nvar ParseContextFlags;\n(function (ParseContextFlags) {\n    ParseContextFlags[ParseContextFlags[\"None\"] = 0] = \"None\";\n    /**\n     * A Writable context is one in which a value may be written to an lvalue.\n     * For example, after we see a property access, we may expect a write to the\n     * property via the \"=\" operator.\n     *   prop\n     *        ^ possible \"=\" after\n     */\n    ParseContextFlags[ParseContextFlags[\"Writable\"] = 1] = \"Writable\";\n})(ParseContextFlags || (ParseContextFlags = {}));\nclass _ParseAST {\n    constructor(input, location, absoluteOffset, tokens, parseFlags, errors, offset) {\n        this.input = input;\n        this.location = location;\n        this.absoluteOffset = absoluteOffset;\n        this.tokens = tokens;\n        this.parseFlags = parseFlags;\n        this.errors = errors;\n        this.offset = offset;\n        this.rparensExpected = 0;\n        this.rbracketsExpected = 0;\n        this.rbracesExpected = 0;\n        this.context = ParseContextFlags.None;\n        // Cache of expression start and input indeces to the absolute source span they map to, used to\n        // prevent creating superfluous source spans in `sourceSpan`.\n        // A serial of the expression start and input index is used for mapping because both are stateful\n        // and may change for subsequent expressions visited by the parser.\n        this.sourceSpanCache = new Map();\n        this.index = 0;\n    }\n    peek(offset) {\n        const i = this.index + offset;\n        return i < this.tokens.length ? this.tokens[i] : EOF;\n    }\n    get next() {\n        return this.peek(0);\n    }\n    /** Whether all the parser input has been processed. */\n    get atEOF() {\n        return this.index >= this.tokens.length;\n    }\n    /**\n     * Index of the next token to be processed, or the end of the last token if all have been\n     * processed.\n     */\n    get inputIndex() {\n        return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;\n    }\n    /**\n     * End index of the last processed token, or the start of the first token if none have been\n     * processed.\n     */\n    get currentEndIndex() {\n        if (this.index > 0) {\n            const curToken = this.peek(-1);\n            return curToken.end + this.offset;\n        }\n        // No tokens have been processed yet; return the next token's start or the length of the input\n        // if there is no token.\n        if (this.tokens.length === 0) {\n            return this.input.length + this.offset;\n        }\n        return this.next.index + this.offset;\n    }\n    /**\n     * Returns the absolute offset of the start of the current token.\n     */\n    get currentAbsoluteOffset() {\n        return this.absoluteOffset + this.inputIndex;\n    }\n    /**\n     * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if\n     * provided).\n     *\n     * @param start Position from which the `ParseSpan` will start.\n     * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the\n     *     natural ending index)\n     */\n    span(start, artificialEndIndex) {\n        let endIndex = this.currentEndIndex;\n        if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {\n            endIndex = artificialEndIndex;\n        }\n        // In some unusual parsing scenarios (like when certain tokens are missing and an `EmptyExpr` is\n        // being created), the current token may already be advanced beyond the `currentEndIndex`. This\n        // appears to be a deep-seated parser bug.\n        //\n        // As a workaround for now, swap the start and end indices to ensure a valid `ParseSpan`.\n        // TODO(alxhub): fix the bug upstream in the parser state, and remove this workaround.\n        if (start > endIndex) {\n            const tmp = endIndex;\n            endIndex = start;\n            start = tmp;\n        }\n        return new ParseSpan(start, endIndex);\n    }\n    sourceSpan(start, artificialEndIndex) {\n        const serial = `${start}@${this.inputIndex}:${artificialEndIndex}`;\n        if (!this.sourceSpanCache.has(serial)) {\n            this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));\n        }\n        return this.sourceSpanCache.get(serial);\n    }\n    advance() {\n        this.index++;\n    }\n    /**\n     * Executes a callback in the provided context.\n     */\n    withContext(context, cb) {\n        this.context |= context;\n        const ret = cb();\n        this.context ^= context;\n        return ret;\n    }\n    consumeOptionalCharacter(code) {\n        if (this.next.isCharacter(code)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    peekKeywordLet() {\n        return this.next.isKeywordLet();\n    }\n    peekKeywordAs() {\n        return this.next.isKeywordAs();\n    }\n    /**\n     * Consumes an expected character, otherwise emits an error about the missing expected character\n     * and skips over the token stream until reaching a recoverable point.\n     *\n     * See `this.error` and `this.skip` for more details.\n     */\n    expectCharacter(code) {\n        if (this.consumeOptionalCharacter(code))\n            return;\n        this.error(`Missing expected ${String.fromCharCode(code)}`);\n    }\n    consumeOptionalOperator(op) {\n        if (this.next.isOperator(op)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    expectOperator(operator) {\n        if (this.consumeOptionalOperator(operator))\n            return;\n        this.error(`Missing expected operator ${operator}`);\n    }\n    prettyPrintToken(tok) {\n        return tok === EOF ? 'end of input' : `token ${tok}`;\n    }\n    expectIdentifierOrKeyword() {\n        const n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword()) {\n            if (n.isPrivateIdentifier()) {\n                this._reportErrorForPrivateIdentifier(n, 'expected identifier or keyword');\n            }\n            else {\n                this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier or keyword`);\n            }\n            return null;\n        }\n        this.advance();\n        return n.toString();\n    }\n    expectIdentifierOrKeywordOrString() {\n        const n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n            if (n.isPrivateIdentifier()) {\n                this._reportErrorForPrivateIdentifier(n, 'expected identifier, keyword or string');\n            }\n            else {\n                this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier, keyword, or string`);\n            }\n            return '';\n        }\n        this.advance();\n        return n.toString();\n    }\n    parseChain() {\n        const exprs = [];\n        const start = this.inputIndex;\n        while (this.index < this.tokens.length) {\n            const expr = this.parsePipe();\n            exprs.push(expr);\n            if (this.consumeOptionalCharacter($SEMICOLON)) {\n                if (!(this.parseFlags & 1 /* ParseFlags.Action */)) {\n                    this.error('Binding expression cannot contain chained expression');\n                }\n                while (this.consumeOptionalCharacter($SEMICOLON)) {\n                } // read all semicolons\n            }\n            else if (this.index < this.tokens.length) {\n                const errorIndex = this.index;\n                this.error(`Unexpected token '${this.next}'`);\n                // The `error` call above will skip ahead to the next recovery point in an attempt to\n                // recover part of the expression, but that might be the token we started from which will\n                // lead to an infinite loop. If that's the case, break the loop assuming that we can't\n                // parse further.\n                if (this.index === errorIndex) {\n                    break;\n                }\n            }\n        }\n        if (exprs.length === 0) {\n            // We have no expressions so create an empty expression that spans the entire input length\n            const artificialStart = this.offset;\n            const artificialEnd = this.offset + this.input.length;\n            return new EmptyExpr$1(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));\n        }\n        if (exprs.length == 1)\n            return exprs[0];\n        return new Chain(this.span(start), this.sourceSpan(start), exprs);\n    }\n    parsePipe() {\n        const start = this.inputIndex;\n        let result = this.parseExpression();\n        if (this.consumeOptionalOperator('|')) {\n            if (this.parseFlags & 1 /* ParseFlags.Action */) {\n                this.error('Cannot have a pipe in an action expression');\n            }\n            do {\n                const nameStart = this.inputIndex;\n                let nameId = this.expectIdentifierOrKeyword();\n                let nameSpan;\n                let fullSpanEnd = undefined;\n                if (nameId !== null) {\n                    nameSpan = this.sourceSpan(nameStart);\n                }\n                else {\n                    // No valid identifier was found, so we'll assume an empty pipe name ('').\n                    nameId = '';\n                    // However, there may have been whitespace present between the pipe character and the next\n                    // token in the sequence (or the end of input). We want to track this whitespace so that\n                    // the `BindingPipe` we produce covers not just the pipe character, but any trailing\n                    // whitespace beyond it. Another way of thinking about this is that the zero-length name\n                    // is assumed to be at the end of any whitespace beyond the pipe character.\n                    //\n                    // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the\n                    // beginning of the next token, or until the end of input if the next token is EOF.\n                    fullSpanEnd = this.next.index !== -1 ? this.next.index : this.input.length + this.offset;\n                    // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace\n                    // beyond the pipe character.\n                    nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);\n                }\n                const args = [];\n                while (this.consumeOptionalCharacter($COLON)) {\n                    args.push(this.parseExpression());\n                    // If there are additional expressions beyond the name, then the artificial end for the\n                    // name is no longer relevant.\n                }\n                result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);\n            } while (this.consumeOptionalOperator('|'));\n        }\n        return result;\n    }\n    parseExpression() {\n        return this.parseConditional();\n    }\n    parseConditional() {\n        const start = this.inputIndex;\n        const result = this.parseLogicalOr();\n        if (this.consumeOptionalOperator('?')) {\n            const yes = this.parsePipe();\n            let no;\n            if (!this.consumeOptionalCharacter($COLON)) {\n                const end = this.inputIndex;\n                const expression = this.input.substring(start, end);\n                this.error(`Conditional expression ${expression} requires all 3 expressions`);\n                no = new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n            }\n            else {\n                no = this.parsePipe();\n            }\n            return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);\n        }\n        else {\n            return result;\n        }\n    }\n    parseLogicalOr() {\n        // '||'\n        const start = this.inputIndex;\n        let result = this.parseLogicalAnd();\n        while (this.consumeOptionalOperator('||')) {\n            const right = this.parseLogicalAnd();\n            result = new Binary(this.span(start), this.sourceSpan(start), '||', result, right);\n        }\n        return result;\n    }\n    parseLogicalAnd() {\n        // '&&'\n        const start = this.inputIndex;\n        let result = this.parseNullishCoalescing();\n        while (this.consumeOptionalOperator('&&')) {\n            const right = this.parseNullishCoalescing();\n            result = new Binary(this.span(start), this.sourceSpan(start), '&&', result, right);\n        }\n        return result;\n    }\n    parseNullishCoalescing() {\n        // '??'\n        const start = this.inputIndex;\n        let result = this.parseEquality();\n        while (this.consumeOptionalOperator('??')) {\n            const right = this.parseEquality();\n            result = new Binary(this.span(start), this.sourceSpan(start), '??', result, right);\n        }\n        return result;\n    }\n    parseEquality() {\n        // '==','!=','===','!=='\n        const start = this.inputIndex;\n        let result = this.parseRelational();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '==':\n                case '===':\n                case '!=':\n                case '!==':\n                    this.advance();\n                    const right = this.parseRelational();\n                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseRelational() {\n        // '<', '>', '<=', '>='\n        const start = this.inputIndex;\n        let result = this.parseAdditive();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '<':\n                case '>':\n                case '<=':\n                case '>=':\n                    this.advance();\n                    const right = this.parseAdditive();\n                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseAdditive() {\n        // '+', '-'\n        const start = this.inputIndex;\n        let result = this.parseMultiplicative();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '+':\n                case '-':\n                    this.advance();\n                    let right = this.parseMultiplicative();\n                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseMultiplicative() {\n        // '*', '%', '/'\n        const start = this.inputIndex;\n        let result = this.parsePrefix();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '*':\n                case '%':\n                case '/':\n                    this.advance();\n                    let right = this.parsePrefix();\n                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parsePrefix() {\n        if (this.next.type == TokenType.Operator) {\n            const start = this.inputIndex;\n            const operator = this.next.strValue;\n            let result;\n            switch (operator) {\n                case '+':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return Unary.createPlus(this.span(start), this.sourceSpan(start), result);\n                case '-':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return Unary.createMinus(this.span(start), this.sourceSpan(start), result);\n                case '!':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new PrefixNot(this.span(start), this.sourceSpan(start), result);\n            }\n        }\n        return this.parseCallChain();\n    }\n    parseCallChain() {\n        const start = this.inputIndex;\n        let result = this.parsePrimary();\n        while (true) {\n            if (this.consumeOptionalCharacter($PERIOD)) {\n                result = this.parseAccessMember(result, start, false);\n            }\n            else if (this.consumeOptionalOperator('?.')) {\n                if (this.consumeOptionalCharacter($LPAREN)) {\n                    result = this.parseCall(result, start, true);\n                }\n                else {\n                    result = this.consumeOptionalCharacter($LBRACKET) ?\n                        this.parseKeyedReadOrWrite(result, start, true) :\n                        this.parseAccessMember(result, start, true);\n                }\n            }\n            else if (this.consumeOptionalCharacter($LBRACKET)) {\n                result = this.parseKeyedReadOrWrite(result, start, false);\n            }\n            else if (this.consumeOptionalCharacter($LPAREN)) {\n                result = this.parseCall(result, start, false);\n            }\n            else if (this.consumeOptionalOperator('!')) {\n                result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);\n            }\n            else {\n                return result;\n            }\n        }\n    }\n    parsePrimary() {\n        const start = this.inputIndex;\n        if (this.consumeOptionalCharacter($LPAREN)) {\n            this.rparensExpected++;\n            const result = this.parsePipe();\n            this.rparensExpected--;\n            this.expectCharacter($RPAREN);\n            return result;\n        }\n        else if (this.next.isKeywordNull()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);\n        }\n        else if (this.next.isKeywordUndefined()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);\n        }\n        else if (this.next.isKeywordTrue()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);\n        }\n        else if (this.next.isKeywordFalse()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);\n        }\n        else if (this.next.isKeywordThis()) {\n            this.advance();\n            return new ThisReceiver(this.span(start), this.sourceSpan(start));\n        }\n        else if (this.consumeOptionalCharacter($LBRACKET)) {\n            this.rbracketsExpected++;\n            const elements = this.parseExpressionList($RBRACKET);\n            this.rbracketsExpected--;\n            this.expectCharacter($RBRACKET);\n            return new LiteralArray(this.span(start), this.sourceSpan(start), elements);\n        }\n        else if (this.next.isCharacter($LBRACE)) {\n            return this.parseLiteralMap();\n        }\n        else if (this.next.isIdentifier()) {\n            return this.parseAccessMember(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);\n        }\n        else if (this.next.isNumber()) {\n            const value = this.next.toNumber();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);\n        }\n        else if (this.next.isString()) {\n            const literalValue = this.next.toString();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);\n        }\n        else if (this.next.isPrivateIdentifier()) {\n            this._reportErrorForPrivateIdentifier(this.next, null);\n            return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n        }\n        else if (this.index >= this.tokens.length) {\n            this.error(`Unexpected end of expression: ${this.input}`);\n            return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n        }\n        else {\n            this.error(`Unexpected token ${this.next}`);\n            return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n        }\n    }\n    parseExpressionList(terminator) {\n        const result = [];\n        do {\n            if (!this.next.isCharacter(terminator)) {\n                result.push(this.parsePipe());\n            }\n            else {\n                break;\n            }\n        } while (this.consumeOptionalCharacter($COMMA));\n        return result;\n    }\n    parseLiteralMap() {\n        const keys = [];\n        const values = [];\n        const start = this.inputIndex;\n        this.expectCharacter($LBRACE);\n        if (!this.consumeOptionalCharacter($RBRACE)) {\n            this.rbracesExpected++;\n            do {\n                const keyStart = this.inputIndex;\n                const quoted = this.next.isString();\n                const key = this.expectIdentifierOrKeywordOrString();\n                keys.push({ key, quoted });\n                // Properties with quoted keys can't use the shorthand syntax.\n                if (quoted) {\n                    this.expectCharacter($COLON);\n                    values.push(this.parsePipe());\n                }\n                else if (this.consumeOptionalCharacter($COLON)) {\n                    values.push(this.parsePipe());\n                }\n                else {\n                    const span = this.span(keyStart);\n                    const sourceSpan = this.sourceSpan(keyStart);\n                    values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));\n                }\n            } while (this.consumeOptionalCharacter($COMMA) &&\n                !this.next.isCharacter($RBRACE));\n            this.rbracesExpected--;\n            this.expectCharacter($RBRACE);\n        }\n        return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);\n    }\n    parseAccessMember(readReceiver, start, isSafe) {\n        const nameStart = this.inputIndex;\n        const id = this.withContext(ParseContextFlags.Writable, () => {\n            const id = this.expectIdentifierOrKeyword() ?? '';\n            if (id.length === 0) {\n                this.error(`Expected identifier for property access`, readReceiver.span.end);\n            }\n            return id;\n        });\n        const nameSpan = this.sourceSpan(nameStart);\n        let receiver;\n        if (isSafe) {\n            if (this.consumeOptionalAssignment()) {\n                this.error('The \\'?.\\' operator cannot be used in the assignment');\n                receiver = new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n            }\n            else {\n                receiver = new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);\n            }\n        }\n        else {\n            if (this.consumeOptionalAssignment()) {\n                if (!(this.parseFlags & 1 /* ParseFlags.Action */)) {\n                    this.error('Bindings cannot contain assignments');\n                    return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n                }\n                const value = this.parseConditional();\n                receiver = new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id, value);\n            }\n            else {\n                receiver =\n                    new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);\n            }\n        }\n        return receiver;\n    }\n    parseCall(receiver, start, isSafe) {\n        const argumentStart = this.inputIndex;\n        this.rparensExpected++;\n        const args = this.parseCallArguments();\n        const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n        this.expectCharacter($RPAREN);\n        this.rparensExpected--;\n        const span = this.span(start);\n        const sourceSpan = this.sourceSpan(start);\n        return isSafe ? new SafeCall(span, sourceSpan, receiver, args, argumentSpan) :\n            new Call(span, sourceSpan, receiver, args, argumentSpan);\n    }\n    consumeOptionalAssignment() {\n        // When parsing assignment events (originating from two-way-binding aka banana-in-a-box syntax),\n        // it is valid for the primary expression to be terminated by the non-null operator. This\n        // primary expression is substituted as LHS of the assignment operator to achieve\n        // two-way-binding, such that the LHS could be the non-null operator. The grammar doesn't\n        // naturally allow for this syntax, so assignment events are parsed specially.\n        if ((this.parseFlags & 2 /* ParseFlags.AssignmentEvent */) && this.next.isOperator('!') &&\n            this.peek(1).isOperator('=')) {\n            // First skip over the ! operator.\n            this.advance();\n            // Then skip over the = operator, to fully consume the optional assignment operator.\n            this.advance();\n            return true;\n        }\n        return this.consumeOptionalOperator('=');\n    }\n    parseCallArguments() {\n        if (this.next.isCharacter($RPAREN))\n            return [];\n        const positionals = [];\n        do {\n            positionals.push(this.parsePipe());\n        } while (this.consumeOptionalCharacter($COMMA));\n        return positionals;\n    }\n    /**\n     * Parses an identifier, a keyword, a string with an optional `-` in between,\n     * and returns the string along with its absolute source span.\n     */\n    expectTemplateBindingKey() {\n        let result = '';\n        let operatorFound = false;\n        const start = this.currentAbsoluteOffset;\n        do {\n            result += this.expectIdentifierOrKeywordOrString();\n            operatorFound = this.consumeOptionalOperator('-');\n            if (operatorFound) {\n                result += '-';\n            }\n        } while (operatorFound);\n        return {\n            source: result,\n            span: new AbsoluteSourceSpan(start, start + result.length),\n        };\n    }\n    /**\n     * Parse microsyntax template expression and return a list of bindings or\n     * parsing errors in case the given expression is invalid.\n     *\n     * For example,\n     * ```\n     *   <div *ngFor=\"let item of items; index as i; trackBy: func\">\n     * ```\n     * contains five bindings:\n     * 1. ngFor -> null\n     * 2. item -> NgForOfContext.$implicit\n     * 3. ngForOf -> items\n     * 4. i -> NgForOfContext.index\n     * 5. ngForTrackBy -> func\n     *\n     * For a full description of the microsyntax grammar, see\n     * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855\n     *\n     * @param templateKey name of the microsyntax directive, like ngIf, ngFor,\n     * without the *, along with its absolute span.\n     */\n    parseTemplateBindings(templateKey) {\n        const bindings = [];\n        // The first binding is for the template key itself\n        // In *ngFor=\"let item of items\", key = \"ngFor\", value = null\n        // In *ngIf=\"cond | pipe\", key = \"ngIf\", value = \"cond | pipe\"\n        bindings.push(...this.parseDirectiveKeywordBindings(templateKey));\n        while (this.index < this.tokens.length) {\n            // If it starts with 'let', then this must be variable declaration\n            const letBinding = this.parseLetBinding();\n            if (letBinding) {\n                bindings.push(letBinding);\n            }\n            else {\n                // Two possible cases here, either `value \"as\" key` or\n                // \"directive-keyword expression\". We don't know which case, but both\n                // \"value\" and \"directive-keyword\" are template binding key, so consume\n                // the key first.\n                const key = this.expectTemplateBindingKey();\n                // Peek at the next token, if it is \"as\" then this must be variable\n                // declaration.\n                const binding = this.parseAsBinding(key);\n                if (binding) {\n                    bindings.push(binding);\n                }\n                else {\n                    // Otherwise the key must be a directive keyword, like \"of\". Transform\n                    // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy\n                    key.source =\n                        templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);\n                    bindings.push(...this.parseDirectiveKeywordBindings(key));\n                }\n            }\n            this.consumeStatementTerminator();\n        }\n        return new TemplateBindingParseResult(bindings, [] /* warnings */, this.errors);\n    }\n    parseKeyedReadOrWrite(receiver, start, isSafe) {\n        return this.withContext(ParseContextFlags.Writable, () => {\n            this.rbracketsExpected++;\n            const key = this.parsePipe();\n            if (key instanceof EmptyExpr$1) {\n                this.error(`Key access cannot be empty`);\n            }\n            this.rbracketsExpected--;\n            this.expectCharacter($RBRACKET);\n            if (this.consumeOptionalOperator('=')) {\n                if (isSafe) {\n                    this.error('The \\'?.\\' operator cannot be used in the assignment');\n                }\n                else {\n                    const value = this.parseConditional();\n                    return new KeyedWrite(this.span(start), this.sourceSpan(start), receiver, key, value);\n                }\n            }\n            else {\n                return isSafe ? new SafeKeyedRead(this.span(start), this.sourceSpan(start), receiver, key) :\n                    new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);\n            }\n            return new EmptyExpr$1(this.span(start), this.sourceSpan(start));\n        });\n    }\n    /**\n     * Parse a directive keyword, followed by a mandatory expression.\n     * For example, \"of items\", \"trackBy: func\".\n     * The bindings are: ngForOf -> items, ngForTrackBy -> func\n     * There could be an optional \"as\" binding that follows the expression.\n     * For example,\n     * ```\n     *   *ngFor=\"let item of items | slice:0:1 as collection\".\n     *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^\n     *               keyword    bound target   optional 'as' binding\n     * ```\n     *\n     * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its\n     * absolute span.\n     */\n    parseDirectiveKeywordBindings(key) {\n        const bindings = [];\n        this.consumeOptionalCharacter($COLON); // trackBy: trackByFunction\n        const value = this.getDirectiveBoundTarget();\n        let spanEnd = this.currentAbsoluteOffset;\n        // The binding could optionally be followed by \"as\". For example,\n        // *ngIf=\"cond | pipe as x\". In this case, the key in the \"as\" binding\n        // is \"x\" and the value is the template key itself (\"ngIf\"). Note that the\n        // 'key' in the current context now becomes the \"value\" in the next binding.\n        const asBinding = this.parseAsBinding(key);\n        if (!asBinding) {\n            this.consumeStatementTerminator();\n            spanEnd = this.currentAbsoluteOffset;\n        }\n        const sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);\n        bindings.push(new ExpressionBinding(sourceSpan, key, value));\n        if (asBinding) {\n            bindings.push(asBinding);\n        }\n        return bindings;\n    }\n    /**\n     * Return the expression AST for the bound target of a directive keyword\n     * binding. For example,\n     * ```\n     *   *ngIf=\"condition | pipe\"\n     *          ^^^^^^^^^^^^^^^^ bound target for \"ngIf\"\n     *   *ngFor=\"let item of items\"\n     *                       ^^^^^ bound target for \"ngForOf\"\n     * ```\n     */\n    getDirectiveBoundTarget() {\n        if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {\n            return null;\n        }\n        const ast = this.parsePipe(); // example: \"condition | async\"\n        const { start, end } = ast.span;\n        const value = this.input.substring(start, end);\n        return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);\n    }\n    /**\n     * Return the binding for a variable declared using `as`. Note that the order\n     * of the key-value pair in this declaration is reversed. For example,\n     * ```\n     *   *ngFor=\"let item of items; index as i\"\n     *                              ^^^^^    ^\n     *                              value    key\n     * ```\n     *\n     * @param value name of the value in the declaration, \"ngIf\" in the example\n     * above, along with its absolute span.\n     */\n    parseAsBinding(value) {\n        if (!this.peekKeywordAs()) {\n            return null;\n        }\n        this.advance(); // consume the 'as' keyword\n        const key = this.expectTemplateBindingKey();\n        this.consumeStatementTerminator();\n        const sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);\n        return new VariableBinding(sourceSpan, key, value);\n    }\n    /**\n     * Return the binding for a variable declared using `let`. For example,\n     * ```\n     *   *ngFor=\"let item of items; let i=index;\"\n     *           ^^^^^^^^           ^^^^^^^^^^^\n     * ```\n     * In the first binding, `item` is bound to `NgForOfContext.$implicit`.\n     * In the second binding, `i` is bound to `NgForOfContext.index`.\n     */\n    parseLetBinding() {\n        if (!this.peekKeywordLet()) {\n            return null;\n        }\n        const spanStart = this.currentAbsoluteOffset;\n        this.advance(); // consume the 'let' keyword\n        const key = this.expectTemplateBindingKey();\n        let value = null;\n        if (this.consumeOptionalOperator('=')) {\n            value = this.expectTemplateBindingKey();\n        }\n        this.consumeStatementTerminator();\n        const sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);\n        return new VariableBinding(sourceSpan, key, value);\n    }\n    /**\n     * Consume the optional statement terminator: semicolon or comma.\n     */\n    consumeStatementTerminator() {\n        this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);\n    }\n    /**\n     * Records an error and skips over the token stream until reaching a recoverable point. See\n     * `this.skip` for more details on token skipping.\n     */\n    error(message, index = null) {\n        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n        this.skip();\n    }\n    locationText(index = null) {\n        if (index == null)\n            index = this.index;\n        return (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\n            `at the end of the expression`;\n    }\n    /**\n     * Records an error for an unexpected private identifier being discovered.\n     * @param token Token representing a private identifier.\n     * @param extraMessage Optional additional message being appended to the error.\n     */\n    _reportErrorForPrivateIdentifier(token, extraMessage) {\n        let errorMessage = `Private identifiers are not supported. Unexpected private identifier: ${token}`;\n        if (extraMessage !== null) {\n            errorMessage += `, ${extraMessage}`;\n        }\n        this.error(errorMessage);\n    }\n    /**\n     * Error recovery should skip tokens until it encounters a recovery point.\n     *\n     * The following are treated as unconditional recovery points:\n     *   - end of input\n     *   - ';' (parseChain() is always the root production, and it expects a ';')\n     *   - '|' (since pipes may be chained and each pipe expression may be treated independently)\n     *\n     * The following are conditional recovery points:\n     *   - ')', '}', ']' if one of calling productions is expecting one of these symbols\n     *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to\n     *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins\n     *       an '(' <expr> ')' production).\n     *       The recovery points of grouping symbols must be conditional as they must be skipped if\n     *       none of the calling productions are not expecting the closing token else we will never\n     *       make progress in the case of an extraneous group closing symbol (such as a stray ')').\n     *       That is, we skip a closing symbol if we are not in a grouping production.\n     *   - '=' in a `Writable` context\n     *     - In this context, we are able to recover after seeing the `=` operator, which\n     *       signals the presence of an independent rvalue expression following the `=` operator.\n     *\n     * If a production expects one of these token it increments the corresponding nesting count,\n     * and then decrements it just prior to checking if the token is in the input.\n     */\n    skip() {\n        let n = this.next;\n        while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&\n            !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&\n            (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&\n            (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) &&\n            (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {\n            if (this.next.isError()) {\n                this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n            }\n            this.advance();\n            n = this.next;\n        }\n    }\n}\nclass SimpleExpressionChecker extends RecursiveAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.errors = [];\n    }\n    visitPipe() {\n        this.errors.push('pipes');\n    }\n}\n/**\n * Computes the real offset in the original template for indexes in an interpolation.\n *\n * Because templates can have encoded HTML entities and the input passed to the parser at this stage\n * of the compiler is the _decoded_ value, we need to compute the real offset using the original\n * encoded values in the interpolated tokens. Note that this is only a special case handling for\n * `MlParserTokenType.ENCODED_ENTITY` token types. All other interpolated tokens are expected to\n * have parts which exactly match the input string for parsing the interpolation.\n *\n * @param interpolatedTokens The tokens for the interpolated value.\n *\n * @returns A map of index locations in the decoded template to indexes in the original template\n */\nfunction getIndexMapForOriginalTemplate(interpolatedTokens) {\n    let offsetMap = new Map();\n    let consumedInOriginalTemplate = 0;\n    let consumedInInput = 0;\n    let tokenIndex = 0;\n    while (tokenIndex < interpolatedTokens.length) {\n        const currentToken = interpolatedTokens[tokenIndex];\n        if (currentToken.type === 9 /* MlParserTokenType.ENCODED_ENTITY */) {\n            const [decoded, encoded] = currentToken.parts;\n            consumedInOriginalTemplate += encoded.length;\n            consumedInInput += decoded.length;\n        }\n        else {\n            const lengthOfParts = currentToken.parts.reduce((sum, current) => sum + current.length, 0);\n            consumedInInput += lengthOfParts;\n            consumedInOriginalTemplate += lengthOfParts;\n        }\n        offsetMap.set(consumedInInput, consumedInOriginalTemplate);\n        tokenIndex++;\n    }\n    return offsetMap;\n}\n\nclass NodeWithI18n {\n    constructor(sourceSpan, i18n) {\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n}\nclass Text extends NodeWithI18n {\n    constructor(value, sourceSpan, tokens, i18n) {\n        super(sourceSpan, i18n);\n        this.value = value;\n        this.tokens = tokens;\n    }\n    visit(visitor, context) {\n        return visitor.visitText(this, context);\n    }\n}\nclass Expansion extends NodeWithI18n {\n    constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {\n        super(sourceSpan, i18n);\n        this.switchValue = switchValue;\n        this.type = type;\n        this.cases = cases;\n        this.switchValueSourceSpan = switchValueSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitExpansion(this, context);\n    }\n}\nclass ExpansionCase {\n    constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n        this.value = value;\n        this.expression = expression;\n        this.sourceSpan = sourceSpan;\n        this.valueSourceSpan = valueSourceSpan;\n        this.expSourceSpan = expSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitExpansionCase(this, context);\n    }\n}\nclass Attribute extends NodeWithI18n {\n    constructor(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n) {\n        super(sourceSpan, i18n);\n        this.name = name;\n        this.value = value;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n        this.valueTokens = valueTokens;\n    }\n    visit(visitor, context) {\n        return visitor.visitAttribute(this, context);\n    }\n}\nclass Element extends NodeWithI18n {\n    constructor(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan = null, i18n) {\n        super(sourceSpan, i18n);\n        this.name = name;\n        this.attrs = attrs;\n        this.children = children;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitElement(this, context);\n    }\n}\nclass Comment {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitComment(this, context);\n    }\n}\nclass Block extends NodeWithI18n {\n    constructor(name, parameters, children, sourceSpan, nameSpan, startSourceSpan, endSourceSpan = null, i18n) {\n        super(sourceSpan, i18n);\n        this.name = name;\n        this.parameters = parameters;\n        this.children = children;\n        this.nameSpan = nameSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitBlock(this, context);\n    }\n}\nclass BlockParameter {\n    constructor(expression, sourceSpan) {\n        this.expression = expression;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitBlockParameter(this, context);\n    }\n}\nfunction visitAll(visitor, nodes, context = null) {\n    const result = [];\n    const visit = visitor.visit ?\n        (ast) => visitor.visit(ast, context) || ast.visit(visitor, context) :\n        (ast) => ast.visit(visitor, context);\n    nodes.forEach(ast => {\n        const astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\nclass RecursiveVisitor {\n    constructor() { }\n    visitElement(ast, context) {\n        this.visitChildren(context, visit => {\n            visit(ast.attrs);\n            visit(ast.children);\n        });\n    }\n    visitAttribute(ast, context) { }\n    visitText(ast, context) { }\n    visitComment(ast, context) { }\n    visitExpansion(ast, context) {\n        return this.visitChildren(context, visit => {\n            visit(ast.cases);\n        });\n    }\n    visitExpansionCase(ast, context) { }\n    visitBlock(block, context) {\n        this.visitChildren(context, visit => {\n            visit(block.parameters);\n            visit(block.children);\n        });\n    }\n    visitBlockParameter(ast, context) { }\n    visitChildren(context, cb) {\n        let results = [];\n        let t = this;\n        function visit(children) {\n            if (children)\n                results.push(visitAll(t, children, context));\n        }\n        cb(visit);\n        return Array.prototype.concat.apply([], results);\n    }\n}\n\nclass ElementSchemaRegistry {\n}\n\nconst BOOLEAN = 'boolean';\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst OBJECT = 'object';\n/**\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\n *\n * ## Overview\n *\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\n * using `element_inheritance|properties` syntax.\n *\n * ## Element Inheritance\n *\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n * Here the individual elements are separated by `,` (commas). Every element in the list\n * has identical properties.\n *\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n * specified then `\"\"` (blank) element is assumed.\n *\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\n * elements.\n *\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n *\n * ## Properties\n *\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n * by a special character designating its type:\n *\n * - (no prefix): property is a string.\n * - `*`: property represents an event.\n * - `!`: property is a boolean.\n * - `#`: property is a number.\n * - `%`: property is an object.\n *\n * ## Query\n *\n * The class creates an internal squas representation which allows to easily answer the query of\n * if a given property exist on a given element.\n *\n * NOTE: We don't yet support querying for types or events.\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n *       see dom_element_schema_registry_spec.ts\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!\n//\n// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in\n// dom_security_schema.ts. Reach out to mprobst & rjamet for details.\n//\n// =================================================================================================\nconst SCHEMA = [\n    '[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot' +\n        /* added manually to avoid breaking changes */\n        ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',\n    '[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy',\n    'abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy',\n    'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume',\n    ':svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex',\n    ':svg:graphics^:svg:|',\n    ':svg:animation^:svg:|*begin,*end,*repeat',\n    ':svg:geometry^:svg:|',\n    ':svg:componentTransferFunction^:svg:|',\n    ':svg:gradient^:svg:|',\n    ':svg:textContent^:svg:graphics|',\n    ':svg:textPositioning^:svg:textContent|',\n    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username',\n    'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username',\n    'audio^media|',\n    'br^[HTMLElement]|clear',\n    'base^[HTMLElement]|href,target',\n    'body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n    'button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n    'canvas^[HTMLElement]|#height,#width',\n    'content^[HTMLElement]|select',\n    'dl^[HTMLElement]|!compact',\n    'data^[HTMLElement]|value',\n    'datalist^[HTMLElement]|',\n    'details^[HTMLElement]|!open',\n    'dialog^[HTMLElement]|!open,returnValue',\n    'dir^[HTMLElement]|!compact',\n    'div^[HTMLElement]|align',\n    'embed^[HTMLElement]|align,height,name,src,type,width',\n    'fieldset^[HTMLElement]|!disabled,name',\n    'font^[HTMLElement]|color,face,size',\n    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n    'frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n    'hr^[HTMLElement]|align,color,!noShade,size,width',\n    'head^[HTMLElement]|',\n    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n    'html^[HTMLElement]|version',\n    'iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n    'img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n    'input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n    'li^[HTMLElement]|type,#value',\n    'label^[HTMLElement]|htmlFor',\n    'legend^[HTMLElement]|align',\n    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',\n    'map^[HTMLElement]|name',\n    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n    'menu^[HTMLElement]|!compact',\n    'meta^[HTMLElement]|content,httpEquiv,media,name,scheme',\n    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n    'ins,del^[HTMLElement]|cite,dateTime',\n    'ol^[HTMLElement]|!compact,!reversed,#start,type',\n    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n    'optgroup^[HTMLElement]|!disabled,label',\n    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n    'p^[HTMLElement]|align',\n    'param^[HTMLElement]|name,type,value,valueType',\n    'picture^[HTMLElement]|',\n    'pre^[HTMLElement]|#width',\n    'progress^[HTMLElement]|#max,#value',\n    'q,blockquote,cite^[HTMLElement]|',\n    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type',\n    'select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n    'slot^[HTMLElement]|name',\n    'source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width',\n    'span^[HTMLElement]|',\n    'style^[HTMLElement]|!disabled,media,type',\n    'caption^[HTMLElement]|align',\n    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n    'template^[HTMLElement]|',\n    'textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n    'time^[HTMLElement]|dateTime',\n    'title^[HTMLElement]|text',\n    'track^[HTMLElement]|!default,kind,label,src,srclang',\n    'ul^[HTMLElement]|!compact,type',\n    'unknown^[HTMLElement]|',\n    'video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width',\n    ':svg:a^:svg:graphics|',\n    ':svg:animate^:svg:animation|',\n    ':svg:animateMotion^:svg:animation|',\n    ':svg:animateTransform^:svg:animation|',\n    ':svg:circle^:svg:geometry|',\n    ':svg:clipPath^:svg:graphics|',\n    ':svg:defs^:svg:graphics|',\n    ':svg:desc^:svg:|',\n    ':svg:discard^:svg:|',\n    ':svg:ellipse^:svg:geometry|',\n    ':svg:feBlend^:svg:|',\n    ':svg:feColorMatrix^:svg:|',\n    ':svg:feComponentTransfer^:svg:|',\n    ':svg:feComposite^:svg:|',\n    ':svg:feConvolveMatrix^:svg:|',\n    ':svg:feDiffuseLighting^:svg:|',\n    ':svg:feDisplacementMap^:svg:|',\n    ':svg:feDistantLight^:svg:|',\n    ':svg:feDropShadow^:svg:|',\n    ':svg:feFlood^:svg:|',\n    ':svg:feFuncA^:svg:componentTransferFunction|',\n    ':svg:feFuncB^:svg:componentTransferFunction|',\n    ':svg:feFuncG^:svg:componentTransferFunction|',\n    ':svg:feFuncR^:svg:componentTransferFunction|',\n    ':svg:feGaussianBlur^:svg:|',\n    ':svg:feImage^:svg:|',\n    ':svg:feMerge^:svg:|',\n    ':svg:feMergeNode^:svg:|',\n    ':svg:feMorphology^:svg:|',\n    ':svg:feOffset^:svg:|',\n    ':svg:fePointLight^:svg:|',\n    ':svg:feSpecularLighting^:svg:|',\n    ':svg:feSpotLight^:svg:|',\n    ':svg:feTile^:svg:|',\n    ':svg:feTurbulence^:svg:|',\n    ':svg:filter^:svg:|',\n    ':svg:foreignObject^:svg:graphics|',\n    ':svg:g^:svg:graphics|',\n    ':svg:image^:svg:graphics|decoding',\n    ':svg:line^:svg:geometry|',\n    ':svg:linearGradient^:svg:gradient|',\n    ':svg:mpath^:svg:|',\n    ':svg:marker^:svg:|',\n    ':svg:mask^:svg:|',\n    ':svg:metadata^:svg:|',\n    ':svg:path^:svg:geometry|',\n    ':svg:pattern^:svg:|',\n    ':svg:polygon^:svg:geometry|',\n    ':svg:polyline^:svg:geometry|',\n    ':svg:radialGradient^:svg:gradient|',\n    ':svg:rect^:svg:geometry|',\n    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n    ':svg:script^:svg:|type',\n    ':svg:set^:svg:animation|',\n    ':svg:stop^:svg:|',\n    ':svg:style^:svg:|!disabled,media,title,type',\n    ':svg:switch^:svg:graphics|',\n    ':svg:symbol^:svg:|',\n    ':svg:tspan^:svg:textPositioning|',\n    ':svg:text^:svg:textPositioning|',\n    ':svg:textPath^:svg:textContent|',\n    ':svg:title^:svg:|',\n    ':svg:use^:svg:graphics|',\n    ':svg:view^:svg:|#zoomAndPan',\n    'data^[HTMLElement]|value',\n    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',\n    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n    'summary^[HTMLElement]|',\n    'time^[HTMLElement]|dateTime',\n    ':svg:cursor^:svg:|',\n];\nconst _ATTR_TO_PROP = new Map(Object.entries({\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n}));\n// Invert _ATTR_TO_PROP.\nconst _PROP_TO_ATTR = Array.from(_ATTR_TO_PROP).reduce((inverted, [propertyName, attributeName]) => {\n    inverted.set(propertyName, attributeName);\n    return inverted;\n}, new Map());\nclass DomElementSchemaRegistry extends ElementSchemaRegistry {\n    constructor() {\n        super();\n        this._schema = new Map();\n        // We don't allow binding to events for security reasons. Allowing event bindings would almost\n        // certainly introduce bad XSS vulnerabilities. Instead, we store events in a separate schema.\n        this._eventSchema = new Map;\n        SCHEMA.forEach(encodedType => {\n            const type = new Map();\n            const events = new Set();\n            const [strType, strProperties] = encodedType.split('|');\n            const properties = strProperties.split(',');\n            const [typeNames, superName] = strType.split('^');\n            typeNames.split(',').forEach(tag => {\n                this._schema.set(tag.toLowerCase(), type);\n                this._eventSchema.set(tag.toLowerCase(), events);\n            });\n            const superType = superName && this._schema.get(superName.toLowerCase());\n            if (superType) {\n                for (const [prop, value] of superType) {\n                    type.set(prop, value);\n                }\n                for (const superEvent of this._eventSchema.get(superName.toLowerCase())) {\n                    events.add(superEvent);\n                }\n            }\n            properties.forEach((property) => {\n                if (property.length > 0) {\n                    switch (property[0]) {\n                        case '*':\n                            events.add(property.substring(1));\n                            break;\n                        case '!':\n                            type.set(property.substring(1), BOOLEAN);\n                            break;\n                        case '#':\n                            type.set(property.substring(1), NUMBER);\n                            break;\n                        case '%':\n                            type.set(property.substring(1), OBJECT);\n                            break;\n                        default:\n                            type.set(property, STRING);\n                    }\n                }\n            });\n        });\n    }\n    hasProperty(tagName, propName, schemaMetas) {\n        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return false;\n            }\n            if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n                // Can't tell now as we don't know which properties a custom element will get\n                // once it is instantiated\n                return true;\n            }\n        }\n        const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get('unknown');\n        return elementProperties.has(propName);\n    }\n    hasElement(tagName, schemaMetas) {\n        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return true;\n            }\n            if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n                // Allow any custom elements\n                return true;\n            }\n        }\n        return this._schema.has(tagName.toLowerCase());\n    }\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is based on a list of allowed tags|attributes. All attributes in the schema\n     * above are assumed to have the 'NONE' security context, i.e. that they are safe inert\n     * string values. Only specific well known attack vectors are assigned their appropriate context.\n     */\n    securityContext(tagName, propName, isAttribute) {\n        if (isAttribute) {\n            // NB: For security purposes, use the mapped property name, not the attribute name.\n            propName = this.getMappedPropName(propName);\n        }\n        // Make sure comparisons are case insensitive, so that case differences between attribute and\n        // property names do not have a security impact.\n        tagName = tagName.toLowerCase();\n        propName = propName.toLowerCase();\n        let ctx = SECURITY_SCHEMA()[tagName + '|' + propName];\n        if (ctx) {\n            return ctx;\n        }\n        ctx = SECURITY_SCHEMA()['*|' + propName];\n        return ctx ? ctx : SecurityContext.NONE;\n    }\n    getMappedPropName(propName) {\n        return _ATTR_TO_PROP.get(propName) ?? propName;\n    }\n    getDefaultComponentElementName() {\n        return 'ng-component';\n    }\n    validateProperty(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\n                `please use (${name.slice(2)})=...` +\n                `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n                ` current module.`;\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    validateAttribute(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n                `please use (${name.slice(2)})=...`;\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    allKnownElementNames() {\n        return Array.from(this._schema.keys());\n    }\n    allKnownAttributesOfElement(tagName) {\n        const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get('unknown');\n        // Convert properties to attributes.\n        return Array.from(elementProperties.keys()).map(prop => _PROP_TO_ATTR.get(prop) ?? prop);\n    }\n    allKnownEventsOfElement(tagName) {\n        return Array.from(this._eventSchema.get(tagName.toLowerCase()) ?? []);\n    }\n    normalizeAnimationStyleProperty(propName) {\n        return dashCaseToCamelCase(propName);\n    }\n    normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n        let unit = '';\n        const strVal = val.toString().trim();\n        let errorMsg = null;\n        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n            if (typeof val === 'number') {\n                unit = 'px';\n            }\n            else {\n                const valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;\n                }\n            }\n        }\n        return { error: errorMsg, value: strVal + unit };\n    }\n}\nfunction _isPixelDimensionStyle(prop) {\n    switch (prop) {\n        case 'width':\n        case 'height':\n        case 'minWidth':\n        case 'minHeight':\n        case 'maxWidth':\n        case 'maxHeight':\n        case 'left':\n        case 'top':\n        case 'bottom':\n        case 'right':\n        case 'fontSize':\n        case 'outlineWidth':\n        case 'outlineOffset':\n        case 'paddingTop':\n        case 'paddingLeft':\n        case 'paddingBottom':\n        case 'paddingRight':\n        case 'marginTop':\n        case 'marginLeft':\n        case 'marginBottom':\n        case 'marginRight':\n        case 'borderRadius':\n        case 'borderWidth':\n        case 'borderTopWidth':\n        case 'borderLeftWidth':\n        case 'borderRightWidth':\n        case 'borderBottomWidth':\n        case 'textIndent':\n            return true;\n        default:\n            return false;\n    }\n}\n\nclass HtmlTagDefinition {\n    constructor({ closedByChildren, implicitNamespacePrefix, contentType = TagContentType.PARSABLE_DATA, closedByParent = false, isVoid = false, ignoreFirstLf = false, preventNamespaceInheritance = false, canSelfClose = false, } = {}) {\n        this.closedByChildren = {};\n        this.closedByParent = false;\n        if (closedByChildren && closedByChildren.length > 0) {\n            closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);\n        }\n        this.isVoid = isVoid;\n        this.closedByParent = closedByParent || isVoid;\n        this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n        this.contentType = contentType;\n        this.ignoreFirstLf = ignoreFirstLf;\n        this.preventNamespaceInheritance = preventNamespaceInheritance;\n        this.canSelfClose = canSelfClose ?? isVoid;\n    }\n    isClosedByChild(name) {\n        return this.isVoid || name.toLowerCase() in this.closedByChildren;\n    }\n    getContentType(prefix) {\n        if (typeof this.contentType === 'object') {\n            const overrideType = prefix === undefined ? undefined : this.contentType[prefix];\n            return overrideType ?? this.contentType.default;\n        }\n        return this.contentType;\n    }\n}\nlet DEFAULT_TAG_DEFINITION;\n// see https://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\nlet TAG_DEFINITIONS;\nfunction getHtmlTagDefinition(tagName) {\n    if (!TAG_DEFINITIONS) {\n        DEFAULT_TAG_DEFINITION = new HtmlTagDefinition({ canSelfClose: true });\n        TAG_DEFINITIONS = Object.assign(Object.create(null), {\n            'base': new HtmlTagDefinition({ isVoid: true }),\n            'meta': new HtmlTagDefinition({ isVoid: true }),\n            'area': new HtmlTagDefinition({ isVoid: true }),\n            'embed': new HtmlTagDefinition({ isVoid: true }),\n            'link': new HtmlTagDefinition({ isVoid: true }),\n            'img': new HtmlTagDefinition({ isVoid: true }),\n            'input': new HtmlTagDefinition({ isVoid: true }),\n            'param': new HtmlTagDefinition({ isVoid: true }),\n            'hr': new HtmlTagDefinition({ isVoid: true }),\n            'br': new HtmlTagDefinition({ isVoid: true }),\n            'source': new HtmlTagDefinition({ isVoid: true }),\n            'track': new HtmlTagDefinition({ isVoid: true }),\n            'wbr': new HtmlTagDefinition({ isVoid: true }),\n            'p': new HtmlTagDefinition({\n                closedByChildren: [\n                    'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset',\n                    'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5',\n                    'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol',\n                    'p', 'pre', 'section', 'table', 'ul'\n                ],\n                closedByParent: true\n            }),\n            'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\n            'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\n            'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\n            'tr': new HtmlTagDefinition({ closedByChildren: ['tr'], closedByParent: true }),\n            'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n            'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n            'col': new HtmlTagDefinition({ isVoid: true }),\n            'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\n            'foreignObject': new HtmlTagDefinition({\n                // Usually the implicit namespace here would be redundant since it will be inherited from\n                // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser\n                // works is that the parent node of an end tag is its own start tag which means that\n                // the `preventNamespaceInheritance` on `foreignObject` would have it default to the\n                // implicit namespace which is `html`, unless specified otherwise.\n                implicitNamespacePrefix: 'svg',\n                // We want to prevent children of foreignObject from inheriting its namespace, because\n                // the point of the element is to allow nodes from other namespaces to be inserted.\n                preventNamespaceInheritance: true,\n            }),\n            'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\n            'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\n            'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\n            'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\n            'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\n            'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\n            'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\n            'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),\n            'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),\n            'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n            'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n            'title': new HtmlTagDefinition({\n                // The browser supports two separate `title` tags which have to use\n                // a different content type: `HTMLTitleElement` and `SVGTitleElement`\n                contentType: { default: TagContentType.ESCAPABLE_RAW_TEXT, svg: TagContentType.PARSABLE_DATA }\n            }),\n            'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\n        });\n        new DomElementSchemaRegistry().allKnownElementNames().forEach(knownTagName => {\n            if (!TAG_DEFINITIONS[knownTagName] && getNsPrefix(knownTagName) === null) {\n                TAG_DEFINITIONS[knownTagName] = new HtmlTagDefinition({ canSelfClose: false });\n            }\n        });\n    }\n    // We have to make both a case-sensitive and a case-insensitive lookup, because\n    // HTML tag names are case insensitive, whereas some SVG tags are case sensitive.\n    return TAG_DEFINITIONS[tagName] ?? TAG_DEFINITIONS[tagName.toLowerCase()] ??\n        DEFAULT_TAG_DEFINITION;\n}\n\nconst TAG_TO_PLACEHOLDER_NAMES = {\n    'A': 'LINK',\n    'B': 'BOLD_TEXT',\n    'BR': 'LINE_BREAK',\n    'EM': 'EMPHASISED_TEXT',\n    'H1': 'HEADING_LEVEL1',\n    'H2': 'HEADING_LEVEL2',\n    'H3': 'HEADING_LEVEL3',\n    'H4': 'HEADING_LEVEL4',\n    'H5': 'HEADING_LEVEL5',\n    'H6': 'HEADING_LEVEL6',\n    'HR': 'HORIZONTAL_RULE',\n    'I': 'ITALIC_TEXT',\n    'LI': 'LIST_ITEM',\n    'LINK': 'MEDIA_LINK',\n    'OL': 'ORDERED_LIST',\n    'P': 'PARAGRAPH',\n    'Q': 'QUOTATION',\n    'S': 'STRIKETHROUGH_TEXT',\n    'SMALL': 'SMALL_TEXT',\n    'SUB': 'SUBSTRIPT',\n    'SUP': 'SUPERSCRIPT',\n    'TBODY': 'TABLE_BODY',\n    'TD': 'TABLE_CELL',\n    'TFOOT': 'TABLE_FOOTER',\n    'TH': 'TABLE_HEADER_CELL',\n    'THEAD': 'TABLE_HEADER',\n    'TR': 'TABLE_ROW',\n    'TT': 'MONOSPACED_TEXT',\n    'U': 'UNDERLINED_TEXT',\n    'UL': 'UNORDERED_LIST',\n};\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nclass PlaceholderRegistry {\n    constructor() {\n        // Count the occurrence of the base name top generate a unique name\n        this._placeHolderNameCounts = {};\n        // Maps signature to placeholder names\n        this._signatureToName = {};\n    }\n    getStartTagPlaceholderName(tag, attrs, isVoid) {\n        const signature = this._hashTag(tag, attrs, isVoid);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const upperTag = tag.toUpperCase();\n        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n        const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n        this._signatureToName[signature] = name;\n        return name;\n    }\n    getCloseTagPlaceholderName(tag) {\n        const signature = this._hashClosingTag(tag);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const upperTag = tag.toUpperCase();\n        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n        const name = this._generateUniqueName(`CLOSE_${baseName}`);\n        this._signatureToName[signature] = name;\n        return name;\n    }\n    getPlaceholderName(name, content) {\n        const upperName = name.toUpperCase();\n        const signature = `PH: ${upperName}=${content}`;\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const uniqueName = this._generateUniqueName(upperName);\n        this._signatureToName[signature] = uniqueName;\n        return uniqueName;\n    }\n    getUniquePlaceholder(name) {\n        return this._generateUniqueName(name.toUpperCase());\n    }\n    getStartBlockPlaceholderName(name, parameters) {\n        const signature = this._hashBlock(name, parameters);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const placeholder = this._generateUniqueName(`START_BLOCK_${this._toSnakeCase(name)}`);\n        this._signatureToName[signature] = placeholder;\n        return placeholder;\n    }\n    getCloseBlockPlaceholderName(name) {\n        const signature = this._hashClosingBlock(name);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const placeholder = this._generateUniqueName(`CLOSE_BLOCK_${this._toSnakeCase(name)}`);\n        this._signatureToName[signature] = placeholder;\n        return placeholder;\n    }\n    // Generate a hash for a tag - does not take attribute order into account\n    _hashTag(tag, attrs, isVoid) {\n        const start = `<${tag}`;\n        const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');\n        const end = isVoid ? '/>' : `></${tag}>`;\n        return start + strAttrs + end;\n    }\n    _hashClosingTag(tag) {\n        return this._hashTag(`/${tag}`, {}, false);\n    }\n    _hashBlock(name, parameters) {\n        const params = parameters.length === 0 ? '' : ` (${parameters.sort().join('; ')})`;\n        return `@${name}${params} {}`;\n    }\n    _hashClosingBlock(name) {\n        return this._hashBlock(`close_${name}`, []);\n    }\n    _toSnakeCase(name) {\n        return name.toUpperCase().replace(/[^A-Z0-9]/g, '_');\n    }\n    _generateUniqueName(base) {\n        const seen = this._placeHolderNameCounts.hasOwnProperty(base);\n        if (!seen) {\n            this._placeHolderNameCounts[base] = 1;\n            return base;\n        }\n        const id = this._placeHolderNameCounts[base];\n        this._placeHolderNameCounts[base] = id + 1;\n        return `${base}_${id}`;\n    }\n}\n\nconst _expParser = new Parser$1(new Lexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n */\nfunction createI18nMessageFactory(interpolationConfig, containerBlocks) {\n    const visitor = new _I18nVisitor(_expParser, interpolationConfig, containerBlocks);\n    return (nodes, meaning, description, customId, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n}\nfunction noopVisitNodeFn(_html, i18n) {\n    return i18n;\n}\nclass _I18nVisitor {\n    constructor(_expressionParser, _interpolationConfig, _containerBlocks) {\n        this._expressionParser = _expressionParser;\n        this._interpolationConfig = _interpolationConfig;\n        this._containerBlocks = _containerBlocks;\n    }\n    toI18nMessage(nodes, meaning = '', description = '', customId = '', visitNodeFn) {\n        const context = {\n            isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,\n            icuDepth: 0,\n            placeholderRegistry: new PlaceholderRegistry(),\n            placeholderToContent: {},\n            placeholderToMessage: {},\n            visitNodeFn: visitNodeFn || noopVisitNodeFn,\n        };\n        const i18nodes = visitAll(this, nodes, context);\n        return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);\n    }\n    visitElement(el, context) {\n        const children = visitAll(this, el.children, context);\n        const attrs = {};\n        el.attrs.forEach(attr => {\n            // Do not visit the attributes, translatable ones are top-level ASTs\n            attrs[attr.name] = attr.value;\n        });\n        const isVoid = getHtmlTagDefinition(el.name).isVoid;\n        const startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n        context.placeholderToContent[startPhName] = {\n            text: el.startSourceSpan.toString(),\n            sourceSpan: el.startSourceSpan,\n        };\n        let closePhName = '';\n        if (!isVoid) {\n            closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);\n            context.placeholderToContent[closePhName] = {\n                text: `</${el.name}>`,\n                sourceSpan: el.endSourceSpan ?? el.sourceSpan,\n            };\n        }\n        const node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n        return context.visitNodeFn(el, node);\n    }\n    visitAttribute(attribute, context) {\n        const node = attribute.valueTokens === undefined || attribute.valueTokens.length === 1 ?\n            new Text$2(attribute.value, attribute.valueSpan || attribute.sourceSpan) :\n            this._visitTextWithInterpolation(attribute.valueTokens, attribute.valueSpan || attribute.sourceSpan, context, attribute.i18n);\n        return context.visitNodeFn(attribute, node);\n    }\n    visitText(text, context) {\n        const node = text.tokens.length === 1 ?\n            new Text$2(text.value, text.sourceSpan) :\n            this._visitTextWithInterpolation(text.tokens, text.sourceSpan, context, text.i18n);\n        return context.visitNodeFn(text, node);\n    }\n    visitComment(comment, context) {\n        return null;\n    }\n    visitExpansion(icu, context) {\n        context.icuDepth++;\n        const i18nIcuCases = {};\n        const i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n        icu.cases.forEach((caze) => {\n            i18nIcuCases[caze.value] = new Container(caze.expression.map((node) => node.visit(this, context)), caze.expSourceSpan);\n        });\n        context.icuDepth--;\n        if (context.isIcu || context.icuDepth > 0) {\n            // Returns an ICU node when:\n            // - the message (vs a part of the message) is an ICU message, or\n            // - the ICU message is nested.\n            const expPh = context.placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\n            i18nIcu.expressionPlaceholder = expPh;\n            context.placeholderToContent[expPh] = {\n                text: icu.switchValue,\n                sourceSpan: icu.switchValueSourceSpan,\n            };\n            return context.visitNodeFn(icu, i18nIcu);\n        }\n        // Else returns a placeholder\n        // ICU placeholders should not be replaced with their original content but with the their\n        // translations.\n        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n        const phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n        context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);\n        const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n        return context.visitNodeFn(icu, node);\n    }\n    visitExpansionCase(_icuCase, _context) {\n        throw new Error('Unreachable code');\n    }\n    visitBlock(block, context) {\n        const children = visitAll(this, block.children, context);\n        if (this._containerBlocks.has(block.name)) {\n            return new Container(children, block.sourceSpan);\n        }\n        const parameters = block.parameters.map(param => param.expression);\n        const startPhName = context.placeholderRegistry.getStartBlockPlaceholderName(block.name, parameters);\n        const closePhName = context.placeholderRegistry.getCloseBlockPlaceholderName(block.name);\n        context.placeholderToContent[startPhName] = {\n            text: block.startSourceSpan.toString(),\n            sourceSpan: block.startSourceSpan,\n        };\n        context.placeholderToContent[closePhName] = {\n            text: block.endSourceSpan ? block.endSourceSpan.toString() : '}',\n            sourceSpan: block.endSourceSpan ?? block.sourceSpan,\n        };\n        const node = new BlockPlaceholder(block.name, parameters, startPhName, closePhName, children, block.sourceSpan, block.startSourceSpan, block.endSourceSpan);\n        return context.visitNodeFn(block, node);\n    }\n    visitBlockParameter(_parameter, _context) {\n        throw new Error('Unreachable code');\n    }\n    /**\n     * Convert, text and interpolated tokens up into text and placeholder pieces.\n     *\n     * @param tokens The text and interpolated tokens.\n     * @param sourceSpan The span of the whole of the `text` string.\n     * @param context The current context of the visitor, used to compute and store placeholders.\n     * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.\n     */\n    _visitTextWithInterpolation(tokens, sourceSpan, context, previousI18n) {\n        // Return a sequence of `Text` and `Placeholder` nodes grouped in a `Container`.\n        const nodes = [];\n        // We will only create a container if there are actually interpolations,\n        // so this flag tracks that.\n        let hasInterpolation = false;\n        for (const token of tokens) {\n            switch (token.type) {\n                case 8 /* TokenType.INTERPOLATION */:\n                case 17 /* TokenType.ATTR_VALUE_INTERPOLATION */:\n                    hasInterpolation = true;\n                    const expression = token.parts[1];\n                    const baseName = extractPlaceholderName(expression) || 'INTERPOLATION';\n                    const phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);\n                    context.placeholderToContent[phName] = {\n                        text: token.parts.join(''),\n                        sourceSpan: token.sourceSpan\n                    };\n                    nodes.push(new Placeholder(expression, phName, token.sourceSpan));\n                    break;\n                default:\n                    if (token.parts[0].length > 0) {\n                        // This token is text or an encoded entity.\n                        // If it is following on from a previous text node then merge it into that node\n                        // Otherwise, if it is following an interpolation, then add a new node.\n                        const previous = nodes[nodes.length - 1];\n                        if (previous instanceof Text$2) {\n                            previous.value += token.parts[0];\n                            previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);\n                        }\n                        else {\n                            nodes.push(new Text$2(token.parts[0], token.sourceSpan));\n                        }\n                    }\n                    break;\n            }\n        }\n        if (hasInterpolation) {\n            // Whitespace removal may have invalidated the interpolation source-spans.\n            reusePreviousSourceSpans(nodes, previousI18n);\n            return new Container(nodes, sourceSpan);\n        }\n        else {\n            return nodes[0];\n        }\n    }\n}\n/**\n * Re-use the source-spans from `previousI18n` metadata for the `nodes`.\n *\n * Whitespace removal can invalidate the source-spans of interpolation nodes, so we\n * reuse the source-span stored from a previous pass before the whitespace was removed.\n *\n * @param nodes The `Text` and `Placeholder` nodes to be processed.\n * @param previousI18n Any i18n metadata for these `nodes` stored from a previous pass.\n */\nfunction reusePreviousSourceSpans(nodes, previousI18n) {\n    if (previousI18n instanceof Message) {\n        // The `previousI18n` is an i18n `Message`, so we are processing an `Attribute` with i18n\n        // metadata. The `Message` should consist only of a single `Container` that contains the\n        // parts (`Text` and `Placeholder`) to process.\n        assertSingleContainerMessage(previousI18n);\n        previousI18n = previousI18n.nodes[0];\n    }\n    if (previousI18n instanceof Container) {\n        // The `previousI18n` is a `Container`, which means that this is a second i18n extraction pass\n        // after whitespace has been removed from the AST nodes.\n        assertEquivalentNodes(previousI18n.children, nodes);\n        // Reuse the source-spans from the first pass.\n        for (let i = 0; i < nodes.length; i++) {\n            nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;\n        }\n    }\n}\n/**\n * Asserts that the `message` contains exactly one `Container` node.\n */\nfunction assertSingleContainerMessage(message) {\n    const nodes = message.nodes;\n    if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {\n        throw new Error('Unexpected previous i18n message - expected it to consist of only a single `Container` node.');\n    }\n}\n/**\n * Asserts that the `previousNodes` and `node` collections have the same number of elements and\n * corresponding elements have the same node type.\n */\nfunction assertEquivalentNodes(previousNodes, nodes) {\n    if (previousNodes.length !== nodes.length) {\n        throw new Error('The number of i18n message children changed between first and second pass.');\n    }\n    if (previousNodes.some((node, i) => nodes[i].constructor !== node.constructor)) {\n        throw new Error('The types of the i18n message children changed between first and second pass.');\n    }\n}\nconst _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\nfunction extractPlaceholderName(input) {\n    return input.split(_CUSTOM_PH_EXP)[2];\n}\n\n/**\n * An i18n error.\n */\nclass I18nError extends ParseError {\n    constructor(span, msg) {\n        super(span, msg);\n    }\n}\n\n// Mapping between all HTML entity names and their unicode representation.\n// Generated from https://html.spec.whatwg.org/multipage/entities.json by stripping\n// the `&` and `;` from the keys and removing the duplicates.\n// see https://www.w3.org/TR/html51/syntax.html#named-character-references\nconst NAMED_ENTITIES = {\n    'AElig': '\\u00C6',\n    'AMP': '\\u0026',\n    'amp': '\\u0026',\n    'Aacute': '\\u00C1',\n    'Abreve': '\\u0102',\n    'Acirc': '\\u00C2',\n    'Acy': '\\u0410',\n    'Afr': '\\uD835\\uDD04',\n    'Agrave': '\\u00C0',\n    'Alpha': '\\u0391',\n    'Amacr': '\\u0100',\n    'And': '\\u2A53',\n    'Aogon': '\\u0104',\n    'Aopf': '\\uD835\\uDD38',\n    'ApplyFunction': '\\u2061',\n    'af': '\\u2061',\n    'Aring': '\\u00C5',\n    'angst': '\\u00C5',\n    'Ascr': '\\uD835\\uDC9C',\n    'Assign': '\\u2254',\n    'colone': '\\u2254',\n    'coloneq': '\\u2254',\n    'Atilde': '\\u00C3',\n    'Auml': '\\u00C4',\n    'Backslash': '\\u2216',\n    'setminus': '\\u2216',\n    'setmn': '\\u2216',\n    'smallsetminus': '\\u2216',\n    'ssetmn': '\\u2216',\n    'Barv': '\\u2AE7',\n    'Barwed': '\\u2306',\n    'doublebarwedge': '\\u2306',\n    'Bcy': '\\u0411',\n    'Because': '\\u2235',\n    'becaus': '\\u2235',\n    'because': '\\u2235',\n    'Bernoullis': '\\u212C',\n    'Bscr': '\\u212C',\n    'bernou': '\\u212C',\n    'Beta': '\\u0392',\n    'Bfr': '\\uD835\\uDD05',\n    'Bopf': '\\uD835\\uDD39',\n    'Breve': '\\u02D8',\n    'breve': '\\u02D8',\n    'Bumpeq': '\\u224E',\n    'HumpDownHump': '\\u224E',\n    'bump': '\\u224E',\n    'CHcy': '\\u0427',\n    'COPY': '\\u00A9',\n    'copy': '\\u00A9',\n    'Cacute': '\\u0106',\n    'Cap': '\\u22D2',\n    'CapitalDifferentialD': '\\u2145',\n    'DD': '\\u2145',\n    'Cayleys': '\\u212D',\n    'Cfr': '\\u212D',\n    'Ccaron': '\\u010C',\n    'Ccedil': '\\u00C7',\n    'Ccirc': '\\u0108',\n    'Cconint': '\\u2230',\n    'Cdot': '\\u010A',\n    'Cedilla': '\\u00B8',\n    'cedil': '\\u00B8',\n    'CenterDot': '\\u00B7',\n    'centerdot': '\\u00B7',\n    'middot': '\\u00B7',\n    'Chi': '\\u03A7',\n    'CircleDot': '\\u2299',\n    'odot': '\\u2299',\n    'CircleMinus': '\\u2296',\n    'ominus': '\\u2296',\n    'CirclePlus': '\\u2295',\n    'oplus': '\\u2295',\n    'CircleTimes': '\\u2297',\n    'otimes': '\\u2297',\n    'ClockwiseContourIntegral': '\\u2232',\n    'cwconint': '\\u2232',\n    'CloseCurlyDoubleQuote': '\\u201D',\n    'rdquo': '\\u201D',\n    'rdquor': '\\u201D',\n    'CloseCurlyQuote': '\\u2019',\n    'rsquo': '\\u2019',\n    'rsquor': '\\u2019',\n    'Colon': '\\u2237',\n    'Proportion': '\\u2237',\n    'Colone': '\\u2A74',\n    'Congruent': '\\u2261',\n    'equiv': '\\u2261',\n    'Conint': '\\u222F',\n    'DoubleContourIntegral': '\\u222F',\n    'ContourIntegral': '\\u222E',\n    'conint': '\\u222E',\n    'oint': '\\u222E',\n    'Copf': '\\u2102',\n    'complexes': '\\u2102',\n    'Coproduct': '\\u2210',\n    'coprod': '\\u2210',\n    'CounterClockwiseContourIntegral': '\\u2233',\n    'awconint': '\\u2233',\n    'Cross': '\\u2A2F',\n    'Cscr': '\\uD835\\uDC9E',\n    'Cup': '\\u22D3',\n    'CupCap': '\\u224D',\n    'asympeq': '\\u224D',\n    'DDotrahd': '\\u2911',\n    'DJcy': '\\u0402',\n    'DScy': '\\u0405',\n    'DZcy': '\\u040F',\n    'Dagger': '\\u2021',\n    'ddagger': '\\u2021',\n    'Darr': '\\u21A1',\n    'Dashv': '\\u2AE4',\n    'DoubleLeftTee': '\\u2AE4',\n    'Dcaron': '\\u010E',\n    'Dcy': '\\u0414',\n    'Del': '\\u2207',\n    'nabla': '\\u2207',\n    'Delta': '\\u0394',\n    'Dfr': '\\uD835\\uDD07',\n    'DiacriticalAcute': '\\u00B4',\n    'acute': '\\u00B4',\n    'DiacriticalDot': '\\u02D9',\n    'dot': '\\u02D9',\n    'DiacriticalDoubleAcute': '\\u02DD',\n    'dblac': '\\u02DD',\n    'DiacriticalGrave': '\\u0060',\n    'grave': '\\u0060',\n    'DiacriticalTilde': '\\u02DC',\n    'tilde': '\\u02DC',\n    'Diamond': '\\u22C4',\n    'diam': '\\u22C4',\n    'diamond': '\\u22C4',\n    'DifferentialD': '\\u2146',\n    'dd': '\\u2146',\n    'Dopf': '\\uD835\\uDD3B',\n    'Dot': '\\u00A8',\n    'DoubleDot': '\\u00A8',\n    'die': '\\u00A8',\n    'uml': '\\u00A8',\n    'DotDot': '\\u20DC',\n    'DotEqual': '\\u2250',\n    'doteq': '\\u2250',\n    'esdot': '\\u2250',\n    'DoubleDownArrow': '\\u21D3',\n    'Downarrow': '\\u21D3',\n    'dArr': '\\u21D3',\n    'DoubleLeftArrow': '\\u21D0',\n    'Leftarrow': '\\u21D0',\n    'lArr': '\\u21D0',\n    'DoubleLeftRightArrow': '\\u21D4',\n    'Leftrightarrow': '\\u21D4',\n    'hArr': '\\u21D4',\n    'iff': '\\u21D4',\n    'DoubleLongLeftArrow': '\\u27F8',\n    'Longleftarrow': '\\u27F8',\n    'xlArr': '\\u27F8',\n    'DoubleLongLeftRightArrow': '\\u27FA',\n    'Longleftrightarrow': '\\u27FA',\n    'xhArr': '\\u27FA',\n    'DoubleLongRightArrow': '\\u27F9',\n    'Longrightarrow': '\\u27F9',\n    'xrArr': '\\u27F9',\n    'DoubleRightArrow': '\\u21D2',\n    'Implies': '\\u21D2',\n    'Rightarrow': '\\u21D2',\n    'rArr': '\\u21D2',\n    'DoubleRightTee': '\\u22A8',\n    'vDash': '\\u22A8',\n    'DoubleUpArrow': '\\u21D1',\n    'Uparrow': '\\u21D1',\n    'uArr': '\\u21D1',\n    'DoubleUpDownArrow': '\\u21D5',\n    'Updownarrow': '\\u21D5',\n    'vArr': '\\u21D5',\n    'DoubleVerticalBar': '\\u2225',\n    'par': '\\u2225',\n    'parallel': '\\u2225',\n    'shortparallel': '\\u2225',\n    'spar': '\\u2225',\n    'DownArrow': '\\u2193',\n    'ShortDownArrow': '\\u2193',\n    'darr': '\\u2193',\n    'downarrow': '\\u2193',\n    'DownArrowBar': '\\u2913',\n    'DownArrowUpArrow': '\\u21F5',\n    'duarr': '\\u21F5',\n    'DownBreve': '\\u0311',\n    'DownLeftRightVector': '\\u2950',\n    'DownLeftTeeVector': '\\u295E',\n    'DownLeftVector': '\\u21BD',\n    'leftharpoondown': '\\u21BD',\n    'lhard': '\\u21BD',\n    'DownLeftVectorBar': '\\u2956',\n    'DownRightTeeVector': '\\u295F',\n    'DownRightVector': '\\u21C1',\n    'rhard': '\\u21C1',\n    'rightharpoondown': '\\u21C1',\n    'DownRightVectorBar': '\\u2957',\n    'DownTee': '\\u22A4',\n    'top': '\\u22A4',\n    'DownTeeArrow': '\\u21A7',\n    'mapstodown': '\\u21A7',\n    'Dscr': '\\uD835\\uDC9F',\n    'Dstrok': '\\u0110',\n    'ENG': '\\u014A',\n    'ETH': '\\u00D0',\n    'Eacute': '\\u00C9',\n    'Ecaron': '\\u011A',\n    'Ecirc': '\\u00CA',\n    'Ecy': '\\u042D',\n    'Edot': '\\u0116',\n    'Efr': '\\uD835\\uDD08',\n    'Egrave': '\\u00C8',\n    'Element': '\\u2208',\n    'in': '\\u2208',\n    'isin': '\\u2208',\n    'isinv': '\\u2208',\n    'Emacr': '\\u0112',\n    'EmptySmallSquare': '\\u25FB',\n    'EmptyVerySmallSquare': '\\u25AB',\n    'Eogon': '\\u0118',\n    'Eopf': '\\uD835\\uDD3C',\n    'Epsilon': '\\u0395',\n    'Equal': '\\u2A75',\n    'EqualTilde': '\\u2242',\n    'eqsim': '\\u2242',\n    'esim': '\\u2242',\n    'Equilibrium': '\\u21CC',\n    'rightleftharpoons': '\\u21CC',\n    'rlhar': '\\u21CC',\n    'Escr': '\\u2130',\n    'expectation': '\\u2130',\n    'Esim': '\\u2A73',\n    'Eta': '\\u0397',\n    'Euml': '\\u00CB',\n    'Exists': '\\u2203',\n    'exist': '\\u2203',\n    'ExponentialE': '\\u2147',\n    'ee': '\\u2147',\n    'exponentiale': '\\u2147',\n    'Fcy': '\\u0424',\n    'Ffr': '\\uD835\\uDD09',\n    'FilledSmallSquare': '\\u25FC',\n    'FilledVerySmallSquare': '\\u25AA',\n    'blacksquare': '\\u25AA',\n    'squarf': '\\u25AA',\n    'squf': '\\u25AA',\n    'Fopf': '\\uD835\\uDD3D',\n    'ForAll': '\\u2200',\n    'forall': '\\u2200',\n    'Fouriertrf': '\\u2131',\n    'Fscr': '\\u2131',\n    'GJcy': '\\u0403',\n    'GT': '\\u003E',\n    'gt': '\\u003E',\n    'Gamma': '\\u0393',\n    'Gammad': '\\u03DC',\n    'Gbreve': '\\u011E',\n    'Gcedil': '\\u0122',\n    'Gcirc': '\\u011C',\n    'Gcy': '\\u0413',\n    'Gdot': '\\u0120',\n    'Gfr': '\\uD835\\uDD0A',\n    'Gg': '\\u22D9',\n    'ggg': '\\u22D9',\n    'Gopf': '\\uD835\\uDD3E',\n    'GreaterEqual': '\\u2265',\n    'ge': '\\u2265',\n    'geq': '\\u2265',\n    'GreaterEqualLess': '\\u22DB',\n    'gel': '\\u22DB',\n    'gtreqless': '\\u22DB',\n    'GreaterFullEqual': '\\u2267',\n    'gE': '\\u2267',\n    'geqq': '\\u2267',\n    'GreaterGreater': '\\u2AA2',\n    'GreaterLess': '\\u2277',\n    'gl': '\\u2277',\n    'gtrless': '\\u2277',\n    'GreaterSlantEqual': '\\u2A7E',\n    'geqslant': '\\u2A7E',\n    'ges': '\\u2A7E',\n    'GreaterTilde': '\\u2273',\n    'gsim': '\\u2273',\n    'gtrsim': '\\u2273',\n    'Gscr': '\\uD835\\uDCA2',\n    'Gt': '\\u226B',\n    'NestedGreaterGreater': '\\u226B',\n    'gg': '\\u226B',\n    'HARDcy': '\\u042A',\n    'Hacek': '\\u02C7',\n    'caron': '\\u02C7',\n    'Hat': '\\u005E',\n    'Hcirc': '\\u0124',\n    'Hfr': '\\u210C',\n    'Poincareplane': '\\u210C',\n    'HilbertSpace': '\\u210B',\n    'Hscr': '\\u210B',\n    'hamilt': '\\u210B',\n    'Hopf': '\\u210D',\n    'quaternions': '\\u210D',\n    'HorizontalLine': '\\u2500',\n    'boxh': '\\u2500',\n    'Hstrok': '\\u0126',\n    'HumpEqual': '\\u224F',\n    'bumpe': '\\u224F',\n    'bumpeq': '\\u224F',\n    'IEcy': '\\u0415',\n    'IJlig': '\\u0132',\n    'IOcy': '\\u0401',\n    'Iacute': '\\u00CD',\n    'Icirc': '\\u00CE',\n    'Icy': '\\u0418',\n    'Idot': '\\u0130',\n    'Ifr': '\\u2111',\n    'Im': '\\u2111',\n    'image': '\\u2111',\n    'imagpart': '\\u2111',\n    'Igrave': '\\u00CC',\n    'Imacr': '\\u012A',\n    'ImaginaryI': '\\u2148',\n    'ii': '\\u2148',\n    'Int': '\\u222C',\n    'Integral': '\\u222B',\n    'int': '\\u222B',\n    'Intersection': '\\u22C2',\n    'bigcap': '\\u22C2',\n    'xcap': '\\u22C2',\n    'InvisibleComma': '\\u2063',\n    'ic': '\\u2063',\n    'InvisibleTimes': '\\u2062',\n    'it': '\\u2062',\n    'Iogon': '\\u012E',\n    'Iopf': '\\uD835\\uDD40',\n    'Iota': '\\u0399',\n    'Iscr': '\\u2110',\n    'imagline': '\\u2110',\n    'Itilde': '\\u0128',\n    'Iukcy': '\\u0406',\n    'Iuml': '\\u00CF',\n    'Jcirc': '\\u0134',\n    'Jcy': '\\u0419',\n    'Jfr': '\\uD835\\uDD0D',\n    'Jopf': '\\uD835\\uDD41',\n    'Jscr': '\\uD835\\uDCA5',\n    'Jsercy': '\\u0408',\n    'Jukcy': '\\u0404',\n    'KHcy': '\\u0425',\n    'KJcy': '\\u040C',\n    'Kappa': '\\u039A',\n    'Kcedil': '\\u0136',\n    'Kcy': '\\u041A',\n    'Kfr': '\\uD835\\uDD0E',\n    'Kopf': '\\uD835\\uDD42',\n    'Kscr': '\\uD835\\uDCA6',\n    'LJcy': '\\u0409',\n    'LT': '\\u003C',\n    'lt': '\\u003C',\n    'Lacute': '\\u0139',\n    'Lambda': '\\u039B',\n    'Lang': '\\u27EA',\n    'Laplacetrf': '\\u2112',\n    'Lscr': '\\u2112',\n    'lagran': '\\u2112',\n    'Larr': '\\u219E',\n    'twoheadleftarrow': '\\u219E',\n    'Lcaron': '\\u013D',\n    'Lcedil': '\\u013B',\n    'Lcy': '\\u041B',\n    'LeftAngleBracket': '\\u27E8',\n    'lang': '\\u27E8',\n    'langle': '\\u27E8',\n    'LeftArrow': '\\u2190',\n    'ShortLeftArrow': '\\u2190',\n    'larr': '\\u2190',\n    'leftarrow': '\\u2190',\n    'slarr': '\\u2190',\n    'LeftArrowBar': '\\u21E4',\n    'larrb': '\\u21E4',\n    'LeftArrowRightArrow': '\\u21C6',\n    'leftrightarrows': '\\u21C6',\n    'lrarr': '\\u21C6',\n    'LeftCeiling': '\\u2308',\n    'lceil': '\\u2308',\n    'LeftDoubleBracket': '\\u27E6',\n    'lobrk': '\\u27E6',\n    'LeftDownTeeVector': '\\u2961',\n    'LeftDownVector': '\\u21C3',\n    'dharl': '\\u21C3',\n    'downharpoonleft': '\\u21C3',\n    'LeftDownVectorBar': '\\u2959',\n    'LeftFloor': '\\u230A',\n    'lfloor': '\\u230A',\n    'LeftRightArrow': '\\u2194',\n    'harr': '\\u2194',\n    'leftrightarrow': '\\u2194',\n    'LeftRightVector': '\\u294E',\n    'LeftTee': '\\u22A3',\n    'dashv': '\\u22A3',\n    'LeftTeeArrow': '\\u21A4',\n    'mapstoleft': '\\u21A4',\n    'LeftTeeVector': '\\u295A',\n    'LeftTriangle': '\\u22B2',\n    'vartriangleleft': '\\u22B2',\n    'vltri': '\\u22B2',\n    'LeftTriangleBar': '\\u29CF',\n    'LeftTriangleEqual': '\\u22B4',\n    'ltrie': '\\u22B4',\n    'trianglelefteq': '\\u22B4',\n    'LeftUpDownVector': '\\u2951',\n    'LeftUpTeeVector': '\\u2960',\n    'LeftUpVector': '\\u21BF',\n    'uharl': '\\u21BF',\n    'upharpoonleft': '\\u21BF',\n    'LeftUpVectorBar': '\\u2958',\n    'LeftVector': '\\u21BC',\n    'leftharpoonup': '\\u21BC',\n    'lharu': '\\u21BC',\n    'LeftVectorBar': '\\u2952',\n    'LessEqualGreater': '\\u22DA',\n    'leg': '\\u22DA',\n    'lesseqgtr': '\\u22DA',\n    'LessFullEqual': '\\u2266',\n    'lE': '\\u2266',\n    'leqq': '\\u2266',\n    'LessGreater': '\\u2276',\n    'lessgtr': '\\u2276',\n    'lg': '\\u2276',\n    'LessLess': '\\u2AA1',\n    'LessSlantEqual': '\\u2A7D',\n    'leqslant': '\\u2A7D',\n    'les': '\\u2A7D',\n    'LessTilde': '\\u2272',\n    'lesssim': '\\u2272',\n    'lsim': '\\u2272',\n    'Lfr': '\\uD835\\uDD0F',\n    'Ll': '\\u22D8',\n    'Lleftarrow': '\\u21DA',\n    'lAarr': '\\u21DA',\n    'Lmidot': '\\u013F',\n    'LongLeftArrow': '\\u27F5',\n    'longleftarrow': '\\u27F5',\n    'xlarr': '\\u27F5',\n    'LongLeftRightArrow': '\\u27F7',\n    'longleftrightarrow': '\\u27F7',\n    'xharr': '\\u27F7',\n    'LongRightArrow': '\\u27F6',\n    'longrightarrow': '\\u27F6',\n    'xrarr': '\\u27F6',\n    'Lopf': '\\uD835\\uDD43',\n    'LowerLeftArrow': '\\u2199',\n    'swarr': '\\u2199',\n    'swarrow': '\\u2199',\n    'LowerRightArrow': '\\u2198',\n    'searr': '\\u2198',\n    'searrow': '\\u2198',\n    'Lsh': '\\u21B0',\n    'lsh': '\\u21B0',\n    'Lstrok': '\\u0141',\n    'Lt': '\\u226A',\n    'NestedLessLess': '\\u226A',\n    'll': '\\u226A',\n    'Map': '\\u2905',\n    'Mcy': '\\u041C',\n    'MediumSpace': '\\u205F',\n    'Mellintrf': '\\u2133',\n    'Mscr': '\\u2133',\n    'phmmat': '\\u2133',\n    'Mfr': '\\uD835\\uDD10',\n    'MinusPlus': '\\u2213',\n    'mnplus': '\\u2213',\n    'mp': '\\u2213',\n    'Mopf': '\\uD835\\uDD44',\n    'Mu': '\\u039C',\n    'NJcy': '\\u040A',\n    'Nacute': '\\u0143',\n    'Ncaron': '\\u0147',\n    'Ncedil': '\\u0145',\n    'Ncy': '\\u041D',\n    'NegativeMediumSpace': '\\u200B',\n    'NegativeThickSpace': '\\u200B',\n    'NegativeThinSpace': '\\u200B',\n    'NegativeVeryThinSpace': '\\u200B',\n    'ZeroWidthSpace': '\\u200B',\n    'NewLine': '\\u000A',\n    'Nfr': '\\uD835\\uDD11',\n    'NoBreak': '\\u2060',\n    'NonBreakingSpace': '\\u00A0',\n    'nbsp': '\\u00A0',\n    'Nopf': '\\u2115',\n    'naturals': '\\u2115',\n    'Not': '\\u2AEC',\n    'NotCongruent': '\\u2262',\n    'nequiv': '\\u2262',\n    'NotCupCap': '\\u226D',\n    'NotDoubleVerticalBar': '\\u2226',\n    'npar': '\\u2226',\n    'nparallel': '\\u2226',\n    'nshortparallel': '\\u2226',\n    'nspar': '\\u2226',\n    'NotElement': '\\u2209',\n    'notin': '\\u2209',\n    'notinva': '\\u2209',\n    'NotEqual': '\\u2260',\n    'ne': '\\u2260',\n    'NotEqualTilde': '\\u2242\\u0338',\n    'nesim': '\\u2242\\u0338',\n    'NotExists': '\\u2204',\n    'nexist': '\\u2204',\n    'nexists': '\\u2204',\n    'NotGreater': '\\u226F',\n    'ngt': '\\u226F',\n    'ngtr': '\\u226F',\n    'NotGreaterEqual': '\\u2271',\n    'nge': '\\u2271',\n    'ngeq': '\\u2271',\n    'NotGreaterFullEqual': '\\u2267\\u0338',\n    'ngE': '\\u2267\\u0338',\n    'ngeqq': '\\u2267\\u0338',\n    'NotGreaterGreater': '\\u226B\\u0338',\n    'nGtv': '\\u226B\\u0338',\n    'NotGreaterLess': '\\u2279',\n    'ntgl': '\\u2279',\n    'NotGreaterSlantEqual': '\\u2A7E\\u0338',\n    'ngeqslant': '\\u2A7E\\u0338',\n    'nges': '\\u2A7E\\u0338',\n    'NotGreaterTilde': '\\u2275',\n    'ngsim': '\\u2275',\n    'NotHumpDownHump': '\\u224E\\u0338',\n    'nbump': '\\u224E\\u0338',\n    'NotHumpEqual': '\\u224F\\u0338',\n    'nbumpe': '\\u224F\\u0338',\n    'NotLeftTriangle': '\\u22EA',\n    'nltri': '\\u22EA',\n    'ntriangleleft': '\\u22EA',\n    'NotLeftTriangleBar': '\\u29CF\\u0338',\n    'NotLeftTriangleEqual': '\\u22EC',\n    'nltrie': '\\u22EC',\n    'ntrianglelefteq': '\\u22EC',\n    'NotLess': '\\u226E',\n    'nless': '\\u226E',\n    'nlt': '\\u226E',\n    'NotLessEqual': '\\u2270',\n    'nle': '\\u2270',\n    'nleq': '\\u2270',\n    'NotLessGreater': '\\u2278',\n    'ntlg': '\\u2278',\n    'NotLessLess': '\\u226A\\u0338',\n    'nLtv': '\\u226A\\u0338',\n    'NotLessSlantEqual': '\\u2A7D\\u0338',\n    'nleqslant': '\\u2A7D\\u0338',\n    'nles': '\\u2A7D\\u0338',\n    'NotLessTilde': '\\u2274',\n    'nlsim': '\\u2274',\n    'NotNestedGreaterGreater': '\\u2AA2\\u0338',\n    'NotNestedLessLess': '\\u2AA1\\u0338',\n    'NotPrecedes': '\\u2280',\n    'npr': '\\u2280',\n    'nprec': '\\u2280',\n    'NotPrecedesEqual': '\\u2AAF\\u0338',\n    'npre': '\\u2AAF\\u0338',\n    'npreceq': '\\u2AAF\\u0338',\n    'NotPrecedesSlantEqual': '\\u22E0',\n    'nprcue': '\\u22E0',\n    'NotReverseElement': '\\u220C',\n    'notni': '\\u220C',\n    'notniva': '\\u220C',\n    'NotRightTriangle': '\\u22EB',\n    'nrtri': '\\u22EB',\n    'ntriangleright': '\\u22EB',\n    'NotRightTriangleBar': '\\u29D0\\u0338',\n    'NotRightTriangleEqual': '\\u22ED',\n    'nrtrie': '\\u22ED',\n    'ntrianglerighteq': '\\u22ED',\n    'NotSquareSubset': '\\u228F\\u0338',\n    'NotSquareSubsetEqual': '\\u22E2',\n    'nsqsube': '\\u22E2',\n    'NotSquareSuperset': '\\u2290\\u0338',\n    'NotSquareSupersetEqual': '\\u22E3',\n    'nsqsupe': '\\u22E3',\n    'NotSubset': '\\u2282\\u20D2',\n    'nsubset': '\\u2282\\u20D2',\n    'vnsub': '\\u2282\\u20D2',\n    'NotSubsetEqual': '\\u2288',\n    'nsube': '\\u2288',\n    'nsubseteq': '\\u2288',\n    'NotSucceeds': '\\u2281',\n    'nsc': '\\u2281',\n    'nsucc': '\\u2281',\n    'NotSucceedsEqual': '\\u2AB0\\u0338',\n    'nsce': '\\u2AB0\\u0338',\n    'nsucceq': '\\u2AB0\\u0338',\n    'NotSucceedsSlantEqual': '\\u22E1',\n    'nsccue': '\\u22E1',\n    'NotSucceedsTilde': '\\u227F\\u0338',\n    'NotSuperset': '\\u2283\\u20D2',\n    'nsupset': '\\u2283\\u20D2',\n    'vnsup': '\\u2283\\u20D2',\n    'NotSupersetEqual': '\\u2289',\n    'nsupe': '\\u2289',\n    'nsupseteq': '\\u2289',\n    'NotTilde': '\\u2241',\n    'nsim': '\\u2241',\n    'NotTildeEqual': '\\u2244',\n    'nsime': '\\u2244',\n    'nsimeq': '\\u2244',\n    'NotTildeFullEqual': '\\u2247',\n    'ncong': '\\u2247',\n    'NotTildeTilde': '\\u2249',\n    'nap': '\\u2249',\n    'napprox': '\\u2249',\n    'NotVerticalBar': '\\u2224',\n    'nmid': '\\u2224',\n    'nshortmid': '\\u2224',\n    'nsmid': '\\u2224',\n    'Nscr': '\\uD835\\uDCA9',\n    'Ntilde': '\\u00D1',\n    'Nu': '\\u039D',\n    'OElig': '\\u0152',\n    'Oacute': '\\u00D3',\n    'Ocirc': '\\u00D4',\n    'Ocy': '\\u041E',\n    'Odblac': '\\u0150',\n    'Ofr': '\\uD835\\uDD12',\n    'Ograve': '\\u00D2',\n    'Omacr': '\\u014C',\n    'Omega': '\\u03A9',\n    'ohm': '\\u03A9',\n    'Omicron': '\\u039F',\n    'Oopf': '\\uD835\\uDD46',\n    'OpenCurlyDoubleQuote': '\\u201C',\n    'ldquo': '\\u201C',\n    'OpenCurlyQuote': '\\u2018',\n    'lsquo': '\\u2018',\n    'Or': '\\u2A54',\n    'Oscr': '\\uD835\\uDCAA',\n    'Oslash': '\\u00D8',\n    'Otilde': '\\u00D5',\n    'Otimes': '\\u2A37',\n    'Ouml': '\\u00D6',\n    'OverBar': '\\u203E',\n    'oline': '\\u203E',\n    'OverBrace': '\\u23DE',\n    'OverBracket': '\\u23B4',\n    'tbrk': '\\u23B4',\n    'OverParenthesis': '\\u23DC',\n    'PartialD': '\\u2202',\n    'part': '\\u2202',\n    'Pcy': '\\u041F',\n    'Pfr': '\\uD835\\uDD13',\n    'Phi': '\\u03A6',\n    'Pi': '\\u03A0',\n    'PlusMinus': '\\u00B1',\n    'plusmn': '\\u00B1',\n    'pm': '\\u00B1',\n    'Popf': '\\u2119',\n    'primes': '\\u2119',\n    'Pr': '\\u2ABB',\n    'Precedes': '\\u227A',\n    'pr': '\\u227A',\n    'prec': '\\u227A',\n    'PrecedesEqual': '\\u2AAF',\n    'pre': '\\u2AAF',\n    'preceq': '\\u2AAF',\n    'PrecedesSlantEqual': '\\u227C',\n    'prcue': '\\u227C',\n    'preccurlyeq': '\\u227C',\n    'PrecedesTilde': '\\u227E',\n    'precsim': '\\u227E',\n    'prsim': '\\u227E',\n    'Prime': '\\u2033',\n    'Product': '\\u220F',\n    'prod': '\\u220F',\n    'Proportional': '\\u221D',\n    'prop': '\\u221D',\n    'propto': '\\u221D',\n    'varpropto': '\\u221D',\n    'vprop': '\\u221D',\n    'Pscr': '\\uD835\\uDCAB',\n    'Psi': '\\u03A8',\n    'QUOT': '\\u0022',\n    'quot': '\\u0022',\n    'Qfr': '\\uD835\\uDD14',\n    'Qopf': '\\u211A',\n    'rationals': '\\u211A',\n    'Qscr': '\\uD835\\uDCAC',\n    'RBarr': '\\u2910',\n    'drbkarow': '\\u2910',\n    'REG': '\\u00AE',\n    'circledR': '\\u00AE',\n    'reg': '\\u00AE',\n    'Racute': '\\u0154',\n    'Rang': '\\u27EB',\n    'Rarr': '\\u21A0',\n    'twoheadrightarrow': '\\u21A0',\n    'Rarrtl': '\\u2916',\n    'Rcaron': '\\u0158',\n    'Rcedil': '\\u0156',\n    'Rcy': '\\u0420',\n    'Re': '\\u211C',\n    'Rfr': '\\u211C',\n    'real': '\\u211C',\n    'realpart': '\\u211C',\n    'ReverseElement': '\\u220B',\n    'SuchThat': '\\u220B',\n    'ni': '\\u220B',\n    'niv': '\\u220B',\n    'ReverseEquilibrium': '\\u21CB',\n    'leftrightharpoons': '\\u21CB',\n    'lrhar': '\\u21CB',\n    'ReverseUpEquilibrium': '\\u296F',\n    'duhar': '\\u296F',\n    'Rho': '\\u03A1',\n    'RightAngleBracket': '\\u27E9',\n    'rang': '\\u27E9',\n    'rangle': '\\u27E9',\n    'RightArrow': '\\u2192',\n    'ShortRightArrow': '\\u2192',\n    'rarr': '\\u2192',\n    'rightarrow': '\\u2192',\n    'srarr': '\\u2192',\n    'RightArrowBar': '\\u21E5',\n    'rarrb': '\\u21E5',\n    'RightArrowLeftArrow': '\\u21C4',\n    'rightleftarrows': '\\u21C4',\n    'rlarr': '\\u21C4',\n    'RightCeiling': '\\u2309',\n    'rceil': '\\u2309',\n    'RightDoubleBracket': '\\u27E7',\n    'robrk': '\\u27E7',\n    'RightDownTeeVector': '\\u295D',\n    'RightDownVector': '\\u21C2',\n    'dharr': '\\u21C2',\n    'downharpoonright': '\\u21C2',\n    'RightDownVectorBar': '\\u2955',\n    'RightFloor': '\\u230B',\n    'rfloor': '\\u230B',\n    'RightTee': '\\u22A2',\n    'vdash': '\\u22A2',\n    'RightTeeArrow': '\\u21A6',\n    'map': '\\u21A6',\n    'mapsto': '\\u21A6',\n    'RightTeeVector': '\\u295B',\n    'RightTriangle': '\\u22B3',\n    'vartriangleright': '\\u22B3',\n    'vrtri': '\\u22B3',\n    'RightTriangleBar': '\\u29D0',\n    'RightTriangleEqual': '\\u22B5',\n    'rtrie': '\\u22B5',\n    'trianglerighteq': '\\u22B5',\n    'RightUpDownVector': '\\u294F',\n    'RightUpTeeVector': '\\u295C',\n    'RightUpVector': '\\u21BE',\n    'uharr': '\\u21BE',\n    'upharpoonright': '\\u21BE',\n    'RightUpVectorBar': '\\u2954',\n    'RightVector': '\\u21C0',\n    'rharu': '\\u21C0',\n    'rightharpoonup': '\\u21C0',\n    'RightVectorBar': '\\u2953',\n    'Ropf': '\\u211D',\n    'reals': '\\u211D',\n    'RoundImplies': '\\u2970',\n    'Rrightarrow': '\\u21DB',\n    'rAarr': '\\u21DB',\n    'Rscr': '\\u211B',\n    'realine': '\\u211B',\n    'Rsh': '\\u21B1',\n    'rsh': '\\u21B1',\n    'RuleDelayed': '\\u29F4',\n    'SHCHcy': '\\u0429',\n    'SHcy': '\\u0428',\n    'SOFTcy': '\\u042C',\n    'Sacute': '\\u015A',\n    'Sc': '\\u2ABC',\n    'Scaron': '\\u0160',\n    'Scedil': '\\u015E',\n    'Scirc': '\\u015C',\n    'Scy': '\\u0421',\n    'Sfr': '\\uD835\\uDD16',\n    'ShortUpArrow': '\\u2191',\n    'UpArrow': '\\u2191',\n    'uarr': '\\u2191',\n    'uparrow': '\\u2191',\n    'Sigma': '\\u03A3',\n    'SmallCircle': '\\u2218',\n    'compfn': '\\u2218',\n    'Sopf': '\\uD835\\uDD4A',\n    'Sqrt': '\\u221A',\n    'radic': '\\u221A',\n    'Square': '\\u25A1',\n    'squ': '\\u25A1',\n    'square': '\\u25A1',\n    'SquareIntersection': '\\u2293',\n    'sqcap': '\\u2293',\n    'SquareSubset': '\\u228F',\n    'sqsub': '\\u228F',\n    'sqsubset': '\\u228F',\n    'SquareSubsetEqual': '\\u2291',\n    'sqsube': '\\u2291',\n    'sqsubseteq': '\\u2291',\n    'SquareSuperset': '\\u2290',\n    'sqsup': '\\u2290',\n    'sqsupset': '\\u2290',\n    'SquareSupersetEqual': '\\u2292',\n    'sqsupe': '\\u2292',\n    'sqsupseteq': '\\u2292',\n    'SquareUnion': '\\u2294',\n    'sqcup': '\\u2294',\n    'Sscr': '\\uD835\\uDCAE',\n    'Star': '\\u22C6',\n    'sstarf': '\\u22C6',\n    'Sub': '\\u22D0',\n    'Subset': '\\u22D0',\n    'SubsetEqual': '\\u2286',\n    'sube': '\\u2286',\n    'subseteq': '\\u2286',\n    'Succeeds': '\\u227B',\n    'sc': '\\u227B',\n    'succ': '\\u227B',\n    'SucceedsEqual': '\\u2AB0',\n    'sce': '\\u2AB0',\n    'succeq': '\\u2AB0',\n    'SucceedsSlantEqual': '\\u227D',\n    'sccue': '\\u227D',\n    'succcurlyeq': '\\u227D',\n    'SucceedsTilde': '\\u227F',\n    'scsim': '\\u227F',\n    'succsim': '\\u227F',\n    'Sum': '\\u2211',\n    'sum': '\\u2211',\n    'Sup': '\\u22D1',\n    'Supset': '\\u22D1',\n    'Superset': '\\u2283',\n    'sup': '\\u2283',\n    'supset': '\\u2283',\n    'SupersetEqual': '\\u2287',\n    'supe': '\\u2287',\n    'supseteq': '\\u2287',\n    'THORN': '\\u00DE',\n    'TRADE': '\\u2122',\n    'trade': '\\u2122',\n    'TSHcy': '\\u040B',\n    'TScy': '\\u0426',\n    'Tab': '\\u0009',\n    'Tau': '\\u03A4',\n    'Tcaron': '\\u0164',\n    'Tcedil': '\\u0162',\n    'Tcy': '\\u0422',\n    'Tfr': '\\uD835\\uDD17',\n    'Therefore': '\\u2234',\n    'there4': '\\u2234',\n    'therefore': '\\u2234',\n    'Theta': '\\u0398',\n    'ThickSpace': '\\u205F\\u200A',\n    'ThinSpace': '\\u2009',\n    'thinsp': '\\u2009',\n    'Tilde': '\\u223C',\n    'sim': '\\u223C',\n    'thicksim': '\\u223C',\n    'thksim': '\\u223C',\n    'TildeEqual': '\\u2243',\n    'sime': '\\u2243',\n    'simeq': '\\u2243',\n    'TildeFullEqual': '\\u2245',\n    'cong': '\\u2245',\n    'TildeTilde': '\\u2248',\n    'ap': '\\u2248',\n    'approx': '\\u2248',\n    'asymp': '\\u2248',\n    'thickapprox': '\\u2248',\n    'thkap': '\\u2248',\n    'Topf': '\\uD835\\uDD4B',\n    'TripleDot': '\\u20DB',\n    'tdot': '\\u20DB',\n    'Tscr': '\\uD835\\uDCAF',\n    'Tstrok': '\\u0166',\n    'Uacute': '\\u00DA',\n    'Uarr': '\\u219F',\n    'Uarrocir': '\\u2949',\n    'Ubrcy': '\\u040E',\n    'Ubreve': '\\u016C',\n    'Ucirc': '\\u00DB',\n    'Ucy': '\\u0423',\n    'Udblac': '\\u0170',\n    'Ufr': '\\uD835\\uDD18',\n    'Ugrave': '\\u00D9',\n    'Umacr': '\\u016A',\n    'UnderBar': '\\u005F',\n    'lowbar': '\\u005F',\n    'UnderBrace': '\\u23DF',\n    'UnderBracket': '\\u23B5',\n    'bbrk': '\\u23B5',\n    'UnderParenthesis': '\\u23DD',\n    'Union': '\\u22C3',\n    'bigcup': '\\u22C3',\n    'xcup': '\\u22C3',\n    'UnionPlus': '\\u228E',\n    'uplus': '\\u228E',\n    'Uogon': '\\u0172',\n    'Uopf': '\\uD835\\uDD4C',\n    'UpArrowBar': '\\u2912',\n    'UpArrowDownArrow': '\\u21C5',\n    'udarr': '\\u21C5',\n    'UpDownArrow': '\\u2195',\n    'updownarrow': '\\u2195',\n    'varr': '\\u2195',\n    'UpEquilibrium': '\\u296E',\n    'udhar': '\\u296E',\n    'UpTee': '\\u22A5',\n    'bot': '\\u22A5',\n    'bottom': '\\u22A5',\n    'perp': '\\u22A5',\n    'UpTeeArrow': '\\u21A5',\n    'mapstoup': '\\u21A5',\n    'UpperLeftArrow': '\\u2196',\n    'nwarr': '\\u2196',\n    'nwarrow': '\\u2196',\n    'UpperRightArrow': '\\u2197',\n    'nearr': '\\u2197',\n    'nearrow': '\\u2197',\n    'Upsi': '\\u03D2',\n    'upsih': '\\u03D2',\n    'Upsilon': '\\u03A5',\n    'Uring': '\\u016E',\n    'Uscr': '\\uD835\\uDCB0',\n    'Utilde': '\\u0168',\n    'Uuml': '\\u00DC',\n    'VDash': '\\u22AB',\n    'Vbar': '\\u2AEB',\n    'Vcy': '\\u0412',\n    'Vdash': '\\u22A9',\n    'Vdashl': '\\u2AE6',\n    'Vee': '\\u22C1',\n    'bigvee': '\\u22C1',\n    'xvee': '\\u22C1',\n    'Verbar': '\\u2016',\n    'Vert': '\\u2016',\n    'VerticalBar': '\\u2223',\n    'mid': '\\u2223',\n    'shortmid': '\\u2223',\n    'smid': '\\u2223',\n    'VerticalLine': '\\u007C',\n    'verbar': '\\u007C',\n    'vert': '\\u007C',\n    'VerticalSeparator': '\\u2758',\n    'VerticalTilde': '\\u2240',\n    'wr': '\\u2240',\n    'wreath': '\\u2240',\n    'VeryThinSpace': '\\u200A',\n    'hairsp': '\\u200A',\n    'Vfr': '\\uD835\\uDD19',\n    'Vopf': '\\uD835\\uDD4D',\n    'Vscr': '\\uD835\\uDCB1',\n    'Vvdash': '\\u22AA',\n    'Wcirc': '\\u0174',\n    'Wedge': '\\u22C0',\n    'bigwedge': '\\u22C0',\n    'xwedge': '\\u22C0',\n    'Wfr': '\\uD835\\uDD1A',\n    'Wopf': '\\uD835\\uDD4E',\n    'Wscr': '\\uD835\\uDCB2',\n    'Xfr': '\\uD835\\uDD1B',\n    'Xi': '\\u039E',\n    'Xopf': '\\uD835\\uDD4F',\n    'Xscr': '\\uD835\\uDCB3',\n    'YAcy': '\\u042F',\n    'YIcy': '\\u0407',\n    'YUcy': '\\u042E',\n    'Yacute': '\\u00DD',\n    'Ycirc': '\\u0176',\n    'Ycy': '\\u042B',\n    'Yfr': '\\uD835\\uDD1C',\n    'Yopf': '\\uD835\\uDD50',\n    'Yscr': '\\uD835\\uDCB4',\n    'Yuml': '\\u0178',\n    'ZHcy': '\\u0416',\n    'Zacute': '\\u0179',\n    'Zcaron': '\\u017D',\n    'Zcy': '\\u0417',\n    'Zdot': '\\u017B',\n    'Zeta': '\\u0396',\n    'Zfr': '\\u2128',\n    'zeetrf': '\\u2128',\n    'Zopf': '\\u2124',\n    'integers': '\\u2124',\n    'Zscr': '\\uD835\\uDCB5',\n    'aacute': '\\u00E1',\n    'abreve': '\\u0103',\n    'ac': '\\u223E',\n    'mstpos': '\\u223E',\n    'acE': '\\u223E\\u0333',\n    'acd': '\\u223F',\n    'acirc': '\\u00E2',\n    'acy': '\\u0430',\n    'aelig': '\\u00E6',\n    'afr': '\\uD835\\uDD1E',\n    'agrave': '\\u00E0',\n    'alefsym': '\\u2135',\n    'aleph': '\\u2135',\n    'alpha': '\\u03B1',\n    'amacr': '\\u0101',\n    'amalg': '\\u2A3F',\n    'and': '\\u2227',\n    'wedge': '\\u2227',\n    'andand': '\\u2A55',\n    'andd': '\\u2A5C',\n    'andslope': '\\u2A58',\n    'andv': '\\u2A5A',\n    'ang': '\\u2220',\n    'angle': '\\u2220',\n    'ange': '\\u29A4',\n    'angmsd': '\\u2221',\n    'measuredangle': '\\u2221',\n    'angmsdaa': '\\u29A8',\n    'angmsdab': '\\u29A9',\n    'angmsdac': '\\u29AA',\n    'angmsdad': '\\u29AB',\n    'angmsdae': '\\u29AC',\n    'angmsdaf': '\\u29AD',\n    'angmsdag': '\\u29AE',\n    'angmsdah': '\\u29AF',\n    'angrt': '\\u221F',\n    'angrtvb': '\\u22BE',\n    'angrtvbd': '\\u299D',\n    'angsph': '\\u2222',\n    'angzarr': '\\u237C',\n    'aogon': '\\u0105',\n    'aopf': '\\uD835\\uDD52',\n    'apE': '\\u2A70',\n    'apacir': '\\u2A6F',\n    'ape': '\\u224A',\n    'approxeq': '\\u224A',\n    'apid': '\\u224B',\n    'apos': '\\u0027',\n    'aring': '\\u00E5',\n    'ascr': '\\uD835\\uDCB6',\n    'ast': '\\u002A',\n    'midast': '\\u002A',\n    'atilde': '\\u00E3',\n    'auml': '\\u00E4',\n    'awint': '\\u2A11',\n    'bNot': '\\u2AED',\n    'backcong': '\\u224C',\n    'bcong': '\\u224C',\n    'backepsilon': '\\u03F6',\n    'bepsi': '\\u03F6',\n    'backprime': '\\u2035',\n    'bprime': '\\u2035',\n    'backsim': '\\u223D',\n    'bsim': '\\u223D',\n    'backsimeq': '\\u22CD',\n    'bsime': '\\u22CD',\n    'barvee': '\\u22BD',\n    'barwed': '\\u2305',\n    'barwedge': '\\u2305',\n    'bbrktbrk': '\\u23B6',\n    'bcy': '\\u0431',\n    'bdquo': '\\u201E',\n    'ldquor': '\\u201E',\n    'bemptyv': '\\u29B0',\n    'beta': '\\u03B2',\n    'beth': '\\u2136',\n    'between': '\\u226C',\n    'twixt': '\\u226C',\n    'bfr': '\\uD835\\uDD1F',\n    'bigcirc': '\\u25EF',\n    'xcirc': '\\u25EF',\n    'bigodot': '\\u2A00',\n    'xodot': '\\u2A00',\n    'bigoplus': '\\u2A01',\n    'xoplus': '\\u2A01',\n    'bigotimes': '\\u2A02',\n    'xotime': '\\u2A02',\n    'bigsqcup': '\\u2A06',\n    'xsqcup': '\\u2A06',\n    'bigstar': '\\u2605',\n    'starf': '\\u2605',\n    'bigtriangledown': '\\u25BD',\n    'xdtri': '\\u25BD',\n    'bigtriangleup': '\\u25B3',\n    'xutri': '\\u25B3',\n    'biguplus': '\\u2A04',\n    'xuplus': '\\u2A04',\n    'bkarow': '\\u290D',\n    'rbarr': '\\u290D',\n    'blacklozenge': '\\u29EB',\n    'lozf': '\\u29EB',\n    'blacktriangle': '\\u25B4',\n    'utrif': '\\u25B4',\n    'blacktriangledown': '\\u25BE',\n    'dtrif': '\\u25BE',\n    'blacktriangleleft': '\\u25C2',\n    'ltrif': '\\u25C2',\n    'blacktriangleright': '\\u25B8',\n    'rtrif': '\\u25B8',\n    'blank': '\\u2423',\n    'blk12': '\\u2592',\n    'blk14': '\\u2591',\n    'blk34': '\\u2593',\n    'block': '\\u2588',\n    'bne': '\\u003D\\u20E5',\n    'bnequiv': '\\u2261\\u20E5',\n    'bnot': '\\u2310',\n    'bopf': '\\uD835\\uDD53',\n    'bowtie': '\\u22C8',\n    'boxDL': '\\u2557',\n    'boxDR': '\\u2554',\n    'boxDl': '\\u2556',\n    'boxDr': '\\u2553',\n    'boxH': '\\u2550',\n    'boxHD': '\\u2566',\n    'boxHU': '\\u2569',\n    'boxHd': '\\u2564',\n    'boxHu': '\\u2567',\n    'boxUL': '\\u255D',\n    'boxUR': '\\u255A',\n    'boxUl': '\\u255C',\n    'boxUr': '\\u2559',\n    'boxV': '\\u2551',\n    'boxVH': '\\u256C',\n    'boxVL': '\\u2563',\n    'boxVR': '\\u2560',\n    'boxVh': '\\u256B',\n    'boxVl': '\\u2562',\n    'boxVr': '\\u255F',\n    'boxbox': '\\u29C9',\n    'boxdL': '\\u2555',\n    'boxdR': '\\u2552',\n    'boxdl': '\\u2510',\n    'boxdr': '\\u250C',\n    'boxhD': '\\u2565',\n    'boxhU': '\\u2568',\n    'boxhd': '\\u252C',\n    'boxhu': '\\u2534',\n    'boxminus': '\\u229F',\n    'minusb': '\\u229F',\n    'boxplus': '\\u229E',\n    'plusb': '\\u229E',\n    'boxtimes': '\\u22A0',\n    'timesb': '\\u22A0',\n    'boxuL': '\\u255B',\n    'boxuR': '\\u2558',\n    'boxul': '\\u2518',\n    'boxur': '\\u2514',\n    'boxv': '\\u2502',\n    'boxvH': '\\u256A',\n    'boxvL': '\\u2561',\n    'boxvR': '\\u255E',\n    'boxvh': '\\u253C',\n    'boxvl': '\\u2524',\n    'boxvr': '\\u251C',\n    'brvbar': '\\u00A6',\n    'bscr': '\\uD835\\uDCB7',\n    'bsemi': '\\u204F',\n    'bsol': '\\u005C',\n    'bsolb': '\\u29C5',\n    'bsolhsub': '\\u27C8',\n    'bull': '\\u2022',\n    'bullet': '\\u2022',\n    'bumpE': '\\u2AAE',\n    'cacute': '\\u0107',\n    'cap': '\\u2229',\n    'capand': '\\u2A44',\n    'capbrcup': '\\u2A49',\n    'capcap': '\\u2A4B',\n    'capcup': '\\u2A47',\n    'capdot': '\\u2A40',\n    'caps': '\\u2229\\uFE00',\n    'caret': '\\u2041',\n    'ccaps': '\\u2A4D',\n    'ccaron': '\\u010D',\n    'ccedil': '\\u00E7',\n    'ccirc': '\\u0109',\n    'ccups': '\\u2A4C',\n    'ccupssm': '\\u2A50',\n    'cdot': '\\u010B',\n    'cemptyv': '\\u29B2',\n    'cent': '\\u00A2',\n    'cfr': '\\uD835\\uDD20',\n    'chcy': '\\u0447',\n    'check': '\\u2713',\n    'checkmark': '\\u2713',\n    'chi': '\\u03C7',\n    'cir': '\\u25CB',\n    'cirE': '\\u29C3',\n    'circ': '\\u02C6',\n    'circeq': '\\u2257',\n    'cire': '\\u2257',\n    'circlearrowleft': '\\u21BA',\n    'olarr': '\\u21BA',\n    'circlearrowright': '\\u21BB',\n    'orarr': '\\u21BB',\n    'circledS': '\\u24C8',\n    'oS': '\\u24C8',\n    'circledast': '\\u229B',\n    'oast': '\\u229B',\n    'circledcirc': '\\u229A',\n    'ocir': '\\u229A',\n    'circleddash': '\\u229D',\n    'odash': '\\u229D',\n    'cirfnint': '\\u2A10',\n    'cirmid': '\\u2AEF',\n    'cirscir': '\\u29C2',\n    'clubs': '\\u2663',\n    'clubsuit': '\\u2663',\n    'colon': '\\u003A',\n    'comma': '\\u002C',\n    'commat': '\\u0040',\n    'comp': '\\u2201',\n    'complement': '\\u2201',\n    'congdot': '\\u2A6D',\n    'copf': '\\uD835\\uDD54',\n    'copysr': '\\u2117',\n    'crarr': '\\u21B5',\n    'cross': '\\u2717',\n    'cscr': '\\uD835\\uDCB8',\n    'csub': '\\u2ACF',\n    'csube': '\\u2AD1',\n    'csup': '\\u2AD0',\n    'csupe': '\\u2AD2',\n    'ctdot': '\\u22EF',\n    'cudarrl': '\\u2938',\n    'cudarrr': '\\u2935',\n    'cuepr': '\\u22DE',\n    'curlyeqprec': '\\u22DE',\n    'cuesc': '\\u22DF',\n    'curlyeqsucc': '\\u22DF',\n    'cularr': '\\u21B6',\n    'curvearrowleft': '\\u21B6',\n    'cularrp': '\\u293D',\n    'cup': '\\u222A',\n    'cupbrcap': '\\u2A48',\n    'cupcap': '\\u2A46',\n    'cupcup': '\\u2A4A',\n    'cupdot': '\\u228D',\n    'cupor': '\\u2A45',\n    'cups': '\\u222A\\uFE00',\n    'curarr': '\\u21B7',\n    'curvearrowright': '\\u21B7',\n    'curarrm': '\\u293C',\n    'curlyvee': '\\u22CE',\n    'cuvee': '\\u22CE',\n    'curlywedge': '\\u22CF',\n    'cuwed': '\\u22CF',\n    'curren': '\\u00A4',\n    'cwint': '\\u2231',\n    'cylcty': '\\u232D',\n    'dHar': '\\u2965',\n    'dagger': '\\u2020',\n    'daleth': '\\u2138',\n    'dash': '\\u2010',\n    'hyphen': '\\u2010',\n    'dbkarow': '\\u290F',\n    'rBarr': '\\u290F',\n    'dcaron': '\\u010F',\n    'dcy': '\\u0434',\n    'ddarr': '\\u21CA',\n    'downdownarrows': '\\u21CA',\n    'ddotseq': '\\u2A77',\n    'eDDot': '\\u2A77',\n    'deg': '\\u00B0',\n    'delta': '\\u03B4',\n    'demptyv': '\\u29B1',\n    'dfisht': '\\u297F',\n    'dfr': '\\uD835\\uDD21',\n    'diamondsuit': '\\u2666',\n    'diams': '\\u2666',\n    'digamma': '\\u03DD',\n    'gammad': '\\u03DD',\n    'disin': '\\u22F2',\n    'div': '\\u00F7',\n    'divide': '\\u00F7',\n    'divideontimes': '\\u22C7',\n    'divonx': '\\u22C7',\n    'djcy': '\\u0452',\n    'dlcorn': '\\u231E',\n    'llcorner': '\\u231E',\n    'dlcrop': '\\u230D',\n    'dollar': '\\u0024',\n    'dopf': '\\uD835\\uDD55',\n    'doteqdot': '\\u2251',\n    'eDot': '\\u2251',\n    'dotminus': '\\u2238',\n    'minusd': '\\u2238',\n    'dotplus': '\\u2214',\n    'plusdo': '\\u2214',\n    'dotsquare': '\\u22A1',\n    'sdotb': '\\u22A1',\n    'drcorn': '\\u231F',\n    'lrcorner': '\\u231F',\n    'drcrop': '\\u230C',\n    'dscr': '\\uD835\\uDCB9',\n    'dscy': '\\u0455',\n    'dsol': '\\u29F6',\n    'dstrok': '\\u0111',\n    'dtdot': '\\u22F1',\n    'dtri': '\\u25BF',\n    'triangledown': '\\u25BF',\n    'dwangle': '\\u29A6',\n    'dzcy': '\\u045F',\n    'dzigrarr': '\\u27FF',\n    'eacute': '\\u00E9',\n    'easter': '\\u2A6E',\n    'ecaron': '\\u011B',\n    'ecir': '\\u2256',\n    'eqcirc': '\\u2256',\n    'ecirc': '\\u00EA',\n    'ecolon': '\\u2255',\n    'eqcolon': '\\u2255',\n    'ecy': '\\u044D',\n    'edot': '\\u0117',\n    'efDot': '\\u2252',\n    'fallingdotseq': '\\u2252',\n    'efr': '\\uD835\\uDD22',\n    'eg': '\\u2A9A',\n    'egrave': '\\u00E8',\n    'egs': '\\u2A96',\n    'eqslantgtr': '\\u2A96',\n    'egsdot': '\\u2A98',\n    'el': '\\u2A99',\n    'elinters': '\\u23E7',\n    'ell': '\\u2113',\n    'els': '\\u2A95',\n    'eqslantless': '\\u2A95',\n    'elsdot': '\\u2A97',\n    'emacr': '\\u0113',\n    'empty': '\\u2205',\n    'emptyset': '\\u2205',\n    'emptyv': '\\u2205',\n    'varnothing': '\\u2205',\n    'emsp13': '\\u2004',\n    'emsp14': '\\u2005',\n    'emsp': '\\u2003',\n    'eng': '\\u014B',\n    'ensp': '\\u2002',\n    'eogon': '\\u0119',\n    'eopf': '\\uD835\\uDD56',\n    'epar': '\\u22D5',\n    'eparsl': '\\u29E3',\n    'eplus': '\\u2A71',\n    'epsi': '\\u03B5',\n    'epsilon': '\\u03B5',\n    'epsiv': '\\u03F5',\n    'straightepsilon': '\\u03F5',\n    'varepsilon': '\\u03F5',\n    'equals': '\\u003D',\n    'equest': '\\u225F',\n    'questeq': '\\u225F',\n    'equivDD': '\\u2A78',\n    'eqvparsl': '\\u29E5',\n    'erDot': '\\u2253',\n    'risingdotseq': '\\u2253',\n    'erarr': '\\u2971',\n    'escr': '\\u212F',\n    'eta': '\\u03B7',\n    'eth': '\\u00F0',\n    'euml': '\\u00EB',\n    'euro': '\\u20AC',\n    'excl': '\\u0021',\n    'fcy': '\\u0444',\n    'female': '\\u2640',\n    'ffilig': '\\uFB03',\n    'fflig': '\\uFB00',\n    'ffllig': '\\uFB04',\n    'ffr': '\\uD835\\uDD23',\n    'filig': '\\uFB01',\n    'fjlig': '\\u0066\\u006A',\n    'flat': '\\u266D',\n    'fllig': '\\uFB02',\n    'fltns': '\\u25B1',\n    'fnof': '\\u0192',\n    'fopf': '\\uD835\\uDD57',\n    'fork': '\\u22D4',\n    'pitchfork': '\\u22D4',\n    'forkv': '\\u2AD9',\n    'fpartint': '\\u2A0D',\n    'frac12': '\\u00BD',\n    'half': '\\u00BD',\n    'frac13': '\\u2153',\n    'frac14': '\\u00BC',\n    'frac15': '\\u2155',\n    'frac16': '\\u2159',\n    'frac18': '\\u215B',\n    'frac23': '\\u2154',\n    'frac25': '\\u2156',\n    'frac34': '\\u00BE',\n    'frac35': '\\u2157',\n    'frac38': '\\u215C',\n    'frac45': '\\u2158',\n    'frac56': '\\u215A',\n    'frac58': '\\u215D',\n    'frac78': '\\u215E',\n    'frasl': '\\u2044',\n    'frown': '\\u2322',\n    'sfrown': '\\u2322',\n    'fscr': '\\uD835\\uDCBB',\n    'gEl': '\\u2A8C',\n    'gtreqqless': '\\u2A8C',\n    'gacute': '\\u01F5',\n    'gamma': '\\u03B3',\n    'gap': '\\u2A86',\n    'gtrapprox': '\\u2A86',\n    'gbreve': '\\u011F',\n    'gcirc': '\\u011D',\n    'gcy': '\\u0433',\n    'gdot': '\\u0121',\n    'gescc': '\\u2AA9',\n    'gesdot': '\\u2A80',\n    'gesdoto': '\\u2A82',\n    'gesdotol': '\\u2A84',\n    'gesl': '\\u22DB\\uFE00',\n    'gesles': '\\u2A94',\n    'gfr': '\\uD835\\uDD24',\n    'gimel': '\\u2137',\n    'gjcy': '\\u0453',\n    'glE': '\\u2A92',\n    'gla': '\\u2AA5',\n    'glj': '\\u2AA4',\n    'gnE': '\\u2269',\n    'gneqq': '\\u2269',\n    'gnap': '\\u2A8A',\n    'gnapprox': '\\u2A8A',\n    'gne': '\\u2A88',\n    'gneq': '\\u2A88',\n    'gnsim': '\\u22E7',\n    'gopf': '\\uD835\\uDD58',\n    'gscr': '\\u210A',\n    'gsime': '\\u2A8E',\n    'gsiml': '\\u2A90',\n    'gtcc': '\\u2AA7',\n    'gtcir': '\\u2A7A',\n    'gtdot': '\\u22D7',\n    'gtrdot': '\\u22D7',\n    'gtlPar': '\\u2995',\n    'gtquest': '\\u2A7C',\n    'gtrarr': '\\u2978',\n    'gvertneqq': '\\u2269\\uFE00',\n    'gvnE': '\\u2269\\uFE00',\n    'hardcy': '\\u044A',\n    'harrcir': '\\u2948',\n    'harrw': '\\u21AD',\n    'leftrightsquigarrow': '\\u21AD',\n    'hbar': '\\u210F',\n    'hslash': '\\u210F',\n    'planck': '\\u210F',\n    'plankv': '\\u210F',\n    'hcirc': '\\u0125',\n    'hearts': '\\u2665',\n    'heartsuit': '\\u2665',\n    'hellip': '\\u2026',\n    'mldr': '\\u2026',\n    'hercon': '\\u22B9',\n    'hfr': '\\uD835\\uDD25',\n    'hksearow': '\\u2925',\n    'searhk': '\\u2925',\n    'hkswarow': '\\u2926',\n    'swarhk': '\\u2926',\n    'hoarr': '\\u21FF',\n    'homtht': '\\u223B',\n    'hookleftarrow': '\\u21A9',\n    'larrhk': '\\u21A9',\n    'hookrightarrow': '\\u21AA',\n    'rarrhk': '\\u21AA',\n    'hopf': '\\uD835\\uDD59',\n    'horbar': '\\u2015',\n    'hscr': '\\uD835\\uDCBD',\n    'hstrok': '\\u0127',\n    'hybull': '\\u2043',\n    'iacute': '\\u00ED',\n    'icirc': '\\u00EE',\n    'icy': '\\u0438',\n    'iecy': '\\u0435',\n    'iexcl': '\\u00A1',\n    'ifr': '\\uD835\\uDD26',\n    'igrave': '\\u00EC',\n    'iiiint': '\\u2A0C',\n    'qint': '\\u2A0C',\n    'iiint': '\\u222D',\n    'tint': '\\u222D',\n    'iinfin': '\\u29DC',\n    'iiota': '\\u2129',\n    'ijlig': '\\u0133',\n    'imacr': '\\u012B',\n    'imath': '\\u0131',\n    'inodot': '\\u0131',\n    'imof': '\\u22B7',\n    'imped': '\\u01B5',\n    'incare': '\\u2105',\n    'infin': '\\u221E',\n    'infintie': '\\u29DD',\n    'intcal': '\\u22BA',\n    'intercal': '\\u22BA',\n    'intlarhk': '\\u2A17',\n    'intprod': '\\u2A3C',\n    'iprod': '\\u2A3C',\n    'iocy': '\\u0451',\n    'iogon': '\\u012F',\n    'iopf': '\\uD835\\uDD5A',\n    'iota': '\\u03B9',\n    'iquest': '\\u00BF',\n    'iscr': '\\uD835\\uDCBE',\n    'isinE': '\\u22F9',\n    'isindot': '\\u22F5',\n    'isins': '\\u22F4',\n    'isinsv': '\\u22F3',\n    'itilde': '\\u0129',\n    'iukcy': '\\u0456',\n    'iuml': '\\u00EF',\n    'jcirc': '\\u0135',\n    'jcy': '\\u0439',\n    'jfr': '\\uD835\\uDD27',\n    'jmath': '\\u0237',\n    'jopf': '\\uD835\\uDD5B',\n    'jscr': '\\uD835\\uDCBF',\n    'jsercy': '\\u0458',\n    'jukcy': '\\u0454',\n    'kappa': '\\u03BA',\n    'kappav': '\\u03F0',\n    'varkappa': '\\u03F0',\n    'kcedil': '\\u0137',\n    'kcy': '\\u043A',\n    'kfr': '\\uD835\\uDD28',\n    'kgreen': '\\u0138',\n    'khcy': '\\u0445',\n    'kjcy': '\\u045C',\n    'kopf': '\\uD835\\uDD5C',\n    'kscr': '\\uD835\\uDCC0',\n    'lAtail': '\\u291B',\n    'lBarr': '\\u290E',\n    'lEg': '\\u2A8B',\n    'lesseqqgtr': '\\u2A8B',\n    'lHar': '\\u2962',\n    'lacute': '\\u013A',\n    'laemptyv': '\\u29B4',\n    'lambda': '\\u03BB',\n    'langd': '\\u2991',\n    'lap': '\\u2A85',\n    'lessapprox': '\\u2A85',\n    'laquo': '\\u00AB',\n    'larrbfs': '\\u291F',\n    'larrfs': '\\u291D',\n    'larrlp': '\\u21AB',\n    'looparrowleft': '\\u21AB',\n    'larrpl': '\\u2939',\n    'larrsim': '\\u2973',\n    'larrtl': '\\u21A2',\n    'leftarrowtail': '\\u21A2',\n    'lat': '\\u2AAB',\n    'latail': '\\u2919',\n    'late': '\\u2AAD',\n    'lates': '\\u2AAD\\uFE00',\n    'lbarr': '\\u290C',\n    'lbbrk': '\\u2772',\n    'lbrace': '\\u007B',\n    'lcub': '\\u007B',\n    'lbrack': '\\u005B',\n    'lsqb': '\\u005B',\n    'lbrke': '\\u298B',\n    'lbrksld': '\\u298F',\n    'lbrkslu': '\\u298D',\n    'lcaron': '\\u013E',\n    'lcedil': '\\u013C',\n    'lcy': '\\u043B',\n    'ldca': '\\u2936',\n    'ldrdhar': '\\u2967',\n    'ldrushar': '\\u294B',\n    'ldsh': '\\u21B2',\n    'le': '\\u2264',\n    'leq': '\\u2264',\n    'leftleftarrows': '\\u21C7',\n    'llarr': '\\u21C7',\n    'leftthreetimes': '\\u22CB',\n    'lthree': '\\u22CB',\n    'lescc': '\\u2AA8',\n    'lesdot': '\\u2A7F',\n    'lesdoto': '\\u2A81',\n    'lesdotor': '\\u2A83',\n    'lesg': '\\u22DA\\uFE00',\n    'lesges': '\\u2A93',\n    'lessdot': '\\u22D6',\n    'ltdot': '\\u22D6',\n    'lfisht': '\\u297C',\n    'lfr': '\\uD835\\uDD29',\n    'lgE': '\\u2A91',\n    'lharul': '\\u296A',\n    'lhblk': '\\u2584',\n    'ljcy': '\\u0459',\n    'llhard': '\\u296B',\n    'lltri': '\\u25FA',\n    'lmidot': '\\u0140',\n    'lmoust': '\\u23B0',\n    'lmoustache': '\\u23B0',\n    'lnE': '\\u2268',\n    'lneqq': '\\u2268',\n    'lnap': '\\u2A89',\n    'lnapprox': '\\u2A89',\n    'lne': '\\u2A87',\n    'lneq': '\\u2A87',\n    'lnsim': '\\u22E6',\n    'loang': '\\u27EC',\n    'loarr': '\\u21FD',\n    'longmapsto': '\\u27FC',\n    'xmap': '\\u27FC',\n    'looparrowright': '\\u21AC',\n    'rarrlp': '\\u21AC',\n    'lopar': '\\u2985',\n    'lopf': '\\uD835\\uDD5D',\n    'loplus': '\\u2A2D',\n    'lotimes': '\\u2A34',\n    'lowast': '\\u2217',\n    'loz': '\\u25CA',\n    'lozenge': '\\u25CA',\n    'lpar': '\\u0028',\n    'lparlt': '\\u2993',\n    'lrhard': '\\u296D',\n    'lrm': '\\u200E',\n    'lrtri': '\\u22BF',\n    'lsaquo': '\\u2039',\n    'lscr': '\\uD835\\uDCC1',\n    'lsime': '\\u2A8D',\n    'lsimg': '\\u2A8F',\n    'lsquor': '\\u201A',\n    'sbquo': '\\u201A',\n    'lstrok': '\\u0142',\n    'ltcc': '\\u2AA6',\n    'ltcir': '\\u2A79',\n    'ltimes': '\\u22C9',\n    'ltlarr': '\\u2976',\n    'ltquest': '\\u2A7B',\n    'ltrPar': '\\u2996',\n    'ltri': '\\u25C3',\n    'triangleleft': '\\u25C3',\n    'lurdshar': '\\u294A',\n    'luruhar': '\\u2966',\n    'lvertneqq': '\\u2268\\uFE00',\n    'lvnE': '\\u2268\\uFE00',\n    'mDDot': '\\u223A',\n    'macr': '\\u00AF',\n    'strns': '\\u00AF',\n    'male': '\\u2642',\n    'malt': '\\u2720',\n    'maltese': '\\u2720',\n    'marker': '\\u25AE',\n    'mcomma': '\\u2A29',\n    'mcy': '\\u043C',\n    'mdash': '\\u2014',\n    'mfr': '\\uD835\\uDD2A',\n    'mho': '\\u2127',\n    'micro': '\\u00B5',\n    'midcir': '\\u2AF0',\n    'minus': '\\u2212',\n    'minusdu': '\\u2A2A',\n    'mlcp': '\\u2ADB',\n    'models': '\\u22A7',\n    'mopf': '\\uD835\\uDD5E',\n    'mscr': '\\uD835\\uDCC2',\n    'mu': '\\u03BC',\n    'multimap': '\\u22B8',\n    'mumap': '\\u22B8',\n    'nGg': '\\u22D9\\u0338',\n    'nGt': '\\u226B\\u20D2',\n    'nLeftarrow': '\\u21CD',\n    'nlArr': '\\u21CD',\n    'nLeftrightarrow': '\\u21CE',\n    'nhArr': '\\u21CE',\n    'nLl': '\\u22D8\\u0338',\n    'nLt': '\\u226A\\u20D2',\n    'nRightarrow': '\\u21CF',\n    'nrArr': '\\u21CF',\n    'nVDash': '\\u22AF',\n    'nVdash': '\\u22AE',\n    'nacute': '\\u0144',\n    'nang': '\\u2220\\u20D2',\n    'napE': '\\u2A70\\u0338',\n    'napid': '\\u224B\\u0338',\n    'napos': '\\u0149',\n    'natur': '\\u266E',\n    'natural': '\\u266E',\n    'ncap': '\\u2A43',\n    'ncaron': '\\u0148',\n    'ncedil': '\\u0146',\n    'ncongdot': '\\u2A6D\\u0338',\n    'ncup': '\\u2A42',\n    'ncy': '\\u043D',\n    'ndash': '\\u2013',\n    'neArr': '\\u21D7',\n    'nearhk': '\\u2924',\n    'nedot': '\\u2250\\u0338',\n    'nesear': '\\u2928',\n    'toea': '\\u2928',\n    'nfr': '\\uD835\\uDD2B',\n    'nharr': '\\u21AE',\n    'nleftrightarrow': '\\u21AE',\n    'nhpar': '\\u2AF2',\n    'nis': '\\u22FC',\n    'nisd': '\\u22FA',\n    'njcy': '\\u045A',\n    'nlE': '\\u2266\\u0338',\n    'nleqq': '\\u2266\\u0338',\n    'nlarr': '\\u219A',\n    'nleftarrow': '\\u219A',\n    'nldr': '\\u2025',\n    'nopf': '\\uD835\\uDD5F',\n    'not': '\\u00AC',\n    'notinE': '\\u22F9\\u0338',\n    'notindot': '\\u22F5\\u0338',\n    'notinvb': '\\u22F7',\n    'notinvc': '\\u22F6',\n    'notnivb': '\\u22FE',\n    'notnivc': '\\u22FD',\n    'nparsl': '\\u2AFD\\u20E5',\n    'npart': '\\u2202\\u0338',\n    'npolint': '\\u2A14',\n    'nrarr': '\\u219B',\n    'nrightarrow': '\\u219B',\n    'nrarrc': '\\u2933\\u0338',\n    'nrarrw': '\\u219D\\u0338',\n    'nscr': '\\uD835\\uDCC3',\n    'nsub': '\\u2284',\n    'nsubE': '\\u2AC5\\u0338',\n    'nsubseteqq': '\\u2AC5\\u0338',\n    'nsup': '\\u2285',\n    'nsupE': '\\u2AC6\\u0338',\n    'nsupseteqq': '\\u2AC6\\u0338',\n    'ntilde': '\\u00F1',\n    'nu': '\\u03BD',\n    'num': '\\u0023',\n    'numero': '\\u2116',\n    'numsp': '\\u2007',\n    'nvDash': '\\u22AD',\n    'nvHarr': '\\u2904',\n    'nvap': '\\u224D\\u20D2',\n    'nvdash': '\\u22AC',\n    'nvge': '\\u2265\\u20D2',\n    'nvgt': '\\u003E\\u20D2',\n    'nvinfin': '\\u29DE',\n    'nvlArr': '\\u2902',\n    'nvle': '\\u2264\\u20D2',\n    'nvlt': '\\u003C\\u20D2',\n    'nvltrie': '\\u22B4\\u20D2',\n    'nvrArr': '\\u2903',\n    'nvrtrie': '\\u22B5\\u20D2',\n    'nvsim': '\\u223C\\u20D2',\n    'nwArr': '\\u21D6',\n    'nwarhk': '\\u2923',\n    'nwnear': '\\u2927',\n    'oacute': '\\u00F3',\n    'ocirc': '\\u00F4',\n    'ocy': '\\u043E',\n    'odblac': '\\u0151',\n    'odiv': '\\u2A38',\n    'odsold': '\\u29BC',\n    'oelig': '\\u0153',\n    'ofcir': '\\u29BF',\n    'ofr': '\\uD835\\uDD2C',\n    'ogon': '\\u02DB',\n    'ograve': '\\u00F2',\n    'ogt': '\\u29C1',\n    'ohbar': '\\u29B5',\n    'olcir': '\\u29BE',\n    'olcross': '\\u29BB',\n    'olt': '\\u29C0',\n    'omacr': '\\u014D',\n    'omega': '\\u03C9',\n    'omicron': '\\u03BF',\n    'omid': '\\u29B6',\n    'oopf': '\\uD835\\uDD60',\n    'opar': '\\u29B7',\n    'operp': '\\u29B9',\n    'or': '\\u2228',\n    'vee': '\\u2228',\n    'ord': '\\u2A5D',\n    'order': '\\u2134',\n    'orderof': '\\u2134',\n    'oscr': '\\u2134',\n    'ordf': '\\u00AA',\n    'ordm': '\\u00BA',\n    'origof': '\\u22B6',\n    'oror': '\\u2A56',\n    'orslope': '\\u2A57',\n    'orv': '\\u2A5B',\n    'oslash': '\\u00F8',\n    'osol': '\\u2298',\n    'otilde': '\\u00F5',\n    'otimesas': '\\u2A36',\n    'ouml': '\\u00F6',\n    'ovbar': '\\u233D',\n    'para': '\\u00B6',\n    'parsim': '\\u2AF3',\n    'parsl': '\\u2AFD',\n    'pcy': '\\u043F',\n    'percnt': '\\u0025',\n    'period': '\\u002E',\n    'permil': '\\u2030',\n    'pertenk': '\\u2031',\n    'pfr': '\\uD835\\uDD2D',\n    'phi': '\\u03C6',\n    'phiv': '\\u03D5',\n    'straightphi': '\\u03D5',\n    'varphi': '\\u03D5',\n    'phone': '\\u260E',\n    'pi': '\\u03C0',\n    'piv': '\\u03D6',\n    'varpi': '\\u03D6',\n    'planckh': '\\u210E',\n    'plus': '\\u002B',\n    'plusacir': '\\u2A23',\n    'pluscir': '\\u2A22',\n    'plusdu': '\\u2A25',\n    'pluse': '\\u2A72',\n    'plussim': '\\u2A26',\n    'plustwo': '\\u2A27',\n    'pointint': '\\u2A15',\n    'popf': '\\uD835\\uDD61',\n    'pound': '\\u00A3',\n    'prE': '\\u2AB3',\n    'prap': '\\u2AB7',\n    'precapprox': '\\u2AB7',\n    'precnapprox': '\\u2AB9',\n    'prnap': '\\u2AB9',\n    'precneqq': '\\u2AB5',\n    'prnE': '\\u2AB5',\n    'precnsim': '\\u22E8',\n    'prnsim': '\\u22E8',\n    'prime': '\\u2032',\n    'profalar': '\\u232E',\n    'profline': '\\u2312',\n    'profsurf': '\\u2313',\n    'prurel': '\\u22B0',\n    'pscr': '\\uD835\\uDCC5',\n    'psi': '\\u03C8',\n    'puncsp': '\\u2008',\n    'qfr': '\\uD835\\uDD2E',\n    'qopf': '\\uD835\\uDD62',\n    'qprime': '\\u2057',\n    'qscr': '\\uD835\\uDCC6',\n    'quatint': '\\u2A16',\n    'quest': '\\u003F',\n    'rAtail': '\\u291C',\n    'rHar': '\\u2964',\n    'race': '\\u223D\\u0331',\n    'racute': '\\u0155',\n    'raemptyv': '\\u29B3',\n    'rangd': '\\u2992',\n    'range': '\\u29A5',\n    'raquo': '\\u00BB',\n    'rarrap': '\\u2975',\n    'rarrbfs': '\\u2920',\n    'rarrc': '\\u2933',\n    'rarrfs': '\\u291E',\n    'rarrpl': '\\u2945',\n    'rarrsim': '\\u2974',\n    'rarrtl': '\\u21A3',\n    'rightarrowtail': '\\u21A3',\n    'rarrw': '\\u219D',\n    'rightsquigarrow': '\\u219D',\n    'ratail': '\\u291A',\n    'ratio': '\\u2236',\n    'rbbrk': '\\u2773',\n    'rbrace': '\\u007D',\n    'rcub': '\\u007D',\n    'rbrack': '\\u005D',\n    'rsqb': '\\u005D',\n    'rbrke': '\\u298C',\n    'rbrksld': '\\u298E',\n    'rbrkslu': '\\u2990',\n    'rcaron': '\\u0159',\n    'rcedil': '\\u0157',\n    'rcy': '\\u0440',\n    'rdca': '\\u2937',\n    'rdldhar': '\\u2969',\n    'rdsh': '\\u21B3',\n    'rect': '\\u25AD',\n    'rfisht': '\\u297D',\n    'rfr': '\\uD835\\uDD2F',\n    'rharul': '\\u296C',\n    'rho': '\\u03C1',\n    'rhov': '\\u03F1',\n    'varrho': '\\u03F1',\n    'rightrightarrows': '\\u21C9',\n    'rrarr': '\\u21C9',\n    'rightthreetimes': '\\u22CC',\n    'rthree': '\\u22CC',\n    'ring': '\\u02DA',\n    'rlm': '\\u200F',\n    'rmoust': '\\u23B1',\n    'rmoustache': '\\u23B1',\n    'rnmid': '\\u2AEE',\n    'roang': '\\u27ED',\n    'roarr': '\\u21FE',\n    'ropar': '\\u2986',\n    'ropf': '\\uD835\\uDD63',\n    'roplus': '\\u2A2E',\n    'rotimes': '\\u2A35',\n    'rpar': '\\u0029',\n    'rpargt': '\\u2994',\n    'rppolint': '\\u2A12',\n    'rsaquo': '\\u203A',\n    'rscr': '\\uD835\\uDCC7',\n    'rtimes': '\\u22CA',\n    'rtri': '\\u25B9',\n    'triangleright': '\\u25B9',\n    'rtriltri': '\\u29CE',\n    'ruluhar': '\\u2968',\n    'rx': '\\u211E',\n    'sacute': '\\u015B',\n    'scE': '\\u2AB4',\n    'scap': '\\u2AB8',\n    'succapprox': '\\u2AB8',\n    'scaron': '\\u0161',\n    'scedil': '\\u015F',\n    'scirc': '\\u015D',\n    'scnE': '\\u2AB6',\n    'succneqq': '\\u2AB6',\n    'scnap': '\\u2ABA',\n    'succnapprox': '\\u2ABA',\n    'scnsim': '\\u22E9',\n    'succnsim': '\\u22E9',\n    'scpolint': '\\u2A13',\n    'scy': '\\u0441',\n    'sdot': '\\u22C5',\n    'sdote': '\\u2A66',\n    'seArr': '\\u21D8',\n    'sect': '\\u00A7',\n    'semi': '\\u003B',\n    'seswar': '\\u2929',\n    'tosa': '\\u2929',\n    'sext': '\\u2736',\n    'sfr': '\\uD835\\uDD30',\n    'sharp': '\\u266F',\n    'shchcy': '\\u0449',\n    'shcy': '\\u0448',\n    'shy': '\\u00AD',\n    'sigma': '\\u03C3',\n    'sigmaf': '\\u03C2',\n    'sigmav': '\\u03C2',\n    'varsigma': '\\u03C2',\n    'simdot': '\\u2A6A',\n    'simg': '\\u2A9E',\n    'simgE': '\\u2AA0',\n    'siml': '\\u2A9D',\n    'simlE': '\\u2A9F',\n    'simne': '\\u2246',\n    'simplus': '\\u2A24',\n    'simrarr': '\\u2972',\n    'smashp': '\\u2A33',\n    'smeparsl': '\\u29E4',\n    'smile': '\\u2323',\n    'ssmile': '\\u2323',\n    'smt': '\\u2AAA',\n    'smte': '\\u2AAC',\n    'smtes': '\\u2AAC\\uFE00',\n    'softcy': '\\u044C',\n    'sol': '\\u002F',\n    'solb': '\\u29C4',\n    'solbar': '\\u233F',\n    'sopf': '\\uD835\\uDD64',\n    'spades': '\\u2660',\n    'spadesuit': '\\u2660',\n    'sqcaps': '\\u2293\\uFE00',\n    'sqcups': '\\u2294\\uFE00',\n    'sscr': '\\uD835\\uDCC8',\n    'star': '\\u2606',\n    'sub': '\\u2282',\n    'subset': '\\u2282',\n    'subE': '\\u2AC5',\n    'subseteqq': '\\u2AC5',\n    'subdot': '\\u2ABD',\n    'subedot': '\\u2AC3',\n    'submult': '\\u2AC1',\n    'subnE': '\\u2ACB',\n    'subsetneqq': '\\u2ACB',\n    'subne': '\\u228A',\n    'subsetneq': '\\u228A',\n    'subplus': '\\u2ABF',\n    'subrarr': '\\u2979',\n    'subsim': '\\u2AC7',\n    'subsub': '\\u2AD5',\n    'subsup': '\\u2AD3',\n    'sung': '\\u266A',\n    'sup1': '\\u00B9',\n    'sup2': '\\u00B2',\n    'sup3': '\\u00B3',\n    'supE': '\\u2AC6',\n    'supseteqq': '\\u2AC6',\n    'supdot': '\\u2ABE',\n    'supdsub': '\\u2AD8',\n    'supedot': '\\u2AC4',\n    'suphsol': '\\u27C9',\n    'suphsub': '\\u2AD7',\n    'suplarr': '\\u297B',\n    'supmult': '\\u2AC2',\n    'supnE': '\\u2ACC',\n    'supsetneqq': '\\u2ACC',\n    'supne': '\\u228B',\n    'supsetneq': '\\u228B',\n    'supplus': '\\u2AC0',\n    'supsim': '\\u2AC8',\n    'supsub': '\\u2AD4',\n    'supsup': '\\u2AD6',\n    'swArr': '\\u21D9',\n    'swnwar': '\\u292A',\n    'szlig': '\\u00DF',\n    'target': '\\u2316',\n    'tau': '\\u03C4',\n    'tcaron': '\\u0165',\n    'tcedil': '\\u0163',\n    'tcy': '\\u0442',\n    'telrec': '\\u2315',\n    'tfr': '\\uD835\\uDD31',\n    'theta': '\\u03B8',\n    'thetasym': '\\u03D1',\n    'thetav': '\\u03D1',\n    'vartheta': '\\u03D1',\n    'thorn': '\\u00FE',\n    'times': '\\u00D7',\n    'timesbar': '\\u2A31',\n    'timesd': '\\u2A30',\n    'topbot': '\\u2336',\n    'topcir': '\\u2AF1',\n    'topf': '\\uD835\\uDD65',\n    'topfork': '\\u2ADA',\n    'tprime': '\\u2034',\n    'triangle': '\\u25B5',\n    'utri': '\\u25B5',\n    'triangleq': '\\u225C',\n    'trie': '\\u225C',\n    'tridot': '\\u25EC',\n    'triminus': '\\u2A3A',\n    'triplus': '\\u2A39',\n    'trisb': '\\u29CD',\n    'tritime': '\\u2A3B',\n    'trpezium': '\\u23E2',\n    'tscr': '\\uD835\\uDCC9',\n    'tscy': '\\u0446',\n    'tshcy': '\\u045B',\n    'tstrok': '\\u0167',\n    'uHar': '\\u2963',\n    'uacute': '\\u00FA',\n    'ubrcy': '\\u045E',\n    'ubreve': '\\u016D',\n    'ucirc': '\\u00FB',\n    'ucy': '\\u0443',\n    'udblac': '\\u0171',\n    'ufisht': '\\u297E',\n    'ufr': '\\uD835\\uDD32',\n    'ugrave': '\\u00F9',\n    'uhblk': '\\u2580',\n    'ulcorn': '\\u231C',\n    'ulcorner': '\\u231C',\n    'ulcrop': '\\u230F',\n    'ultri': '\\u25F8',\n    'umacr': '\\u016B',\n    'uogon': '\\u0173',\n    'uopf': '\\uD835\\uDD66',\n    'upsi': '\\u03C5',\n    'upsilon': '\\u03C5',\n    'upuparrows': '\\u21C8',\n    'uuarr': '\\u21C8',\n    'urcorn': '\\u231D',\n    'urcorner': '\\u231D',\n    'urcrop': '\\u230E',\n    'uring': '\\u016F',\n    'urtri': '\\u25F9',\n    'uscr': '\\uD835\\uDCCA',\n    'utdot': '\\u22F0',\n    'utilde': '\\u0169',\n    'uuml': '\\u00FC',\n    'uwangle': '\\u29A7',\n    'vBar': '\\u2AE8',\n    'vBarv': '\\u2AE9',\n    'vangrt': '\\u299C',\n    'varsubsetneq': '\\u228A\\uFE00',\n    'vsubne': '\\u228A\\uFE00',\n    'varsubsetneqq': '\\u2ACB\\uFE00',\n    'vsubnE': '\\u2ACB\\uFE00',\n    'varsupsetneq': '\\u228B\\uFE00',\n    'vsupne': '\\u228B\\uFE00',\n    'varsupsetneqq': '\\u2ACC\\uFE00',\n    'vsupnE': '\\u2ACC\\uFE00',\n    'vcy': '\\u0432',\n    'veebar': '\\u22BB',\n    'veeeq': '\\u225A',\n    'vellip': '\\u22EE',\n    'vfr': '\\uD835\\uDD33',\n    'vopf': '\\uD835\\uDD67',\n    'vscr': '\\uD835\\uDCCB',\n    'vzigzag': '\\u299A',\n    'wcirc': '\\u0175',\n    'wedbar': '\\u2A5F',\n    'wedgeq': '\\u2259',\n    'weierp': '\\u2118',\n    'wp': '\\u2118',\n    'wfr': '\\uD835\\uDD34',\n    'wopf': '\\uD835\\uDD68',\n    'wscr': '\\uD835\\uDCCC',\n    'xfr': '\\uD835\\uDD35',\n    'xi': '\\u03BE',\n    'xnis': '\\u22FB',\n    'xopf': '\\uD835\\uDD69',\n    'xscr': '\\uD835\\uDCCD',\n    'yacute': '\\u00FD',\n    'yacy': '\\u044F',\n    'ycirc': '\\u0177',\n    'ycy': '\\u044B',\n    'yen': '\\u00A5',\n    'yfr': '\\uD835\\uDD36',\n    'yicy': '\\u0457',\n    'yopf': '\\uD835\\uDD6A',\n    'yscr': '\\uD835\\uDCCE',\n    'yucy': '\\u044E',\n    'yuml': '\\u00FF',\n    'zacute': '\\u017A',\n    'zcaron': '\\u017E',\n    'zcy': '\\u0437',\n    'zdot': '\\u017C',\n    'zeta': '\\u03B6',\n    'zfr': '\\uD835\\uDD37',\n    'zhcy': '\\u0436',\n    'zigrarr': '\\u21DD',\n    'zopf': '\\uD835\\uDD6B',\n    'zscr': '\\uD835\\uDCCF',\n    'zwj': '\\u200D',\n    'zwnj': '\\u200C'\n};\n// The &ngsp; pseudo-entity is denoting a space.\n// 0xE500 is a PUA (Private Use Areas) unicode character\n// This is inspired by the Angular Dart implementation.\nconst NGSP_UNICODE = '\\uE500';\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\n\nclass TokenError extends ParseError {\n    constructor(errorMsg, tokenType, span) {\n        super(span, errorMsg);\n        this.tokenType = tokenType;\n    }\n}\nclass TokenizeResult {\n    constructor(tokens, errors, nonNormalizedIcuExpressions) {\n        this.tokens = tokens;\n        this.errors = errors;\n        this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;\n    }\n}\nfunction tokenize(source, url, getTagDefinition, options = {}) {\n    const tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);\n    tokenizer.tokenize();\n    return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);\n}\nconst _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\nfunction _unexpectedCharacterErrorMsg(charCode) {\n    const char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\n    return `Unexpected character \"${char}\"`;\n}\nfunction _unknownEntityErrorMsg(entitySrc) {\n    return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\n}\nfunction _unparsableEntityErrorMsg(type, entityStr) {\n    return `Unable to parse entity \"${entityStr}\" - ${type} character reference entities must end with \";\"`;\n}\nvar CharacterReferenceType;\n(function (CharacterReferenceType) {\n    CharacterReferenceType[\"HEX\"] = \"hexadecimal\";\n    CharacterReferenceType[\"DEC\"] = \"decimal\";\n})(CharacterReferenceType || (CharacterReferenceType = {}));\nclass _ControlFlowError {\n    constructor(error) {\n        this.error = error;\n    }\n}\n// See https://www.w3.org/TR/html51/syntax.html#writing-html-documents\nclass _Tokenizer {\n    /**\n     * @param _file The html source file being tokenized.\n     * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.\n     * @param options Configuration of the tokenization.\n     */\n    constructor(_file, _getTagDefinition, options) {\n        this._getTagDefinition = _getTagDefinition;\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        this._expansionCaseStack = [];\n        this._inInterpolation = false;\n        this.tokens = [];\n        this.errors = [];\n        this.nonNormalizedIcuExpressions = [];\n        this._tokenizeIcu = options.tokenizeExpansionForms || false;\n        this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n        this._leadingTriviaCodePoints =\n            options.leadingTriviaChars && options.leadingTriviaChars.map(c => c.codePointAt(0) || 0);\n        const range = options.range || { endPos: _file.content.length, startPos: 0, startLine: 0, startCol: 0 };\n        this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) :\n            new PlainCharacterCursor(_file, range);\n        this._preserveLineEndings = options.preserveLineEndings || false;\n        this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;\n        this._tokenizeBlocks = options.tokenizeBlocks ?? true;\n        try {\n            this._cursor.init();\n        }\n        catch (e) {\n            this.handleError(e);\n        }\n    }\n    _processCarriageReturns(content) {\n        if (this._preserveLineEndings) {\n            return content;\n        }\n        // https://www.w3.org/TR/html51/syntax.html#preprocessing-the-input-stream\n        // In order to keep the original position in the source, we can not\n        // pre-process it.\n        // Instead CRs are processed right before instantiating the tokens.\n        return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n    }\n    tokenize() {\n        while (this._cursor.peek() !== $EOF) {\n            const start = this._cursor.clone();\n            try {\n                if (this._attemptCharCode($LT)) {\n                    if (this._attemptCharCode($BANG)) {\n                        if (this._attemptCharCode($LBRACKET)) {\n                            this._consumeCdata(start);\n                        }\n                        else if (this._attemptCharCode($MINUS)) {\n                            this._consumeComment(start);\n                        }\n                        else {\n                            this._consumeDocType(start);\n                        }\n                    }\n                    else if (this._attemptCharCode($SLASH)) {\n                        this._consumeTagClose(start);\n                    }\n                    else {\n                        this._consumeTagOpen(start);\n                    }\n                }\n                else if (this._tokenizeBlocks && this._attemptCharCode($AT)) {\n                    this._consumeBlockStart(start);\n                }\n                else if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansionCase() &&\n                    !this._isInExpansionForm() && this._attemptCharCode($RBRACE)) {\n                    this._consumeBlockEnd(start);\n                }\n                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n                    // In (possibly interpolated) text the end of the text is given by `isTextEnd()`, while\n                    // the premature end of an interpolation is given by the start of a new HTML element.\n                    this._consumeWithInterpolation(5 /* TokenType.TEXT */, 8 /* TokenType.INTERPOLATION */, () => this._isTextEnd(), () => this._isTagStart());\n                }\n            }\n            catch (e) {\n                this.handleError(e);\n            }\n        }\n        this._beginToken(29 /* TokenType.EOF */);\n        this._endToken([]);\n    }\n    _getBlockName() {\n        // This allows us to capture up something like `@else if`, but not `@ if`.\n        let spacesInNameAllowed = false;\n        const nameCursor = this._cursor.clone();\n        this._attemptCharCodeUntilFn(code => {\n            if (isWhitespace(code)) {\n                return !spacesInNameAllowed;\n            }\n            if (isBlockNameChar(code)) {\n                spacesInNameAllowed = true;\n                return false;\n            }\n            return true;\n        });\n        return this._cursor.getChars(nameCursor).trim();\n    }\n    _consumeBlockStart(start) {\n        this._beginToken(24 /* TokenType.BLOCK_OPEN_START */, start);\n        const startToken = this._endToken([this._getBlockName()]);\n        if (this._cursor.peek() === $LPAREN) {\n            // Advance past the opening paren.\n            this._cursor.advance();\n            // Capture the parameters.\n            this._consumeBlockParameters();\n            // Allow spaces before the closing paren.\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            if (this._attemptCharCode($RPAREN)) {\n                // Allow spaces after the paren.\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n            }\n            else {\n                startToken.type = 28 /* TokenType.INCOMPLETE_BLOCK_OPEN */;\n                return;\n            }\n        }\n        if (this._attemptCharCode($LBRACE)) {\n            this._beginToken(25 /* TokenType.BLOCK_OPEN_END */);\n            this._endToken([]);\n        }\n        else {\n            startToken.type = 28 /* TokenType.INCOMPLETE_BLOCK_OPEN */;\n        }\n    }\n    _consumeBlockEnd(start) {\n        this._beginToken(26 /* TokenType.BLOCK_CLOSE */, start);\n        this._endToken([]);\n    }\n    _consumeBlockParameters() {\n        // Trim the whitespace until the first parameter.\n        this._attemptCharCodeUntilFn(isBlockParameterChar);\n        while (this._cursor.peek() !== $RPAREN && this._cursor.peek() !== $EOF) {\n            this._beginToken(27 /* TokenType.BLOCK_PARAMETER */);\n            const start = this._cursor.clone();\n            let inQuote = null;\n            let openParens = 0;\n            // Consume the parameter until the next semicolon or brace.\n            // Note that we skip over semicolons/braces inside of strings.\n            while ((this._cursor.peek() !== $SEMICOLON && this._cursor.peek() !== $EOF) ||\n                inQuote !== null) {\n                const char = this._cursor.peek();\n                // Skip to the next character if it was escaped.\n                if (char === $BACKSLASH) {\n                    this._cursor.advance();\n                }\n                else if (char === inQuote) {\n                    inQuote = null;\n                }\n                else if (inQuote === null && isQuote(char)) {\n                    inQuote = char;\n                }\n                else if (char === $LPAREN && inQuote === null) {\n                    openParens++;\n                }\n                else if (char === $RPAREN && inQuote === null) {\n                    if (openParens === 0) {\n                        break;\n                    }\n                    else if (openParens > 0) {\n                        openParens--;\n                    }\n                }\n                this._cursor.advance();\n            }\n            this._endToken([this._cursor.getChars(start)]);\n            // Skip to the next parameter.\n            this._attemptCharCodeUntilFn(isBlockParameterChar);\n        }\n    }\n    /**\n     * @returns whether an ICU token has been created\n     * @internal\n     */\n    _tokenizeExpansionForm() {\n        if (this.isExpansionFormStart()) {\n            this._consumeExpansionFormStart();\n            return true;\n        }\n        if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {\n            this._consumeExpansionCaseStart();\n            return true;\n        }\n        if (this._cursor.peek() === $RBRACE) {\n            if (this._isInExpansionCase()) {\n                this._consumeExpansionCaseEnd();\n                return true;\n            }\n            if (this._isInExpansionForm()) {\n                this._consumeExpansionFormEnd();\n                return true;\n            }\n        }\n        return false;\n    }\n    _beginToken(type, start = this._cursor.clone()) {\n        this._currentTokenStart = start;\n        this._currentTokenType = type;\n    }\n    _endToken(parts, end) {\n        if (this._currentTokenStart === null) {\n            throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));\n        }\n        if (this._currentTokenType === null) {\n            throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));\n        }\n        const token = {\n            type: this._currentTokenType,\n            parts,\n            sourceSpan: (end ?? this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints),\n        };\n        this.tokens.push(token);\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        return token;\n    }\n    _createError(msg, span) {\n        if (this._isInExpansionForm()) {\n            msg += ` (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)`;\n        }\n        const error = new TokenError(msg, this._currentTokenType, span);\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        return new _ControlFlowError(error);\n    }\n    handleError(e) {\n        if (e instanceof CursorError) {\n            e = this._createError(e.msg, this._cursor.getSpan(e.cursor));\n        }\n        if (e instanceof _ControlFlowError) {\n            this.errors.push(e.error);\n        }\n        else {\n            throw e;\n        }\n    }\n    _attemptCharCode(charCode) {\n        if (this._cursor.peek() === charCode) {\n            this._cursor.advance();\n            return true;\n        }\n        return false;\n    }\n    _attemptCharCodeCaseInsensitive(charCode) {\n        if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {\n            this._cursor.advance();\n            return true;\n        }\n        return false;\n    }\n    _requireCharCode(charCode) {\n        const location = this._cursor.clone();\n        if (!this._attemptCharCode(charCode)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n        }\n    }\n    _attemptStr(chars) {\n        const len = chars.length;\n        if (this._cursor.charsLeft() < len) {\n            return false;\n        }\n        const initialPosition = this._cursor.clone();\n        for (let i = 0; i < len; i++) {\n            if (!this._attemptCharCode(chars.charCodeAt(i))) {\n                // If attempting to parse the string fails, we want to reset the parser\n                // to where it was before the attempt\n                this._cursor = initialPosition;\n                return false;\n            }\n        }\n        return true;\n    }\n    _attemptStrCaseInsensitive(chars) {\n        for (let i = 0; i < chars.length; i++) {\n            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _requireStr(chars) {\n        const location = this._cursor.clone();\n        if (!this._attemptStr(chars)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n        }\n    }\n    _attemptCharCodeUntilFn(predicate) {\n        while (!predicate(this._cursor.peek())) {\n            this._cursor.advance();\n        }\n    }\n    _requireCharCodeUntilFn(predicate, len) {\n        const start = this._cursor.clone();\n        this._attemptCharCodeUntilFn(predicate);\n        if (this._cursor.diff(start) < len) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n        }\n    }\n    _attemptUntilChar(char) {\n        while (this._cursor.peek() !== char) {\n            this._cursor.advance();\n        }\n    }\n    _readChar() {\n        // Don't rely upon reading directly from `_input` as the actual char value\n        // may have been generated from an escape sequence.\n        const char = String.fromCodePoint(this._cursor.peek());\n        this._cursor.advance();\n        return char;\n    }\n    _consumeEntity(textTokenType) {\n        this._beginToken(9 /* TokenType.ENCODED_ENTITY */);\n        const start = this._cursor.clone();\n        this._cursor.advance();\n        if (this._attemptCharCode($HASH)) {\n            const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n            const codeStart = this._cursor.clone();\n            this._attemptCharCodeUntilFn(isDigitEntityEnd);\n            if (this._cursor.peek() != $SEMICOLON) {\n                // Advance cursor to include the peeked character in the string provided to the error\n                // message.\n                this._cursor.advance();\n                const entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;\n                throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());\n            }\n            const strNum = this._cursor.getChars(codeStart);\n            this._cursor.advance();\n            try {\n                const charCode = parseInt(strNum, isHex ? 16 : 10);\n                this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);\n            }\n            catch {\n                throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());\n            }\n        }\n        else {\n            const nameStart = this._cursor.clone();\n            this._attemptCharCodeUntilFn(isNamedEntityEnd);\n            if (this._cursor.peek() != $SEMICOLON) {\n                // No semicolon was found so abort the encoded entity token that was in progress, and treat\n                // this as a text token\n                this._beginToken(textTokenType, start);\n                this._cursor = nameStart;\n                this._endToken(['&']);\n            }\n            else {\n                const name = this._cursor.getChars(nameStart);\n                this._cursor.advance();\n                const char = NAMED_ENTITIES[name];\n                if (!char) {\n                    throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));\n                }\n                this._endToken([char, `&${name};`]);\n            }\n        }\n    }\n    _consumeRawText(consumeEntities, endMarkerPredicate) {\n        this._beginToken(consumeEntities ? 6 /* TokenType.ESCAPABLE_RAW_TEXT */ : 7 /* TokenType.RAW_TEXT */);\n        const parts = [];\n        while (true) {\n            const tagCloseStart = this._cursor.clone();\n            const foundEndMarker = endMarkerPredicate();\n            this._cursor = tagCloseStart;\n            if (foundEndMarker) {\n                break;\n            }\n            if (consumeEntities && this._cursor.peek() === $AMPERSAND) {\n                this._endToken([this._processCarriageReturns(parts.join(''))]);\n                parts.length = 0;\n                this._consumeEntity(6 /* TokenType.ESCAPABLE_RAW_TEXT */);\n                this._beginToken(6 /* TokenType.ESCAPABLE_RAW_TEXT */);\n            }\n            else {\n                parts.push(this._readChar());\n            }\n        }\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n    }\n    _consumeComment(start) {\n        this._beginToken(10 /* TokenType.COMMENT_START */, start);\n        this._requireCharCode($MINUS);\n        this._endToken([]);\n        this._consumeRawText(false, () => this._attemptStr('-->'));\n        this._beginToken(11 /* TokenType.COMMENT_END */);\n        this._requireStr('-->');\n        this._endToken([]);\n    }\n    _consumeCdata(start) {\n        this._beginToken(12 /* TokenType.CDATA_START */, start);\n        this._requireStr('CDATA[');\n        this._endToken([]);\n        this._consumeRawText(false, () => this._attemptStr(']]>'));\n        this._beginToken(13 /* TokenType.CDATA_END */);\n        this._requireStr(']]>');\n        this._endToken([]);\n    }\n    _consumeDocType(start) {\n        this._beginToken(18 /* TokenType.DOC_TYPE */, start);\n        const contentStart = this._cursor.clone();\n        this._attemptUntilChar($GT);\n        const content = this._cursor.getChars(contentStart);\n        this._cursor.advance();\n        this._endToken([content]);\n    }\n    _consumePrefixAndName() {\n        const nameOrPrefixStart = this._cursor.clone();\n        let prefix = '';\n        while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {\n            this._cursor.advance();\n        }\n        let nameStart;\n        if (this._cursor.peek() === $COLON) {\n            prefix = this._cursor.getChars(nameOrPrefixStart);\n            this._cursor.advance();\n            nameStart = this._cursor.clone();\n        }\n        else {\n            nameStart = nameOrPrefixStart;\n        }\n        this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);\n        const name = this._cursor.getChars(nameStart);\n        return [prefix, name];\n    }\n    _consumeTagOpen(start) {\n        let tagName;\n        let prefix;\n        let openTagToken;\n        try {\n            if (!isAsciiLetter(this._cursor.peek())) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n            }\n            openTagToken = this._consumeTagOpenStart(start);\n            prefix = openTagToken.parts[0];\n            tagName = openTagToken.parts[1];\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT &&\n                this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {\n                this._consumeAttributeName();\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n                if (this._attemptCharCode($EQ)) {\n                    this._attemptCharCodeUntilFn(isNotWhitespace);\n                    this._consumeAttributeValue();\n                }\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n            }\n            this._consumeTagOpenEnd();\n        }\n        catch (e) {\n            if (e instanceof _ControlFlowError) {\n                if (openTagToken) {\n                    // We errored before we could close the opening tag, so it is incomplete.\n                    openTagToken.type = 4 /* TokenType.INCOMPLETE_TAG_OPEN */;\n                }\n                else {\n                    // When the start tag is invalid, assume we want a \"<\" as text.\n                    // Back to back text tokens are merged at the end.\n                    this._beginToken(5 /* TokenType.TEXT */, start);\n                    this._endToken(['<']);\n                }\n                return;\n            }\n            throw e;\n        }\n        const contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);\n        if (contentTokenType === TagContentType.RAW_TEXT) {\n            this._consumeRawTextWithTagClose(prefix, tagName, false);\n        }\n        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n            this._consumeRawTextWithTagClose(prefix, tagName, true);\n        }\n    }\n    _consumeRawTextWithTagClose(prefix, tagName, consumeEntities) {\n        this._consumeRawText(consumeEntities, () => {\n            if (!this._attemptCharCode($LT))\n                return false;\n            if (!this._attemptCharCode($SLASH))\n                return false;\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            if (!this._attemptStrCaseInsensitive(tagName))\n                return false;\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            return this._attemptCharCode($GT);\n        });\n        this._beginToken(3 /* TokenType.TAG_CLOSE */);\n        this._requireCharCodeUntilFn(code => code === $GT, 3);\n        this._cursor.advance(); // Consume the `>`\n        this._endToken([prefix, tagName]);\n    }\n    _consumeTagOpenStart(start) {\n        this._beginToken(0 /* TokenType.TAG_OPEN_START */, start);\n        const parts = this._consumePrefixAndName();\n        return this._endToken(parts);\n    }\n    _consumeAttributeName() {\n        const attrNameStart = this._cursor.peek();\n        if (attrNameStart === $SQ || attrNameStart === $DQ) {\n            throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());\n        }\n        this._beginToken(14 /* TokenType.ATTR_NAME */);\n        const prefixAndName = this._consumePrefixAndName();\n        this._endToken(prefixAndName);\n    }\n    _consumeAttributeValue() {\n        if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {\n            const quoteChar = this._cursor.peek();\n            this._consumeQuote(quoteChar);\n            // In an attribute then end of the attribute value and the premature end to an interpolation\n            // are both triggered by the `quoteChar`.\n            const endPredicate = () => this._cursor.peek() === quoteChar;\n            this._consumeWithInterpolation(16 /* TokenType.ATTR_VALUE_TEXT */, 17 /* TokenType.ATTR_VALUE_INTERPOLATION */, endPredicate, endPredicate);\n            this._consumeQuote(quoteChar);\n        }\n        else {\n            const endPredicate = () => isNameEnd(this._cursor.peek());\n            this._consumeWithInterpolation(16 /* TokenType.ATTR_VALUE_TEXT */, 17 /* TokenType.ATTR_VALUE_INTERPOLATION */, endPredicate, endPredicate);\n        }\n    }\n    _consumeQuote(quoteChar) {\n        this._beginToken(15 /* TokenType.ATTR_QUOTE */);\n        this._requireCharCode(quoteChar);\n        this._endToken([String.fromCodePoint(quoteChar)]);\n    }\n    _consumeTagOpenEnd() {\n        const tokenType = this._attemptCharCode($SLASH) ? 2 /* TokenType.TAG_OPEN_END_VOID */ : 1 /* TokenType.TAG_OPEN_END */;\n        this._beginToken(tokenType);\n        this._requireCharCode($GT);\n        this._endToken([]);\n    }\n    _consumeTagClose(start) {\n        this._beginToken(3 /* TokenType.TAG_CLOSE */, start);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        const prefixAndName = this._consumePrefixAndName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._requireCharCode($GT);\n        this._endToken(prefixAndName);\n    }\n    _consumeExpansionFormStart() {\n        this._beginToken(19 /* TokenType.EXPANSION_FORM_START */);\n        this._requireCharCode($LBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.push(19 /* TokenType.EXPANSION_FORM_START */);\n        this._beginToken(7 /* TokenType.RAW_TEXT */);\n        const condition = this._readUntil($COMMA);\n        const normalizedCondition = this._processCarriageReturns(condition);\n        if (this._i18nNormalizeLineEndingsInICUs) {\n            // We explicitly want to normalize line endings for this text.\n            this._endToken([normalizedCondition]);\n        }\n        else {\n            // We are not normalizing line endings.\n            const conditionToken = this._endToken([condition]);\n            if (normalizedCondition !== condition) {\n                this.nonNormalizedIcuExpressions.push(conditionToken);\n            }\n        }\n        this._requireCharCode($COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(7 /* TokenType.RAW_TEXT */);\n        const type = this._readUntil($COMMA);\n        this._endToken([type]);\n        this._requireCharCode($COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n    }\n    _consumeExpansionCaseStart() {\n        this._beginToken(20 /* TokenType.EXPANSION_CASE_VALUE */);\n        const value = this._readUntil($LBRACE).trim();\n        this._endToken([value]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(21 /* TokenType.EXPANSION_CASE_EXP_START */);\n        this._requireCharCode($LBRACE);\n        this._endToken([]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.push(21 /* TokenType.EXPANSION_CASE_EXP_START */);\n    }\n    _consumeExpansionCaseEnd() {\n        this._beginToken(22 /* TokenType.EXPANSION_CASE_EXP_END */);\n        this._requireCharCode($RBRACE);\n        this._endToken([]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.pop();\n    }\n    _consumeExpansionFormEnd() {\n        this._beginToken(23 /* TokenType.EXPANSION_FORM_END */);\n        this._requireCharCode($RBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.pop();\n    }\n    /**\n     * Consume a string that may contain interpolation expressions.\n     *\n     * The first token consumed will be of `tokenType` and then there will be alternating\n     * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.\n     *\n     * If an interpolation token ends prematurely it will have no end marker in its `parts` array.\n     *\n     * @param textTokenType the kind of tokens to interleave around interpolation tokens.\n     * @param interpolationTokenType the kind of tokens that contain interpolation.\n     * @param endPredicate a function that should return true when we should stop consuming.\n     * @param endInterpolation a function that should return true if there is a premature end to an\n     *     interpolation expression - i.e. before we get to the normal interpolation closing marker.\n     */\n    _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {\n        this._beginToken(textTokenType);\n        const parts = [];\n        while (!endPredicate()) {\n            const current = this._cursor.clone();\n            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n                this._endToken([this._processCarriageReturns(parts.join(''))], current);\n                parts.length = 0;\n                this._consumeInterpolation(interpolationTokenType, current, endInterpolation);\n                this._beginToken(textTokenType);\n            }\n            else if (this._cursor.peek() === $AMPERSAND) {\n                this._endToken([this._processCarriageReturns(parts.join(''))]);\n                parts.length = 0;\n                this._consumeEntity(textTokenType);\n                this._beginToken(textTokenType);\n            }\n            else {\n                parts.push(this._readChar());\n            }\n        }\n        // It is possible that an interpolation was started but not ended inside this text token.\n        // Make sure that we reset the state of the lexer correctly.\n        this._inInterpolation = false;\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n    }\n    /**\n     * Consume a block of text that has been interpreted as an Angular interpolation.\n     *\n     * @param interpolationTokenType the type of the interpolation token to generate.\n     * @param interpolationStart a cursor that points to the start of this interpolation.\n     * @param prematureEndPredicate a function that should return true if the next characters indicate\n     *     an end to the interpolation before its normal closing marker.\n     */\n    _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {\n        const parts = [];\n        this._beginToken(interpolationTokenType, interpolationStart);\n        parts.push(this._interpolationConfig.start);\n        // Find the end of the interpolation, ignoring content inside quotes.\n        const expressionStart = this._cursor.clone();\n        let inQuote = null;\n        let inComment = false;\n        while (this._cursor.peek() !== $EOF &&\n            (prematureEndPredicate === null || !prematureEndPredicate())) {\n            const current = this._cursor.clone();\n            if (this._isTagStart()) {\n                // We are starting what looks like an HTML element in the middle of this interpolation.\n                // Reset the cursor to before the `<` character and end the interpolation token.\n                // (This is actually wrong but here for backward compatibility).\n                this._cursor = current;\n                parts.push(this._getProcessedChars(expressionStart, current));\n                this._endToken(parts);\n                return;\n            }\n            if (inQuote === null) {\n                if (this._attemptStr(this._interpolationConfig.end)) {\n                    // We are not in a string, and we hit the end interpolation marker\n                    parts.push(this._getProcessedChars(expressionStart, current));\n                    parts.push(this._interpolationConfig.end);\n                    this._endToken(parts);\n                    return;\n                }\n                else if (this._attemptStr('//')) {\n                    // Once we are in a comment we ignore any quotes\n                    inComment = true;\n                }\n            }\n            const char = this._cursor.peek();\n            this._cursor.advance();\n            if (char === $BACKSLASH) {\n                // Skip the next character because it was escaped.\n                this._cursor.advance();\n            }\n            else if (char === inQuote) {\n                // Exiting the current quoted string\n                inQuote = null;\n            }\n            else if (!inComment && inQuote === null && isQuote(char)) {\n                // Entering a new quoted string\n                inQuote = char;\n            }\n        }\n        // We hit EOF without finding a closing interpolation marker\n        parts.push(this._getProcessedChars(expressionStart, this._cursor));\n        this._endToken(parts);\n    }\n    _getProcessedChars(start, end) {\n        return this._processCarriageReturns(end.getChars(start));\n    }\n    _isTextEnd() {\n        if (this._isTagStart() || this._cursor.peek() === $EOF) {\n            return true;\n        }\n        if (this._tokenizeIcu && !this._inInterpolation) {\n            if (this.isExpansionFormStart()) {\n                // start of an expansion form\n                return true;\n            }\n            if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {\n                // end of and expansion case\n                return true;\n            }\n        }\n        if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansion() &&\n            (this._cursor.peek() === $AT || this._cursor.peek() === $RBRACE)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns true if the current cursor is pointing to the start of a tag\n     * (opening/closing/comments/cdata/etc).\n     */\n    _isTagStart() {\n        if (this._cursor.peek() === $LT) {\n            // We assume that `<` followed by whitespace is not the start of an HTML element.\n            const tmp = this._cursor.clone();\n            tmp.advance();\n            // If the next character is alphabetic, ! nor / then it is a tag start\n            const code = tmp.peek();\n            if (($a <= code && code <= $z) || ($A <= code && code <= $Z) ||\n                code === $SLASH || code === $BANG) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _readUntil(char) {\n        const start = this._cursor.clone();\n        this._attemptUntilChar(char);\n        return this._cursor.getChars(start);\n    }\n    _isInExpansion() {\n        return this._isInExpansionCase() || this._isInExpansionForm();\n    }\n    _isInExpansionCase() {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                21 /* TokenType.EXPANSION_CASE_EXP_START */;\n    }\n    _isInExpansionForm() {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                19 /* TokenType.EXPANSION_FORM_START */;\n    }\n    isExpansionFormStart() {\n        if (this._cursor.peek() !== $LBRACE) {\n            return false;\n        }\n        if (this._interpolationConfig) {\n            const start = this._cursor.clone();\n            const isInterpolation = this._attemptStr(this._interpolationConfig.start);\n            this._cursor = start;\n            return !isInterpolation;\n        }\n        return true;\n    }\n}\nfunction isNotWhitespace(code) {\n    return !isWhitespace(code) || code === $EOF;\n}\nfunction isNameEnd(code) {\n    return isWhitespace(code) || code === $GT || code === $LT ||\n        code === $SLASH || code === $SQ || code === $DQ || code === $EQ ||\n        code === $EOF;\n}\nfunction isPrefixEnd(code) {\n    return (code < $a || $z < code) && (code < $A || $Z < code) &&\n        (code < $0 || code > $9);\n}\nfunction isDigitEntityEnd(code) {\n    return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);\n}\nfunction isNamedEntityEnd(code) {\n    return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);\n}\nfunction isExpansionCaseStart(peek) {\n    return peek !== $RBRACE;\n}\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n    return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);\n}\nfunction toUpperCaseCharCode(code) {\n    return code >= $a && code <= $z ? code - $a + $A : code;\n}\nfunction isBlockNameChar(code) {\n    return isAsciiLetter(code) || isDigit(code) || code === $_;\n}\nfunction isBlockParameterChar(code) {\n    return code !== $SEMICOLON && isNotWhitespace(code);\n}\nfunction mergeTextTokens(srcTokens) {\n    const dstTokens = [];\n    let lastDstToken = undefined;\n    for (let i = 0; i < srcTokens.length; i++) {\n        const token = srcTokens[i];\n        if ((lastDstToken && lastDstToken.type === 5 /* TokenType.TEXT */ && token.type === 5 /* TokenType.TEXT */) ||\n            (lastDstToken && lastDstToken.type === 16 /* TokenType.ATTR_VALUE_TEXT */ &&\n                token.type === 16 /* TokenType.ATTR_VALUE_TEXT */)) {\n            lastDstToken.parts[0] += token.parts[0];\n            lastDstToken.sourceSpan.end = token.sourceSpan.end;\n        }\n        else {\n            lastDstToken = token;\n            dstTokens.push(lastDstToken);\n        }\n    }\n    return dstTokens;\n}\nclass PlainCharacterCursor {\n    constructor(fileOrCursor, range) {\n        if (fileOrCursor instanceof PlainCharacterCursor) {\n            this.file = fileOrCursor.file;\n            this.input = fileOrCursor.input;\n            this.end = fileOrCursor.end;\n            const state = fileOrCursor.state;\n            // Note: avoid using `{...fileOrCursor.state}` here as that has a severe performance penalty.\n            // In ES5 bundles the object spread operator is translated into the `__assign` helper, which\n            // is not optimized by VMs as efficiently as a raw object literal. Since this constructor is\n            // called in tight loops, this difference matters.\n            this.state = {\n                peek: state.peek,\n                offset: state.offset,\n                line: state.line,\n                column: state.column,\n            };\n        }\n        else {\n            if (!range) {\n                throw new Error('Programming error: the range argument must be provided with a file argument.');\n            }\n            this.file = fileOrCursor;\n            this.input = fileOrCursor.content;\n            this.end = range.endPos;\n            this.state = {\n                peek: -1,\n                offset: range.startPos,\n                line: range.startLine,\n                column: range.startCol,\n            };\n        }\n    }\n    clone() {\n        return new PlainCharacterCursor(this);\n    }\n    peek() {\n        return this.state.peek;\n    }\n    charsLeft() {\n        return this.end - this.state.offset;\n    }\n    diff(other) {\n        return this.state.offset - other.state.offset;\n    }\n    advance() {\n        this.advanceState(this.state);\n    }\n    init() {\n        this.updatePeek(this.state);\n    }\n    getSpan(start, leadingTriviaCodePoints) {\n        start = start || this;\n        let fullStart = start;\n        if (leadingTriviaCodePoints) {\n            while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {\n                if (fullStart === start) {\n                    start = start.clone();\n                }\n                start.advance();\n            }\n        }\n        const startLocation = this.locationFromCursor(start);\n        const endLocation = this.locationFromCursor(this);\n        const fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;\n        return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);\n    }\n    getChars(start) {\n        return this.input.substring(start.state.offset, this.state.offset);\n    }\n    charAt(pos) {\n        return this.input.charCodeAt(pos);\n    }\n    advanceState(state) {\n        if (state.offset >= this.end) {\n            this.state = state;\n            throw new CursorError('Unexpected character \"EOF\"', this);\n        }\n        const currentChar = this.charAt(state.offset);\n        if (currentChar === $LF) {\n            state.line++;\n            state.column = 0;\n        }\n        else if (!isNewLine(currentChar)) {\n            state.column++;\n        }\n        state.offset++;\n        this.updatePeek(state);\n    }\n    updatePeek(state) {\n        state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);\n    }\n    locationFromCursor(cursor) {\n        return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);\n    }\n}\nclass EscapedCharacterCursor extends PlainCharacterCursor {\n    constructor(fileOrCursor, range) {\n        if (fileOrCursor instanceof EscapedCharacterCursor) {\n            super(fileOrCursor);\n            this.internalState = { ...fileOrCursor.internalState };\n        }\n        else {\n            super(fileOrCursor, range);\n            this.internalState = this.state;\n        }\n    }\n    advance() {\n        this.state = this.internalState;\n        super.advance();\n        this.processEscapeSequence();\n    }\n    init() {\n        super.init();\n        this.processEscapeSequence();\n    }\n    clone() {\n        return new EscapedCharacterCursor(this);\n    }\n    getChars(start) {\n        const cursor = start.clone();\n        let chars = '';\n        while (cursor.internalState.offset < this.internalState.offset) {\n            chars += String.fromCodePoint(cursor.peek());\n            cursor.advance();\n        }\n        return chars;\n    }\n    /**\n     * Process the escape sequence that starts at the current position in the text.\n     *\n     * This method is called to ensure that `peek` has the unescaped value of escape sequences.\n     */\n    processEscapeSequence() {\n        const peek = () => this.internalState.peek;\n        if (peek() === $BACKSLASH) {\n            // We have hit an escape sequence so we need the internal state to become independent\n            // of the external state.\n            this.internalState = { ...this.state };\n            // Move past the backslash\n            this.advanceState(this.internalState);\n            // First check for standard control char sequences\n            if (peek() === $n) {\n                this.state.peek = $LF;\n            }\n            else if (peek() === $r) {\n                this.state.peek = $CR;\n            }\n            else if (peek() === $v) {\n                this.state.peek = $VTAB;\n            }\n            else if (peek() === $t) {\n                this.state.peek = $TAB;\n            }\n            else if (peek() === $b) {\n                this.state.peek = $BSPACE;\n            }\n            else if (peek() === $f) {\n                this.state.peek = $FF;\n            }\n            // Now consider more complex sequences\n            else if (peek() === $u) {\n                // Unicode code-point sequence\n                this.advanceState(this.internalState); // advance past the `u` char\n                if (peek() === $LBRACE) {\n                    // Variable length Unicode, e.g. `\\x{123}`\n                    this.advanceState(this.internalState); // advance past the `{` char\n                    // Advance past the variable number of hex digits until we hit a `}` char\n                    const digitStart = this.clone();\n                    let length = 0;\n                    while (peek() !== $RBRACE) {\n                        this.advanceState(this.internalState);\n                        length++;\n                    }\n                    this.state.peek = this.decodeHexDigits(digitStart, length);\n                }\n                else {\n                    // Fixed length Unicode, e.g. `\\u1234`\n                    const digitStart = this.clone();\n                    this.advanceState(this.internalState);\n                    this.advanceState(this.internalState);\n                    this.advanceState(this.internalState);\n                    this.state.peek = this.decodeHexDigits(digitStart, 4);\n                }\n            }\n            else if (peek() === $x) {\n                // Hex char code, e.g. `\\x2F`\n                this.advanceState(this.internalState); // advance past the `x` char\n                const digitStart = this.clone();\n                this.advanceState(this.internalState);\n                this.state.peek = this.decodeHexDigits(digitStart, 2);\n            }\n            else if (isOctalDigit(peek())) {\n                // Octal char code, e.g. `\\012`,\n                let octal = '';\n                let length = 0;\n                let previous = this.clone();\n                while (isOctalDigit(peek()) && length < 3) {\n                    previous = this.clone();\n                    octal += String.fromCodePoint(peek());\n                    this.advanceState(this.internalState);\n                    length++;\n                }\n                this.state.peek = parseInt(octal, 8);\n                // Backup one char\n                this.internalState = previous.internalState;\n            }\n            else if (isNewLine(this.internalState.peek)) {\n                // Line continuation `\\` followed by a new line\n                this.advanceState(this.internalState); // advance over the newline\n                this.state = this.internalState;\n            }\n            else {\n                // If none of the `if` blocks were executed then we just have an escaped normal character.\n                // In that case we just, effectively, skip the backslash from the character.\n                this.state.peek = this.internalState.peek;\n            }\n        }\n    }\n    decodeHexDigits(start, length) {\n        const hex = this.input.slice(start.internalState.offset, start.internalState.offset + length);\n        const charCode = parseInt(hex, 16);\n        if (!isNaN(charCode)) {\n            return charCode;\n        }\n        else {\n            start.state = start.internalState;\n            throw new CursorError('Invalid hexadecimal escape sequence', start);\n        }\n    }\n}\nclass CursorError {\n    constructor(msg, cursor) {\n        this.msg = msg;\n        this.cursor = cursor;\n    }\n}\n\nclass TreeError extends ParseError {\n    static create(elementName, span, msg) {\n        return new TreeError(elementName, span, msg);\n    }\n    constructor(elementName, span, msg) {\n        super(span, msg);\n        this.elementName = elementName;\n    }\n}\nclass ParseTreeResult {\n    constructor(rootNodes, errors) {\n        this.rootNodes = rootNodes;\n        this.errors = errors;\n    }\n}\nclass Parser {\n    constructor(getTagDefinition) {\n        this.getTagDefinition = getTagDefinition;\n    }\n    parse(source, url, options) {\n        const tokenizeResult = tokenize(source, url, this.getTagDefinition, options);\n        const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);\n        parser.build();\n        return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));\n    }\n}\nclass _TreeBuilder {\n    constructor(tokens, getTagDefinition) {\n        this.tokens = tokens;\n        this.getTagDefinition = getTagDefinition;\n        this._index = -1;\n        this._containerStack = [];\n        this.rootNodes = [];\n        this.errors = [];\n        this._advance();\n    }\n    build() {\n        while (this._peek.type !== 29 /* TokenType.EOF */) {\n            if (this._peek.type === 0 /* TokenType.TAG_OPEN_START */ ||\n                this._peek.type === 4 /* TokenType.INCOMPLETE_TAG_OPEN */) {\n                this._consumeStartTag(this._advance());\n            }\n            else if (this._peek.type === 3 /* TokenType.TAG_CLOSE */) {\n                this._consumeEndTag(this._advance());\n            }\n            else if (this._peek.type === 12 /* TokenType.CDATA_START */) {\n                this._closeVoidElement();\n                this._consumeCdata(this._advance());\n            }\n            else if (this._peek.type === 10 /* TokenType.COMMENT_START */) {\n                this._closeVoidElement();\n                this._consumeComment(this._advance());\n            }\n            else if (this._peek.type === 5 /* TokenType.TEXT */ || this._peek.type === 7 /* TokenType.RAW_TEXT */ ||\n                this._peek.type === 6 /* TokenType.ESCAPABLE_RAW_TEXT */) {\n                this._closeVoidElement();\n                this._consumeText(this._advance());\n            }\n            else if (this._peek.type === 19 /* TokenType.EXPANSION_FORM_START */) {\n                this._consumeExpansion(this._advance());\n            }\n            else if (this._peek.type === 24 /* TokenType.BLOCK_OPEN_START */) {\n                this._closeVoidElement();\n                this._consumeBlockOpen(this._advance());\n            }\n            else if (this._peek.type === 26 /* TokenType.BLOCK_CLOSE */) {\n                this._closeVoidElement();\n                this._consumeBlockClose(this._advance());\n            }\n            else if (this._peek.type === 28 /* TokenType.INCOMPLETE_BLOCK_OPEN */) {\n                this._closeVoidElement();\n                this._consumeIncompleteBlock(this._advance());\n            }\n            else {\n                // Skip all other tokens...\n                this._advance();\n            }\n        }\n        for (const leftoverContainer of this._containerStack) {\n            // Unlike HTML elements, blocks aren't closed implicitly by the end of the file.\n            if (leftoverContainer instanceof Block) {\n                this.errors.push(TreeError.create(leftoverContainer.name, leftoverContainer.sourceSpan, `Unclosed block \"${leftoverContainer.name}\"`));\n            }\n        }\n    }\n    _advance() {\n        const prev = this._peek;\n        if (this._index < this.tokens.length - 1) {\n            // Note: there is always an EOF token at the end\n            this._index++;\n        }\n        this._peek = this.tokens[this._index];\n        return prev;\n    }\n    _advanceIf(type) {\n        if (this._peek.type === type) {\n            return this._advance();\n        }\n        return null;\n    }\n    _consumeCdata(_startToken) {\n        this._consumeText(this._advance());\n        this._advanceIf(13 /* TokenType.CDATA_END */);\n    }\n    _consumeComment(token) {\n        const text = this._advanceIf(7 /* TokenType.RAW_TEXT */);\n        const endToken = this._advanceIf(11 /* TokenType.COMMENT_END */);\n        const value = text != null ? text.parts[0].trim() : null;\n        const sourceSpan = endToken == null ?\n            token.sourceSpan :\n            new ParseSourceSpan(token.sourceSpan.start, endToken.sourceSpan.end, token.sourceSpan.fullStart);\n        this._addToParent(new Comment(value, sourceSpan));\n    }\n    _consumeExpansion(token) {\n        const switchValue = this._advance();\n        const type = this._advance();\n        const cases = [];\n        // read =\n        while (this._peek.type === 20 /* TokenType.EXPANSION_CASE_VALUE */) {\n            const expCase = this._parseExpansionCase();\n            if (!expCase)\n                return; // error\n            cases.push(expCase);\n        }\n        // read the final }\n        if (this._peek.type !== 23 /* TokenType.EXPANSION_FORM_END */) {\n            this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));\n            return;\n        }\n        const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);\n        this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n        this._advance();\n    }\n    _parseExpansionCase() {\n        const value = this._advance();\n        // read {\n        if (this._peek.type !== 21 /* TokenType.EXPANSION_CASE_EXP_START */) {\n            this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));\n            return null;\n        }\n        // read until }\n        const start = this._advance();\n        const exp = this._collectExpansionExpTokens(start);\n        if (!exp)\n            return null;\n        const end = this._advance();\n        exp.push({ type: 29 /* TokenType.EOF */, parts: [], sourceSpan: end.sourceSpan });\n        // parse everything in between { and }\n        const expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);\n        expansionCaseParser.build();\n        if (expansionCaseParser.errors.length > 0) {\n            this.errors = this.errors.concat(expansionCaseParser.errors);\n            return null;\n        }\n        const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);\n        const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);\n        return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n    }\n    _collectExpansionExpTokens(start) {\n        const exp = [];\n        const expansionFormStack = [21 /* TokenType.EXPANSION_CASE_EXP_START */];\n        while (true) {\n            if (this._peek.type === 19 /* TokenType.EXPANSION_FORM_START */ ||\n                this._peek.type === 21 /* TokenType.EXPANSION_CASE_EXP_START */) {\n                expansionFormStack.push(this._peek.type);\n            }\n            if (this._peek.type === 22 /* TokenType.EXPANSION_CASE_EXP_END */) {\n                if (lastOnStack(expansionFormStack, 21 /* TokenType.EXPANSION_CASE_EXP_START */)) {\n                    expansionFormStack.pop();\n                    if (expansionFormStack.length === 0)\n                        return exp;\n                }\n                else {\n                    this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                    return null;\n                }\n            }\n            if (this._peek.type === 23 /* TokenType.EXPANSION_FORM_END */) {\n                if (lastOnStack(expansionFormStack, 19 /* TokenType.EXPANSION_FORM_START */)) {\n                    expansionFormStack.pop();\n                }\n                else {\n                    this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                    return null;\n                }\n            }\n            if (this._peek.type === 29 /* TokenType.EOF */) {\n                this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                return null;\n            }\n            exp.push(this._advance());\n        }\n    }\n    _consumeText(token) {\n        const tokens = [token];\n        const startSpan = token.sourceSpan;\n        let text = token.parts[0];\n        if (text.length > 0 && text[0] === '\\n') {\n            const parent = this._getContainer();\n            if (parent != null && parent.children.length === 0 &&\n                this.getTagDefinition(parent.name).ignoreFirstLf) {\n                text = text.substring(1);\n                tokens[0] = { type: token.type, sourceSpan: token.sourceSpan, parts: [text] };\n            }\n        }\n        while (this._peek.type === 8 /* TokenType.INTERPOLATION */ || this._peek.type === 5 /* TokenType.TEXT */ ||\n            this._peek.type === 9 /* TokenType.ENCODED_ENTITY */) {\n            token = this._advance();\n            tokens.push(token);\n            if (token.type === 8 /* TokenType.INTERPOLATION */) {\n                // For backward compatibility we decode HTML entities that appear in interpolation\n                // expressions. This is arguably a bug, but it could be a considerable breaking change to\n                // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n                // chain after View Engine has been removed.\n                text += token.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n            }\n            else if (token.type === 9 /* TokenType.ENCODED_ENTITY */) {\n                text += token.parts[0];\n            }\n            else {\n                text += token.parts.join('');\n            }\n        }\n        if (text.length > 0) {\n            const endSpan = token.sourceSpan;\n            this._addToParent(new Text(text, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));\n        }\n    }\n    _closeVoidElement() {\n        const el = this._getContainer();\n        if (el instanceof Element && this.getTagDefinition(el.name).isVoid) {\n            this._containerStack.pop();\n        }\n    }\n    _consumeStartTag(startTagToken) {\n        const [prefix, name] = startTagToken.parts;\n        const attrs = [];\n        while (this._peek.type === 14 /* TokenType.ATTR_NAME */) {\n            attrs.push(this._consumeAttr(this._advance()));\n        }\n        const fullName = this._getElementFullName(prefix, name, this._getClosestParentElement());\n        let selfClosing = false;\n        // Note: There could have been a tokenizer error\n        // so that we don't get a token for the end tag...\n        if (this._peek.type === 2 /* TokenType.TAG_OPEN_END_VOID */) {\n            this._advance();\n            selfClosing = true;\n            const tagDef = this.getTagDefinition(fullName);\n            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n                this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void, custom and foreign elements can be self closed \"${startTagToken.parts[1]}\"`));\n            }\n        }\n        else if (this._peek.type === 1 /* TokenType.TAG_OPEN_END */) {\n            this._advance();\n            selfClosing = false;\n        }\n        const end = this._peek.sourceSpan.fullStart;\n        const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n        // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n        const startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n        const el = new Element(fullName, attrs, [], span, startSpan, undefined);\n        const parentEl = this._getContainer();\n        this._pushContainer(el, parentEl instanceof Element &&\n            this.getTagDefinition(parentEl.name).isClosedByChild(el.name));\n        if (selfClosing) {\n            // Elements that are self-closed have their `endSourceSpan` set to the full span, as the\n            // element start tag also represents the end tag.\n            this._popContainer(fullName, Element, span);\n        }\n        else if (startTagToken.type === 4 /* TokenType.INCOMPLETE_TAG_OPEN */) {\n            // We already know the opening tag is not complete, so it is unlikely it has a corresponding\n            // close tag. Let's optimistically parse it as a full element and emit an error.\n            this._popContainer(fullName, Element, null);\n            this.errors.push(TreeError.create(fullName, span, `Opening tag \"${fullName}\" not terminated.`));\n        }\n    }\n    _pushContainer(node, isClosedByChild) {\n        if (isClosedByChild) {\n            this._containerStack.pop();\n        }\n        this._addToParent(node);\n        this._containerStack.push(node);\n    }\n    _consumeEndTag(endTagToken) {\n        const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getClosestParentElement());\n        if (this.getTagDefinition(fullName).isVoid) {\n            this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags \"${endTagToken.parts[1]}\"`));\n        }\n        else if (!this._popContainer(fullName, Element, endTagToken.sourceSpan)) {\n            const errMsg = `Unexpected closing tag \"${fullName}\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;\n            this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n        }\n    }\n    /**\n     * Closes the nearest element with the tag name `fullName` in the parse tree.\n     * `endSourceSpan` is the span of the closing tag, or null if the element does\n     * not have a closing tag (for example, this happens when an incomplete\n     * opening tag is recovered).\n     */\n    _popContainer(expectedName, expectedType, endSourceSpan) {\n        let unexpectedCloseTagDetected = false;\n        for (let stackIndex = this._containerStack.length - 1; stackIndex >= 0; stackIndex--) {\n            const node = this._containerStack[stackIndex];\n            if ((node.name === expectedName || expectedName === null) && node instanceof expectedType) {\n                // Record the parse span with the element that is being closed. Any elements that are\n                // removed from the element stack at this point are closed implicitly, so they won't get\n                // an end source span (as there is no explicit closing element).\n                node.endSourceSpan = endSourceSpan;\n                node.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : node.sourceSpan.end;\n                this._containerStack.splice(stackIndex, this._containerStack.length - stackIndex);\n                return !unexpectedCloseTagDetected;\n            }\n            // Blocks and most elements are not self closing.\n            if (node instanceof Block ||\n                node instanceof Element && !this.getTagDefinition(node.name).closedByParent) {\n                // Note that we encountered an unexpected close tag but continue processing the element\n                // stack so we can assign an `endSourceSpan` if there is a corresponding start tag for this\n                // end tag in the stack.\n                unexpectedCloseTagDetected = true;\n            }\n        }\n        return false;\n    }\n    _consumeAttr(attrName) {\n        const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n        let attrEnd = attrName.sourceSpan.end;\n        // Consume any quote\n        if (this._peek.type === 15 /* TokenType.ATTR_QUOTE */) {\n            this._advance();\n        }\n        // Consume the attribute value\n        let value = '';\n        const valueTokens = [];\n        let valueStartSpan = undefined;\n        let valueEnd = undefined;\n        // NOTE: We need to use a new variable `nextTokenType` here to hide the actual type of\n        // `_peek.type` from TS. Otherwise TS will narrow the type of `_peek.type` preventing it from\n        // being able to consider `ATTR_VALUE_INTERPOLATION` as an option. This is because TS is not\n        // able to see that `_advance()` will actually mutate `_peek`.\n        const nextTokenType = this._peek.type;\n        if (nextTokenType === 16 /* TokenType.ATTR_VALUE_TEXT */) {\n            valueStartSpan = this._peek.sourceSpan;\n            valueEnd = this._peek.sourceSpan.end;\n            while (this._peek.type === 16 /* TokenType.ATTR_VALUE_TEXT */ ||\n                this._peek.type === 17 /* TokenType.ATTR_VALUE_INTERPOLATION */ ||\n                this._peek.type === 9 /* TokenType.ENCODED_ENTITY */) {\n                const valueToken = this._advance();\n                valueTokens.push(valueToken);\n                if (valueToken.type === 17 /* TokenType.ATTR_VALUE_INTERPOLATION */) {\n                    // For backward compatibility we decode HTML entities that appear in interpolation\n                    // expressions. This is arguably a bug, but it could be a considerable breaking change to\n                    // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n                    // chain after View Engine has been removed.\n                    value += valueToken.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n                }\n                else if (valueToken.type === 9 /* TokenType.ENCODED_ENTITY */) {\n                    value += valueToken.parts[0];\n                }\n                else {\n                    value += valueToken.parts.join('');\n                }\n                valueEnd = attrEnd = valueToken.sourceSpan.end;\n            }\n        }\n        // Consume any quote\n        if (this._peek.type === 15 /* TokenType.ATTR_QUOTE */) {\n            const quoteToken = this._advance();\n            attrEnd = quoteToken.sourceSpan.end;\n        }\n        const valueSpan = valueStartSpan && valueEnd &&\n            new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);\n        return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : undefined, undefined);\n    }\n    _consumeBlockOpen(token) {\n        const parameters = [];\n        while (this._peek.type === 27 /* TokenType.BLOCK_PARAMETER */) {\n            const paramToken = this._advance();\n            parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));\n        }\n        if (this._peek.type === 25 /* TokenType.BLOCK_OPEN_END */) {\n            this._advance();\n        }\n        const end = this._peek.sourceSpan.fullStart;\n        const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);\n        // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n        const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);\n        const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);\n        this._pushContainer(block, false);\n    }\n    _consumeBlockClose(token) {\n        if (!this._popContainer(null, Block, token.sourceSpan)) {\n            this.errors.push(TreeError.create(null, token.sourceSpan, `Unexpected closing block. The block may have been closed earlier. ` +\n                `If you meant to write the } character, you should use the \"&#125;\" ` +\n                `HTML entity instead.`));\n        }\n    }\n    _consumeIncompleteBlock(token) {\n        const parameters = [];\n        while (this._peek.type === 27 /* TokenType.BLOCK_PARAMETER */) {\n            const paramToken = this._advance();\n            parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));\n        }\n        const end = this._peek.sourceSpan.fullStart;\n        const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);\n        // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n        const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);\n        const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);\n        this._pushContainer(block, false);\n        // Incomplete blocks don't have children so we close them immediately and report an error.\n        this._popContainer(null, Block, null);\n        this.errors.push(TreeError.create(token.parts[0], span, `Incomplete block \"${token.parts[0]}\". If you meant to write the @ character, ` +\n            `you should use the \"&#64;\" HTML entity instead.`));\n    }\n    _getContainer() {\n        return this._containerStack.length > 0 ? this._containerStack[this._containerStack.length - 1] :\n            null;\n    }\n    _getClosestParentElement() {\n        for (let i = this._containerStack.length - 1; i > -1; i--) {\n            if (this._containerStack[i] instanceof Element) {\n                return this._containerStack[i];\n            }\n        }\n        return null;\n    }\n    _addToParent(node) {\n        const parent = this._getContainer();\n        if (parent === null) {\n            this.rootNodes.push(node);\n        }\n        else {\n            parent.children.push(node);\n        }\n    }\n    _getElementFullName(prefix, localName, parentElement) {\n        if (prefix === '') {\n            prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';\n            if (prefix === '' && parentElement != null) {\n                const parentTagName = splitNsName(parentElement.name)[1];\n                const parentTagDefinition = this.getTagDefinition(parentTagName);\n                if (!parentTagDefinition.preventNamespaceInheritance) {\n                    prefix = getNsPrefix(parentElement.name);\n                }\n            }\n        }\n        return mergeNsAndName(prefix, localName);\n    }\n}\nfunction lastOnStack(stack, element) {\n    return stack.length > 0 && stack[stack.length - 1] === element;\n}\n/**\n * Decode the `entity` string, which we believe is the contents of an HTML entity.\n *\n * If the string is not actually a valid/known entity then just return the original `match` string.\n */\nfunction decodeEntity(match, entity) {\n    if (NAMED_ENTITIES[entity] !== undefined) {\n        return NAMED_ENTITIES[entity] || match;\n    }\n    if (/^#x[a-f0-9]+$/i.test(entity)) {\n        return String.fromCodePoint(parseInt(entity.slice(2), 16));\n    }\n    if (/^#\\d+$/.test(entity)) {\n        return String.fromCodePoint(parseInt(entity.slice(1), 10));\n    }\n    return match;\n}\n\n/**\n * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all\n * tags use '*'.\n *\n * Extracted from, and should be kept in sync with\n * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations\n */\nconst TRUSTED_TYPES_SINKS = new Set([\n    // NOTE: All strings in this set *must* be lowercase!\n    // TrustedHTML\n    'iframe|srcdoc',\n    '*|innerhtml',\n    '*|outerhtml',\n    // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.\n    // TrustedScriptURL\n    'embed|src',\n    'object|codebase',\n    'object|data',\n]);\n/**\n * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types\n * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular\n * Trusted Type is required for values passed to the sink:\n * - SecurityContext.HTML corresponds to TrustedHTML\n * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL\n */\nfunction isTrustedTypesSink(tagName, propName) {\n    // Make sure comparisons are case insensitive, so that case differences between attribute and\n    // property names do not have a security impact.\n    tagName = tagName.toLowerCase();\n    propName = propName.toLowerCase();\n    return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) ||\n        TRUSTED_TYPES_SINKS.has('*|' + propName);\n}\n\nconst setI18nRefs = (htmlNode, i18nNode) => {\n    if (htmlNode instanceof NodeWithI18n) {\n        if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {\n            // This html node represents an ICU but this is a second processing pass, and the legacy id\n            // was computed in the previous pass and stored in the `i18n` property as a message.\n            // We are about to wipe out that property so capture the previous message to be reused when\n            // generating the message for this ICU later. See `_generateI18nMessage()`.\n            i18nNode.previousMessage = htmlNode.i18n;\n        }\n        htmlNode.i18n = i18nNode;\n    }\n    return i18nNode;\n};\n/**\n * This visitor walks over HTML parse tree and converts information stored in\n * i18n-related attributes (\"i18n\" and \"i18n-*\") into i18n meta object that is\n * stored with other element's and attribute's information.\n */\nclass I18nMetaVisitor {\n    constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false, enableI18nLegacyMessageIdFormat = false, containerBlocks = DEFAULT_CONTAINER_BLOCKS) {\n        this.interpolationConfig = interpolationConfig;\n        this.keepI18nAttrs = keepI18nAttrs;\n        this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat;\n        this.containerBlocks = containerBlocks;\n        // whether visited nodes contain i18n information\n        this.hasI18nMeta = false;\n        this._errors = [];\n    }\n    _generateI18nMessage(nodes, meta = '', visitNodeFn) {\n        const { meaning, description, customId } = this._parseMetadata(meta);\n        const createI18nMessage = createI18nMessageFactory(this.interpolationConfig, this.containerBlocks);\n        const message = createI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n        this._setMessageId(message, meta);\n        this._setLegacyIds(message, meta);\n        return message;\n    }\n    visitAllWithErrors(nodes) {\n        const result = nodes.map(node => node.visit(this, null));\n        return new ParseTreeResult(result, this._errors);\n    }\n    visitElement(element) {\n        let message = undefined;\n        if (hasI18nAttrs(element)) {\n            this.hasI18nMeta = true;\n            const attrs = [];\n            const attrsMeta = {};\n            for (const attr of element.attrs) {\n                if (attr.name === I18N_ATTR) {\n                    // root 'i18n' node attribute\n                    const i18n = element.i18n || attr.value;\n                    message = this._generateI18nMessage(element.children, i18n, setI18nRefs);\n                    if (message.nodes.length === 0) {\n                        // Ignore the message if it is empty.\n                        message = undefined;\n                    }\n                    // Store the message on the element\n                    element.i18n = message;\n                }\n                else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {\n                    // 'i18n-*' attributes\n                    const name = attr.name.slice(I18N_ATTR_PREFIX.length);\n                    if (isTrustedTypesSink(element.name, name)) {\n                        this._reportError(attr, `Translating attribute '${name}' is disallowed for security reasons.`);\n                    }\n                    else {\n                        attrsMeta[name] = attr.value;\n                    }\n                }\n                else {\n                    // non-i18n attributes\n                    attrs.push(attr);\n                }\n            }\n            // set i18n meta for attributes\n            if (Object.keys(attrsMeta).length) {\n                for (const attr of attrs) {\n                    const meta = attrsMeta[attr.name];\n                    // do not create translation for empty attributes\n                    if (meta !== undefined && attr.value) {\n                        attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);\n                    }\n                }\n            }\n            if (!this.keepI18nAttrs) {\n                // update element's attributes,\n                // keeping only non-i18n related ones\n                element.attrs = attrs;\n            }\n        }\n        visitAll(this, element.children, message);\n        return element;\n    }\n    visitExpansion(expansion, currentMessage) {\n        let message;\n        const meta = expansion.i18n;\n        this.hasI18nMeta = true;\n        if (meta instanceof IcuPlaceholder) {\n            // set ICU placeholder name (e.g. \"ICU_1\"),\n            // generated while processing root element contents,\n            // so we can reference it when we output translation\n            const name = meta.name;\n            message = this._generateI18nMessage([expansion], meta);\n            const icu = icuFromI18nMessage(message);\n            icu.name = name;\n            if (currentMessage !== null) {\n                // Also update the placeholderToMessage map with this new message\n                currentMessage.placeholderToMessage[name] = message;\n            }\n        }\n        else {\n            // ICU is a top level message, try to use metadata from container element if provided via\n            // `context` argument. Note: context may not be available for standalone ICUs (without\n            // wrapping element), so fallback to ICU metadata in this case.\n            message = this._generateI18nMessage([expansion], currentMessage || meta);\n        }\n        expansion.i18n = message;\n        return expansion;\n    }\n    visitText(text) {\n        return text;\n    }\n    visitAttribute(attribute) {\n        return attribute;\n    }\n    visitComment(comment) {\n        return comment;\n    }\n    visitExpansionCase(expansionCase) {\n        return expansionCase;\n    }\n    visitBlock(block, context) {\n        visitAll(this, block.children, context);\n        return block;\n    }\n    visitBlockParameter(parameter, context) {\n        return parameter;\n    }\n    /**\n     * Parse the general form `meta` passed into extract the explicit metadata needed to create a\n     * `Message`.\n     *\n     * There are three possibilities for the `meta` variable\n     * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.\n     * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.\n     * 4) other: ignore this and just process the message metadata as normal\n     *\n     * @param meta the bucket that holds information about the message\n     * @returns the parsed metadata.\n     */\n    _parseMetadata(meta) {\n        return typeof meta === 'string' ? parseI18nMeta(meta) :\n            meta instanceof Message ? meta :\n                {};\n    }\n    /**\n     * Generate (or restore) message id if not specified already.\n     */\n    _setMessageId(message, meta) {\n        if (!message.id) {\n            message.id = meta instanceof Message && meta.id || decimalDigest(message);\n        }\n    }\n    /**\n     * Update the `message` with a `legacyId` if necessary.\n     *\n     * @param message the message whose legacy id should be set\n     * @param meta information about the message being processed\n     */\n    _setLegacyIds(message, meta) {\n        if (this.enableI18nLegacyMessageIdFormat) {\n            message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];\n        }\n        else if (typeof meta !== 'string') {\n            // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in\n            // `packages/compiler/src/render3/view/template.ts`).\n            // In that case we want to reuse the legacy message generated in the 1st pass (see\n            // `setI18nRefs()`).\n            const previousMessage = meta instanceof Message ? meta :\n                meta instanceof IcuPlaceholder ? meta.previousMessage :\n                    undefined;\n            message.legacyIds = previousMessage ? previousMessage.legacyIds : [];\n        }\n    }\n    _reportError(node, msg) {\n        this._errors.push(new I18nError(node.sourceSpan, msg));\n    }\n}\n/** I18n separators for metadata **/\nconst I18N_MEANING_SEPARATOR = '|';\nconst I18N_ID_SEPARATOR = '@@';\n/**\n * Parses i18n metas like:\n *  - \"@@id\",\n *  - \"description[@@id]\",\n *  - \"meaning|description[@@id]\"\n * and returns an object with parsed output.\n *\n * @param meta String that represents i18n meta\n * @returns Object with id, meaning and description fields\n */\nfunction parseI18nMeta(meta = '') {\n    let customId;\n    let meaning;\n    let description;\n    meta = meta.trim();\n    if (meta) {\n        const idIndex = meta.indexOf(I18N_ID_SEPARATOR);\n        const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);\n        let meaningAndDesc;\n        [meaningAndDesc, customId] =\n            (idIndex > -1) ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];\n        [meaning, description] = (descIndex > -1) ?\n            [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n            ['', meaningAndDesc];\n    }\n    return { customId, meaning, description };\n}\n// Converts i18n meta information for a message (id, description, meaning)\n// to a JsDoc statement formatted as expected by the Closure compiler.\nfunction i18nMetaToJSDoc(meta) {\n    const tags = [];\n    if (meta.description) {\n        tags.push({ tagName: \"desc\" /* o.JSDocTagName.Desc */, text: meta.description });\n    }\n    else {\n        // Suppress the JSCompiler warning that a `@desc` was not given for this message.\n        tags.push({ tagName: \"suppress\" /* o.JSDocTagName.Suppress */, text: '{msgDescriptions}' });\n    }\n    if (meta.meaning) {\n        tags.push({ tagName: \"meaning\" /* o.JSDocTagName.Meaning */, text: meta.meaning });\n    }\n    return jsDocComment(tags);\n}\n\n/** Closure uses `goog.getMsg(message)` to lookup translations */\nconst GOOG_GET_MSG = 'goog.getMsg';\n/**\n * Generates a `goog.getMsg()` statement and reassignment. The template:\n *\n * ```html\n * <div i18n>Sent from {{ sender }} to <span class=\"receiver\">{{ receiver }}</span></div>\n * ```\n *\n * Generates:\n *\n * ```typescript\n * const MSG_FOO = goog.getMsg(\n *   // Message template.\n *   'Sent from {$interpolation} to {$startTagSpan}{$interpolation_1}{$closeTagSpan}.',\n *   // Placeholder values, set to magic strings which get replaced by the Angular runtime.\n *   {\n *     'interpolation': '\\uFFFD0\\uFFFD',\n *     'startTagSpan': '\\uFFFD1\\uFFFD',\n *     'interpolation_1': '\\uFFFD2\\uFFFD',\n *     'closeTagSpan': '\\uFFFD3\\uFFFD',\n *   },\n *   // Options bag.\n *   {\n *     // Maps each placeholder to the original Angular source code which generates it's value.\n *     original_code: {\n *       'interpolation': '{{ sender }}',\n *       'startTagSpan': '<span class=\"receiver\">',\n *       'interpolation_1': '{{ receiver }}',\n *       'closeTagSpan': '</span>',\n *     },\n *   },\n * );\n * const I18N_0 = MSG_FOO;\n * ```\n */\nfunction createGoogleGetMsgStatements(variable$1, message, closureVar, placeholderValues) {\n    const messageString = serializeI18nMessageForGetMsg(message);\n    const args = [literal(messageString)];\n    if (Object.keys(placeholderValues).length) {\n        // Message template parameters containing the magic strings replaced by the Angular runtime with\n        // real data, e.g. `{'interpolation': '\\uFFFD0\\uFFFD'}`.\n        args.push(mapLiteral(formatI18nPlaceholderNamesInMap(placeholderValues, true /* useCamelCase */), true /* quoted */));\n        // Message options object, which contains original source code for placeholders (as they are\n        // present in a template, e.g.\n        // `{original_code: {'interpolation': '{{ name }}', 'startTagSpan': '<span>'}}`.\n        args.push(mapLiteral({\n            original_code: literalMap(Object.keys(placeholderValues)\n                .map((param) => ({\n                key: formatI18nPlaceholderName(param),\n                quoted: true,\n                value: message.placeholders[param] ?\n                    // Get source span for typical placeholder if it exists.\n                    literal(message.placeholders[param].sourceSpan.toString()) :\n                    // Otherwise must be an ICU expression, get it's source span.\n                    literal(message.placeholderToMessage[param]\n                        .nodes.map((node) => node.sourceSpan.toString())\n                        .join('')),\n            }))),\n        }));\n    }\n    // /**\n    //  * @desc description of message\n    //  * @meaning meaning of message\n    //  */\n    // const MSG_... = goog.getMsg(..);\n    // I18N_X = MSG_...;\n    const googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();\n    googGetMsgStmt.addLeadingComment(i18nMetaToJSDoc(message));\n    const i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));\n    return [googGetMsgStmt, i18nAssignmentStmt];\n}\n/**\n * This visitor walks over i18n tree and generates its string representation, including ICUs and\n * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.\n */\nclass GetMsgSerializerVisitor {\n    formatPh(value) {\n        return `{$${formatI18nPlaceholderName(value)}}`;\n    }\n    visitText(text) {\n        return text.value;\n    }\n    visitContainer(container) {\n        return container.children.map(child => child.visit(this)).join('');\n    }\n    visitIcu(icu) {\n        return serializeIcuNode(icu);\n    }\n    visitTagPlaceholder(ph) {\n        return ph.isVoid ?\n            this.formatPh(ph.startName) :\n            `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n    }\n    visitPlaceholder(ph) {\n        return this.formatPh(ph.name);\n    }\n    visitBlockPlaceholder(ph) {\n        return `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n    }\n    visitIcuPlaceholder(ph, context) {\n        return this.formatPh(ph.name);\n    }\n}\nconst serializerVisitor = new GetMsgSerializerVisitor();\nfunction serializeI18nMessageForGetMsg(message) {\n    return message.nodes.map(node => node.visit(serializerVisitor, null)).join('');\n}\n\nfunction createLocalizeStatements(variable, message, params) {\n    const { messageParts, placeHolders } = serializeI18nMessageForLocalize(message);\n    const sourceSpan = getSourceSpan(message);\n    const expressions = placeHolders.map(ph => params[ph.text]);\n    const localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);\n    const variableInitialization = variable.set(localizedString$1);\n    return [new ExpressionStatement(variableInitialization)];\n}\n/**\n * This visitor walks over an i18n tree, capturing literal strings and placeholders.\n *\n * The result can be used for generating the `$localize` tagged template literals.\n */\nclass LocalizeSerializerVisitor {\n    constructor(placeholderToMessage, pieces) {\n        this.placeholderToMessage = placeholderToMessage;\n        this.pieces = pieces;\n    }\n    visitText(text) {\n        if (this.pieces[this.pieces.length - 1] instanceof LiteralPiece) {\n            // Two literal pieces in a row means that there was some comment node in-between.\n            this.pieces[this.pieces.length - 1].text += text.value;\n        }\n        else {\n            const sourceSpan = new ParseSourceSpan(text.sourceSpan.fullStart, text.sourceSpan.end, text.sourceSpan.fullStart, text.sourceSpan.details);\n            this.pieces.push(new LiteralPiece(text.value, sourceSpan));\n        }\n    }\n    visitContainer(container) {\n        container.children.forEach(child => child.visit(this));\n    }\n    visitIcu(icu) {\n        this.pieces.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));\n    }\n    visitTagPlaceholder(ph) {\n        this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));\n        if (!ph.isVoid) {\n            ph.children.forEach(child => child.visit(this));\n            this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));\n        }\n    }\n    visitPlaceholder(ph) {\n        this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));\n    }\n    visitBlockPlaceholder(ph) {\n        this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));\n        ph.children.forEach(child => child.visit(this));\n        this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));\n    }\n    visitIcuPlaceholder(ph) {\n        this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]));\n    }\n    createPlaceholderPiece(name, sourceSpan, associatedMessage) {\n        return new PlaceholderPiece(formatI18nPlaceholderName(name, /* useCamelCase */ false), sourceSpan, associatedMessage);\n    }\n}\n/**\n * Serialize an i18n message into two arrays: messageParts and placeholders.\n *\n * These arrays will be used to generate `$localize` tagged template literals.\n *\n * @param message The message to be serialized.\n * @returns an object containing the messageParts and placeholders.\n */\nfunction serializeI18nMessageForLocalize(message) {\n    const pieces = [];\n    const serializerVisitor = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);\n    message.nodes.forEach(node => node.visit(serializerVisitor));\n    return processMessagePieces(pieces);\n}\nfunction getSourceSpan(message) {\n    const startNode = message.nodes[0];\n    const endNode = message.nodes[message.nodes.length - 1];\n    return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);\n}\n/**\n * Convert the list of serialized MessagePieces into two arrays.\n *\n * One contains the literal string pieces and the other the placeholders that will be replaced by\n * expressions when rendering `$localize` tagged template literals.\n *\n * @param pieces The pieces to process.\n * @returns an object containing the messageParts and placeholders.\n */\nfunction processMessagePieces(pieces) {\n    const messageParts = [];\n    const placeHolders = [];\n    if (pieces[0] instanceof PlaceholderPiece) {\n        // The first piece was a placeholder so we need to add an initial empty message part.\n        messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));\n    }\n    for (let i = 0; i < pieces.length; i++) {\n        const part = pieces[i];\n        if (part instanceof LiteralPiece) {\n            messageParts.push(part);\n        }\n        else {\n            placeHolders.push(part);\n            if (pieces[i - 1] instanceof PlaceholderPiece) {\n                // There were two placeholders in a row, so we need to add an empty message part.\n                messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));\n            }\n        }\n    }\n    if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {\n        // The last piece was a placeholder so we need to add a final empty message part.\n        messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));\n    }\n    return { messageParts, placeHolders };\n}\nfunction createEmptyMessagePart(location) {\n    return new LiteralPiece('', new ParseSourceSpan(location, location));\n}\n\n/** Name of the global variable that is used to determine if we use Closure translations or not */\nconst NG_I18N_CLOSURE_MODE$1 = 'ngI18nClosureMode';\n/**\n * Prefix for non-`goog.getMsg` i18n-related vars.\n * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that\n * considers variables like `I18N_0` as constants and throws an error when their value changes.\n */\nconst TRANSLATION_VAR_PREFIX = 'i18n_';\n/** Prefix of ICU expressions for post processing */\nconst I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';\n/**\n * The escape sequence used for message param values.\n */\nconst ESCAPE = '\\uFFFD';\n/**\n * Lifts i18n properties into the consts array.\n * TODO: Can we use `ConstCollectedExpr`?\n * TODO: The way the various attributes are linked together is very complex. Perhaps we could\n * simplify the process, maybe by combining the context and message ops?\n */\nfunction collectI18nConsts(job) {\n    const fileBasedI18nSuffix = job.relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_').toUpperCase() + '_';\n    // Step One: Build up various lookup maps we need to collect all the consts.\n    // Context Xref -> Extracted Attribute Ops\n    const extractedAttributesByI18nContext = new Map();\n    // Element/ElementStart Xref -> I18n Attributes config op\n    const i18nAttributesByElement = new Map();\n    // Element/ElementStart Xref -> All I18n Expression ops for attrs on that target\n    const i18nExpressionsByElement = new Map();\n    // I18n Message Xref -> I18n Message Op (TODO: use a central op map)\n    const messages = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            if (op.kind === OpKind.ExtractedAttribute && op.i18nContext !== null) {\n                const attributes = extractedAttributesByI18nContext.get(op.i18nContext) ?? [];\n                attributes.push(op);\n                extractedAttributesByI18nContext.set(op.i18nContext, attributes);\n            }\n            else if (op.kind === OpKind.I18nAttributes) {\n                i18nAttributesByElement.set(op.target, op);\n            }\n            else if (op.kind === OpKind.I18nExpression && op.usage === I18nExpressionFor.I18nAttribute) {\n                const expressions = i18nExpressionsByElement.get(op.target) ?? [];\n                expressions.push(op);\n                i18nExpressionsByElement.set(op.target, expressions);\n            }\n            else if (op.kind === OpKind.I18nMessage) {\n                messages.set(op.xref, op);\n            }\n        }\n    }\n    // Step Two: Serialize the extracted i18n messages for root i18n blocks and i18n attributes into\n    // the const array.\n    //\n    // Also, each i18n message will have a variable expression that can refer to its\n    // value. Store these expressions in the appropriate place:\n    // 1. For normal i18n content, it also goes in the const array. We save the const index to use\n    // later.\n    // 2. For extracted attributes, it becomes the value of the extracted attribute instruction.\n    // 3. For i18n bindings, it will go in a separate const array instruction below; for now, we just\n    // save it.\n    const i18nValuesByContext = new Map();\n    const messageConstIndices = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.I18nMessage) {\n                if (op.messagePlaceholder === null) {\n                    const { mainVar, statements } = collectMessage(job, fileBasedI18nSuffix, messages, op);\n                    if (op.i18nBlock !== null) {\n                        // This is a regular i18n message with a corresponding i18n block. Collect it into the\n                        // const array.\n                        const i18nConst = job.addConst(mainVar, statements);\n                        messageConstIndices.set(op.i18nBlock, i18nConst);\n                    }\n                    else {\n                        // This is an i18n attribute. Extract the initializers into the const pool.\n                        job.constsInitializers.push(...statements);\n                        // Save the i18n variable value for later.\n                        i18nValuesByContext.set(op.i18nContext, mainVar);\n                        // This i18n message may correspond to an individual extracted attribute. If so, The\n                        // value of that attribute is updated to read the extracted i18n variable.\n                        const attributesForMessage = extractedAttributesByI18nContext.get(op.i18nContext);\n                        if (attributesForMessage !== undefined) {\n                            for (const attr of attributesForMessage) {\n                                attr.expression = mainVar.clone();\n                            }\n                        }\n                    }\n                }\n                OpList.remove(op);\n            }\n        }\n    }\n    // Step Three: Serialize I18nAttributes configurations into the const array. Each I18nAttributes\n    // instruction has a config array, which contains k-v pairs describing each binding name, and the\n    // i18n variable that provides the value.\n    for (const unit of job.units) {\n        for (const elem of unit.create) {\n            if (isElementOrContainerOp(elem)) {\n                const i18nAttributes = i18nAttributesByElement.get(elem.xref);\n                if (i18nAttributes === undefined) {\n                    // This element is not associated with an i18n attributes configuration instruction.\n                    continue;\n                }\n                let i18nExpressions = i18nExpressionsByElement.get(elem.xref);\n                if (i18nExpressions === undefined) {\n                    // Unused i18nAttributes should have already been removed.\n                    // TODO: Should the removal of those dead instructions be merged with this phase?\n                    throw new Error('AssertionError: Could not find any i18n expressions associated with an I18nAttributes instruction');\n                }\n                // Find expressions for all the unique property names, removing duplicates.\n                const seenPropertyNames = new Set();\n                i18nExpressions = i18nExpressions.filter(i18nExpr => {\n                    const seen = (seenPropertyNames.has(i18nExpr.name));\n                    seenPropertyNames.add(i18nExpr.name);\n                    return !seen;\n                });\n                const i18nAttributeConfig = i18nExpressions.flatMap(i18nExpr => {\n                    const i18nExprValue = i18nValuesByContext.get(i18nExpr.context);\n                    if (i18nExprValue === undefined) {\n                        throw new Error('AssertionError: Could not find i18n expression\\'s value');\n                    }\n                    return [literal(i18nExpr.name), i18nExprValue];\n                });\n                i18nAttributes.i18nAttributesConfig =\n                    job.addConst(new LiteralArrayExpr(i18nAttributeConfig));\n            }\n        }\n    }\n    // Step Four: Propagate the extracted const index into i18n ops that messages were extracted from.\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.I18nStart) {\n                const msgIndex = messageConstIndices.get(op.root);\n                if (msgIndex === undefined) {\n                    throw new Error('AssertionError: Could not find corresponding i18n block index for an i18n message op; was an i18n message incorrectly assumed to correspond to an attribute?');\n                }\n                op.messageIndex = msgIndex;\n            }\n        }\n    }\n}\n/**\n * Collects the given message into a set of statements that can be added to the const array.\n * This will recursively collect any sub-messages referenced from the parent message as well.\n */\nfunction collectMessage(job, fileBasedI18nSuffix, messages, messageOp) {\n    // Recursively collect any sub-messages, record each sub-message's main variable under its\n    // placeholder so that we can add them to the params for the parent message. It is possible\n    // that multiple sub-messages will share the same placeholder, so we need to track an array of\n    // variables for each placeholder.\n    const statements = [];\n    const subMessagePlaceholders = new Map();\n    for (const subMessageId of messageOp.subMessages) {\n        const subMessage = messages.get(subMessageId);\n        const { mainVar: subMessageVar, statements: subMessageStatements } = collectMessage(job, fileBasedI18nSuffix, messages, subMessage);\n        statements.push(...subMessageStatements);\n        const subMessages = subMessagePlaceholders.get(subMessage.messagePlaceholder) ?? [];\n        subMessages.push(subMessageVar);\n        subMessagePlaceholders.set(subMessage.messagePlaceholder, subMessages);\n    }\n    addSubMessageParams(messageOp, subMessagePlaceholders);\n    // Sort the params for consistency with TemaplateDefinitionBuilder output.\n    messageOp.params = new Map([...messageOp.params.entries()].sort());\n    const mainVar = variable(job.pool.uniqueName(TRANSLATION_VAR_PREFIX));\n    // Closure Compiler requires const names to start with `MSG_` but disallows any other\n    // const to start with `MSG_`. We define a variable starting with `MSG_` just for the\n    // `goog.getMsg` call\n    const closureVar = i18nGenerateClosureVar(job.pool, messageOp.message.id, fileBasedI18nSuffix, job.i18nUseExternalIds);\n    let transformFn = undefined;\n    // If nescessary, add a post-processing step and resolve any placeholder params that are\n    // set in post-processing.\n    if (messageOp.needsPostprocessing || messageOp.postprocessingParams.size > 0) {\n        // Sort the post-processing params for consistency with TemaplateDefinitionBuilder output.\n        const postprocessingParams = Object.fromEntries([...messageOp.postprocessingParams.entries()].sort());\n        const formattedPostprocessingParams = formatI18nPlaceholderNamesInMap(postprocessingParams, /* useCamelCase */ false);\n        const extraTransformFnParams = [];\n        if (messageOp.postprocessingParams.size > 0) {\n            extraTransformFnParams.push(mapLiteral(formattedPostprocessingParams, /* quoted */ true));\n        }\n        transformFn = (expr) => importExpr(Identifiers.i18nPostprocess).callFn([expr, ...extraTransformFnParams]);\n    }\n    // Add the message's statements\n    statements.push(...getTranslationDeclStmts$1(messageOp.message, mainVar, closureVar, messageOp.params, transformFn));\n    return { mainVar, statements };\n}\n/**\n * Adds the given subMessage placeholders to the given message op.\n *\n * If a placeholder only corresponds to a single sub-message variable, we just set that variable\n * as the param value. However, if the placeholder corresponds to multiple sub-message\n * variables, we need to add a special placeholder value that is handled by the post-processing\n * step. We then add the array of variables as a post-processing param.\n */\nfunction addSubMessageParams(messageOp, subMessagePlaceholders) {\n    for (const [placeholder, subMessages] of subMessagePlaceholders) {\n        if (subMessages.length === 1) {\n            messageOp.params.set(placeholder, subMessages[0]);\n        }\n        else {\n            messageOp.params.set(placeholder, literal(`${ESCAPE}${I18N_ICU_MAPPING_PREFIX}${placeholder}${ESCAPE}`));\n            messageOp.postprocessingParams.set(placeholder, literalArr(subMessages));\n        }\n    }\n}\n/**\n * Generate statements that define a given translation message.\n *\n * ```\n * var I18N_1;\n * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {\n *     var MSG_EXTERNAL_XXX = goog.getMsg(\n *          \"Some message with {$interpolation}!\",\n *          { \"interpolation\": \"\\uFFFD0\\uFFFD\" }\n *     );\n *     I18N_1 = MSG_EXTERNAL_XXX;\n * }\n * else {\n *     I18N_1 = $localize`Some message with ${'\\uFFFD0\\uFFFD'}!`;\n * }\n * ```\n *\n * @param message The original i18n AST message node\n * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.\n * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.\n * @param params Object mapping placeholder names to their values (e.g.\n * `{ \"interpolation\": \"\\uFFFD0\\uFFFD\" }`).\n * @param transformFn Optional transformation function that will be applied to the translation\n *     (e.g.\n * post-processing).\n * @returns An array of statements that defined a given translation.\n */\nfunction getTranslationDeclStmts$1(message, variable, closureVar, params, transformFn) {\n    const paramsObject = Object.fromEntries(params);\n    const statements = [\n        declareI18nVariable(variable),\n        ifStmt(createClosureModeGuard$1(), createGoogleGetMsgStatements(variable, message, closureVar, paramsObject), createLocalizeStatements(variable, message, formatI18nPlaceholderNamesInMap(paramsObject, /* useCamelCase */ false))),\n    ];\n    if (transformFn) {\n        statements.push(new ExpressionStatement(variable.set(transformFn(variable))));\n    }\n    return statements;\n}\n/**\n * Create the expression that will be used to guard the closure mode block\n * It is equivalent to:\n *\n * ```\n * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode\n * ```\n */\nfunction createClosureModeGuard$1() {\n    return typeofExpr(variable(NG_I18N_CLOSURE_MODE$1))\n        .notIdentical(literal('undefined', STRING_TYPE))\n        .and(variable(NG_I18N_CLOSURE_MODE$1));\n}\n/**\n * Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).\n */\nfunction i18nGenerateClosureVar(pool, messageId, fileBasedI18nSuffix, useExternalIds) {\n    let name;\n    const suffix = fileBasedI18nSuffix;\n    if (useExternalIds) {\n        const prefix = getTranslationConstPrefix(`EXTERNAL_`);\n        const uniqueSuffix = pool.uniqueName(suffix);\n        name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;\n    }\n    else {\n        const prefix = getTranslationConstPrefix(suffix);\n        name = pool.uniqueName(prefix);\n    }\n    return variable(name);\n}\n\n/**\n * Removes text nodes within i18n blocks since they are already hardcoded into the i18n message.\n * Also, replaces interpolations on these text nodes with i18n expressions of the non-text portions,\n * which will be applied later.\n */\nfunction convertI18nText(job) {\n    for (const unit of job.units) {\n        // Remove all text nodes within i18n blocks, their content is already captured in the i18n\n        // message.\n        let currentI18n = null;\n        let currentIcu = null;\n        const textNodeI18nBlocks = new Map();\n        const textNodeIcus = new Map();\n        const icuPlaceholderByText = new Map();\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nStart:\n                    if (op.context === null) {\n                        throw Error('I18n op should have its context set.');\n                    }\n                    currentI18n = op;\n                    break;\n                case OpKind.I18nEnd:\n                    currentI18n = null;\n                    break;\n                case OpKind.IcuStart:\n                    if (op.context === null) {\n                        throw Error('Icu op should have its context set.');\n                    }\n                    currentIcu = op;\n                    break;\n                case OpKind.IcuEnd:\n                    currentIcu = null;\n                    break;\n                case OpKind.Text:\n                    if (currentI18n !== null) {\n                        textNodeI18nBlocks.set(op.xref, currentI18n);\n                        textNodeIcus.set(op.xref, currentIcu);\n                        if (op.icuPlaceholder !== null) {\n                            // Create an op to represent the ICU placeholder. Initially set its static text to the\n                            // value of the text op, though this may be overwritten later if this text op is a\n                            // placeholder for an interpolation.\n                            const icuPlaceholderOp = createIcuPlaceholderOp(job.allocateXrefId(), op.icuPlaceholder, [op.initialValue]);\n                            OpList.replace(op, icuPlaceholderOp);\n                            icuPlaceholderByText.set(op.xref, icuPlaceholderOp);\n                        }\n                        else {\n                            // Otherwise just remove the text op, since its value is already accounted for in the\n                            // translated message.\n                            OpList.remove(op);\n                        }\n                    }\n                    break;\n            }\n        }\n        // Update any interpolations to the removed text, and instead represent them as a series of i18n\n        // expressions that we then apply.\n        for (const op of unit.update) {\n            switch (op.kind) {\n                case OpKind.InterpolateText:\n                    if (!textNodeI18nBlocks.has(op.target)) {\n                        continue;\n                    }\n                    const i18nOp = textNodeI18nBlocks.get(op.target);\n                    const icuOp = textNodeIcus.get(op.target);\n                    const icuPlaceholder = icuPlaceholderByText.get(op.target);\n                    const contextId = icuOp ? icuOp.context : i18nOp.context;\n                    const resolutionTime = icuOp ? I18nParamResolutionTime.Postproccessing :\n                        I18nParamResolutionTime.Creation;\n                    const ops = [];\n                    for (let i = 0; i < op.interpolation.expressions.length; i++) {\n                        const expr = op.interpolation.expressions[i];\n                        // For now, this i18nExpression depends on the slot context of the enclosing i18n block.\n                        // Later, we will modify this, and advance to a different point.\n                        ops.push(createI18nExpressionOp(contextId, i18nOp.xref, i18nOp.xref, i18nOp.handle, expr, icuPlaceholder?.xref ?? null, op.interpolation.i18nPlaceholders[i] ?? null, resolutionTime, I18nExpressionFor.I18nText, '', expr.sourceSpan ?? op.sourceSpan));\n                    }\n                    OpList.replaceWithMany(op, ops);\n                    // If this interpolation is part of an ICU placeholder, add the strings and expressions to\n                    // the placeholder.\n                    if (icuPlaceholder !== undefined) {\n                        icuPlaceholder.strings = op.interpolation.strings;\n                    }\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * Lifts local reference declarations on element-like structures within each view into an entry in\n * the `consts` array for the whole component.\n */\nfunction liftLocalRefs(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.ElementStart:\n                case OpKind.Template:\n                    if (!Array.isArray(op.localRefs)) {\n                        throw new Error(`AssertionError: expected localRefs to be an array still`);\n                    }\n                    op.numSlotsUsed += op.localRefs.length;\n                    if (op.localRefs.length > 0) {\n                        const localRefs = serializeLocalRefs(op.localRefs);\n                        op.localRefs = job.addConst(localRefs);\n                    }\n                    else {\n                        op.localRefs = null;\n                    }\n                    break;\n            }\n        }\n    }\n}\nfunction serializeLocalRefs(refs) {\n    const constRefs = [];\n    for (const ref of refs) {\n        constRefs.push(literal(ref.name), literal(ref.target));\n    }\n    return literalArr(constRefs);\n}\n\n/**\n * Change namespaces between HTML, SVG and MathML, depending on the next element.\n */\nfunction emitNamespaceChanges(job) {\n    for (const unit of job.units) {\n        let activeNamespace = Namespace.HTML;\n        for (const op of unit.create) {\n            if (op.kind !== OpKind.ElementStart) {\n                continue;\n            }\n            if (op.namespace !== activeNamespace) {\n                OpList.insertBefore(createNamespaceOp(op.namespace), op);\n                activeNamespace = op.namespace;\n            }\n        }\n    }\n}\n\n/**\n * Parses string representation of a style and converts it into object literal.\n *\n * @param value string representation of style as used in the `style` attribute in HTML.\n *   Example: `color: red; height: auto`.\n * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',\n * 'auto']`\n */\nfunction parse(value) {\n    // we use a string array here instead of a string map\n    // because a string-map is not guaranteed to retain the\n    // order of the entries whereas a string array can be\n    // constructed in a [key, value, key, value] format.\n    const styles = [];\n    let i = 0;\n    let parenDepth = 0;\n    let quote = 0 /* Char.QuoteNone */;\n    let valueStart = 0;\n    let propStart = 0;\n    let currentProp = null;\n    while (i < value.length) {\n        const token = value.charCodeAt(i++);\n        switch (token) {\n            case 40 /* Char.OpenParen */:\n                parenDepth++;\n                break;\n            case 41 /* Char.CloseParen */:\n                parenDepth--;\n                break;\n            case 39 /* Char.QuoteSingle */:\n                // valueStart needs to be there since prop values don't\n                // have quotes in CSS\n                if (quote === 0 /* Char.QuoteNone */) {\n                    quote = 39 /* Char.QuoteSingle */;\n                }\n                else if (quote === 39 /* Char.QuoteSingle */ && value.charCodeAt(i - 1) !== 92 /* Char.BackSlash */) {\n                    quote = 0 /* Char.QuoteNone */;\n                }\n                break;\n            case 34 /* Char.QuoteDouble */:\n                // same logic as above\n                if (quote === 0 /* Char.QuoteNone */) {\n                    quote = 34 /* Char.QuoteDouble */;\n                }\n                else if (quote === 34 /* Char.QuoteDouble */ && value.charCodeAt(i - 1) !== 92 /* Char.BackSlash */) {\n                    quote = 0 /* Char.QuoteNone */;\n                }\n                break;\n            case 58 /* Char.Colon */:\n                if (!currentProp && parenDepth === 0 && quote === 0 /* Char.QuoteNone */) {\n                    // TODO: Do not hyphenate CSS custom property names like: `--intentionallyCamelCase`\n                    currentProp = hyphenate(value.substring(propStart, i - 1).trim());\n                    valueStart = i;\n                }\n                break;\n            case 59 /* Char.Semicolon */:\n                if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0 /* Char.QuoteNone */) {\n                    const styleVal = value.substring(valueStart, i - 1).trim();\n                    styles.push(currentProp, styleVal);\n                    propStart = i;\n                    valueStart = 0;\n                    currentProp = null;\n                }\n                break;\n        }\n    }\n    if (currentProp && valueStart) {\n        const styleVal = value.slice(valueStart).trim();\n        styles.push(currentProp, styleVal);\n    }\n    return styles;\n}\nfunction hyphenate(value) {\n    return value\n        .replace(/[a-z][A-Z]/g, v => {\n        return v.charAt(0) + '-' + v.charAt(1);\n    })\n        .toLowerCase();\n}\n\n/**\n * Generate names for functions and variables across all views.\n *\n * This includes propagating those names into any `ir.ReadVariableExpr`s of those variables, so that\n * the reads can be emitted correctly.\n */\nfunction nameFunctionsAndVariables(job) {\n    addNamesToView(job.root, job.componentName, { index: 0 }, job.compatibility === CompatibilityMode.TemplateDefinitionBuilder);\n}\nfunction addNamesToView(unit, baseName, state, compatibility) {\n    if (unit.fnName === null) {\n        unit.fnName = sanitizeIdentifier(`${baseName}_${unit.job.fnSuffix}`);\n    }\n    // Keep track of the names we assign to variables in the view. We'll need to propagate these\n    // into reads of those variables afterwards.\n    const varNames = new Map();\n    for (const op of unit.ops()) {\n        switch (op.kind) {\n            case OpKind.Property:\n            case OpKind.HostProperty:\n                if (op.isAnimationTrigger) {\n                    op.name = '@' + op.name;\n                }\n                break;\n            case OpKind.Listener:\n                if (op.handlerFnName !== null) {\n                    break;\n                }\n                if (!op.hostListener && op.targetSlot.slot === null) {\n                    throw new Error(`Expected a slot to be assigned`);\n                }\n                let animation = '';\n                if (op.isAnimationListener) {\n                    op.name = `@${op.name}.${op.animationPhase}`;\n                    animation = 'animation';\n                }\n                if (op.hostListener) {\n                    op.handlerFnName = `${baseName}_${animation}${op.name}_HostBindingHandler`;\n                }\n                else {\n                    op.handlerFnName = `${unit.fnName}_${op.tag.replace('-', '_')}_${animation}${op.name}_${op.targetSlot.slot}_listener`;\n                }\n                op.handlerFnName = sanitizeIdentifier(op.handlerFnName);\n                break;\n            case OpKind.Variable:\n                varNames.set(op.xref, getVariableName(unit, op.variable, state));\n                break;\n            case OpKind.RepeaterCreate:\n                if (!(unit instanceof ViewCompilationUnit)) {\n                    throw new Error(`AssertionError: must be compiling a component`);\n                }\n                if (op.handle.slot === null) {\n                    throw new Error(`Expected slot to be assigned`);\n                }\n                if (op.emptyView !== null) {\n                    const emptyView = unit.job.views.get(op.emptyView);\n                    // Repeater empty view function is at slot +2 (metadata is in the first slot).\n                    addNamesToView(emptyView, `${baseName}_${`${op.functionNameSuffix}Empty`}_${op.handle.slot + 2}`, state, compatibility);\n                }\n                // Repeater primary view function is at slot +1 (metadata is in the first slot).\n                addNamesToView(unit.job.views.get(op.xref), `${baseName}_${op.functionNameSuffix}_${op.handle.slot + 1}`, state, compatibility);\n                break;\n            case OpKind.Template:\n                if (!(unit instanceof ViewCompilationUnit)) {\n                    throw new Error(`AssertionError: must be compiling a component`);\n                }\n                const childView = unit.job.views.get(op.xref);\n                if (op.handle.slot === null) {\n                    throw new Error(`Expected slot to be assigned`);\n                }\n                const suffix = op.functionNameSuffix.length === 0 ? '' : `_${op.functionNameSuffix}`;\n                addNamesToView(childView, `${baseName}${suffix}_${op.handle.slot}`, state, compatibility);\n                break;\n            case OpKind.StyleProp:\n                op.name = normalizeStylePropName(op.name);\n                if (compatibility) {\n                    op.name = stripImportant(op.name);\n                }\n                break;\n            case OpKind.ClassProp:\n                if (compatibility) {\n                    op.name = stripImportant(op.name);\n                }\n                break;\n        }\n    }\n    // Having named all variables declared in the view, now we can push those names into the\n    // `ir.ReadVariableExpr` expressions which represent reads of those variables.\n    for (const op of unit.ops()) {\n        visitExpressionsInOp(op, expr => {\n            if (!(expr instanceof ReadVariableExpr) || expr.name !== null) {\n                return;\n            }\n            if (!varNames.has(expr.xref)) {\n                throw new Error(`Variable ${expr.xref} not yet named`);\n            }\n            expr.name = varNames.get(expr.xref);\n        });\n    }\n}\nfunction getVariableName(unit, variable, state) {\n    if (variable.name === null) {\n        switch (variable.kind) {\n            case SemanticVariableKind.Context:\n                variable.name = `ctx_r${state.index++}`;\n                break;\n            case SemanticVariableKind.Identifier:\n                if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {\n                    // TODO: Prefix increment and `_r` are for compatiblity with the old naming scheme.\n                    // This has the potential to cause collisions when `ctx` is the identifier, so we need a\n                    // special check for that as well.\n                    const compatPrefix = variable.identifier === 'ctx' ? 'i' : '';\n                    variable.name = `${variable.identifier}_${compatPrefix}r${++state.index}`;\n                }\n                else {\n                    variable.name = `${variable.identifier}_i${state.index++}`;\n                }\n                break;\n            default:\n                // TODO: Prefix increment for compatibility only.\n                variable.name = `_r${++state.index}`;\n                break;\n        }\n    }\n    return variable.name;\n}\n/**\n * Normalizes a style prop name by hyphenating it (unless its a CSS variable).\n */\nfunction normalizeStylePropName(name) {\n    return name.startsWith('--') ? name : hyphenate(name);\n}\n/**\n * Strips `!important` out of the given style or class name.\n */\nfunction stripImportant(name) {\n    const importantIndex = name.indexOf('!important');\n    if (importantIndex > -1) {\n        return name.substring(0, importantIndex);\n    }\n    return name;\n}\n\n/**\n * Merges logically sequential `NextContextExpr` operations.\n *\n * `NextContextExpr` can be referenced repeatedly, \"popping\" the runtime's context stack each time.\n * When two such expressions appear back-to-back, it's possible to merge them together into a single\n * `NextContextExpr` that steps multiple contexts. This merging is possible if all conditions are\n * met:\n *\n *   * The result of the `NextContextExpr` that's folded into the subsequent one is not stored (that\n *     is, the call is purely side-effectful).\n *   * No operations in between them uses the implicit context.\n */\nfunction mergeNextContextExpressions(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.Listener) {\n                mergeNextContextsInOps(op.handlerOps);\n            }\n        }\n        mergeNextContextsInOps(unit.update);\n    }\n}\nfunction mergeNextContextsInOps(ops) {\n    for (const op of ops) {\n        // Look for a candidate operation to maybe merge.\n        if (op.kind !== OpKind.Statement || !(op.statement instanceof ExpressionStatement) ||\n            !(op.statement.expr instanceof NextContextExpr)) {\n            continue;\n        }\n        const mergeSteps = op.statement.expr.steps;\n        // Try to merge this `ir.NextContextExpr`.\n        let tryToMerge = true;\n        for (let candidate = op.next; candidate.kind !== OpKind.ListEnd && tryToMerge; candidate = candidate.next) {\n            visitExpressionsInOp(candidate, (expr, flags) => {\n                if (!isIrExpression(expr)) {\n                    return expr;\n                }\n                if (!tryToMerge) {\n                    // Either we've already merged, or failed to merge.\n                    return;\n                }\n                if (flags & VisitorContextFlag.InChildOperation) {\n                    // We cannot merge into child operations.\n                    return;\n                }\n                switch (expr.kind) {\n                    case ExpressionKind.NextContext:\n                        // Merge the previous `ir.NextContextExpr` into this one.\n                        expr.steps += mergeSteps;\n                        OpList.remove(op);\n                        tryToMerge = false;\n                        break;\n                    case ExpressionKind.GetCurrentView:\n                    case ExpressionKind.Reference:\n                        // Can't merge past a dependency on the context.\n                        tryToMerge = false;\n                        break;\n                }\n                return;\n            });\n        }\n    }\n}\n\nconst CONTAINER_TAG = 'ng-container';\n/**\n * Replace an `Element` or `ElementStart` whose tag is `ng-container` with a specific op.\n */\nfunction generateNgContainerOps(job) {\n    for (const unit of job.units) {\n        const updatedElementXrefs = new Set();\n        for (const op of unit.create) {\n            if (op.kind === OpKind.ElementStart && op.tag === CONTAINER_TAG) {\n                // Transmute the `ElementStart` instruction to `ContainerStart`.\n                op.kind = OpKind.ContainerStart;\n                updatedElementXrefs.add(op.xref);\n            }\n            if (op.kind === OpKind.ElementEnd && updatedElementXrefs.has(op.xref)) {\n                // This `ElementEnd` is associated with an `ElementStart` we already transmuted.\n                op.kind = OpKind.ContainerEnd;\n            }\n        }\n    }\n}\n\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupElement(elements, xref) {\n    const el = elements.get(xref);\n    if (el === undefined) {\n        throw new Error('All attributes should have an element-like target.');\n    }\n    return el;\n}\n/**\n * When a container is marked with `ngNonBindable`, the non-bindable characteristic also applies to\n * all descendants of that container. Therefore, we must emit `disableBindings` and `enableBindings`\n * instructions for every such container.\n */\nfunction disableBindings$1(job) {\n    const elements = new Map();\n    for (const view of job.units) {\n        for (const op of view.create) {\n            if (!isElementOrContainerOp(op)) {\n                continue;\n            }\n            elements.set(op.xref, op);\n        }\n    }\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if ((op.kind === OpKind.ElementStart || op.kind === OpKind.ContainerStart) &&\n                op.nonBindable) {\n                OpList.insertAfter(createDisableBindingsOp(op.xref), op);\n            }\n            if ((op.kind === OpKind.ElementEnd || op.kind === OpKind.ContainerEnd) &&\n                lookupElement(elements, op.xref).nonBindable) {\n                OpList.insertBefore(createEnableBindingsOp(op.xref), op);\n            }\n        }\n    }\n}\n\n/**\n * Nullish coalescing expressions such as `a ?? b` have different semantics in Angular templates as\n * compared to JavaScript. In particular, they default to `null` instead of `undefined`. Therefore,\n * we replace them with ternary expressions, assigning temporaries as needed to avoid re-evaluating\n * the same sub-expression multiple times.\n */\nfunction generateNullishCoalesceExpressions(job) {\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            transformExpressionsInOp(op, expr => {\n                if (!(expr instanceof BinaryOperatorExpr) ||\n                    expr.operator !== BinaryOperator.NullishCoalesce) {\n                    return expr;\n                }\n                const assignment = new AssignTemporaryExpr(expr.lhs.clone(), job.allocateXrefId());\n                const read = new ReadTemporaryExpr(assignment.xref);\n                // TODO: When not in compatibility mode for TemplateDefinitionBuilder, we can just emit\n                // `t != null` instead of including an undefined check as well.\n                return new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.And, new BinaryOperatorExpr(BinaryOperator.NotIdentical, assignment, NULL_EXPR), new BinaryOperatorExpr(BinaryOperator.NotIdentical, read, new LiteralExpr(undefined))), read.clone(), expr.rhs);\n            }, VisitorContextFlag.None);\n        }\n    }\n}\n\nfunction kindTest(kind) {\n    return (op) => op.kind === kind;\n}\nfunction kindWithInterpolationTest(kind, interpolation) {\n    return (op) => {\n        return op.kind === kind && interpolation === op.expression instanceof Interpolation;\n    };\n}\n/**\n * Defines the groups based on `OpKind` that ops will be divided into, for the various create\n * op kinds. Ops will be collected into groups, then optionally transformed, before recombining\n * the groups in the order defined here.\n */\nconst CREATE_ORDERING = [\n    { test: op => op.kind === OpKind.Listener && op.hostListener && op.isAnimationListener },\n    { test: op => op.kind === OpKind.Listener && !(op.hostListener && op.isAnimationListener) },\n];\n/**\n * Defines the groups based on `OpKind` that ops will be divided into, for the various update\n * op kinds.\n */\nconst UPDATE_ORDERING = [\n    { test: kindTest(OpKind.StyleMap), transform: keepLast },\n    { test: kindTest(OpKind.ClassMap), transform: keepLast },\n    { test: kindTest(OpKind.StyleProp) },\n    { test: kindTest(OpKind.ClassProp) },\n    { test: kindWithInterpolationTest(OpKind.Attribute, true) },\n    { test: kindWithInterpolationTest(OpKind.Property, true) },\n    { test: kindWithInterpolationTest(OpKind.Property, false) },\n    { test: kindWithInterpolationTest(OpKind.Attribute, false) },\n];\n/**\n * Host bindings have their own update ordering.\n */\nconst UPDATE_HOST_ORDERING = [\n    { test: kindWithInterpolationTest(OpKind.HostProperty, true) },\n    { test: kindWithInterpolationTest(OpKind.HostProperty, false) },\n    { test: kindTest(OpKind.Attribute) },\n    { test: kindTest(OpKind.StyleMap), transform: keepLast },\n    { test: kindTest(OpKind.ClassMap), transform: keepLast },\n    { test: kindTest(OpKind.StyleProp) },\n    { test: kindTest(OpKind.ClassProp) },\n];\n/**\n * The set of all op kinds we handle in the reordering phase.\n */\nconst handledOpKinds = new Set([\n    OpKind.Listener, OpKind.StyleMap, OpKind.ClassMap, OpKind.StyleProp,\n    OpKind.ClassProp, OpKind.Property, OpKind.HostProperty, OpKind.Attribute\n]);\n/**\n * Many type of operations have ordering constraints that must be respected. For example, a\n * `ClassMap` instruction must be ordered after a `StyleMap` instruction, in order to have\n * predictable semantics that match TemplateDefinitionBuilder and don't break applications.\n */\nfunction orderOps(job) {\n    for (const unit of job.units) {\n        // First, we pull out ops that need to be ordered. Then, when we encounter an op that shouldn't\n        // be reordered, put the ones we've pulled so far back in the correct order. Finally, if we\n        // still have ops pulled at the end, put them back in the correct order.\n        // Create mode:\n        orderWithin(unit.create, CREATE_ORDERING);\n        // Update mode:\n        const ordering = unit.job.kind === CompilationJobKind.Host ? UPDATE_HOST_ORDERING : UPDATE_ORDERING;\n        orderWithin(unit.update, ordering);\n    }\n}\n/**\n * Order all the ops within the specified group.\n */\nfunction orderWithin(opList, ordering) {\n    let opsToOrder = [];\n    // Only reorder ops that target the same xref; do not mix ops that target different xrefs.\n    let firstTargetInGroup = null;\n    for (const op of opList) {\n        const currentTarget = hasDependsOnSlotContextTrait(op) ? op.target : null;\n        if (!handledOpKinds.has(op.kind) ||\n            (currentTarget !== firstTargetInGroup &&\n                (firstTargetInGroup !== null && currentTarget !== null))) {\n            OpList.insertBefore(reorder(opsToOrder, ordering), op);\n            opsToOrder = [];\n            firstTargetInGroup = null;\n        }\n        if (handledOpKinds.has(op.kind)) {\n            opsToOrder.push(op);\n            OpList.remove(op);\n            firstTargetInGroup = currentTarget ?? firstTargetInGroup;\n        }\n    }\n    opList.push(reorder(opsToOrder, ordering));\n}\n/**\n * Reorders the given list of ops according to the ordering defined by `ORDERING`.\n */\nfunction reorder(ops, ordering) {\n    // Break the ops list into groups based on OpKind.\n    const groups = Array.from(ordering, () => new Array());\n    for (const op of ops) {\n        const groupIndex = ordering.findIndex(o => o.test(op));\n        groups[groupIndex].push(op);\n    }\n    // Reassemble the groups into a single list, in the correct order.\n    return groups.flatMap((group, i) => {\n        const transform = ordering[i].transform;\n        return transform ? transform(group) : group;\n    });\n}\n/**\n * Keeps only the last op in a list of ops.\n */\nfunction keepLast(ops) {\n    return ops.slice(ops.length - 1);\n}\n\n/**\n * Parses extracted style and class attributes into separate ExtractedAttributeOps per style or\n * class property.\n */\nfunction parseExtractedStyles(job) {\n    const elements = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (isElementOrContainerOp(op)) {\n                elements.set(op.xref, op);\n            }\n        }\n    }\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind === OpKind.ExtractedAttribute && op.bindingKind === BindingKind.Attribute &&\n                isStringLiteral(op.expression)) {\n                const target = elements.get(op.target);\n                if (target !== undefined && target.kind === OpKind.Template &&\n                    target.templateKind === TemplateKind.Structural) {\n                    // TemplateDefinitionBuilder will not apply class and style bindings to structural\n                    // directives; instead, it will leave them as attributes.\n                    // (It's not clear what that would mean, anyway -- classes and styles on a structural\n                    // element should probably be a parse error.)\n                    // TODO: We may be able to remove this once Template Pipeline is the default.\n                    continue;\n                }\n                if (op.name === 'style') {\n                    const parsedStyles = parse(op.expression.value);\n                    for (let i = 0; i < parsedStyles.length - 1; i += 2) {\n                        OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.StyleProperty, null, parsedStyles[i], literal(parsedStyles[i + 1]), null, null, SecurityContext.STYLE), op);\n                    }\n                    OpList.remove(op);\n                }\n                else if (op.name === 'class') {\n                    const parsedClasses = op.expression.value.trim().split(/\\s+/g);\n                    for (const parsedClass of parsedClasses) {\n                        OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.ClassName, null, parsedClass, null, null, null, SecurityContext.NONE), op);\n                    }\n                    OpList.remove(op);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Attributes of `ng-content` named 'select' are specifically removed, because they control which\n * content matches as a property of the `projection`, and are not a plain attribute.\n */\nfunction removeContentSelectors(job) {\n    for (const unit of job.units) {\n        const elements = createOpXrefMap(unit);\n        for (const op of unit.ops()) {\n            switch (op.kind) {\n                case OpKind.Binding:\n                    const target = lookupInXrefMap(elements, op.target);\n                    if (isSelectAttribute(op.name) && target.kind === OpKind.Projection) {\n                        OpList.remove(op);\n                    }\n                    break;\n            }\n        }\n    }\n}\nfunction isSelectAttribute(name) {\n    return name.toLowerCase() === 'select';\n}\n/**\n * Looks up an element in the given map by xref ID.\n */\nfunction lookupInXrefMap(map, xref) {\n    const el = map.get(xref);\n    if (el === undefined) {\n        throw new Error('All attributes should have an slottable target.');\n    }\n    return el;\n}\n\n/**\n * This phase generates pipe creation instructions. We do this based on the pipe bindings found in\n * the update block, in the order we see them.\n *\n * When not in compatibility mode, we can simply group all these creation instructions together, to\n * maximize chaining opportunities.\n */\nfunction createPipes(job) {\n    for (const unit of job.units) {\n        processPipeBindingsInView(unit);\n    }\n}\nfunction processPipeBindingsInView(unit) {\n    for (const updateOp of unit.update) {\n        visitExpressionsInOp(updateOp, (expr, flags) => {\n            if (!isIrExpression(expr)) {\n                return;\n            }\n            if (expr.kind !== ExpressionKind.PipeBinding) {\n                return;\n            }\n            if (flags & VisitorContextFlag.InChildOperation) {\n                throw new Error(`AssertionError: pipe bindings should not appear in child expressions`);\n            }\n            if (unit.job.compatibility) {\n                // TODO: We can delete this cast and check once compatibility mode is removed.\n                const slotHandle = updateOp.target;\n                if (slotHandle == undefined) {\n                    throw new Error(`AssertionError: expected slot handle to be assigned for pipe creation`);\n                }\n                addPipeToCreationBlock(unit, updateOp.target, expr);\n            }\n            else {\n                // When not in compatibility mode, we just add the pipe to the end of the create block. This\n                // is not only simpler and faster, but allows more chaining opportunities for other\n                // instructions.\n                unit.create.push(createPipeOp(expr.target, expr.targetSlot, expr.name));\n            }\n        });\n    }\n}\nfunction addPipeToCreationBlock(unit, afterTargetXref, binding) {\n    // Find the appropriate point to insert the Pipe creation operation.\n    // We're looking for `afterTargetXref` (and also want to insert after any other pipe operations\n    // which might be beyond it).\n    for (let op = unit.create.head.next; op.kind !== OpKind.ListEnd; op = op.next) {\n        if (!hasConsumesSlotTrait(op)) {\n            continue;\n        }\n        if (op.xref !== afterTargetXref) {\n            continue;\n        }\n        // We've found a tentative insertion point; however, we also want to skip past any _other_ pipe\n        // operations present.\n        while (op.next.kind === OpKind.Pipe) {\n            op = op.next;\n        }\n        const pipe = createPipeOp(binding.target, binding.targetSlot, binding.name);\n        OpList.insertBefore(pipe, op.next);\n        // This completes adding the pipe to the creation block.\n        return;\n    }\n    // At this point, we've failed to add the pipe to the creation block.\n    throw new Error(`AssertionError: unable to find insertion point for pipe ${binding.name}`);\n}\n\n/**\n * Pipes that accept more than 4 arguments are variadic, and are handled with a different runtime\n * instruction.\n */\nfunction createVariadicPipes(job) {\n    for (const unit of job.units) {\n        for (const op of unit.update) {\n            transformExpressionsInOp(op, expr => {\n                if (!(expr instanceof PipeBindingExpr)) {\n                    return expr;\n                }\n                // Pipes are variadic if they have more than 4 arguments.\n                if (expr.args.length <= 4) {\n                    return expr;\n                }\n                return new PipeBindingVariadicExpr(expr.target, expr.targetSlot, expr.name, literalArr(expr.args), expr.args.length);\n            }, VisitorContextFlag.None);\n        }\n    }\n}\n\n/**\n * Propagate i18n blocks down through child templates that act as placeholders in the root i18n\n * message. Specifically, perform an in-order traversal of all the views, and add i18nStart/i18nEnd\n * op pairs into descending views. Also, assign an increasing sub-template index to each\n * descending view.\n */\nfunction propagateI18nBlocks(job) {\n    propagateI18nBlocksToTemplates(job.root, 0);\n}\n/**\n * Propagates i18n ops in the given view through to any child views recursively.\n */\nfunction propagateI18nBlocksToTemplates(unit, subTemplateIndex) {\n    let i18nBlock = null;\n    for (const op of unit.create) {\n        switch (op.kind) {\n            case OpKind.I18nStart:\n                op.subTemplateIndex = subTemplateIndex === 0 ? null : subTemplateIndex;\n                i18nBlock = op;\n                break;\n            case OpKind.I18nEnd:\n                // When we exit a root-level i18n block, reset the sub-template index counter.\n                if (i18nBlock.subTemplateIndex === null) {\n                    subTemplateIndex = 0;\n                }\n                i18nBlock = null;\n                break;\n            case OpKind.Template:\n                subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.xref), i18nBlock, op.i18nPlaceholder, subTemplateIndex);\n                break;\n            case OpKind.RepeaterCreate:\n                // Propagate i18n blocks to the @for template.\n                const forView = unit.job.views.get(op.xref);\n                subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.xref), i18nBlock, op.i18nPlaceholder, subTemplateIndex);\n                // Then if there's an @empty template, propagate the i18n blocks for it as well.\n                if (op.emptyView !== null) {\n                    subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.emptyView), i18nBlock, op.emptyI18nPlaceholder, subTemplateIndex);\n                }\n                break;\n        }\n    }\n    return subTemplateIndex;\n}\n/**\n * Propagate i18n blocks for a view.\n */\nfunction propagateI18nBlocksForView(view, i18nBlock, i18nPlaceholder, subTemplateIndex) {\n    // We found an <ng-template> inside an i18n block; increment the sub-template counter and\n    // wrap the template's view in a child i18n block.\n    if (i18nPlaceholder !== undefined) {\n        if (i18nBlock === null) {\n            throw Error('Expected template with i18n placeholder to be in an i18n block.');\n        }\n        subTemplateIndex++;\n        wrapTemplateWithI18n(view, i18nBlock);\n    }\n    // Continue traversing inside the template's view.\n    return propagateI18nBlocksToTemplates(view, subTemplateIndex);\n}\n/**\n * Wraps a template view with i18n start and end ops.\n */\nfunction wrapTemplateWithI18n(unit, parentI18n) {\n    // Only add i18n ops if they have not already been propagated to this template.\n    if (unit.create.head.next?.kind !== OpKind.I18nStart) {\n        const id = unit.job.allocateXrefId();\n        OpList.insertAfter(\n        // Nested ng-template i18n start/end ops should not recieve source spans.\n        createI18nStartOp(id, parentI18n.message, parentI18n.root, null), unit.create.head);\n        OpList.insertBefore(createI18nEndOp(id, null), unit.create.tail);\n    }\n}\n\nfunction extractPureFunctions(job) {\n    for (const view of job.units) {\n        for (const op of view.ops()) {\n            visitExpressionsInOp(op, expr => {\n                if (!(expr instanceof PureFunctionExpr) || expr.body === null) {\n                    return;\n                }\n                const constantDef = new PureFunctionConstant(expr.args.length);\n                expr.fn = job.pool.getSharedConstant(constantDef, expr.body);\n                expr.body = null;\n            });\n        }\n    }\n}\nclass PureFunctionConstant extends GenericKeyFn {\n    constructor(numArgs) {\n        super();\n        this.numArgs = numArgs;\n    }\n    keyOf(expr) {\n        if (expr instanceof PureFunctionParameterExpr) {\n            return `param(${expr.index})`;\n        }\n        else {\n            return super.keyOf(expr);\n        }\n    }\n    // TODO: Use the new pool method `getSharedFunctionReference`\n    toSharedConstantDeclaration(declName, keyExpr) {\n        const fnParams = [];\n        for (let idx = 0; idx < this.numArgs; idx++) {\n            fnParams.push(new FnParam('a' + idx));\n        }\n        // We will never visit `ir.PureFunctionParameterExpr`s that don't belong to us, because this\n        // transform runs inside another visitor which will visit nested pure functions before this one.\n        const returnExpr = transformExpressionsInExpression(keyExpr, expr => {\n            if (!(expr instanceof PureFunctionParameterExpr)) {\n                return expr;\n            }\n            return variable('a' + expr.index);\n        }, VisitorContextFlag.None);\n        return new DeclareVarStmt(declName, new ArrowFunctionExpr(fnParams, returnExpr), undefined, StmtModifier.Final);\n    }\n}\n\nfunction generatePureLiteralStructures(job) {\n    for (const unit of job.units) {\n        for (const op of unit.update) {\n            transformExpressionsInOp(op, (expr, flags) => {\n                if (flags & VisitorContextFlag.InChildOperation) {\n                    return expr;\n                }\n                if (expr instanceof LiteralArrayExpr) {\n                    return transformLiteralArray(expr);\n                }\n                else if (expr instanceof LiteralMapExpr) {\n                    return transformLiteralMap(expr);\n                }\n                return expr;\n            }, VisitorContextFlag.None);\n        }\n    }\n}\nfunction transformLiteralArray(expr) {\n    const derivedEntries = [];\n    const nonConstantArgs = [];\n    for (const entry of expr.entries) {\n        if (entry.isConstant()) {\n            derivedEntries.push(entry);\n        }\n        else {\n            const idx = nonConstantArgs.length;\n            nonConstantArgs.push(entry);\n            derivedEntries.push(new PureFunctionParameterExpr(idx));\n        }\n    }\n    return new PureFunctionExpr(literalArr(derivedEntries), nonConstantArgs);\n}\nfunction transformLiteralMap(expr) {\n    let derivedEntries = [];\n    const nonConstantArgs = [];\n    for (const entry of expr.entries) {\n        if (entry.value.isConstant()) {\n            derivedEntries.push(entry);\n        }\n        else {\n            const idx = nonConstantArgs.length;\n            nonConstantArgs.push(entry.value);\n            derivedEntries.push(new LiteralMapEntry(entry.key, new PureFunctionParameterExpr(idx), entry.quoted));\n        }\n    }\n    return new PureFunctionExpr(literalMap(derivedEntries), nonConstantArgs);\n}\n\n// This file contains helpers for generating calls to Ivy instructions. In particular, each\n// instruction type is represented as a function, which may select a specific instruction variant\n// depending on the exact arguments.\nfunction element(slot, tag, constIndex, localRefIndex, sourceSpan) {\n    return elementOrContainerBase(Identifiers.element, slot, tag, constIndex, localRefIndex, sourceSpan);\n}\nfunction elementStart(slot, tag, constIndex, localRefIndex, sourceSpan) {\n    return elementOrContainerBase(Identifiers.elementStart, slot, tag, constIndex, localRefIndex, sourceSpan);\n}\nfunction elementOrContainerBase(instruction, slot, tag, constIndex, localRefIndex, sourceSpan) {\n    const args = [literal(slot)];\n    if (tag !== null) {\n        args.push(literal(tag));\n    }\n    if (localRefIndex !== null) {\n        args.push(literal(constIndex), // might be null, but that's okay.\n        literal(localRefIndex));\n    }\n    else if (constIndex !== null) {\n        args.push(literal(constIndex));\n    }\n    return call(instruction, args, sourceSpan);\n}\nfunction elementEnd(sourceSpan) {\n    return call(Identifiers.elementEnd, [], sourceSpan);\n}\nfunction elementContainerStart(slot, constIndex, localRefIndex, sourceSpan) {\n    return elementOrContainerBase(Identifiers.elementContainerStart, slot, /* tag */ null, constIndex, localRefIndex, sourceSpan);\n}\nfunction elementContainer(slot, constIndex, localRefIndex, sourceSpan) {\n    return elementOrContainerBase(Identifiers.elementContainer, slot, /* tag */ null, constIndex, localRefIndex, sourceSpan);\n}\nfunction elementContainerEnd() {\n    return call(Identifiers.elementContainerEnd, [], null);\n}\nfunction template(slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {\n    const args = [\n        literal(slot),\n        templateFnRef,\n        literal(decls),\n        literal(vars),\n        literal(tag),\n        literal(constIndex),\n    ];\n    if (localRefs !== null) {\n        args.push(literal(localRefs));\n        args.push(importExpr(Identifiers.templateRefExtractor));\n    }\n    while (args[args.length - 1].isEquivalent(NULL_EXPR)) {\n        args.pop();\n    }\n    return call(Identifiers.templateCreate, args, sourceSpan);\n}\nfunction disableBindings() {\n    return call(Identifiers.disableBindings, [], null);\n}\nfunction enableBindings() {\n    return call(Identifiers.enableBindings, [], null);\n}\nfunction listener(name, handlerFn, eventTargetResolver, syntheticHost, sourceSpan) {\n    const args = [literal(name), handlerFn];\n    if (eventTargetResolver !== null) {\n        args.push(literal(false)); // `useCapture` flag, defaults to `false`\n        args.push(importExpr(eventTargetResolver));\n    }\n    return call(syntheticHost ? Identifiers.syntheticHostListener : Identifiers.listener, args, sourceSpan);\n}\nfunction pipe(slot, name) {\n    return call(Identifiers.pipe, [\n        literal(slot),\n        literal(name),\n    ], null);\n}\nfunction namespaceHTML() {\n    return call(Identifiers.namespaceHTML, [], null);\n}\nfunction namespaceSVG() {\n    return call(Identifiers.namespaceSVG, [], null);\n}\nfunction namespaceMath() {\n    return call(Identifiers.namespaceMathML, [], null);\n}\nfunction advance(delta, sourceSpan) {\n    return call(Identifiers.advance, delta > 1 ? [literal(delta)] : [], sourceSpan);\n}\nfunction reference(slot) {\n    return importExpr(Identifiers.reference).callFn([\n        literal(slot),\n    ]);\n}\nfunction nextContext(steps) {\n    return importExpr(Identifiers.nextContext).callFn(steps === 1 ? [] : [literal(steps)]);\n}\nfunction getCurrentView() {\n    return importExpr(Identifiers.getCurrentView).callFn([]);\n}\nfunction restoreView(savedView) {\n    return importExpr(Identifiers.restoreView).callFn([\n        savedView,\n    ]);\n}\nfunction resetView(returnValue) {\n    return importExpr(Identifiers.resetView).callFn([\n        returnValue,\n    ]);\n}\nfunction text(slot, initialValue, sourceSpan) {\n    const args = [literal(slot, null)];\n    if (initialValue !== '') {\n        args.push(literal(initialValue));\n    }\n    return call(Identifiers.text, args, sourceSpan);\n}\nfunction defer(selfSlot, primarySlot, dependencyResolverFn, loadingSlot, placeholderSlot, errorSlot, loadingConfig, placeholderConfig, enableTimerScheduling, sourceSpan) {\n    const args = [\n        literal(selfSlot),\n        literal(primarySlot),\n        dependencyResolverFn ?? literal(null),\n        literal(loadingSlot),\n        literal(placeholderSlot),\n        literal(errorSlot),\n        loadingConfig ?? literal(null),\n        placeholderConfig ?? literal(null),\n        enableTimerScheduling ? importExpr(Identifiers.deferEnableTimerScheduling) : literal(null),\n    ];\n    let expr;\n    while ((expr = args[args.length - 1]) !== null && expr instanceof LiteralExpr &&\n        expr.value === null) {\n        args.pop();\n    }\n    return call(Identifiers.defer, args, sourceSpan);\n}\nconst deferTriggerToR3TriggerInstructionsMap = new Map([\n    [DeferTriggerKind.Idle, [Identifiers.deferOnIdle, Identifiers.deferPrefetchOnIdle]],\n    [\n        DeferTriggerKind.Immediate,\n        [Identifiers.deferOnImmediate, Identifiers.deferPrefetchOnImmediate]\n    ],\n    [DeferTriggerKind.Timer, [Identifiers.deferOnTimer, Identifiers.deferPrefetchOnTimer]],\n    [DeferTriggerKind.Hover, [Identifiers.deferOnHover, Identifiers.deferPrefetchOnHover]],\n    [\n        DeferTriggerKind.Interaction,\n        [Identifiers.deferOnInteraction, Identifiers.deferPrefetchOnInteraction]\n    ],\n    [\n        DeferTriggerKind.Viewport, [Identifiers.deferOnViewport, Identifiers.deferPrefetchOnViewport]\n    ],\n]);\nfunction deferOn(trigger, args, prefetch, sourceSpan) {\n    const instructions = deferTriggerToR3TriggerInstructionsMap.get(trigger);\n    if (instructions === undefined) {\n        throw new Error(`Unable to determine instruction for trigger ${trigger}`);\n    }\n    const instructionToCall = prefetch ? instructions[1] : instructions[0];\n    return call(instructionToCall, args.map(a => literal(a)), sourceSpan);\n}\nfunction projectionDef(def) {\n    return call(Identifiers.projectionDef, def ? [def] : [], null);\n}\nfunction projection(slot, projectionSlotIndex, attributes, sourceSpan) {\n    const args = [literal(slot)];\n    if (projectionSlotIndex !== 0 || attributes !== null) {\n        args.push(literal(projectionSlotIndex));\n        if (attributes !== null) {\n            args.push(attributes);\n        }\n    }\n    return call(Identifiers.projection, args, sourceSpan);\n}\nfunction i18nStart(slot, constIndex, subTemplateIndex, sourceSpan) {\n    const args = [literal(slot), literal(constIndex)];\n    if (subTemplateIndex !== null) {\n        args.push(literal(subTemplateIndex));\n    }\n    return call(Identifiers.i18nStart, args, sourceSpan);\n}\nfunction repeaterCreate(slot, viewFnName, decls, vars, tag, constIndex, trackByFn, trackByUsesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, emptyTag, emptyConstIndex, sourceSpan) {\n    const args = [\n        literal(slot),\n        variable(viewFnName),\n        literal(decls),\n        literal(vars),\n        literal(tag),\n        literal(constIndex),\n        trackByFn,\n    ];\n    if (trackByUsesComponentInstance || emptyViewFnName !== null) {\n        args.push(literal(trackByUsesComponentInstance));\n        if (emptyViewFnName !== null) {\n            args.push(variable(emptyViewFnName), literal(emptyDecls), literal(emptyVars));\n            if (emptyTag !== null || emptyConstIndex !== null) {\n                args.push(literal(emptyTag));\n            }\n            if (emptyConstIndex !== null) {\n                args.push(literal(emptyConstIndex));\n            }\n        }\n    }\n    return call(Identifiers.repeaterCreate, args, sourceSpan);\n}\nfunction repeater(collection, sourceSpan) {\n    return call(Identifiers.repeater, [collection], sourceSpan);\n}\nfunction deferWhen(prefetch, expr, sourceSpan) {\n    return call(prefetch ? Identifiers.deferPrefetchWhen : Identifiers.deferWhen, [expr], sourceSpan);\n}\nfunction i18n(slot, constIndex, subTemplateIndex, sourceSpan) {\n    const args = [literal(slot), literal(constIndex)];\n    if (subTemplateIndex) {\n        args.push(literal(subTemplateIndex));\n    }\n    return call(Identifiers.i18n, args, sourceSpan);\n}\nfunction i18nEnd(endSourceSpan) {\n    return call(Identifiers.i18nEnd, [], endSourceSpan);\n}\nfunction i18nAttributes(slot, i18nAttributesConfig) {\n    const args = [literal(slot), literal(i18nAttributesConfig)];\n    return call(Identifiers.i18nAttributes, args, null);\n}\nfunction property(name, expression, sanitizer, sourceSpan) {\n    const args = [literal(name), expression];\n    if (sanitizer !== null) {\n        args.push(sanitizer);\n    }\n    return call(Identifiers.property, args, sourceSpan);\n}\nfunction attribute(name, expression, sanitizer, namespace) {\n    const args = [literal(name), expression];\n    if (sanitizer !== null || namespace !== null) {\n        args.push(sanitizer ?? literal(null));\n    }\n    if (namespace !== null) {\n        args.push(literal(namespace));\n    }\n    return call(Identifiers.attribute, args, null);\n}\nfunction styleProp(name, expression, unit, sourceSpan) {\n    const args = [literal(name), expression];\n    if (unit !== null) {\n        args.push(literal(unit));\n    }\n    return call(Identifiers.styleProp, args, sourceSpan);\n}\nfunction classProp(name, expression, sourceSpan) {\n    return call(Identifiers.classProp, [literal(name), expression], sourceSpan);\n}\nfunction styleMap(expression, sourceSpan) {\n    return call(Identifiers.styleMap, [expression], sourceSpan);\n}\nfunction classMap(expression, sourceSpan) {\n    return call(Identifiers.classMap, [expression], sourceSpan);\n}\nconst PIPE_BINDINGS = [\n    Identifiers.pipeBind1,\n    Identifiers.pipeBind2,\n    Identifiers.pipeBind3,\n    Identifiers.pipeBind4,\n];\nfunction pipeBind(slot, varOffset, args) {\n    if (args.length < 1 || args.length > PIPE_BINDINGS.length) {\n        throw new Error(`pipeBind() argument count out of bounds`);\n    }\n    const instruction = PIPE_BINDINGS[args.length - 1];\n    return importExpr(instruction).callFn([\n        literal(slot),\n        literal(varOffset),\n        ...args,\n    ]);\n}\nfunction pipeBindV(slot, varOffset, args) {\n    return importExpr(Identifiers.pipeBindV).callFn([\n        literal(slot),\n        literal(varOffset),\n        args,\n    ]);\n}\nfunction textInterpolate(strings, expressions, sourceSpan) {\n    if (strings.length < 1 || expressions.length !== strings.length - 1) {\n        throw new Error(`AssertionError: expected specific shape of args for strings/expressions in interpolation`);\n    }\n    const interpolationArgs = [];\n    if (expressions.length === 1 && strings[0] === '' && strings[1] === '') {\n        interpolationArgs.push(expressions[0]);\n    }\n    else {\n        let idx;\n        for (idx = 0; idx < expressions.length; idx++) {\n            interpolationArgs.push(literal(strings[idx]), expressions[idx]);\n        }\n        // idx points at the last string.\n        interpolationArgs.push(literal(strings[idx]));\n    }\n    return callVariadicInstruction(TEXT_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);\n}\nfunction i18nExp(expr, sourceSpan) {\n    return call(Identifiers.i18nExp, [expr], sourceSpan);\n}\nfunction i18nApply(slot, sourceSpan) {\n    return call(Identifiers.i18nApply, [literal(slot)], sourceSpan);\n}\nfunction propertyInterpolate(name, strings, expressions, sanitizer, sourceSpan) {\n    const interpolationArgs = collateInterpolationArgs(strings, expressions);\n    const extraArgs = [];\n    if (sanitizer !== null) {\n        extraArgs.push(sanitizer);\n    }\n    return callVariadicInstruction(PROPERTY_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);\n}\nfunction attributeInterpolate(name, strings, expressions, sanitizer, sourceSpan) {\n    const interpolationArgs = collateInterpolationArgs(strings, expressions);\n    const extraArgs = [];\n    if (sanitizer !== null) {\n        extraArgs.push(sanitizer);\n    }\n    return callVariadicInstruction(ATTRIBUTE_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);\n}\nfunction stylePropInterpolate(name, strings, expressions, unit, sourceSpan) {\n    const interpolationArgs = collateInterpolationArgs(strings, expressions);\n    const extraArgs = [];\n    if (unit !== null) {\n        extraArgs.push(literal(unit));\n    }\n    return callVariadicInstruction(STYLE_PROP_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);\n}\nfunction styleMapInterpolate(strings, expressions, sourceSpan) {\n    const interpolationArgs = collateInterpolationArgs(strings, expressions);\n    return callVariadicInstruction(STYLE_MAP_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);\n}\nfunction classMapInterpolate(strings, expressions, sourceSpan) {\n    const interpolationArgs = collateInterpolationArgs(strings, expressions);\n    return callVariadicInstruction(CLASS_MAP_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);\n}\nfunction hostProperty(name, expression, sanitizer, sourceSpan) {\n    const args = [literal(name), expression];\n    if (sanitizer !== null) {\n        args.push(sanitizer);\n    }\n    return call(Identifiers.hostProperty, args, sourceSpan);\n}\nfunction syntheticHostProperty(name, expression, sourceSpan) {\n    return call(Identifiers.syntheticHostProperty, [literal(name), expression], sourceSpan);\n}\nfunction pureFunction(varOffset, fn, args) {\n    return callVariadicInstructionExpr(PURE_FUNCTION_CONFIG, [\n        literal(varOffset),\n        fn,\n    ], args, [], null);\n}\n/**\n * Collates the string an expression arguments for an interpolation instruction.\n */\nfunction collateInterpolationArgs(strings, expressions) {\n    if (strings.length < 1 || expressions.length !== strings.length - 1) {\n        throw new Error(`AssertionError: expected specific shape of args for strings/expressions in interpolation`);\n    }\n    const interpolationArgs = [];\n    if (expressions.length === 1 && strings[0] === '' && strings[1] === '') {\n        interpolationArgs.push(expressions[0]);\n    }\n    else {\n        let idx;\n        for (idx = 0; idx < expressions.length; idx++) {\n            interpolationArgs.push(literal(strings[idx]), expressions[idx]);\n        }\n        // idx points at the last string.\n        interpolationArgs.push(literal(strings[idx]));\n    }\n    return interpolationArgs;\n}\nfunction call(instruction, args, sourceSpan) {\n    const expr = importExpr(instruction).callFn(args, sourceSpan);\n    return createStatementOp(new ExpressionStatement(expr, sourceSpan));\n}\nfunction conditional(slot, condition, contextValue, sourceSpan) {\n    const args = [literal(slot), condition];\n    if (contextValue !== null) {\n        args.push(contextValue);\n    }\n    return call(Identifiers.conditional, args, sourceSpan);\n}\n/**\n * `InterpolationConfig` for the `textInterpolate` instruction.\n */\nconst TEXT_INTERPOLATE_CONFIG = {\n    constant: [\n        Identifiers.textInterpolate,\n        Identifiers.textInterpolate1,\n        Identifiers.textInterpolate2,\n        Identifiers.textInterpolate3,\n        Identifiers.textInterpolate4,\n        Identifiers.textInterpolate5,\n        Identifiers.textInterpolate6,\n        Identifiers.textInterpolate7,\n        Identifiers.textInterpolate8,\n    ],\n    variable: Identifiers.textInterpolateV,\n    mapping: n => {\n        if (n % 2 === 0) {\n            throw new Error(`Expected odd number of arguments`);\n        }\n        return (n - 1) / 2;\n    },\n};\n/**\n * `InterpolationConfig` for the `propertyInterpolate` instruction.\n */\nconst PROPERTY_INTERPOLATE_CONFIG = {\n    constant: [\n        Identifiers.propertyInterpolate,\n        Identifiers.propertyInterpolate1,\n        Identifiers.propertyInterpolate2,\n        Identifiers.propertyInterpolate3,\n        Identifiers.propertyInterpolate4,\n        Identifiers.propertyInterpolate5,\n        Identifiers.propertyInterpolate6,\n        Identifiers.propertyInterpolate7,\n        Identifiers.propertyInterpolate8,\n    ],\n    variable: Identifiers.propertyInterpolateV,\n    mapping: n => {\n        if (n % 2 === 0) {\n            throw new Error(`Expected odd number of arguments`);\n        }\n        return (n - 1) / 2;\n    },\n};\n/**\n * `InterpolationConfig` for the `stylePropInterpolate` instruction.\n */\nconst STYLE_PROP_INTERPOLATE_CONFIG = {\n    constant: [\n        Identifiers.styleProp,\n        Identifiers.stylePropInterpolate1,\n        Identifiers.stylePropInterpolate2,\n        Identifiers.stylePropInterpolate3,\n        Identifiers.stylePropInterpolate4,\n        Identifiers.stylePropInterpolate5,\n        Identifiers.stylePropInterpolate6,\n        Identifiers.stylePropInterpolate7,\n        Identifiers.stylePropInterpolate8,\n    ],\n    variable: Identifiers.stylePropInterpolateV,\n    mapping: n => {\n        if (n % 2 === 0) {\n            throw new Error(`Expected odd number of arguments`);\n        }\n        return (n - 1) / 2;\n    },\n};\n/**\n * `InterpolationConfig` for the `attributeInterpolate` instruction.\n */\nconst ATTRIBUTE_INTERPOLATE_CONFIG = {\n    constant: [\n        Identifiers.attribute,\n        Identifiers.attributeInterpolate1,\n        Identifiers.attributeInterpolate2,\n        Identifiers.attributeInterpolate3,\n        Identifiers.attributeInterpolate4,\n        Identifiers.attributeInterpolate5,\n        Identifiers.attributeInterpolate6,\n        Identifiers.attributeInterpolate7,\n        Identifiers.attributeInterpolate8,\n    ],\n    variable: Identifiers.attributeInterpolateV,\n    mapping: n => {\n        if (n % 2 === 0) {\n            throw new Error(`Expected odd number of arguments`);\n        }\n        return (n - 1) / 2;\n    },\n};\n/**\n * `InterpolationConfig` for the `styleMapInterpolate` instruction.\n */\nconst STYLE_MAP_INTERPOLATE_CONFIG = {\n    constant: [\n        Identifiers.styleMap,\n        Identifiers.styleMapInterpolate1,\n        Identifiers.styleMapInterpolate2,\n        Identifiers.styleMapInterpolate3,\n        Identifiers.styleMapInterpolate4,\n        Identifiers.styleMapInterpolate5,\n        Identifiers.styleMapInterpolate6,\n        Identifiers.styleMapInterpolate7,\n        Identifiers.styleMapInterpolate8,\n    ],\n    variable: Identifiers.styleMapInterpolateV,\n    mapping: n => {\n        if (n % 2 === 0) {\n            throw new Error(`Expected odd number of arguments`);\n        }\n        return (n - 1) / 2;\n    },\n};\n/**\n * `InterpolationConfig` for the `classMapInterpolate` instruction.\n */\nconst CLASS_MAP_INTERPOLATE_CONFIG = {\n    constant: [\n        Identifiers.classMap,\n        Identifiers.classMapInterpolate1,\n        Identifiers.classMapInterpolate2,\n        Identifiers.classMapInterpolate3,\n        Identifiers.classMapInterpolate4,\n        Identifiers.classMapInterpolate5,\n        Identifiers.classMapInterpolate6,\n        Identifiers.classMapInterpolate7,\n        Identifiers.classMapInterpolate8,\n    ],\n    variable: Identifiers.classMapInterpolateV,\n    mapping: n => {\n        if (n % 2 === 0) {\n            throw new Error(`Expected odd number of arguments`);\n        }\n        return (n - 1) / 2;\n    },\n};\nconst PURE_FUNCTION_CONFIG = {\n    constant: [\n        Identifiers.pureFunction0,\n        Identifiers.pureFunction1,\n        Identifiers.pureFunction2,\n        Identifiers.pureFunction3,\n        Identifiers.pureFunction4,\n        Identifiers.pureFunction5,\n        Identifiers.pureFunction6,\n        Identifiers.pureFunction7,\n        Identifiers.pureFunction8,\n    ],\n    variable: Identifiers.pureFunctionV,\n    mapping: n => n,\n};\nfunction callVariadicInstructionExpr(config, baseArgs, interpolationArgs, extraArgs, sourceSpan) {\n    const n = config.mapping(interpolationArgs.length);\n    if (n < config.constant.length) {\n        // Constant calling pattern.\n        return importExpr(config.constant[n])\n            .callFn([...baseArgs, ...interpolationArgs, ...extraArgs], sourceSpan);\n    }\n    else if (config.variable !== null) {\n        // Variable calling pattern.\n        return importExpr(config.variable)\n            .callFn([...baseArgs, literalArr(interpolationArgs), ...extraArgs], sourceSpan);\n    }\n    else {\n        throw new Error(`AssertionError: unable to call variadic function`);\n    }\n}\nfunction callVariadicInstruction(config, baseArgs, interpolationArgs, extraArgs, sourceSpan) {\n    return createStatementOp(callVariadicInstructionExpr(config, baseArgs, interpolationArgs, extraArgs, sourceSpan)\n        .toStmt());\n}\n\n/**\n * Map of target resolvers for event listeners.\n */\nconst GLOBAL_TARGET_RESOLVERS$1 = new Map([\n    ['window', Identifiers.resolveWindow],\n    ['document', Identifiers.resolveDocument],\n    ['body', Identifiers.resolveBody],\n]);\n/**\n * Compiles semantic operations across all views and generates output `o.Statement`s with actual\n * runtime calls in their place.\n *\n * Reification replaces semantic operations with selected Ivy instructions and other generated code\n * structures. After reification, the create/update operation lists of all views should only contain\n * `ir.StatementOp`s (which wrap generated `o.Statement`s).\n */\nfunction reify(job) {\n    for (const unit of job.units) {\n        reifyCreateOperations(unit, unit.create);\n        reifyUpdateOperations(unit, unit.update);\n    }\n}\n/**\n * This function can be used a sanity check -- it walks every expression in the const pool, and\n * every expression reachable from an op, and makes sure that there are no IR expressions\n * left. This is nice to use for debugging mysterious failures where an IR expression cannot be\n * output from the output AST code.\n */\nfunction ensureNoIrForDebug(job) {\n    for (const stmt of job.pool.statements) {\n        transformExpressionsInStatement(stmt, expr => {\n            if (isIrExpression(expr)) {\n                throw new Error(`AssertionError: IR expression found during reify: ${ExpressionKind[expr.kind]}`);\n            }\n            return expr;\n        }, VisitorContextFlag.None);\n    }\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            visitExpressionsInOp(op, expr => {\n                if (isIrExpression(expr)) {\n                    throw new Error(`AssertionError: IR expression found during reify: ${ExpressionKind[expr.kind]}`);\n                }\n            });\n        }\n    }\n}\nfunction reifyCreateOperations(unit, ops) {\n    for (const op of ops) {\n        transformExpressionsInOp(op, reifyIrExpression, VisitorContextFlag.None);\n        switch (op.kind) {\n            case OpKind.Text:\n                OpList.replace(op, text(op.handle.slot, op.initialValue, op.sourceSpan));\n                break;\n            case OpKind.ElementStart:\n                OpList.replace(op, elementStart(op.handle.slot, op.tag, op.attributes, op.localRefs, op.startSourceSpan));\n                break;\n            case OpKind.Element:\n                OpList.replace(op, element(op.handle.slot, op.tag, op.attributes, op.localRefs, op.wholeSourceSpan));\n                break;\n            case OpKind.ElementEnd:\n                OpList.replace(op, elementEnd(op.sourceSpan));\n                break;\n            case OpKind.ContainerStart:\n                OpList.replace(op, elementContainerStart(op.handle.slot, op.attributes, op.localRefs, op.startSourceSpan));\n                break;\n            case OpKind.Container:\n                OpList.replace(op, elementContainer(op.handle.slot, op.attributes, op.localRefs, op.wholeSourceSpan));\n                break;\n            case OpKind.ContainerEnd:\n                OpList.replace(op, elementContainerEnd());\n                break;\n            case OpKind.I18nStart:\n                OpList.replace(op, i18nStart(op.handle.slot, op.messageIndex, op.subTemplateIndex, op.sourceSpan));\n                break;\n            case OpKind.I18nEnd:\n                OpList.replace(op, i18nEnd(op.sourceSpan));\n                break;\n            case OpKind.I18n:\n                OpList.replace(op, i18n(op.handle.slot, op.messageIndex, op.subTemplateIndex, op.sourceSpan));\n                break;\n            case OpKind.I18nAttributes:\n                if (op.i18nAttributesConfig === null) {\n                    throw new Error(`AssertionError: i18nAttributesConfig was not set`);\n                }\n                OpList.replace(op, i18nAttributes(op.handle.slot, op.i18nAttributesConfig));\n                break;\n            case OpKind.Template:\n                if (!(unit instanceof ViewCompilationUnit)) {\n                    throw new Error(`AssertionError: must be compiling a component`);\n                }\n                if (Array.isArray(op.localRefs)) {\n                    throw new Error(`AssertionError: local refs array should have been extracted into a constant`);\n                }\n                const childView = unit.job.views.get(op.xref);\n                OpList.replace(op, template(op.handle.slot, variable(childView.fnName), childView.decls, childView.vars, op.tag, op.attributes, op.localRefs, op.startSourceSpan));\n                break;\n            case OpKind.DisableBindings:\n                OpList.replace(op, disableBindings());\n                break;\n            case OpKind.EnableBindings:\n                OpList.replace(op, enableBindings());\n                break;\n            case OpKind.Pipe:\n                OpList.replace(op, pipe(op.handle.slot, op.name));\n                break;\n            case OpKind.Listener:\n                const listenerFn = reifyListenerHandler(unit, op.handlerFnName, op.handlerOps, op.consumesDollarEvent);\n                const eventTargetResolver = op.eventTarget ? GLOBAL_TARGET_RESOLVERS$1.get(op.eventTarget) : null;\n                if (eventTargetResolver === undefined) {\n                    throw new Error(`Unexpected global target '${op.eventTarget}' defined for '${op.name}' event. Supported list of global targets: window,document,body.`);\n                }\n                OpList.replace(op, listener(op.name, listenerFn, eventTargetResolver, op.hostListener && op.isAnimationListener, op.sourceSpan));\n                break;\n            case OpKind.Variable:\n                if (op.variable.name === null) {\n                    throw new Error(`AssertionError: unnamed variable ${op.xref}`);\n                }\n                OpList.replace(op, createStatementOp(new DeclareVarStmt(op.variable.name, op.initializer, undefined, StmtModifier.Final)));\n                break;\n            case OpKind.Namespace:\n                switch (op.active) {\n                    case Namespace.HTML:\n                        OpList.replace(op, namespaceHTML());\n                        break;\n                    case Namespace.SVG:\n                        OpList.replace(op, namespaceSVG());\n                        break;\n                    case Namespace.Math:\n                        OpList.replace(op, namespaceMath());\n                        break;\n                }\n                break;\n            case OpKind.Defer:\n                const timerScheduling = !!op.loadingMinimumTime || !!op.loadingAfterTime || !!op.placeholderMinimumTime;\n                OpList.replace(op, defer(op.handle.slot, op.mainSlot.slot, op.resolverFn, op.loadingSlot?.slot ?? null, op.placeholderSlot?.slot ?? null, op.errorSlot?.slot ?? null, op.loadingConfig, op.placeholderConfig, timerScheduling, op.sourceSpan));\n                break;\n            case OpKind.DeferOn:\n                let args = [];\n                switch (op.trigger.kind) {\n                    case DeferTriggerKind.Idle:\n                    case DeferTriggerKind.Immediate:\n                        break;\n                    case DeferTriggerKind.Timer:\n                        args = [op.trigger.delay];\n                        break;\n                    case DeferTriggerKind.Interaction:\n                    case DeferTriggerKind.Hover:\n                    case DeferTriggerKind.Viewport:\n                        if (op.trigger.targetSlot?.slot == null || op.trigger.targetSlotViewSteps === null) {\n                            throw new Error(`Slot or view steps not set in trigger reification for trigger kind ${op.trigger.kind}`);\n                        }\n                        args = [op.trigger.targetSlot.slot];\n                        if (op.trigger.targetSlotViewSteps !== 0) {\n                            args.push(op.trigger.targetSlotViewSteps);\n                        }\n                        break;\n                    default:\n                        throw new Error(`AssertionError: Unsupported reification of defer trigger kind ${op.trigger.kind}`);\n                }\n                OpList.replace(op, deferOn(op.trigger.kind, args, op.prefetch, op.sourceSpan));\n                break;\n            case OpKind.ProjectionDef:\n                OpList.replace(op, projectionDef(op.def));\n                break;\n            case OpKind.Projection:\n                if (op.handle.slot === null) {\n                    throw new Error('No slot was assigned for project instruction');\n                }\n                OpList.replace(op, projection(op.handle.slot, op.projectionSlotIndex, op.attributes, op.sourceSpan));\n                break;\n            case OpKind.RepeaterCreate:\n                if (op.handle.slot === null) {\n                    throw new Error('No slot was assigned for repeater instruction');\n                }\n                if (!(unit instanceof ViewCompilationUnit)) {\n                    throw new Error(`AssertionError: must be compiling a component`);\n                }\n                const repeaterView = unit.job.views.get(op.xref);\n                if (repeaterView.fnName === null) {\n                    throw new Error(`AssertionError: expected repeater primary view to have been named`);\n                }\n                let emptyViewFnName = null;\n                let emptyDecls = null;\n                let emptyVars = null;\n                if (op.emptyView !== null) {\n                    const emptyView = unit.job.views.get(op.emptyView);\n                    if (emptyView === undefined) {\n                        throw new Error('AssertionError: repeater had empty view xref, but empty view was not found');\n                    }\n                    if (emptyView.fnName === null || emptyView.decls === null || emptyView.vars === null) {\n                        throw new Error(`AssertionError: expected repeater empty view to have been named and counted`);\n                    }\n                    emptyViewFnName = emptyView.fnName;\n                    emptyDecls = emptyView.decls;\n                    emptyVars = emptyView.vars;\n                }\n                OpList.replace(op, repeaterCreate(op.handle.slot, repeaterView.fnName, op.decls, op.vars, op.tag, op.attributes, op.trackByFn, op.usesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, op.emptyTag, op.emptyAttributes, op.wholeSourceSpan));\n                break;\n            case OpKind.Statement:\n                // Pass statement operations directly through.\n                break;\n            default:\n                throw new Error(`AssertionError: Unsupported reification of create op ${OpKind[op.kind]}`);\n        }\n    }\n}\nfunction reifyUpdateOperations(_unit, ops) {\n    for (const op of ops) {\n        transformExpressionsInOp(op, reifyIrExpression, VisitorContextFlag.None);\n        switch (op.kind) {\n            case OpKind.Advance:\n                OpList.replace(op, advance(op.delta, op.sourceSpan));\n                break;\n            case OpKind.Property:\n                if (op.expression instanceof Interpolation) {\n                    OpList.replace(op, propertyInterpolate(op.name, op.expression.strings, op.expression.expressions, op.sanitizer, op.sourceSpan));\n                }\n                else {\n                    OpList.replace(op, property(op.name, op.expression, op.sanitizer, op.sourceSpan));\n                }\n                break;\n            case OpKind.StyleProp:\n                if (op.expression instanceof Interpolation) {\n                    OpList.replace(op, stylePropInterpolate(op.name, op.expression.strings, op.expression.expressions, op.unit, op.sourceSpan));\n                }\n                else {\n                    OpList.replace(op, styleProp(op.name, op.expression, op.unit, op.sourceSpan));\n                }\n                break;\n            case OpKind.ClassProp:\n                OpList.replace(op, classProp(op.name, op.expression, op.sourceSpan));\n                break;\n            case OpKind.StyleMap:\n                if (op.expression instanceof Interpolation) {\n                    OpList.replace(op, styleMapInterpolate(op.expression.strings, op.expression.expressions, op.sourceSpan));\n                }\n                else {\n                    OpList.replace(op, styleMap(op.expression, op.sourceSpan));\n                }\n                break;\n            case OpKind.ClassMap:\n                if (op.expression instanceof Interpolation) {\n                    OpList.replace(op, classMapInterpolate(op.expression.strings, op.expression.expressions, op.sourceSpan));\n                }\n                else {\n                    OpList.replace(op, classMap(op.expression, op.sourceSpan));\n                }\n                break;\n            case OpKind.I18nExpression:\n                OpList.replace(op, i18nExp(op.expression, op.sourceSpan));\n                break;\n            case OpKind.I18nApply:\n                OpList.replace(op, i18nApply(op.handle.slot, op.sourceSpan));\n                break;\n            case OpKind.InterpolateText:\n                OpList.replace(op, textInterpolate(op.interpolation.strings, op.interpolation.expressions, op.sourceSpan));\n                break;\n            case OpKind.Attribute:\n                if (op.expression instanceof Interpolation) {\n                    OpList.replace(op, attributeInterpolate(op.name, op.expression.strings, op.expression.expressions, op.sanitizer, op.sourceSpan));\n                }\n                else {\n                    OpList.replace(op, attribute(op.name, op.expression, op.sanitizer, op.namespace));\n                }\n                break;\n            case OpKind.HostProperty:\n                if (op.expression instanceof Interpolation) {\n                    throw new Error('not yet handled');\n                }\n                else {\n                    if (op.isAnimationTrigger) {\n                        OpList.replace(op, syntheticHostProperty(op.name, op.expression, op.sourceSpan));\n                    }\n                    else {\n                        OpList.replace(op, hostProperty(op.name, op.expression, op.sanitizer, op.sourceSpan));\n                    }\n                }\n                break;\n            case OpKind.Variable:\n                if (op.variable.name === null) {\n                    throw new Error(`AssertionError: unnamed variable ${op.xref}`);\n                }\n                OpList.replace(op, createStatementOp(new DeclareVarStmt(op.variable.name, op.initializer, undefined, StmtModifier.Final)));\n                break;\n            case OpKind.Conditional:\n                if (op.processed === null) {\n                    throw new Error(`Conditional test was not set.`);\n                }\n                if (op.targetSlot.slot === null) {\n                    throw new Error(`Conditional slot was not set.`);\n                }\n                OpList.replace(op, conditional(op.targetSlot.slot, op.processed, op.contextValue, op.sourceSpan));\n                break;\n            case OpKind.Repeater:\n                OpList.replace(op, repeater(op.collection, op.sourceSpan));\n                break;\n            case OpKind.DeferWhen:\n                OpList.replace(op, deferWhen(op.prefetch, op.expr, op.sourceSpan));\n                break;\n            case OpKind.Statement:\n                // Pass statement operations directly through.\n                break;\n            default:\n                throw new Error(`AssertionError: Unsupported reification of update op ${OpKind[op.kind]}`);\n        }\n    }\n}\nfunction reifyIrExpression(expr) {\n    if (!isIrExpression(expr)) {\n        return expr;\n    }\n    switch (expr.kind) {\n        case ExpressionKind.NextContext:\n            return nextContext(expr.steps);\n        case ExpressionKind.Reference:\n            return reference(expr.targetSlot.slot + 1 + expr.offset);\n        case ExpressionKind.LexicalRead:\n            throw new Error(`AssertionError: unresolved LexicalRead of ${expr.name}`);\n        case ExpressionKind.RestoreView:\n            if (typeof expr.view === 'number') {\n                throw new Error(`AssertionError: unresolved RestoreView`);\n            }\n            return restoreView(expr.view);\n        case ExpressionKind.ResetView:\n            return resetView(expr.expr);\n        case ExpressionKind.GetCurrentView:\n            return getCurrentView();\n        case ExpressionKind.ReadVariable:\n            if (expr.name === null) {\n                throw new Error(`Read of unnamed variable ${expr.xref}`);\n            }\n            return variable(expr.name);\n        case ExpressionKind.ReadTemporaryExpr:\n            if (expr.name === null) {\n                throw new Error(`Read of unnamed temporary ${expr.xref}`);\n            }\n            return variable(expr.name);\n        case ExpressionKind.AssignTemporaryExpr:\n            if (expr.name === null) {\n                throw new Error(`Assign of unnamed temporary ${expr.xref}`);\n            }\n            return variable(expr.name).set(expr.expr);\n        case ExpressionKind.PureFunctionExpr:\n            if (expr.fn === null) {\n                throw new Error(`AssertionError: expected PureFunctions to have been extracted`);\n            }\n            return pureFunction(expr.varOffset, expr.fn, expr.args);\n        case ExpressionKind.PureFunctionParameterExpr:\n            throw new Error(`AssertionError: expected PureFunctionParameterExpr to have been extracted`);\n        case ExpressionKind.PipeBinding:\n            return pipeBind(expr.targetSlot.slot, expr.varOffset, expr.args);\n        case ExpressionKind.PipeBindingVariadic:\n            return pipeBindV(expr.targetSlot.slot, expr.varOffset, expr.args);\n        case ExpressionKind.SlotLiteralExpr:\n            return literal(expr.slot.slot);\n        default:\n            throw new Error(`AssertionError: Unsupported reification of ir.Expression kind: ${ExpressionKind[expr.kind]}`);\n    }\n}\n/**\n * Listeners get turned into a function expression, which may or may not have the `$event`\n * parameter defined.\n */\nfunction reifyListenerHandler(unit, name, handlerOps, consumesDollarEvent) {\n    // First, reify all instruction calls within `handlerOps`.\n    reifyUpdateOperations(unit, handlerOps);\n    // Next, extract all the `o.Statement`s from the reified operations. We can expect that at this\n    // point, all operations have been converted to statements.\n    const handlerStmts = [];\n    for (const op of handlerOps) {\n        if (op.kind !== OpKind.Statement) {\n            throw new Error(`AssertionError: expected reified statements, but found op ${OpKind[op.kind]}`);\n        }\n        handlerStmts.push(op.statement);\n    }\n    // If `$event` is referenced, we need to generate it as a parameter.\n    const params = [];\n    if (consumesDollarEvent) {\n        // We need the `$event` parameter.\n        params.push(new FnParam('$event'));\n    }\n    return fn(params, handlerStmts, undefined, undefined, name);\n}\n\n/**\n * Bidningd with no content can be safely deleted.\n */\nfunction removeEmptyBindings(job) {\n    for (const unit of job.units) {\n        for (const op of unit.update) {\n            switch (op.kind) {\n                case OpKind.Attribute:\n                case OpKind.Binding:\n                case OpKind.ClassProp:\n                case OpKind.ClassMap:\n                case OpKind.Property:\n                case OpKind.StyleProp:\n                case OpKind.StyleMap:\n                    if (op.expression instanceof EmptyExpr) {\n                        OpList.remove(op);\n                    }\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * Remove the i18n context ops after they are no longer needed, and null out references to them to\n * be safe.\n */\nfunction removeI18nContexts(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nContext:\n                    OpList.remove(op);\n                    break;\n                case OpKind.I18nStart:\n                    op.context = null;\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * i18nAttributes ops will be generated for each i18n attribute. However, not all i18n attribues\n * will contain dynamic content, and so some of these i18nAttributes ops may be unnecessary.\n */\nfunction removeUnusedI18nAttributesOps(job) {\n    for (const unit of job.units) {\n        const ownersWithI18nExpressions = new Set();\n        for (const op of unit.update) {\n            switch (op.kind) {\n                case OpKind.I18nExpression:\n                    ownersWithI18nExpressions.add(op.i18nOwner);\n            }\n        }\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nAttributes:\n                    if (ownersWithI18nExpressions.has(op.xref)) {\n                        continue;\n                    }\n                    OpList.remove(op);\n            }\n        }\n    }\n}\n\n/**\n * Resolves `ir.ContextExpr` expressions (which represent embedded view or component contexts) to\n * either the `ctx` parameter to component functions (for the current view context) or to variables\n * that store those contexts (for contexts accessed via the `nextContext()` instruction).\n */\nfunction resolveContexts(job) {\n    for (const unit of job.units) {\n        processLexicalScope$1(unit, unit.create);\n        processLexicalScope$1(unit, unit.update);\n    }\n}\nfunction processLexicalScope$1(view, ops) {\n    // Track the expressions used to access all available contexts within the current view, by the\n    // view `ir.XrefId`.\n    const scope = new Map();\n    // The current view's context is accessible via the `ctx` parameter.\n    scope.set(view.xref, variable('ctx'));\n    for (const op of ops) {\n        switch (op.kind) {\n            case OpKind.Variable:\n                switch (op.variable.kind) {\n                    case SemanticVariableKind.Context:\n                        scope.set(op.variable.view, new ReadVariableExpr(op.xref));\n                        break;\n                }\n                break;\n            case OpKind.Listener:\n                processLexicalScope$1(view, op.handlerOps);\n                break;\n        }\n    }\n    if (view === view.job.root) {\n        // Prefer `ctx` of the root view to any variables which happen to contain the root context.\n        scope.set(view.xref, variable('ctx'));\n    }\n    for (const op of ops) {\n        transformExpressionsInOp(op, expr => {\n            if (expr instanceof ContextExpr) {\n                if (!scope.has(expr.view)) {\n                    throw new Error(`No context found for reference to view ${expr.view} from view ${view.xref}`);\n                }\n                return scope.get(expr.view);\n            }\n            else {\n                return expr;\n            }\n        }, VisitorContextFlag.None);\n    }\n}\n\n/**\n * Any variable inside a listener with the name `$event` will be transformed into a output lexical\n * read immediately, and does not participate in any of the normal logic for handling variables.\n */\nfunction resolveDollarEvent(job) {\n    for (const unit of job.units) {\n        transformDollarEvent(unit, unit.create);\n        transformDollarEvent(unit, unit.update);\n    }\n}\nfunction transformDollarEvent(unit, ops) {\n    for (const op of ops) {\n        if (op.kind === OpKind.Listener) {\n            transformExpressionsInOp(op, (expr) => {\n                if (expr instanceof LexicalReadExpr && expr.name === '$event') {\n                    op.consumesDollarEvent = true;\n                    return new ReadVarExpr(expr.name);\n                }\n                return expr;\n            }, VisitorContextFlag.InChildOperation);\n        }\n    }\n}\n\n/**\n * Resolve the element placeholders in i18n messages.\n */\nfunction resolveI18nElementPlaceholders(job) {\n    // Record all of the element and i18n context ops for use later.\n    const i18nContexts = new Map();\n    const elements = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nContext:\n                    i18nContexts.set(op.xref, op);\n                    break;\n                case OpKind.ElementStart:\n                    elements.set(op.xref, op);\n                    break;\n            }\n        }\n    }\n    resolvePlaceholdersForView(job, job.root, i18nContexts, elements);\n}\n/**\n * Recursively resolves element and template tag placeholders in the given view.\n */\nfunction resolvePlaceholdersForView(job, unit, i18nContexts, elements, pendingStructuralDirective) {\n    // Track the current i18n op and corresponding i18n context op as we step through the creation\n    // IR.\n    let currentOps = null;\n    let pendingStructuralDirectiveCloses = new Map();\n    for (const op of unit.create) {\n        switch (op.kind) {\n            case OpKind.I18nStart:\n                if (!op.context) {\n                    throw Error('Could not find i18n context for i18n op');\n                }\n                currentOps = { i18nBlock: op, i18nContext: i18nContexts.get(op.context) };\n                break;\n            case OpKind.I18nEnd:\n                currentOps = null;\n                break;\n            case OpKind.ElementStart:\n                // For elements with i18n placeholders, record its slot value in the params map under the\n                // corresponding tag start placeholder.\n                if (op.i18nPlaceholder !== undefined) {\n                    if (currentOps === null) {\n                        throw Error('i18n tag placeholder should only occur inside an i18n block');\n                    }\n                    recordElementStart(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                    // If there is a separate close tag placeholder for this element, save the pending\n                    // structural directive so we can pass it to the closing tag as well.\n                    if (pendingStructuralDirective && op.i18nPlaceholder.closeName) {\n                        pendingStructuralDirectiveCloses.set(op.xref, pendingStructuralDirective);\n                    }\n                    // Clear out the pending structural directive now that its been accounted for.\n                    pendingStructuralDirective = undefined;\n                }\n                break;\n            case OpKind.ElementEnd:\n                // For elements with i18n placeholders, record its slot value in the params map under the\n                // corresponding tag close placeholder.\n                const startOp = elements.get(op.xref);\n                if (startOp && startOp.i18nPlaceholder !== undefined) {\n                    if (currentOps === null) {\n                        throw Error('AssertionError: i18n tag placeholder should only occur inside an i18n block');\n                    }\n                    recordElementClose(startOp, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirectiveCloses.get(op.xref));\n                    // Clear out the pending structural directive close that was accounted for.\n                    pendingStructuralDirectiveCloses.delete(op.xref);\n                }\n                break;\n            case OpKind.Projection:\n                // For content projections with i18n placeholders, record its slot value in the params map\n                // under the corresponding tag start and close placeholders.\n                if (op.i18nPlaceholder !== undefined) {\n                    if (currentOps === null) {\n                        throw Error('i18n tag placeholder should only occur inside an i18n block');\n                    }\n                    recordElementStart(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                    recordElementClose(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                    // Clear out the pending structural directive now that its been accounted for.\n                    pendingStructuralDirective = undefined;\n                }\n                break;\n            case OpKind.Template:\n                const view = job.views.get(op.xref);\n                if (op.i18nPlaceholder === undefined) {\n                    // If there is no i18n placeholder, just recurse into the view in case it contains i18n\n                    // blocks.\n                    resolvePlaceholdersForView(job, view, i18nContexts, elements);\n                }\n                else {\n                    if (currentOps === null) {\n                        throw Error('i18n tag placeholder should only occur inside an i18n block');\n                    }\n                    if (op.templateKind === TemplateKind.Structural) {\n                        // If this is a structural directive template, don't record anything yet. Instead pass\n                        // the current template as a pending structural directive to be recorded when we find\n                        // the element, content, or template it belongs to. This allows us to create combined\n                        // values that represent, e.g. the start of a template and element at the same time.\n                        resolvePlaceholdersForView(job, view, i18nContexts, elements, op);\n                    }\n                    else {\n                        // If this is some other kind of template, we can record its start, recurse into its\n                        // view, and then record its end.\n                        recordTemplateStart(job, view, op.handle.slot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                        resolvePlaceholdersForView(job, view, i18nContexts, elements);\n                        recordTemplateClose(job, view, op.handle.slot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                        pendingStructuralDirective = undefined;\n                    }\n                }\n                break;\n            case OpKind.RepeaterCreate:\n                if (pendingStructuralDirective !== undefined) {\n                    throw Error('AssertionError: Unexpected structural directive associated with @for block');\n                }\n                // RepeaterCreate has 3 slots: the first is for the op itself, the second is for the @for\n                // template and the (optional) third is for the @empty template.\n                const forSlot = op.handle.slot + 1;\n                const forView = job.views.get(op.xref);\n                // First record all of the placeholders for the @for template.\n                if (op.i18nPlaceholder === undefined) {\n                    // If there is no i18n placeholder, just recurse into the view in case it contains i18n\n                    // blocks.\n                    resolvePlaceholdersForView(job, forView, i18nContexts, elements);\n                }\n                else {\n                    if (currentOps === null) {\n                        throw Error('i18n tag placeholder should only occur inside an i18n block');\n                    }\n                    recordTemplateStart(job, forView, forSlot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                    resolvePlaceholdersForView(job, forView, i18nContexts, elements);\n                    recordTemplateClose(job, forView, forSlot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                    pendingStructuralDirective = undefined;\n                }\n                // Then if there's an @empty template, add its placeholders as well.\n                if (op.emptyView !== null) {\n                    // RepeaterCreate has 3 slots: the first is for the op itself, the second is for the @for\n                    // template and the (optional) third is for the @empty template.\n                    const emptySlot = op.handle.slot + 2;\n                    const emptyView = job.views.get(op.emptyView);\n                    if (op.emptyI18nPlaceholder === undefined) {\n                        // If there is no i18n placeholder, just recurse into the view in case it contains i18n\n                        // blocks.\n                        resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);\n                    }\n                    else {\n                        if (currentOps === null) {\n                            throw Error('i18n tag placeholder should only occur inside an i18n block');\n                        }\n                        recordTemplateStart(job, emptyView, emptySlot, op.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                        resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);\n                        recordTemplateClose(job, emptyView, emptySlot, op.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);\n                        pendingStructuralDirective = undefined;\n                    }\n                }\n                break;\n        }\n    }\n}\n/**\n * Records an i18n param value for the start of an element.\n */\nfunction recordElementStart(op, i18nContext, i18nBlock, structuralDirective) {\n    const { startName, closeName } = op.i18nPlaceholder;\n    let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.OpenTag;\n    let value = op.handle.slot;\n    // If the element is associated with a structural directive, start it as well.\n    if (structuralDirective !== undefined) {\n        flags |= I18nParamValueFlags.TemplateTag;\n        value = { element: value, template: structuralDirective.handle.slot };\n    }\n    // For self-closing tags, there is no close tag placeholder. Instead, the start tag\n    // placeholder accounts for the start and close of the element.\n    if (!closeName) {\n        flags |= I18nParamValueFlags.CloseTag;\n    }\n    addParam(i18nContext.params, startName, value, i18nBlock.subTemplateIndex, flags);\n}\n/**\n * Records an i18n param value for the closing of an element.\n */\nfunction recordElementClose(op, i18nContext, i18nBlock, structuralDirective) {\n    const { closeName } = op.i18nPlaceholder;\n    // Self-closing tags don't have a closing tag placeholder, instead the element closing is\n    // recorded via an additional flag on the element start value.\n    if (closeName) {\n        let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.CloseTag;\n        let value = op.handle.slot;\n        // If the element is associated with a structural directive, close it as well.\n        if (structuralDirective !== undefined) {\n            flags |= I18nParamValueFlags.TemplateTag;\n            value = { element: value, template: structuralDirective.handle.slot };\n        }\n        addParam(i18nContext.params, closeName, value, i18nBlock.subTemplateIndex, flags);\n    }\n}\n/**\n * Records an i18n param value for the start of a template.\n */\nfunction recordTemplateStart(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {\n    let { startName, closeName } = i18nPlaceholder;\n    let flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.OpenTag;\n    // For self-closing tags, there is no close tag placeholder. Instead, the start tag\n    // placeholder accounts for the start and close of the element.\n    if (!closeName) {\n        flags |= I18nParamValueFlags.CloseTag;\n    }\n    // If the template is associated with a structural directive, record the structural directive's\n    // start first. Since this template must be in the structural directive's view, we can just\n    // directly use the current i18n block's sub-template index.\n    if (structuralDirective !== undefined) {\n        addParam(i18nContext.params, startName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);\n    }\n    // Record the start of the template. For the sub-template index, pass the index for the template's\n    // view, rather than the current i18n block's index.\n    addParam(i18nContext.params, startName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);\n}\n/**\n * Records an i18n param value for the closing of a template.\n */\nfunction recordTemplateClose(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {\n    const { startName, closeName } = i18nPlaceholder;\n    const flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.CloseTag;\n    // Self-closing tags don't have a closing tag placeholder, instead the template's closing is\n    // recorded via an additional flag on the template start value.\n    if (closeName) {\n        // Record the closing of the template. For the sub-template index, pass the index for the\n        // template's view, rather than the current i18n block's index.\n        addParam(i18nContext.params, closeName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);\n        // If the template is associated with a structural directive, record the structural directive's\n        // closing after. Since this template must be in the structural directive's view, we can just\n        // directly use the current i18n block's sub-template index.\n        if (structuralDirective !== undefined) {\n            addParam(i18nContext.params, closeName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);\n        }\n    }\n}\n/**\n * Get the subTemplateIndex for the given template op. For template ops, use the subTemplateIndex of\n * the child i18n block inside the template.\n */\nfunction getSubTemplateIndexForTemplateTag(job, i18nOp, view) {\n    for (const childOp of view.create) {\n        if (childOp.kind === OpKind.I18nStart) {\n            return childOp.subTemplateIndex;\n        }\n    }\n    return i18nOp.subTemplateIndex;\n}\n/**\n * Add a param value to the given params map.\n */\nfunction addParam(params, placeholder, value, subTemplateIndex, flags) {\n    const values = params.get(placeholder) ?? [];\n    values.push({ value, subTemplateIndex, flags });\n    params.set(placeholder, values);\n}\n\n/**\n * Resolve the i18n expression placeholders in i18n messages.\n */\nfunction resolveI18nExpressionPlaceholders(job) {\n    // Record all of the i18n context ops, and the sub-template index for each i18n op.\n    const subTemplateIndicies = new Map();\n    const i18nContexts = new Map();\n    const icuPlaceholders = new Map();\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nStart:\n                    subTemplateIndicies.set(op.xref, op.subTemplateIndex);\n                    break;\n                case OpKind.I18nContext:\n                    i18nContexts.set(op.xref, op);\n                    break;\n                case OpKind.IcuPlaceholder:\n                    icuPlaceholders.set(op.xref, op);\n                    break;\n            }\n        }\n    }\n    // Keep track of the next available expression index for each i18n message.\n    const expressionIndices = new Map();\n    // Keep track of a reference index for each expression.\n    // We use different references for normal i18n expressio and attribute i18n expressions. This is\n    // because child i18n blocks in templates don't get their own context, since they're rolled into\n    // the translated message of the parent, but they may target a different slot.\n    const referenceIndex = (op) => op.usage === I18nExpressionFor.I18nText ? op.i18nOwner : op.context;\n    for (const unit of job.units) {\n        for (const op of unit.update) {\n            if (op.kind === OpKind.I18nExpression) {\n                const index = expressionIndices.get(referenceIndex(op)) || 0;\n                const subTemplateIndex = subTemplateIndicies.get(op.i18nOwner) ?? null;\n                const value = {\n                    value: index,\n                    subTemplateIndex: subTemplateIndex,\n                    flags: I18nParamValueFlags.ExpressionIndex\n                };\n                updatePlaceholder(op, value, i18nContexts, icuPlaceholders);\n                expressionIndices.set(referenceIndex(op), index + 1);\n            }\n        }\n    }\n}\nfunction updatePlaceholder(op, value, i18nContexts, icuPlaceholders) {\n    if (op.i18nPlaceholder !== null) {\n        const i18nContext = i18nContexts.get(op.context);\n        const params = op.resolutionTime === I18nParamResolutionTime.Creation ?\n            i18nContext.params :\n            i18nContext.postprocessingParams;\n        const values = params.get(op.i18nPlaceholder) || [];\n        values.push(value);\n        params.set(op.i18nPlaceholder, values);\n    }\n    if (op.icuPlaceholder !== null) {\n        const icuPlaceholderOp = icuPlaceholders.get(op.icuPlaceholder);\n        icuPlaceholderOp?.expressionPlaceholders.push(value);\n    }\n}\n\n/**\n * Resolves lexical references in views (`ir.LexicalReadExpr`) to either a target variable or to\n * property reads on the top-level component context.\n *\n * Also matches `ir.RestoreViewExpr` expressions with the variables of their corresponding saved\n * views.\n */\nfunction resolveNames(job) {\n    for (const unit of job.units) {\n        processLexicalScope(unit, unit.create, null);\n        processLexicalScope(unit, unit.update, null);\n    }\n}\nfunction processLexicalScope(unit, ops, savedView) {\n    // Maps names defined in the lexical scope of this template to the `ir.XrefId`s of the variable\n    // declarations which represent those values.\n    //\n    // Since variables are generated in each view for the entire lexical scope (including any\n    // identifiers from parent templates) only local variables need be considered here.\n    const scope = new Map();\n    // First, step through the operations list and:\n    // 1) build up the `scope` mapping\n    // 2) recurse into any listener functions\n    for (const op of ops) {\n        switch (op.kind) {\n            case OpKind.Variable:\n                switch (op.variable.kind) {\n                    case SemanticVariableKind.Identifier:\n                    case SemanticVariableKind.Alias:\n                        // This variable represents some kind of identifier which can be used in the template.\n                        if (scope.has(op.variable.identifier)) {\n                            continue;\n                        }\n                        scope.set(op.variable.identifier, op.xref);\n                        break;\n                    case SemanticVariableKind.SavedView:\n                        // This variable represents a snapshot of the current view context, and can be used to\n                        // restore that context within listener functions.\n                        savedView = {\n                            view: op.variable.view,\n                            variable: op.xref,\n                        };\n                        break;\n                }\n                break;\n            case OpKind.Listener:\n                // Listener functions have separate variable declarations, so process them as a separate\n                // lexical scope.\n                processLexicalScope(unit, op.handlerOps, savedView);\n                break;\n        }\n    }\n    // Next, use the `scope` mapping to match `ir.LexicalReadExpr` with defined names in the lexical\n    // scope. Also, look for `ir.RestoreViewExpr`s and match them with the snapshotted view context\n    // variable.\n    for (const op of ops) {\n        if (op.kind == OpKind.Listener) {\n            // Listeners were already processed above with their own scopes.\n            continue;\n        }\n        transformExpressionsInOp(op, (expr, flags) => {\n            if (expr instanceof LexicalReadExpr) {\n                // `expr` is a read of a name within the lexical scope of this view.\n                // Either that name is defined within the current view, or it represents a property from the\n                // main component context.\n                if (scope.has(expr.name)) {\n                    // This was a defined variable in the current scope.\n                    return new ReadVariableExpr(scope.get(expr.name));\n                }\n                else {\n                    // Reading from the component context.\n                    return new ReadPropExpr(new ContextExpr(unit.job.root.xref), expr.name);\n                }\n            }\n            else if (expr instanceof RestoreViewExpr && typeof expr.view === 'number') {\n                // `ir.RestoreViewExpr` happens in listener functions and restores a saved view from the\n                // parent creation list. We expect to find that we captured the `savedView` previously, and\n                // that it matches the expected view to be restored.\n                if (savedView === null || savedView.view !== expr.view) {\n                    throw new Error(`AssertionError: no saved view ${expr.view} from view ${unit.xref}`);\n                }\n                expr.view = new ReadVariableExpr(savedView.variable);\n                return expr;\n            }\n            else {\n                return expr;\n            }\n        }, VisitorContextFlag.None);\n    }\n    for (const op of ops) {\n        visitExpressionsInOp(op, expr => {\n            if (expr instanceof LexicalReadExpr) {\n                throw new Error(`AssertionError: no lexical reads should remain, but found read of ${expr.name}`);\n            }\n        });\n    }\n}\n\n/**\n * Map of security contexts to their sanitizer function.\n */\nconst sanitizerFns = new Map([\n    [SecurityContext.HTML, Identifiers.sanitizeHtml],\n    [SecurityContext.RESOURCE_URL, Identifiers.sanitizeResourceUrl],\n    [SecurityContext.SCRIPT, Identifiers.sanitizeScript],\n    [SecurityContext.STYLE, Identifiers.sanitizeStyle], [SecurityContext.URL, Identifiers.sanitizeUrl]\n]);\n/**\n * Map of security contexts to their trusted value function.\n */\nconst trustedValueFns = new Map([\n    [SecurityContext.HTML, Identifiers.trustConstantHtml],\n    [SecurityContext.RESOURCE_URL, Identifiers.trustConstantResourceUrl],\n]);\n/**\n * Resolves sanitization functions for ops that need them.\n */\nfunction resolveSanitizers(job) {\n    for (const unit of job.units) {\n        const elements = createOpXrefMap(unit);\n        // For normal element bindings we create trusted values for security sensitive constant\n        // attributes. However, for host bindings we skip this step (this matches what\n        // TemplateDefinitionBuilder does).\n        // TODO: Is the TDB behavior correct here?\n        if (job.kind !== CompilationJobKind.Host) {\n            for (const op of unit.create) {\n                if (op.kind === OpKind.ExtractedAttribute) {\n                    const trustedValueFn = trustedValueFns.get(getOnlySecurityContext(op.securityContext)) ?? null;\n                    op.trustedValueFn = trustedValueFn !== null ? importExpr(trustedValueFn) : null;\n                }\n            }\n        }\n        for (const op of unit.update) {\n            switch (op.kind) {\n                case OpKind.Property:\n                case OpKind.Attribute:\n                case OpKind.HostProperty:\n                    let sanitizerFn = null;\n                    if (Array.isArray(op.securityContext) && op.securityContext.length === 2 &&\n                        op.securityContext.indexOf(SecurityContext.URL) > -1 &&\n                        op.securityContext.indexOf(SecurityContext.RESOURCE_URL) > -1) {\n                        // When the host element isn't known, some URL attributes (such as \"src\" and \"href\") may\n                        // be part of multiple different security contexts. In this case we use special\n                        // sanitization function and select the actual sanitizer at runtime based on a tag name\n                        // that is provided while invoking sanitization function.\n                        sanitizerFn = Identifiers.sanitizeUrlOrResourceUrl;\n                    }\n                    else {\n                        sanitizerFn = sanitizerFns.get(getOnlySecurityContext(op.securityContext)) ?? null;\n                    }\n                    op.sanitizer = sanitizerFn !== null ? importExpr(sanitizerFn) : null;\n                    // If there was no sanitization function found based on the security context of an\n                    // attribute/property, check whether this attribute/property is one of the\n                    // security-sensitive <iframe> attributes (and that the current element is actually an\n                    // <iframe>).\n                    if (op.sanitizer === null) {\n                        let isIframe = false;\n                        if (job.kind === CompilationJobKind.Host || op.kind === OpKind.HostProperty) {\n                            // Note: for host bindings defined on a directive, we do not try to find all\n                            // possible places where it can be matched, so we can not determine whether\n                            // the host element is an <iframe>. In this case, we just assume it is and append a\n                            // validation function, which is invoked at runtime and would have access to the\n                            // underlying DOM element to check if it's an <iframe> and if so - run extra checks.\n                            isIframe = true;\n                        }\n                        else {\n                            // For a normal binding we can just check if the element its on is an iframe.\n                            const ownerOp = elements.get(op.target);\n                            if (ownerOp === undefined || !isElementOrContainerOp(ownerOp)) {\n                                throw Error('Property should have an element-like owner');\n                            }\n                            isIframe = isIframeElement$1(ownerOp);\n                        }\n                        if (isIframe && isIframeSecuritySensitiveAttr(op.name)) {\n                            op.sanitizer = importExpr(Identifiers.validateIframeAttribute);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n}\n/**\n * Checks whether the given op represents an iframe element.\n */\nfunction isIframeElement$1(op) {\n    return op.kind === OpKind.ElementStart && op.tag?.toLowerCase() === 'iframe';\n}\n/**\n * Asserts that there is only a single security context and returns it.\n */\nfunction getOnlySecurityContext(securityContext) {\n    if (Array.isArray(securityContext)) {\n        if (securityContext.length > 1) {\n            // TODO: What should we do here? TDB just took the first one, but this feels like something we\n            // would want to know about and create a special case for like we did for Url/ResourceUrl. My\n            // guess is that, outside of the Url/ResourceUrl case, this never actually happens. If there\n            // do turn out to be other cases, throwing an error until we can address it feels safer.\n            throw Error(`AssertionError: Ambiguous security context`);\n        }\n        return securityContext[0] || SecurityContext.NONE;\n    }\n    return securityContext;\n}\n\n/**\n * When inside of a listener, we may need access to one or more enclosing views. Therefore, each\n * view should save the current view, and each listener must have the ability to restore the\n * appropriate view. We eagerly generate all save view variables; they will be optimized away later.\n */\nfunction saveAndRestoreView(job) {\n    for (const unit of job.units) {\n        unit.create.prepend([\n            createVariableOp(unit.job.allocateXrefId(), {\n                kind: SemanticVariableKind.SavedView,\n                name: null,\n                view: unit.xref,\n            }, new GetCurrentViewExpr(), VariableFlags.None),\n        ]);\n        for (const op of unit.create) {\n            if (op.kind !== OpKind.Listener) {\n                continue;\n            }\n            // Embedded views always need the save/restore view operation.\n            let needsRestoreView = unit !== job.root;\n            if (!needsRestoreView) {\n                for (const handlerOp of op.handlerOps) {\n                    visitExpressionsInOp(handlerOp, expr => {\n                        if (expr instanceof ReferenceExpr) {\n                            // Listeners that reference() a local ref need the save/restore view operation.\n                            needsRestoreView = true;\n                        }\n                    });\n                }\n            }\n            if (needsRestoreView) {\n                addSaveRestoreViewOperationToListener(unit, op);\n            }\n        }\n    }\n}\nfunction addSaveRestoreViewOperationToListener(unit, op) {\n    op.handlerOps.prepend([\n        createVariableOp(unit.job.allocateXrefId(), {\n            kind: SemanticVariableKind.Context,\n            name: null,\n            view: unit.xref,\n        }, new RestoreViewExpr(unit.xref), VariableFlags.None),\n    ]);\n    // The \"restore view\" operation in listeners requires a call to `resetView` to reset the\n    // context prior to returning from the listener operation. Find any `return` statements in\n    // the listener body and wrap them in a call to reset the view.\n    for (const handlerOp of op.handlerOps) {\n        if (handlerOp.kind === OpKind.Statement &&\n            handlerOp.statement instanceof ReturnStatement) {\n            handlerOp.statement.value = new ResetViewExpr(handlerOp.statement.value);\n        }\n    }\n}\n\n/**\n * Assign data slots for all operations which implement `ConsumesSlotOpTrait`, and propagate the\n * assigned data slots of those operations to any expressions which reference them via\n * `UsesSlotIndexTrait`.\n *\n * This phase is also responsible for counting the number of slots used for each view (its `decls`)\n * and propagating that number into the `Template` operations which declare embedded views.\n */\nfunction allocateSlots(job) {\n    // Map of all declarations in all views within the component which require an assigned slot index.\n    // This map needs to be global (across all views within the component) since it's possible to\n    // reference a slot from one view from an expression within another (e.g. local references work\n    // this way).\n    const slotMap = new Map();\n    // Process all views in the component and assign slot indexes.\n    for (const unit of job.units) {\n        // Slot indices start at 0 for each view (and are not unique between views).\n        let slotCount = 0;\n        for (const op of unit.create) {\n            // Only consider declarations which consume data slots.\n            if (!hasConsumesSlotTrait(op)) {\n                continue;\n            }\n            // Assign slots to this declaration starting at the current `slotCount`.\n            op.handle.slot = slotCount;\n            // And track its assigned slot in the `slotMap`.\n            slotMap.set(op.xref, op.handle.slot);\n            // Each declaration may use more than 1 slot, so increment `slotCount` to reserve the number\n            // of slots required.\n            slotCount += op.numSlotsUsed;\n        }\n        // Record the total number of slots used on the view itself. This will later be propagated into\n        // `ir.TemplateOp`s which declare those views (except for the root view).\n        unit.decls = slotCount;\n    }\n    // After slot assignment, `slotMap` now contains slot assignments for every declaration in the\n    // whole template, across all views. Next, look for expressions which implement\n    // `UsesSlotIndexExprTrait` and propagate the assigned slot indexes into them.\n    // Additionally, this second scan allows us to find `ir.TemplateOp`s which declare views and\n    // propagate the number of slots used for each view into the operation which declares it.\n    for (const unit of job.units) {\n        for (const op of unit.ops()) {\n            if (op.kind === OpKind.Template || op.kind === OpKind.RepeaterCreate) {\n                // Record the number of slots used by the view this `ir.TemplateOp` declares in the\n                // operation itself, so it can be emitted later.\n                const childView = job.views.get(op.xref);\n                op.decls = childView.decls;\n                // TODO: currently we handle the decls for the RepeaterCreate empty template in the reify\n                // phase. We should handle that here instead.\n            }\n        }\n    }\n}\n\n/**\n * Transforms special-case bindings with 'style' or 'class' in their names. Must run before the\n * main binding specialization pass.\n */\nfunction specializeStyleBindings(job) {\n    for (const unit of job.units) {\n        for (const op of unit.update) {\n            if (op.kind !== OpKind.Binding) {\n                continue;\n            }\n            switch (op.bindingKind) {\n                case BindingKind.ClassName:\n                    if (op.expression instanceof Interpolation) {\n                        throw new Error(`Unexpected interpolation in ClassName binding`);\n                    }\n                    OpList.replace(op, createClassPropOp(op.target, op.name, op.expression, op.sourceSpan));\n                    break;\n                case BindingKind.StyleProperty:\n                    OpList.replace(op, createStylePropOp(op.target, op.name, op.expression, op.unit, op.sourceSpan));\n                    break;\n                case BindingKind.Property:\n                case BindingKind.Template:\n                    if (op.name === 'style') {\n                        OpList.replace(op, createStyleMapOp(op.target, op.expression, op.sourceSpan));\n                    }\n                    else if (op.name === 'class') {\n                        OpList.replace(op, createClassMapOp(op.target, op.expression, op.sourceSpan));\n                    }\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * Find all assignments and usages of temporary variables, which are linked to each other with cross\n * references. Generate names for each cross-reference, and add a `DeclareVarStmt` to initialize\n * them at the beginning of the update block.\n *\n * TODO: Sometimes, it will be possible to reuse names across different subexpressions. For example,\n * in the double keyed read `a?.[f()]?.[f()]`, the two function calls have non-overlapping scopes.\n * Implement an algorithm for reuse.\n */\nfunction generateTemporaryVariables(job) {\n    for (const unit of job.units) {\n        unit.create.prepend(generateTemporaries(unit.create));\n        unit.update.prepend(generateTemporaries(unit.update));\n    }\n}\nfunction generateTemporaries(ops) {\n    let opCount = 0;\n    let generatedStatements = [];\n    // For each op, search for any variables that are assigned or read. For each variable, generate a\n    // name and produce a `DeclareVarStmt` to the beginning of the block.\n    for (const op of ops) {\n        // Identify the final time each temp var is read.\n        const finalReads = new Map();\n        visitExpressionsInOp(op, (expr, flag) => {\n            if (flag & VisitorContextFlag.InChildOperation) {\n                return;\n            }\n            if (expr instanceof ReadTemporaryExpr) {\n                finalReads.set(expr.xref, expr);\n            }\n        });\n        // Name the temp vars, accounting for the fact that a name can be reused after it has been\n        // read for the final time.\n        let count = 0;\n        const assigned = new Set();\n        const released = new Set();\n        const defs = new Map();\n        visitExpressionsInOp(op, (expr, flag) => {\n            if (flag & VisitorContextFlag.InChildOperation) {\n                return;\n            }\n            if (expr instanceof AssignTemporaryExpr) {\n                if (!assigned.has(expr.xref)) {\n                    assigned.add(expr.xref);\n                    // TODO: Exactly replicate the naming scheme used by `TemplateDefinitionBuilder`.\n                    // It seems to rely on an expression index instead of an op index.\n                    defs.set(expr.xref, `tmp_${opCount}_${count++}`);\n                }\n                assignName(defs, expr);\n            }\n            else if (expr instanceof ReadTemporaryExpr) {\n                if (finalReads.get(expr.xref) === expr) {\n                    released.add(expr.xref);\n                    count--;\n                }\n                assignName(defs, expr);\n            }\n        });\n        // Add declarations for the temp vars.\n        generatedStatements.push(...Array.from(new Set(defs.values()))\n            .map(name => createStatementOp(new DeclareVarStmt(name))));\n        opCount++;\n        if (op.kind === OpKind.Listener) {\n            op.handlerOps.prepend(generateTemporaries(op.handlerOps));\n        }\n    }\n    return generatedStatements;\n}\n/**\n * Assigns a name to the temporary variable in the given temporary variable expression.\n */\nfunction assignName(names, expr) {\n    const name = names.get(expr.xref);\n    if (name === undefined) {\n        throw new Error(`Found xref with unassigned name: ${expr.xref}`);\n    }\n    expr.name = name;\n}\n\n/**\n * Generate track functions that need to be extracted to the constant pool. This entails wrapping\n * them in an arrow (or traditional) function, replacing context reads with `this.`, and storing\n * them in the constant pool.\n *\n * Note that, if a track function was previously optimized, it will not need to be extracted, and\n * this phase is a no-op.\n */\nfunction generateTrackFns(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind !== OpKind.RepeaterCreate) {\n                continue;\n            }\n            if (op.trackByFn !== null) {\n                // The final track function was already set, probably because it was optimized.\n                continue;\n            }\n            // Find all component context reads.\n            let usesComponentContext = false;\n            op.track = transformExpressionsInExpression(op.track, expr => {\n                if (expr instanceof PipeBindingExpr || expr instanceof PipeBindingVariadicExpr) {\n                    throw new Error(`Illegal State: Pipes are not allowed in this context`);\n                }\n                if (expr instanceof TrackContextExpr) {\n                    usesComponentContext = true;\n                    return variable('this');\n                }\n                return expr;\n            }, VisitorContextFlag.None);\n            let fn;\n            const fnParams = [new FnParam('$index'), new FnParam('$item')];\n            if (usesComponentContext) {\n                fn = new FunctionExpr(fnParams, [new ReturnStatement(op.track)]);\n            }\n            else {\n                fn = arrowFn(fnParams, op.track);\n            }\n            op.trackByFn = job.pool.getSharedFunctionReference(fn, '_forTrack');\n        }\n    }\n}\n\n/**\n * `track` functions in `for` repeaters can sometimes be \"optimized,\" i.e. transformed into inline\n * expressions, in lieu of an external function call. For example, tracking by `$index` can be be\n * optimized into an inline `trackByIndex` reference. This phase checks track expressions for\n * optimizable cases.\n */\nfunction optimizeTrackFns(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind !== OpKind.RepeaterCreate) {\n                continue;\n            }\n            if (op.track instanceof ReadVarExpr && op.track.name === '$index') {\n                // Top-level access of `$index` uses the built in `repeaterTrackByIndex`.\n                op.trackByFn = importExpr(Identifiers.repeaterTrackByIndex);\n            }\n            else if (op.track instanceof ReadVarExpr && op.track.name === '$item') {\n                // Top-level access of the item uses the built in `repeaterTrackByIdentity`.\n                op.trackByFn = importExpr(Identifiers.repeaterTrackByIdentity);\n            }\n            else if (isTrackByFunctionCall(job.root.xref, op.track)) {\n                // Top-level method calls in the form of `fn($index, item)` can be passed in directly.\n                if (op.track.receiver.receiver.view === unit.xref) {\n                    // TODO: this may be wrong\n                    op.trackByFn = op.track.receiver;\n                }\n                else {\n                    // This is a plain method call, but not in the component's root view.\n                    // We need to get the component instance, and then call the method on it.\n                    op.trackByFn =\n                        importExpr(Identifiers.componentInstance).callFn([]).prop(op.track.receiver.name);\n                    // Because the context is not avaiable (without a special function), we don't want to\n                    // try to resolve it later. Let's get rid of it by overwriting the original track\n                    // expression (which won't be used anyway).\n                    op.track = op.trackByFn;\n                }\n            }\n            else {\n                // The track function could not be optimized.\n                // Replace context reads with a special IR expression, since context reads in a track\n                // function are emitted specially.\n                op.track = transformExpressionsInExpression(op.track, expr => {\n                    if (expr instanceof ContextExpr) {\n                        op.usesComponentInstance = true;\n                        return new TrackContextExpr(expr.view);\n                    }\n                    return expr;\n                }, VisitorContextFlag.None);\n            }\n        }\n    }\n}\nfunction isTrackByFunctionCall(rootView, expr) {\n    if (!(expr instanceof InvokeFunctionExpr) || expr.args.length !== 2) {\n        return false;\n    }\n    if (!(expr.receiver instanceof ReadPropExpr &&\n        expr.receiver.receiver instanceof ContextExpr) ||\n        expr.receiver.receiver.view !== rootView) {\n        return false;\n    }\n    const [arg0, arg1] = expr.args;\n    if (!(arg0 instanceof ReadVarExpr) || arg0.name !== '$index') {\n        return false;\n    }\n    if (!(arg1 instanceof ReadVarExpr) || arg1.name !== '$item') {\n        return false;\n    }\n    return true;\n}\n\n/**\n * Inside the `track` expression on a `for` repeater, the `$index` and `$item` variables are\n * ambiently available. In this phase, we find those variable usages, and replace them with the\n * appropriate output read.\n */\nfunction generateTrackVariables(job) {\n    for (const unit of job.units) {\n        for (const op of unit.create) {\n            if (op.kind !== OpKind.RepeaterCreate) {\n                continue;\n            }\n            op.track = transformExpressionsInExpression(op.track, expr => {\n                if (expr instanceof LexicalReadExpr) {\n                    if (expr.name === op.varNames.$index) {\n                        return variable('$index');\n                    }\n                    else if (expr.name === op.varNames.$implicit) {\n                        return variable('$item');\n                    }\n                    // TODO: handle prohibited context variables (emit as globals?)\n                }\n                return expr;\n            }, VisitorContextFlag.None);\n        }\n    }\n}\n\n/**\n * Counts the number of variable slots used within each view, and stores that on the view itself, as\n * well as propagates it to the `ir.TemplateOp` for embedded views.\n */\nfunction countVariables(job) {\n    // First, count the vars used in each view, and update the view-level counter.\n    for (const unit of job.units) {\n        let varCount = 0;\n        // Count variables on top-level ops first. Don't explore nested expressions just yet.\n        for (const op of unit.ops()) {\n            if (hasConsumesVarsTrait(op)) {\n                varCount += varsUsedByOp(op);\n            }\n        }\n        // Count variables on expressions inside ops. We do this later because some of these expressions\n        // might be conditional (e.g. `pipeBinding` inside of a ternary), and we don't want to interfere\n        // with indices for top-level binding slots (e.g. `property`).\n        for (const op of unit.ops()) {\n            visitExpressionsInOp(op, expr => {\n                if (!isIrExpression(expr)) {\n                    return;\n                }\n                // TemplateDefinitionBuilder assigns variable offsets for everything but pure functions\n                // first, and then assigns offsets to pure functions lazily. We emulate that behavior by\n                // assigning offsets in two passes instead of one, only in compatibility mode.\n                if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder &&\n                    expr instanceof PureFunctionExpr) {\n                    return;\n                }\n                // Some expressions require knowledge of the number of variable slots consumed.\n                if (hasUsesVarOffsetTrait(expr)) {\n                    expr.varOffset = varCount;\n                }\n                if (hasConsumesVarsTrait(expr)) {\n                    varCount += varsUsedByIrExpression(expr);\n                }\n            });\n        }\n        // Compatiblity mode pass for pure function offsets (as explained above).\n        if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {\n            for (const op of unit.ops()) {\n                visitExpressionsInOp(op, expr => {\n                    if (!isIrExpression(expr) || !(expr instanceof PureFunctionExpr)) {\n                        return;\n                    }\n                    // Some expressions require knowledge of the number of variable slots consumed.\n                    if (hasUsesVarOffsetTrait(expr)) {\n                        expr.varOffset = varCount;\n                    }\n                    if (hasConsumesVarsTrait(expr)) {\n                        varCount += varsUsedByIrExpression(expr);\n                    }\n                });\n            }\n        }\n        unit.vars = varCount;\n    }\n    if (job instanceof ComponentCompilationJob) {\n        // Add var counts for each view to the `ir.TemplateOp` which declares that view (if the view is\n        // an embedded view).\n        for (const unit of job.units) {\n            for (const op of unit.create) {\n                if (op.kind !== OpKind.Template && op.kind !== OpKind.RepeaterCreate) {\n                    continue;\n                }\n                const childView = job.views.get(op.xref);\n                op.vars = childView.vars;\n                // TODO: currently we handle the vars for the RepeaterCreate empty template in the reify\n                // phase. We should handle that here instead.\n            }\n        }\n    }\n}\n/**\n * Different operations that implement `ir.UsesVarsTrait` use different numbers of variables, so\n * count the variables used by any particular `op`.\n */\nfunction varsUsedByOp(op) {\n    let slots;\n    switch (op.kind) {\n        case OpKind.Property:\n        case OpKind.HostProperty:\n        case OpKind.Attribute:\n            // All of these bindings use 1 variable slot, plus 1 slot for every interpolated expression,\n            // if any.\n            slots = 1;\n            if (op.expression instanceof Interpolation && !isSingletonInterpolation(op.expression)) {\n                slots += op.expression.expressions.length;\n            }\n            return slots;\n        case OpKind.StyleProp:\n        case OpKind.ClassProp:\n        case OpKind.StyleMap:\n        case OpKind.ClassMap:\n            // Style & class bindings use 2 variable slots, plus 1 slot for every interpolated expression,\n            // if any.\n            slots = 2;\n            if (op.expression instanceof Interpolation) {\n                slots += op.expression.expressions.length;\n            }\n            return slots;\n        case OpKind.InterpolateText:\n            // `ir.InterpolateTextOp`s use a variable slot for each dynamic expression.\n            return op.interpolation.expressions.length;\n        case OpKind.I18nExpression:\n        case OpKind.Conditional:\n        case OpKind.DeferWhen:\n            return 1;\n        case OpKind.RepeaterCreate:\n            // Repeaters may require an extra variable binding slot, if they have an empty view, for the\n            // empty block tracking.\n            // TODO: It's a bit odd to have a create mode instruction consume variable slots. Maybe we can\n            // find a way to use the Repeater update op instead.\n            return op.emptyView ? 1 : 0;\n        default:\n            throw new Error(`Unhandled op: ${OpKind[op.kind]}`);\n    }\n}\nfunction varsUsedByIrExpression(expr) {\n    switch (expr.kind) {\n        case ExpressionKind.PureFunctionExpr:\n            return 1 + expr.args.length;\n        case ExpressionKind.PipeBinding:\n            return 1 + expr.args.length;\n        case ExpressionKind.PipeBindingVariadic:\n            return 1 + expr.numArgs;\n        default:\n            throw new Error(`AssertionError: unhandled ConsumesVarsTrait expression ${expr.constructor.name}`);\n    }\n}\nfunction isSingletonInterpolation(expr) {\n    if (expr.expressions.length !== 1 || expr.strings.length !== 2) {\n        return false;\n    }\n    if (expr.strings[0] !== '' || expr.strings[1] !== '') {\n        return false;\n    }\n    return true;\n}\n\n/**\n * Optimize variables declared and used in the IR.\n *\n * Variables are eagerly generated by pipeline stages for all possible values that could be\n * referenced. This stage processes the list of declared variables and all variable usages,\n * and optimizes where possible. It performs 3 main optimizations:\n *\n *   * It transforms variable declarations to side effectful expressions when the\n *     variable is not used, but its initializer has global effects which other\n *     operations rely upon.\n *   * It removes variable declarations if those variables are not referenced and\n *     either they do not have global effects, or nothing relies on them.\n *   * It inlines variable declarations when those variables are only used once\n *     and the inlining is semantically safe.\n *\n * To guarantee correctness, analysis of \"fences\" in the instruction lists is used to determine\n * which optimizations are safe to perform.\n */\nfunction optimizeVariables(job) {\n    for (const unit of job.units) {\n        inlineAlwaysInlineVariables(unit.create);\n        inlineAlwaysInlineVariables(unit.update);\n        for (const op of unit.create) {\n            if (op.kind === OpKind.Listener) {\n                inlineAlwaysInlineVariables(op.handlerOps);\n            }\n        }\n        optimizeVariablesInOpList(unit.create, job.compatibility);\n        optimizeVariablesInOpList(unit.update, job.compatibility);\n        for (const op of unit.create) {\n            if (op.kind === OpKind.Listener) {\n                optimizeVariablesInOpList(op.handlerOps, job.compatibility);\n            }\n        }\n    }\n}\n/**\n * A [fence](https://en.wikipedia.org/wiki/Memory_barrier) flag for an expression which indicates\n * how that expression can be optimized in relation to other expressions or instructions.\n *\n * `Fence`s are a bitfield, so multiple flags may be set on a single expression.\n */\nvar Fence;\n(function (Fence) {\n    /**\n     * Empty flag (no fence exists).\n     */\n    Fence[Fence[\"None\"] = 0] = \"None\";\n    /**\n     * A context read fence, meaning that the expression in question reads from the \"current view\"\n     * context of the runtime.\n     */\n    Fence[Fence[\"ViewContextRead\"] = 1] = \"ViewContextRead\";\n    /**\n     * A context write fence, meaning that the expression in question writes to the \"current view\"\n     * context of the runtime.\n     *\n     * Note that all `ContextWrite` fences are implicitly `ContextRead` fences as operations which\n     * change the view context do so based on the current one.\n     */\n    Fence[Fence[\"ViewContextWrite\"] = 2] = \"ViewContextWrite\";\n    /**\n     * Indicates that a call is required for its side-effects, even if nothing reads its result.\n     *\n     * This is also true of `ViewContextWrite` operations **if** they are followed by a\n     * `ViewContextRead`.\n     */\n    Fence[Fence[\"SideEffectful\"] = 4] = \"SideEffectful\";\n})(Fence || (Fence = {}));\nfunction inlineAlwaysInlineVariables(ops) {\n    const vars = new Map();\n    for (const op of ops) {\n        if (op.kind === OpKind.Variable && op.flags & VariableFlags.AlwaysInline) {\n            visitExpressionsInOp(op, expr => {\n                if (isIrExpression(expr) && fencesForIrExpression(expr) !== Fence.None) {\n                    throw new Error(`AssertionError: A context-sensitive variable was marked AlwaysInline`);\n                }\n            });\n            vars.set(op.xref, op);\n        }\n        transformExpressionsInOp(op, expr => {\n            if (expr instanceof ReadVariableExpr && vars.has(expr.xref)) {\n                const varOp = vars.get(expr.xref);\n                // Inline by cloning, because we might inline into multiple places.\n                return varOp.initializer.clone();\n            }\n            return expr;\n        }, VisitorContextFlag.None);\n    }\n    for (const op of vars.values()) {\n        OpList.remove(op);\n    }\n}\n/**\n * Process a list of operations and optimize variables within that list.\n */\nfunction optimizeVariablesInOpList(ops, compatibility) {\n    const varDecls = new Map();\n    const varUsages = new Map();\n    // Track variables that are used outside of the immediate operation list. For example, within\n    // `ListenerOp` handler operations of listeners in the current operation list.\n    const varRemoteUsages = new Set();\n    const opMap = new Map();\n    // First, extract information about variables declared or used within the whole list.\n    for (const op of ops) {\n        if (op.kind === OpKind.Variable) {\n            if (varDecls.has(op.xref) || varUsages.has(op.xref)) {\n                throw new Error(`Should not see two declarations of the same variable: ${op.xref}`);\n            }\n            varDecls.set(op.xref, op);\n            varUsages.set(op.xref, 0);\n        }\n        opMap.set(op, collectOpInfo(op));\n        countVariableUsages(op, varUsages, varRemoteUsages);\n    }\n    // The next step is to remove any variable declarations for variables that aren't used. The\n    // variable initializer expressions may be side-effectful, so they may need to be retained as\n    // expression statements.\n    // Track whether we've seen an operation which reads from the view context yet. This is used to\n    // determine whether a write to the view context in a variable initializer can be observed.\n    let contextIsUsed = false;\n    // Note that iteration through the list happens in reverse, which guarantees that we'll process\n    // all reads of a variable prior to processing its declaration.\n    for (const op of ops.reversed()) {\n        const opInfo = opMap.get(op);\n        if (op.kind === OpKind.Variable && varUsages.get(op.xref) === 0) {\n            // This variable is unused and can be removed. We might need to keep the initializer around,\n            // though, if something depends on it running.\n            if ((contextIsUsed && opInfo.fences & Fence.ViewContextWrite) ||\n                (opInfo.fences & Fence.SideEffectful)) {\n                // This variable initializer has a side effect which must be retained. Either:\n                //  * it writes to the view context, and we know there is a future operation which depends\n                //    on that write, or\n                //  * it's an operation which is inherently side-effectful.\n                // We can't remove the initializer, but we can remove the variable declaration itself and\n                // replace it with a side-effectful statement.\n                const stmtOp = createStatementOp(op.initializer.toStmt());\n                opMap.set(stmtOp, opInfo);\n                OpList.replace(op, stmtOp);\n            }\n            else {\n                // It's safe to delete this entire variable declaration as nothing depends on it, even\n                // side-effectfully. Note that doing this might make other variables unused. Since we're\n                // iterating in reverse order, we should always be processing usages before declarations\n                // and therefore by the time we get to a declaration, all removable usages will have been\n                // removed.\n                uncountVariableUsages(op, varUsages);\n                OpList.remove(op);\n            }\n            opMap.delete(op);\n            varDecls.delete(op.xref);\n            varUsages.delete(op.xref);\n            continue;\n        }\n        // Does this operation depend on the view context?\n        if (opInfo.fences & Fence.ViewContextRead) {\n            contextIsUsed = true;\n        }\n    }\n    // Next, inline any remaining variables with exactly one usage.\n    const toInline = [];\n    for (const [id, count] of varUsages) {\n        const decl = varDecls.get(id);\n        const varInfo = opMap.get(decl);\n        // We can inline variables that:\n        //  - are used exactly once, and\n        //  - are not used remotely\n        // OR\n        //  - are marked for always inlining\n        const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);\n        if (count !== 1 || isAlwaysInline) {\n            // We can't inline this variable as it's used more than once.\n            continue;\n        }\n        if (varRemoteUsages.has(id)) {\n            // This variable is used once, but across an operation boundary, so it can't be inlined.\n            continue;\n        }\n        toInline.push(id);\n    }\n    let candidate;\n    while (candidate = toInline.pop()) {\n        // We will attempt to inline this variable. If inlining fails (due to fences for example),\n        // no future operation will make inlining legal.\n        const decl = varDecls.get(candidate);\n        const varInfo = opMap.get(decl);\n        const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);\n        if (isAlwaysInline) {\n            throw new Error(`AssertionError: Found an 'AlwaysInline' variable after the always inlining pass.`);\n        }\n        // Scan operations following the variable declaration and look for the point where that variable\n        // is used. There should only be one usage given the precondition above.\n        for (let targetOp = decl.next; targetOp.kind !== OpKind.ListEnd; targetOp = targetOp.next) {\n            const opInfo = opMap.get(targetOp);\n            // Is the variable used in this operation?\n            if (opInfo.variablesUsed.has(candidate)) {\n                if (compatibility === CompatibilityMode.TemplateDefinitionBuilder &&\n                    !allowConservativeInlining(decl, targetOp)) {\n                    // We're in conservative mode, and this variable is not eligible for inlining into the\n                    // target operation in this mode.\n                    break;\n                }\n                // Yes, try to inline it. Inlining may not be successful if fences in this operation before\n                // the variable's usage cannot be safely crossed.\n                if (tryInlineVariableInitializer(candidate, decl.initializer, targetOp, varInfo.fences)) {\n                    // Inlining was successful! Update the tracking structures to reflect the inlined\n                    // variable.\n                    opInfo.variablesUsed.delete(candidate);\n                    // Add all variables used in the variable's initializer to its new usage site.\n                    for (const id of varInfo.variablesUsed) {\n                        opInfo.variablesUsed.add(id);\n                    }\n                    // Merge fences in the variable's initializer into its new usage site.\n                    opInfo.fences |= varInfo.fences;\n                    // Delete tracking info related to the declaration.\n                    varDecls.delete(candidate);\n                    varUsages.delete(candidate);\n                    opMap.delete(decl);\n                    // And finally, delete the original declaration from the operation list.\n                    OpList.remove(decl);\n                }\n                // Whether inlining succeeded or failed, we're done processing this variable.\n                break;\n            }\n            // If the variable is not used in this operation, then we'd need to inline across it. Check if\n            // that's safe to do.\n            if (!safeToInlinePastFences(opInfo.fences, varInfo.fences)) {\n                // We can't safely inline this variable beyond this operation, so don't proceed with\n                // inlining this variable.\n                break;\n            }\n        }\n    }\n}\n/**\n * Given an `ir.Expression`, returns the `Fence` flags for that expression type.\n */\nfunction fencesForIrExpression(expr) {\n    switch (expr.kind) {\n        case ExpressionKind.NextContext:\n            return Fence.ViewContextRead | Fence.ViewContextWrite;\n        case ExpressionKind.RestoreView:\n            return Fence.ViewContextRead | Fence.ViewContextWrite | Fence.SideEffectful;\n        case ExpressionKind.Reference:\n            return Fence.ViewContextRead;\n        default:\n            return Fence.None;\n    }\n}\n/**\n * Build the `OpInfo` structure for the given `op`. This performs two operations:\n *\n *  * It tracks which variables are used in the operation's expressions.\n *  * It rolls up fence flags for expressions within the operation.\n */\nfunction collectOpInfo(op) {\n    let fences = Fence.None;\n    const variablesUsed = new Set();\n    visitExpressionsInOp(op, expr => {\n        if (!isIrExpression(expr)) {\n            return;\n        }\n        switch (expr.kind) {\n            case ExpressionKind.ReadVariable:\n                variablesUsed.add(expr.xref);\n                break;\n            default:\n                fences |= fencesForIrExpression(expr);\n        }\n    });\n    return { fences, variablesUsed };\n}\n/**\n * Count the number of usages of each variable, being careful to track whether those usages are\n * local or remote.\n */\nfunction countVariableUsages(op, varUsages, varRemoteUsage) {\n    visitExpressionsInOp(op, (expr, flags) => {\n        if (!isIrExpression(expr)) {\n            return;\n        }\n        if (expr.kind !== ExpressionKind.ReadVariable) {\n            return;\n        }\n        const count = varUsages.get(expr.xref);\n        if (count === undefined) {\n            // This variable is declared outside the current scope of optimization.\n            return;\n        }\n        varUsages.set(expr.xref, count + 1);\n        if (flags & VisitorContextFlag.InChildOperation) {\n            varRemoteUsage.add(expr.xref);\n        }\n    });\n}\n/**\n * Remove usages of a variable in `op` from the `varUsages` tracking.\n */\nfunction uncountVariableUsages(op, varUsages) {\n    visitExpressionsInOp(op, expr => {\n        if (!isIrExpression(expr)) {\n            return;\n        }\n        if (expr.kind !== ExpressionKind.ReadVariable) {\n            return;\n        }\n        const count = varUsages.get(expr.xref);\n        if (count === undefined) {\n            // This variable is declared outside the current scope of optimization.\n            return;\n        }\n        else if (count === 0) {\n            throw new Error(`Inaccurate variable count: ${expr.xref} - found another read but count is already 0`);\n        }\n        varUsages.set(expr.xref, count - 1);\n    });\n}\n/**\n * Checks whether it's safe to inline a variable across a particular operation.\n *\n * @param fences the fences of the operation which the inlining will cross\n * @param declFences the fences of the variable being inlined.\n */\nfunction safeToInlinePastFences(fences, declFences) {\n    if (fences & Fence.ViewContextWrite) {\n        // It's not safe to inline context reads across context writes.\n        if (declFences & Fence.ViewContextRead) {\n            return false;\n        }\n    }\n    else if (fences & Fence.ViewContextRead) {\n        // It's not safe to inline context writes across context reads.\n        if (declFences & Fence.ViewContextWrite) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Attempt to inline the initializer of a variable into a target operation's expressions.\n *\n * This may or may not be safe to do. For example, the variable could be read following the\n * execution of an expression with fences that don't permit the variable to be inlined across them.\n */\nfunction tryInlineVariableInitializer(id, initializer, target, declFences) {\n    // We use `ir.transformExpressionsInOp` to walk the expressions and inline the variable if\n    // possible. Since this operation is callback-based, once inlining succeeds or fails we can't\n    // \"stop\" the expression processing, and have to keep track of whether inlining has succeeded or\n    // is no longer allowed.\n    let inlined = false;\n    let inliningAllowed = true;\n    transformExpressionsInOp(target, (expr, flags) => {\n        if (!isIrExpression(expr)) {\n            return expr;\n        }\n        if (inlined || !inliningAllowed) {\n            // Either the inlining has already succeeded, or we've passed a fence that disallows inlining\n            // at this point, so don't try.\n            return expr;\n        }\n        else if ((flags & VisitorContextFlag.InChildOperation) && (declFences & Fence.ViewContextRead)) {\n            // We cannot inline variables that are sensitive to the current context across operation\n            // boundaries.\n            return expr;\n        }\n        switch (expr.kind) {\n            case ExpressionKind.ReadVariable:\n                if (expr.xref === id) {\n                    // This is the usage site of the variable. Since nothing has disallowed inlining, it's\n                    // safe to inline the initializer here.\n                    inlined = true;\n                    return initializer;\n                }\n                break;\n            default:\n                // For other types of `ir.Expression`s, whether inlining is allowed depends on their fences.\n                const exprFences = fencesForIrExpression(expr);\n                inliningAllowed = inliningAllowed && safeToInlinePastFences(exprFences, declFences);\n                break;\n        }\n        return expr;\n    }, VisitorContextFlag.None);\n    return inlined;\n}\n/**\n * Determines whether inlining of `decl` should be allowed in \"conservative\" mode.\n *\n * In conservative mode, inlining behavior is limited to those operations which the\n * `TemplateDefinitionBuilder` supported, with the goal of producing equivalent output.\n */\nfunction allowConservativeInlining(decl, target) {\n    // TODO(alxhub): understand exactly how TemplateDefinitionBuilder approaches inlining, and record\n    // that behavior here.\n    switch (decl.variable.kind) {\n        case SemanticVariableKind.Identifier:\n            if (decl.initializer instanceof ReadVarExpr && decl.initializer.name === 'ctx') {\n                // Although TemplateDefinitionBuilder is cautious about inlining, we still want to do so\n                // when the variable is the context, to imitate its behavior with aliases in control flow\n                // blocks. This quirky behavior will become dead code once compatibility mode is no longer\n                // supported.\n                return true;\n            }\n            return false;\n        case SemanticVariableKind.Context:\n            // Context can only be inlined into other variables.\n            return target.kind === OpKind.Variable;\n        default:\n            return true;\n    }\n}\n\n/**\n * Wraps ICUs that do not already belong to an i18n block in a new i18n block.\n */\nfunction wrapI18nIcus(job) {\n    for (const unit of job.units) {\n        let currentI18nOp = null;\n        let addedI18nId = null;\n        for (const op of unit.create) {\n            switch (op.kind) {\n                case OpKind.I18nStart:\n                    currentI18nOp = op;\n                    break;\n                case OpKind.I18nEnd:\n                    currentI18nOp = null;\n                    break;\n                case OpKind.IcuStart:\n                    if (currentI18nOp === null) {\n                        addedI18nId = job.allocateXrefId();\n                        // ICU i18n start/end ops should not recieve source spans.\n                        OpList.insertBefore(createI18nStartOp(addedI18nId, op.message, undefined, null), op);\n                    }\n                    break;\n                case OpKind.IcuEnd:\n                    if (addedI18nId !== null) {\n                        OpList.insertAfter(createI18nEndOp(addedI18nId, null), op);\n                        addedI18nId = null;\n                    }\n                    break;\n            }\n        }\n    }\n}\n\n/**\n *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst phases = [\n    { kind: CompilationJobKind.Tmpl, fn: removeContentSelectors },\n    { kind: CompilationJobKind.Host, fn: parseHostStyleProperties },\n    { kind: CompilationJobKind.Tmpl, fn: emitNamespaceChanges },\n    { kind: CompilationJobKind.Tmpl, fn: propagateI18nBlocks },\n    { kind: CompilationJobKind.Tmpl, fn: wrapI18nIcus },\n    { kind: CompilationJobKind.Both, fn: deduplicateTextBindings },\n    { kind: CompilationJobKind.Both, fn: specializeStyleBindings },\n    { kind: CompilationJobKind.Both, fn: specializeBindings },\n    { kind: CompilationJobKind.Both, fn: extractAttributes },\n    { kind: CompilationJobKind.Tmpl, fn: createI18nContexts },\n    { kind: CompilationJobKind.Both, fn: parseExtractedStyles },\n    { kind: CompilationJobKind.Tmpl, fn: removeEmptyBindings },\n    { kind: CompilationJobKind.Both, fn: collapseSingletonInterpolations },\n    { kind: CompilationJobKind.Both, fn: orderOps },\n    { kind: CompilationJobKind.Tmpl, fn: generateConditionalExpressions },\n    { kind: CompilationJobKind.Tmpl, fn: createPipes },\n    { kind: CompilationJobKind.Tmpl, fn: configureDeferInstructions },\n    { kind: CompilationJobKind.Tmpl, fn: convertI18nText },\n    { kind: CompilationJobKind.Tmpl, fn: convertI18nBindings },\n    { kind: CompilationJobKind.Tmpl, fn: removeUnusedI18nAttributesOps },\n    { kind: CompilationJobKind.Tmpl, fn: assignI18nSlotDependencies },\n    { kind: CompilationJobKind.Tmpl, fn: applyI18nExpressions },\n    { kind: CompilationJobKind.Tmpl, fn: createVariadicPipes },\n    { kind: CompilationJobKind.Both, fn: generatePureLiteralStructures },\n    { kind: CompilationJobKind.Tmpl, fn: generateProjectionDefs },\n    { kind: CompilationJobKind.Tmpl, fn: generateVariables },\n    { kind: CompilationJobKind.Tmpl, fn: saveAndRestoreView },\n    { kind: CompilationJobKind.Both, fn: deleteAnyCasts },\n    { kind: CompilationJobKind.Both, fn: resolveDollarEvent },\n    { kind: CompilationJobKind.Tmpl, fn: generateTrackVariables },\n    { kind: CompilationJobKind.Both, fn: resolveNames },\n    { kind: CompilationJobKind.Tmpl, fn: resolveDeferTargetNames },\n    { kind: CompilationJobKind.Tmpl, fn: optimizeTrackFns },\n    { kind: CompilationJobKind.Both, fn: resolveContexts },\n    { kind: CompilationJobKind.Both, fn: resolveSanitizers },\n    { kind: CompilationJobKind.Tmpl, fn: liftLocalRefs },\n    { kind: CompilationJobKind.Both, fn: generateNullishCoalesceExpressions },\n    { kind: CompilationJobKind.Both, fn: expandSafeReads },\n    { kind: CompilationJobKind.Both, fn: generateTemporaryVariables },\n    { kind: CompilationJobKind.Tmpl, fn: allocateSlots },\n    { kind: CompilationJobKind.Tmpl, fn: createDeferDepsFns },\n    { kind: CompilationJobKind.Tmpl, fn: resolveI18nElementPlaceholders },\n    { kind: CompilationJobKind.Tmpl, fn: resolveI18nExpressionPlaceholders },\n    { kind: CompilationJobKind.Tmpl, fn: extractI18nMessages },\n    { kind: CompilationJobKind.Tmpl, fn: generateTrackFns },\n    { kind: CompilationJobKind.Tmpl, fn: collectI18nConsts },\n    { kind: CompilationJobKind.Tmpl, fn: collectConstExpressions },\n    { kind: CompilationJobKind.Both, fn: collectElementConsts },\n    { kind: CompilationJobKind.Tmpl, fn: removeI18nContexts },\n    { kind: CompilationJobKind.Both, fn: countVariables },\n    { kind: CompilationJobKind.Tmpl, fn: generateAdvance },\n    { kind: CompilationJobKind.Both, fn: optimizeVariables },\n    { kind: CompilationJobKind.Both, fn: nameFunctionsAndVariables },\n    { kind: CompilationJobKind.Tmpl, fn: mergeNextContextExpressions },\n    { kind: CompilationJobKind.Tmpl, fn: generateNgContainerOps },\n    { kind: CompilationJobKind.Tmpl, fn: collapseEmptyInstructions },\n    { kind: CompilationJobKind.Tmpl, fn: disableBindings$1 },\n    { kind: CompilationJobKind.Both, fn: extractPureFunctions },\n    { kind: CompilationJobKind.Both, fn: reify },\n    { kind: CompilationJobKind.Both, fn: chain },\n];\n/**\n * Run all transformation phases in the correct order against a compilation job. After this\n * processing, the compilation should be in a state where it can be emitted.\n */\nfunction transform(job, kind) {\n    for (const phase of phases) {\n        if (phase.kind === kind || phase.kind === CompilationJobKind.Both) {\n            // The type of `Phase` above ensures it is impossible to call a phase that doesn't support the\n            // job kind.\n            phase.fn(job);\n        }\n    }\n}\n/**\n * Compile all views in the given `ComponentCompilation` into the final template function, which may\n * reference constants defined in a `ConstantPool`.\n */\nfunction emitTemplateFn(tpl, pool) {\n    const rootFn = emitView(tpl.root);\n    emitChildViews(tpl.root, pool);\n    return rootFn;\n}\nfunction emitChildViews(parent, pool) {\n    for (const unit of parent.job.units) {\n        if (unit.parent !== parent.xref) {\n            continue;\n        }\n        // Child views are emitted depth-first.\n        emitChildViews(unit, pool);\n        const viewFn = emitView(unit);\n        pool.statements.push(viewFn.toDeclStmt(viewFn.name));\n    }\n}\n/**\n * Emit a template function for an individual `ViewCompilation` (which may be either the root view\n * or an embedded view).\n */\nfunction emitView(view) {\n    if (view.fnName === null) {\n        throw new Error(`AssertionError: view ${view.xref} is unnamed`);\n    }\n    const createStatements = [];\n    for (const op of view.create) {\n        if (op.kind !== OpKind.Statement) {\n            throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op.kind]}`);\n        }\n        createStatements.push(op.statement);\n    }\n    const updateStatements = [];\n    for (const op of view.update) {\n        if (op.kind !== OpKind.Statement) {\n            throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op.kind]}`);\n        }\n        updateStatements.push(op.statement);\n    }\n    const createCond = maybeGenerateRfBlock(1, createStatements);\n    const updateCond = maybeGenerateRfBlock(2, updateStatements);\n    return fn([\n        new FnParam('rf'),\n        new FnParam('ctx'),\n    ], [\n        ...createCond,\n        ...updateCond,\n    ], \n    /* type */ undefined, /* sourceSpan */ undefined, view.fnName);\n}\nfunction maybeGenerateRfBlock(flag, statements) {\n    if (statements.length === 0) {\n        return [];\n    }\n    return [\n        ifStmt(new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, variable('rf'), literal(flag)), statements),\n    ];\n}\nfunction emitHostBindingFunction(job) {\n    if (job.root.fnName === null) {\n        throw new Error(`AssertionError: host binding function is unnamed`);\n    }\n    const createStatements = [];\n    for (const op of job.root.create) {\n        if (op.kind !== OpKind.Statement) {\n            throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op.kind]}`);\n        }\n        createStatements.push(op.statement);\n    }\n    const updateStatements = [];\n    for (const op of job.root.update) {\n        if (op.kind !== OpKind.Statement) {\n            throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op.kind]}`);\n        }\n        updateStatements.push(op.statement);\n    }\n    if (createStatements.length === 0 && updateStatements.length === 0) {\n        return null;\n    }\n    const createCond = maybeGenerateRfBlock(1, createStatements);\n    const updateCond = maybeGenerateRfBlock(2, updateStatements);\n    return fn([\n        new FnParam('rf'),\n        new FnParam('ctx'),\n    ], [\n        ...createCond,\n        ...updateCond,\n    ], \n    /* type */ undefined, /* sourceSpan */ undefined, job.root.fnName);\n}\n\nconst compatibilityMode = CompatibilityMode.TemplateDefinitionBuilder;\n// Schema containing DOM elements and their properties.\nconst domSchema = new DomElementSchemaRegistry();\n// Tag name of the `ng-template` element.\nconst NG_TEMPLATE_TAG_NAME$1 = 'ng-template';\n/**\n * Process a template AST and convert it into a `ComponentCompilation` in the intermediate\n * representation.\n * TODO: Refactor more of the ingestion code into phases.\n */\nfunction ingestComponent(componentName, template, constantPool, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta) {\n    const job = new ComponentCompilationJob(componentName, constantPool, compatibilityMode, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta);\n    ingestNodes(job.root, template);\n    return job;\n}\n/**\n * Process a host binding AST and convert it into a `HostBindingCompilationJob` in the intermediate\n * representation.\n */\nfunction ingestHostBinding(input, bindingParser, constantPool) {\n    const job = new HostBindingCompilationJob(input.componentName, constantPool, compatibilityMode);\n    for (const property of input.properties ?? []) {\n        let bindingKind = BindingKind.Property;\n        // TODO: this should really be handled in the parser.\n        if (property.name.startsWith('attr.')) {\n            property.name = property.name.substring('attr.'.length);\n            bindingKind = BindingKind.Attribute;\n        }\n        if (property.isAnimation) {\n            bindingKind = BindingKind.Animation;\n        }\n        const securityContexts = bindingParser\n            .calcPossibleSecurityContexts(input.componentSelector, property.name, bindingKind === BindingKind.Attribute)\n            .filter(context => context !== SecurityContext.NONE);\n        ingestHostProperty(job, property, bindingKind, securityContexts);\n    }\n    for (const [name, expr] of Object.entries(input.attributes) ?? []) {\n        const securityContexts = bindingParser.calcPossibleSecurityContexts(input.componentSelector, name, true)\n            .filter(context => context !== SecurityContext.NONE);\n        ingestHostAttribute(job, name, expr, securityContexts);\n    }\n    for (const event of input.events ?? []) {\n        ingestHostEvent(job, event);\n    }\n    return job;\n}\n// TODO: We should refactor the parser to use the same types and structures for host bindings as\n// with ordinary components. This would allow us to share a lot more ingestion code.\nfunction ingestHostProperty(job, property, bindingKind, securityContexts) {\n    let expression;\n    const ast = property.expression.ast;\n    if (ast instanceof Interpolation$1) {\n        expression = new Interpolation(ast.strings, ast.expressions.map(expr => convertAst(expr, job, property.sourceSpan)), []);\n    }\n    else {\n        expression = convertAst(ast, job, property.sourceSpan);\n    }\n    job.root.update.push(createBindingOp(job.root.xref, bindingKind, property.name, expression, null, securityContexts, false, false, null, /* TODO: How do Host bindings handle i18n attrs? */ null, property.sourceSpan));\n}\nfunction ingestHostAttribute(job, name, value, securityContexts) {\n    const attrBinding = createBindingOp(job.root.xref, BindingKind.Attribute, name, value, null, securityContexts, \n    /* Host attributes should always be extracted to const hostAttrs, even if they are not\n     *strictly* text literals */\n    true, false, null, \n    /* TODO */ null, \n    /** TODO: May be null? */ value.sourceSpan);\n    job.root.update.push(attrBinding);\n}\nfunction ingestHostEvent(job, event) {\n    const [phase, target] = event.type === 0 /* e.ParsedEventType.Regular */ ? [null, event.targetOrPhase] :\n        [event.targetOrPhase, null];\n    const eventBinding = createListenerOp(job.root.xref, new SlotHandle(), event.name, null, makeListenerHandlerOps(job.root, event.handler, event.handlerSpan), phase, target, true, event.sourceSpan);\n    job.root.create.push(eventBinding);\n}\n/**\n * Ingest the nodes of a template AST into the given `ViewCompilation`.\n */\nfunction ingestNodes(unit, template) {\n    for (const node of template) {\n        if (node instanceof Element$1) {\n            ingestElement(unit, node);\n        }\n        else if (node instanceof Template) {\n            ingestTemplate(unit, node);\n        }\n        else if (node instanceof Content) {\n            ingestContent(unit, node);\n        }\n        else if (node instanceof Text$3) {\n            ingestText(unit, node, null);\n        }\n        else if (node instanceof BoundText) {\n            ingestBoundText(unit, node, null);\n        }\n        else if (node instanceof IfBlock) {\n            ingestIfBlock(unit, node);\n        }\n        else if (node instanceof SwitchBlock) {\n            ingestSwitchBlock(unit, node);\n        }\n        else if (node instanceof DeferredBlock) {\n            ingestDeferBlock(unit, node);\n        }\n        else if (node instanceof Icu$1) {\n            ingestIcu(unit, node);\n        }\n        else if (node instanceof ForLoopBlock) {\n            ingestForBlock(unit, node);\n        }\n        else {\n            throw new Error(`Unsupported template node: ${node.constructor.name}`);\n        }\n    }\n}\n/**\n * Ingest an element AST from the template into the given `ViewCompilation`.\n */\nfunction ingestElement(unit, element) {\n    if (element.i18n !== undefined &&\n        !(element.i18n instanceof Message || element.i18n instanceof TagPlaceholder)) {\n        throw Error(`Unhandled i18n metadata type for element: ${element.i18n.constructor.name}`);\n    }\n    const id = unit.job.allocateXrefId();\n    const [namespaceKey, elementName] = splitNsName(element.name);\n    const startOp = createElementStartOp(elementName, id, namespaceForKey(namespaceKey), element.i18n instanceof TagPlaceholder ? element.i18n : undefined, element.startSourceSpan, element.sourceSpan);\n    unit.create.push(startOp);\n    ingestElementBindings(unit, startOp, element);\n    ingestReferences(startOp, element);\n    // Start i18n, if needed, goes after the element create and bindings, but before the nodes\n    let i18nBlockId = null;\n    if (element.i18n instanceof Message) {\n        i18nBlockId = unit.job.allocateXrefId();\n        unit.create.push(createI18nStartOp(i18nBlockId, element.i18n, undefined, element.startSourceSpan));\n    }\n    ingestNodes(unit, element.children);\n    // The source span for the end op is typically the element closing tag. However, if no closing tag\n    // exists, such as in `<input>`, we use the start source span instead. Usually the start and end\n    // instructions will be collapsed into one `element` instruction, negating the purpose of this\n    // fallback, but in cases when it is not collapsed (such as an input with a binding), we still\n    // want to map the end instruction to the main element.\n    const endOp = createElementEndOp(id, element.endSourceSpan ?? element.startSourceSpan);\n    unit.create.push(endOp);\n    // If there is an i18n message associated with this element, insert i18n start and end ops.\n    if (i18nBlockId !== null) {\n        OpList.insertBefore(createI18nEndOp(i18nBlockId, element.endSourceSpan ?? element.startSourceSpan), endOp);\n    }\n}\n/**\n * Ingest an `ng-template` node from the AST into the given `ViewCompilation`.\n */\nfunction ingestTemplate(unit, tmpl) {\n    if (tmpl.i18n !== undefined &&\n        !(tmpl.i18n instanceof Message || tmpl.i18n instanceof TagPlaceholder)) {\n        throw Error(`Unhandled i18n metadata type for template: ${tmpl.i18n.constructor.name}`);\n    }\n    const childView = unit.job.allocateView(unit.xref);\n    let tagNameWithoutNamespace = tmpl.tagName;\n    let namespacePrefix = '';\n    if (tmpl.tagName) {\n        [namespacePrefix, tagNameWithoutNamespace] = splitNsName(tmpl.tagName);\n    }\n    const i18nPlaceholder = tmpl.i18n instanceof TagPlaceholder ? tmpl.i18n : undefined;\n    const namespace = namespaceForKey(namespacePrefix);\n    const functionNameSuffix = tagNameWithoutNamespace === null ?\n        '' :\n        prefixWithNamespace(tagNameWithoutNamespace, namespace);\n    const templateKind = isPlainTemplate(tmpl) ? TemplateKind.NgTemplate : TemplateKind.Structural;\n    const templateOp = createTemplateOp(childView.xref, templateKind, tagNameWithoutNamespace, functionNameSuffix, namespace, i18nPlaceholder, tmpl.startSourceSpan, tmpl.sourceSpan);\n    unit.create.push(templateOp);\n    ingestTemplateBindings(unit, templateOp, tmpl, templateKind);\n    ingestReferences(templateOp, tmpl);\n    ingestNodes(childView, tmpl.children);\n    for (const { name, value } of tmpl.variables) {\n        childView.contextVariables.set(name, value !== '' ? value : '$implicit');\n    }\n    // If this is a plain template and there is an i18n message associated with it, insert i18n start\n    // and end ops. For structural directive templates, the i18n ops will be added when ingesting the\n    // element/template the directive is placed on.\n    if (templateKind === TemplateKind.NgTemplate && tmpl.i18n instanceof Message) {\n        const id = unit.job.allocateXrefId();\n        OpList.insertAfter(createI18nStartOp(id, tmpl.i18n, undefined, tmpl.startSourceSpan), childView.create.head);\n        OpList.insertBefore(createI18nEndOp(id, tmpl.endSourceSpan ?? tmpl.startSourceSpan), childView.create.tail);\n    }\n}\n/**\n * Ingest a content node from the AST into the given `ViewCompilation`.\n */\nfunction ingestContent(unit, content) {\n    if (content.i18n !== undefined && !(content.i18n instanceof TagPlaceholder)) {\n        throw Error(`Unhandled i18n metadata type for element: ${content.i18n.constructor.name}`);\n    }\n    const op = createProjectionOp(unit.job.allocateXrefId(), content.selector, content.i18n, content.sourceSpan);\n    for (const attr of content.attributes) {\n        const securityContext = domSchema.securityContext(content.name, attr.name, true);\n        unit.update.push(createBindingOp(op.xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));\n    }\n    unit.create.push(op);\n}\n/**\n * Ingest a literal text node from the AST into the given `ViewCompilation`.\n */\nfunction ingestText(unit, text, icuPlaceholder) {\n    unit.create.push(createTextOp(unit.job.allocateXrefId(), text.value, icuPlaceholder, text.sourceSpan));\n}\n/**\n * Ingest an interpolated text node from the AST into the given `ViewCompilation`.\n */\nfunction ingestBoundText(unit, text, icuPlaceholder) {\n    let value = text.value;\n    if (value instanceof ASTWithSource) {\n        value = value.ast;\n    }\n    if (!(value instanceof Interpolation$1)) {\n        throw new Error(`AssertionError: expected Interpolation for BoundText node, got ${value.constructor.name}`);\n    }\n    if (text.i18n !== undefined && !(text.i18n instanceof Container)) {\n        throw Error(`Unhandled i18n metadata type for text interpolation: ${text.i18n?.constructor.name}`);\n    }\n    const i18nPlaceholders = text.i18n instanceof Container ?\n        text.i18n.children\n            .filter((node) => node instanceof Placeholder)\n            .map(placeholder => placeholder.name) :\n        [];\n    if (i18nPlaceholders.length > 0 && i18nPlaceholders.length !== value.expressions.length) {\n        throw Error(`Unexpected number of i18n placeholders (${value.expressions.length}) for BoundText with ${value.expressions.length} expressions`);\n    }\n    const textXref = unit.job.allocateXrefId();\n    unit.create.push(createTextOp(textXref, '', icuPlaceholder, text.sourceSpan));\n    // TemplateDefinitionBuilder does not generate source maps for sub-expressions inside an\n    // interpolation. We copy that behavior in compatibility mode.\n    // TODO: is it actually correct to generate these extra maps in modern mode?\n    const baseSourceSpan = unit.job.compatibility ? null : text.sourceSpan;\n    unit.update.push(createInterpolateTextOp(textXref, new Interpolation(value.strings, value.expressions.map(expr => convertAst(expr, unit.job, baseSourceSpan)), i18nPlaceholders), text.sourceSpan));\n}\n/**\n * Ingest an `@if` block into the given `ViewCompilation`.\n */\nfunction ingestIfBlock(unit, ifBlock) {\n    let firstXref = null;\n    let firstSlotHandle = null;\n    let conditions = [];\n    for (let i = 0; i < ifBlock.branches.length; i++) {\n        const ifCase = ifBlock.branches[i];\n        const cView = unit.job.allocateView(unit.xref);\n        let tagName = null;\n        // Only the first branch can be used for projection, because the conditional\n        // uses the container of the first branch as the insertion point for all branches.\n        if (i === 0) {\n            tagName = ingestControlFlowInsertionPoint(unit, cView.xref, ifCase);\n        }\n        if (ifCase.expressionAlias !== null) {\n            cView.contextVariables.set(ifCase.expressionAlias.name, CTX_REF);\n        }\n        let ifCaseI18nMeta = undefined;\n        if (ifCase.i18n !== undefined) {\n            if (!(ifCase.i18n instanceof BlockPlaceholder)) {\n                throw Error(`Unhandled i18n metadata type for if block: ${ifCase.i18n?.constructor.name}`);\n            }\n            ifCaseI18nMeta = ifCase.i18n;\n        }\n        const templateOp = createTemplateOp(cView.xref, TemplateKind.Block, tagName, 'Conditional', Namespace.HTML, ifCaseI18nMeta, ifCase.startSourceSpan, ifCase.sourceSpan);\n        unit.create.push(templateOp);\n        if (firstXref === null) {\n            firstXref = cView.xref;\n            firstSlotHandle = templateOp.handle;\n        }\n        const caseExpr = ifCase.expression ? convertAst(ifCase.expression, unit.job, null) : null;\n        const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, templateOp.xref, templateOp.handle, ifCase.expressionAlias);\n        conditions.push(conditionalCaseExpr);\n        ingestNodes(cView, ifCase.children);\n    }\n    const conditional = createConditionalOp(firstXref, firstSlotHandle, null, conditions, ifBlock.sourceSpan);\n    unit.update.push(conditional);\n}\n/**\n * Ingest an `@switch` block into the given `ViewCompilation`.\n */\nfunction ingestSwitchBlock(unit, switchBlock) {\n    // Don't ingest empty switches since they won't render anything.\n    if (switchBlock.cases.length === 0) {\n        return;\n    }\n    let firstXref = null;\n    let firstSlotHandle = null;\n    let conditions = [];\n    for (const switchCase of switchBlock.cases) {\n        const cView = unit.job.allocateView(unit.xref);\n        let switchCaseI18nMeta = undefined;\n        if (switchCase.i18n !== undefined) {\n            if (!(switchCase.i18n instanceof BlockPlaceholder)) {\n                throw Error(`Unhandled i18n metadata type for switch block: ${switchCase.i18n?.constructor.name}`);\n            }\n            switchCaseI18nMeta = switchCase.i18n;\n        }\n        const templateOp = createTemplateOp(cView.xref, TemplateKind.Block, null, 'Case', Namespace.HTML, switchCaseI18nMeta, switchCase.startSourceSpan, switchCase.sourceSpan);\n        unit.create.push(templateOp);\n        if (firstXref === null) {\n            firstXref = cView.xref;\n            firstSlotHandle = templateOp.handle;\n        }\n        const caseExpr = switchCase.expression ?\n            convertAst(switchCase.expression, unit.job, switchBlock.startSourceSpan) :\n            null;\n        const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, templateOp.xref, templateOp.handle);\n        conditions.push(conditionalCaseExpr);\n        ingestNodes(cView, switchCase.children);\n    }\n    const conditional = createConditionalOp(firstXref, firstSlotHandle, convertAst(switchBlock.expression, unit.job, null), conditions, switchBlock.sourceSpan);\n    unit.update.push(conditional);\n}\nfunction ingestDeferView(unit, suffix, i18nMeta, children, sourceSpan) {\n    if (i18nMeta !== undefined && !(i18nMeta instanceof BlockPlaceholder)) {\n        throw Error('Unhandled i18n metadata type for defer block');\n    }\n    if (children === undefined) {\n        return null;\n    }\n    const secondaryView = unit.job.allocateView(unit.xref);\n    ingestNodes(secondaryView, children);\n    const templateOp = createTemplateOp(secondaryView.xref, TemplateKind.Block, null, `Defer${suffix}`, Namespace.HTML, i18nMeta, sourceSpan, sourceSpan);\n    unit.create.push(templateOp);\n    return templateOp;\n}\nfunction ingestDeferBlock(unit, deferBlock) {\n    const blockMeta = unit.job.deferBlocksMeta.get(deferBlock);\n    if (blockMeta === undefined) {\n        throw new Error(`AssertionError: unable to find metadata for deferred block`);\n    }\n    // Generate the defer main view and all secondary views.\n    const main = ingestDeferView(unit, '', deferBlock.i18n, deferBlock.children, deferBlock.sourceSpan);\n    const loading = ingestDeferView(unit, 'Loading', deferBlock.loading?.i18n, deferBlock.loading?.children, deferBlock.loading?.sourceSpan);\n    const placeholder = ingestDeferView(unit, 'Placeholder', deferBlock.placeholder?.i18n, deferBlock.placeholder?.children, deferBlock.placeholder?.sourceSpan);\n    const error = ingestDeferView(unit, 'Error', deferBlock.error?.i18n, deferBlock.error?.children, deferBlock.error?.sourceSpan);\n    // Create the main defer op, and ops for all secondary views.\n    const deferXref = unit.job.allocateXrefId();\n    const deferOp = createDeferOp(deferXref, main.xref, main.handle, blockMeta, deferBlock.sourceSpan);\n    deferOp.placeholderView = placeholder?.xref ?? null;\n    deferOp.placeholderSlot = placeholder?.handle ?? null;\n    deferOp.loadingSlot = loading?.handle ?? null;\n    deferOp.errorSlot = error?.handle ?? null;\n    deferOp.placeholderMinimumTime = deferBlock.placeholder?.minimumTime ?? null;\n    deferOp.loadingMinimumTime = deferBlock.loading?.minimumTime ?? null;\n    deferOp.loadingAfterTime = deferBlock.loading?.afterTime ?? null;\n    unit.create.push(deferOp);\n    // Configure all defer `on` conditions.\n    // TODO: refactor prefetch triggers to use a separate op type, with a shared superclass. This will\n    // make it easier to refactor prefetch behavior in the future.\n    let prefetch = false;\n    let deferOnOps = [];\n    let deferWhenOps = [];\n    for (const triggers of [deferBlock.triggers, deferBlock.prefetchTriggers]) {\n        if (triggers.idle !== undefined) {\n            const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Idle }, prefetch, triggers.idle.sourceSpan);\n            deferOnOps.push(deferOnOp);\n        }\n        if (triggers.immediate !== undefined) {\n            const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Immediate }, prefetch, triggers.immediate.sourceSpan);\n            deferOnOps.push(deferOnOp);\n        }\n        if (triggers.timer !== undefined) {\n            const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Timer, delay: triggers.timer.delay }, prefetch, triggers.timer.sourceSpan);\n            deferOnOps.push(deferOnOp);\n        }\n        if (triggers.hover !== undefined) {\n            const deferOnOp = createDeferOnOp(deferXref, {\n                kind: DeferTriggerKind.Hover,\n                targetName: triggers.hover.reference,\n                targetXref: null,\n                targetSlot: null,\n                targetView: null,\n                targetSlotViewSteps: null,\n            }, prefetch, triggers.hover.sourceSpan);\n            deferOnOps.push(deferOnOp);\n        }\n        if (triggers.interaction !== undefined) {\n            const deferOnOp = createDeferOnOp(deferXref, {\n                kind: DeferTriggerKind.Interaction,\n                targetName: triggers.interaction.reference,\n                targetXref: null,\n                targetSlot: null,\n                targetView: null,\n                targetSlotViewSteps: null,\n            }, prefetch, triggers.interaction.sourceSpan);\n            deferOnOps.push(deferOnOp);\n        }\n        if (triggers.viewport !== undefined) {\n            const deferOnOp = createDeferOnOp(deferXref, {\n                kind: DeferTriggerKind.Viewport,\n                targetName: triggers.viewport.reference,\n                targetXref: null,\n                targetSlot: null,\n                targetView: null,\n                targetSlotViewSteps: null,\n            }, prefetch, triggers.viewport.sourceSpan);\n            deferOnOps.push(deferOnOp);\n        }\n        if (triggers.when !== undefined) {\n            if (triggers.when.value instanceof Interpolation$1) {\n                // TemplateDefinitionBuilder supports this case, but it's very strange to me. What would it\n                // even mean?\n                throw new Error(`Unexpected interpolation in defer block when trigger`);\n            }\n            const deferOnOp = createDeferWhenOp(deferXref, convertAst(triggers.when.value, unit.job, triggers.when.sourceSpan), prefetch, triggers.when.sourceSpan);\n            deferWhenOps.push(deferOnOp);\n        }\n        // If no (non-prefetching) defer triggers were provided, default to `idle`.\n        if (deferOnOps.length === 0 && deferWhenOps.length === 0) {\n            deferOnOps.push(createDeferOnOp(deferXref, { kind: DeferTriggerKind.Idle }, false, null));\n        }\n        prefetch = true;\n    }\n    unit.create.push(deferOnOps);\n    unit.update.push(deferWhenOps);\n}\nfunction ingestIcu(unit, icu) {\n    if (icu.i18n instanceof Message && isSingleI18nIcu(icu.i18n)) {\n        const xref = unit.job.allocateXrefId();\n        const icuNode = icu.i18n.nodes[0];\n        unit.create.push(createIcuStartOp(xref, icu.i18n, icuFromI18nMessage(icu.i18n).name, null));\n        for (const [placeholder, text] of Object.entries({ ...icu.vars, ...icu.placeholders })) {\n            if (text instanceof BoundText) {\n                ingestBoundText(unit, text, placeholder);\n            }\n            else {\n                ingestText(unit, text, placeholder);\n            }\n        }\n        unit.create.push(createIcuEndOp(xref));\n    }\n    else {\n        throw Error(`Unhandled i18n metadata type for ICU: ${icu.i18n?.constructor.name}`);\n    }\n}\n/**\n * Ingest an `@for` block into the given `ViewCompilation`.\n */\nfunction ingestForBlock(unit, forBlock) {\n    const repeaterView = unit.job.allocateView(unit.xref);\n    // Set all the context variables and aliases available in the repeater.\n    repeaterView.contextVariables.set(forBlock.item.name, forBlock.item.value);\n    repeaterView.contextVariables.set(forBlock.contextVariables.$index.name, forBlock.contextVariables.$index.value);\n    repeaterView.contextVariables.set(forBlock.contextVariables.$count.name, forBlock.contextVariables.$count.value);\n    // We copy TemplateDefinitionBuilder's scheme of creating names for `$count` and `$index` that are\n    // suffixed with special information, to disambiguate which level of nested loop the below aliases\n    // refer to.\n    // TODO: We should refactor Template Pipeline's variable phases to gracefully handle shadowing,\n    // and arbitrarily many levels of variables depending on each other.\n    const indexName = `ɵ${forBlock.contextVariables.$index.name}_${repeaterView.xref}`;\n    const countName = `ɵ${forBlock.contextVariables.$count.name}_${repeaterView.xref}`;\n    repeaterView.contextVariables.set(indexName, forBlock.contextVariables.$index.value);\n    repeaterView.contextVariables.set(countName, forBlock.contextVariables.$count.value);\n    repeaterView.aliases.add({\n        kind: SemanticVariableKind.Alias,\n        name: null,\n        identifier: forBlock.contextVariables.$first.name,\n        expression: new LexicalReadExpr(indexName).identical(literal(0))\n    });\n    repeaterView.aliases.add({\n        kind: SemanticVariableKind.Alias,\n        name: null,\n        identifier: forBlock.contextVariables.$last.name,\n        expression: new LexicalReadExpr(indexName).identical(new LexicalReadExpr(countName).minus(literal(1)))\n    });\n    repeaterView.aliases.add({\n        kind: SemanticVariableKind.Alias,\n        name: null,\n        identifier: forBlock.contextVariables.$even.name,\n        expression: new LexicalReadExpr(indexName).modulo(literal(2)).identical(literal(0))\n    });\n    repeaterView.aliases.add({\n        kind: SemanticVariableKind.Alias,\n        name: null,\n        identifier: forBlock.contextVariables.$odd.name,\n        expression: new LexicalReadExpr(indexName).modulo(literal(2)).notIdentical(literal(0))\n    });\n    const sourceSpan = convertSourceSpan(forBlock.trackBy.span, forBlock.sourceSpan);\n    const track = convertAst(forBlock.trackBy, unit.job, sourceSpan);\n    ingestNodes(repeaterView, forBlock.children);\n    let emptyView = null;\n    let emptyTagName = null;\n    if (forBlock.empty !== null) {\n        emptyView = unit.job.allocateView(unit.xref);\n        ingestNodes(emptyView, forBlock.empty.children);\n        emptyTagName = ingestControlFlowInsertionPoint(unit, emptyView.xref, forBlock.empty);\n    }\n    const varNames = {\n        $index: forBlock.contextVariables.$index.name,\n        $count: forBlock.contextVariables.$count.name,\n        $first: forBlock.contextVariables.$first.name,\n        $last: forBlock.contextVariables.$last.name,\n        $even: forBlock.contextVariables.$even.name,\n        $odd: forBlock.contextVariables.$odd.name,\n        $implicit: forBlock.item.name,\n    };\n    if (forBlock.i18n !== undefined && !(forBlock.i18n instanceof BlockPlaceholder)) {\n        throw Error('AssertionError: Unhandled i18n metadata type or @for');\n    }\n    if (forBlock.empty?.i18n !== undefined &&\n        !(forBlock.empty.i18n instanceof BlockPlaceholder)) {\n        throw Error('AssertionError: Unhandled i18n metadata type or @empty');\n    }\n    const i18nPlaceholder = forBlock.i18n;\n    const emptyI18nPlaceholder = forBlock.empty?.i18n;\n    const tagName = ingestControlFlowInsertionPoint(unit, repeaterView.xref, forBlock);\n    const repeaterCreate = createRepeaterCreateOp(repeaterView.xref, emptyView?.xref ?? null, tagName, track, varNames, emptyTagName, i18nPlaceholder, emptyI18nPlaceholder, forBlock.startSourceSpan, forBlock.sourceSpan);\n    unit.create.push(repeaterCreate);\n    const expression = convertAst(forBlock.expression, unit.job, convertSourceSpan(forBlock.expression.span, forBlock.sourceSpan));\n    const repeater = createRepeaterOp(repeaterCreate.xref, repeaterCreate.handle, expression, forBlock.sourceSpan);\n    unit.update.push(repeater);\n}\n/**\n * Convert a template AST expression into an output AST expression.\n */\nfunction convertAst(ast, job, baseSourceSpan) {\n    if (ast instanceof ASTWithSource) {\n        return convertAst(ast.ast, job, baseSourceSpan);\n    }\n    else if (ast instanceof PropertyRead) {\n        const isThisReceiver = ast.receiver instanceof ThisReceiver;\n        // Whether this is an implicit receiver, *excluding* explicit reads of `this`.\n        const isImplicitReceiver = ast.receiver instanceof ImplicitReceiver && !(ast.receiver instanceof ThisReceiver);\n        // Whether the  name of the read is a node that should be never retain its explicit this\n        // receiver.\n        const isSpecialNode = ast.name === '$any' || ast.name === '$event';\n        // TODO: The most sensible condition here would be simply `isImplicitReceiver`, to convert only\n        // actual implicit `this` reads, and not explicit ones. However, TemplateDefinitionBuilder (and\n        // the Typecheck block!) both have the same bug, in which they also consider explicit `this`\n        // reads to be implicit. This causes problems when the explicit `this` read is inside a\n        // template with a context that also provides the variable name being read:\n        // ```\n        // <ng-template let-a>{{this.a}}</ng-template>\n        // ```\n        // The whole point of the explicit `this` was to access the class property, but TDB and the\n        // current TCB treat the read as implicit, and give you the context property instead!\n        //\n        // For now, we emulate this old behvaior by aggressively converting explicit reads to to\n        // implicit reads, except for the special cases that TDB and the current TCB protect. However,\n        // it would be an improvement to fix this.\n        //\n        // See also the corresponding comment for the TCB, in `type_check_block.ts`.\n        if (isImplicitReceiver || (isThisReceiver && !isSpecialNode)) {\n            return new LexicalReadExpr(ast.name);\n        }\n        else {\n            return new ReadPropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, null, convertSourceSpan(ast.span, baseSourceSpan));\n        }\n    }\n    else if (ast instanceof PropertyWrite) {\n        if (ast.receiver instanceof ImplicitReceiver) {\n            return new WritePropExpr(\n            // TODO: Is it correct to always use the root context in place of the implicit receiver?\n            new ContextExpr(job.root.xref), ast.name, convertAst(ast.value, job, baseSourceSpan), null, convertSourceSpan(ast.span, baseSourceSpan));\n        }\n        return new WritePropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, convertAst(ast.value, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof KeyedWrite) {\n        return new WriteKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertAst(ast.value, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof Call) {\n        if (ast.receiver instanceof ImplicitReceiver) {\n            throw new Error(`Unexpected ImplicitReceiver`);\n        }\n        else {\n            return new InvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map(arg => convertAst(arg, job, baseSourceSpan)), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n        }\n    }\n    else if (ast instanceof LiteralPrimitive) {\n        return literal(ast.value, undefined, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof Unary) {\n        switch (ast.operator) {\n            case '+':\n                return new UnaryOperatorExpr(UnaryOperator.Plus, convertAst(ast.expr, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n            case '-':\n                return new UnaryOperatorExpr(UnaryOperator.Minus, convertAst(ast.expr, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n            default:\n                throw new Error(`AssertionError: unknown unary operator ${ast.operator}`);\n        }\n    }\n    else if (ast instanceof Binary) {\n        const operator = BINARY_OPERATORS.get(ast.operation);\n        if (operator === undefined) {\n            throw new Error(`AssertionError: unknown binary operator ${ast.operation}`);\n        }\n        return new BinaryOperatorExpr(operator, convertAst(ast.left, job, baseSourceSpan), convertAst(ast.right, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof ThisReceiver) {\n        // TODO: should context expressions have source maps?\n        return new ContextExpr(job.root.xref);\n    }\n    else if (ast instanceof KeyedRead) {\n        return new ReadKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof Chain) {\n        throw new Error(`AssertionError: Chain in unknown context`);\n    }\n    else if (ast instanceof LiteralMap) {\n        const entries = ast.keys.map((key, idx) => {\n            const value = ast.values[idx];\n            // TODO: should literals have source maps, or do we just map the whole surrounding\n            // expression?\n            return new LiteralMapEntry(key.key, convertAst(value, job, baseSourceSpan), key.quoted);\n        });\n        return new LiteralMapExpr(entries, undefined, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof LiteralArray) {\n        // TODO: should literals have source maps, or do we just map the whole surrounding expression?\n        return new LiteralArrayExpr(ast.expressions.map(expr => convertAst(expr, job, baseSourceSpan)));\n    }\n    else if (ast instanceof Conditional) {\n        return new ConditionalExpr(convertAst(ast.condition, job, baseSourceSpan), convertAst(ast.trueExp, job, baseSourceSpan), convertAst(ast.falseExp, job, baseSourceSpan), undefined, convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof NonNullAssert) {\n        // A non-null assertion shouldn't impact generated instructions, so we can just drop it.\n        return convertAst(ast.expression, job, baseSourceSpan);\n    }\n    else if (ast instanceof BindingPipe) {\n        // TODO: pipes should probably have source maps; figure out details.\n        return new PipeBindingExpr(job.allocateXrefId(), new SlotHandle(), ast.name, [\n            convertAst(ast.exp, job, baseSourceSpan),\n            ...ast.args.map(arg => convertAst(arg, job, baseSourceSpan)),\n        ]);\n    }\n    else if (ast instanceof SafeKeyedRead) {\n        return new SafeKeyedReadExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof SafePropertyRead) {\n        // TODO: source span\n        return new SafePropertyReadExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name);\n    }\n    else if (ast instanceof SafeCall) {\n        // TODO: source span\n        return new SafeInvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map(a => convertAst(a, job, baseSourceSpan)));\n    }\n    else if (ast instanceof EmptyExpr$1) {\n        return new EmptyExpr(convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else if (ast instanceof PrefixNot) {\n        return not(convertAst(ast.expression, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));\n    }\n    else {\n        throw new Error(`Unhandled expression type \"${ast.constructor.name}\" in file \"${baseSourceSpan?.start.file.url}\"`);\n    }\n}\nfunction convertAstWithInterpolation(job, value, i18nMeta, sourceSpan) {\n    let expression;\n    if (value instanceof Interpolation$1) {\n        expression = new Interpolation(value.strings, value.expressions.map(e => convertAst(e, job, sourceSpan ?? null)), Object.keys(asMessage(i18nMeta)?.placeholders ?? {}));\n    }\n    else if (value instanceof AST) {\n        expression = convertAst(value, job, sourceSpan ?? null);\n    }\n    else {\n        expression = literal(value);\n    }\n    return expression;\n}\n// TODO: Can we populate Template binding kinds in ingest?\nconst BINDING_KINDS = new Map([\n    [0 /* e.BindingType.Property */, BindingKind.Property],\n    [1 /* e.BindingType.Attribute */, BindingKind.Attribute],\n    [2 /* e.BindingType.Class */, BindingKind.ClassName],\n    [3 /* e.BindingType.Style */, BindingKind.StyleProperty],\n    [4 /* e.BindingType.Animation */, BindingKind.Animation],\n]);\n/**\n * Checks whether the given template is a plain ng-template (as opposed to another kind of template\n * such as a structural directive template or control flow template). This is checked based on the\n * tagName. We can expect that only plain ng-templates will come through with a tagName of\n * 'ng-template'.\n *\n * Here are some of the cases we expect:\n *\n * | Angular HTML                       | Template tagName   |\n * | ---------------------------------- | ------------------ |\n * | `<ng-template>`                    | 'ng-template'      |\n * | `<div *ngIf=\"true\">`               | 'div'              |\n * | `<svg><ng-template>`               | 'svg:ng-template'  |\n * | `@if (true) {`                     | 'Conditional'      |\n * | `<ng-template *ngIf>` (plain)      | 'ng-template'      |\n * | `<ng-template *ngIf>` (structural) | null               |\n */\nfunction isPlainTemplate(tmpl) {\n    return splitNsName(tmpl.tagName ?? '')[1] === NG_TEMPLATE_TAG_NAME$1;\n}\n/**\n * Ensures that the i18nMeta, if provided, is an i18n.Message.\n */\nfunction asMessage(i18nMeta) {\n    if (i18nMeta == null) {\n        return null;\n    }\n    if (!(i18nMeta instanceof Message)) {\n        throw Error(`Expected i18n meta to be a Message, but got: ${i18nMeta.constructor.name}`);\n    }\n    return i18nMeta;\n}\n/**\n * Process all of the bindings on an element in the template AST and convert them to their IR\n * representation.\n */\nfunction ingestElementBindings(unit, op, element) {\n    let bindings = new Array();\n    for (const attr of element.attributes) {\n        // Attribute literal bindings, such as `attr.foo=\"bar\"`.\n        const securityContext = domSchema.securityContext(element.name, attr.name, true);\n        bindings.push(createBindingOp(op.xref, BindingKind.Attribute, attr.name, convertAstWithInterpolation(unit.job, attr.value, attr.i18n), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));\n    }\n    for (const input of element.inputs) {\n        // All dynamic bindings (both attribute and property bindings).\n        bindings.push(createBindingOp(op.xref, BINDING_KINDS.get(input.type), input.name, convertAstWithInterpolation(unit.job, astOf(input.value), input.i18n), input.unit, input.securityContext, false, false, null, asMessage(input.i18n) ?? null, input.sourceSpan));\n    }\n    unit.create.push(bindings.filter((b) => b?.kind === OpKind.ExtractedAttribute));\n    unit.update.push(bindings.filter((b) => b?.kind === OpKind.Binding));\n    for (const output of element.outputs) {\n        if (output.type === 1 /* e.ParsedEventType.Animation */ && output.phase === null) {\n            throw Error('Animation listener should have a phase');\n        }\n        unit.create.push(createListenerOp(op.xref, op.handle, output.name, op.tag, makeListenerHandlerOps(unit, output.handler, output.handlerSpan), output.phase, output.target, false, output.sourceSpan));\n    }\n    // If any of the bindings on this element have an i18n message, then an i18n attrs configuration\n    // op is also required.\n    if (bindings.some(b => b?.i18nMessage) !== null) {\n        unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op.xref));\n    }\n}\n/**\n * Process all of the bindings on a template in the template AST and convert them to their IR\n * representation.\n */\nfunction ingestTemplateBindings(unit, op, template, templateKind) {\n    let bindings = new Array();\n    for (const attr of template.templateAttrs) {\n        if (attr instanceof TextAttribute) {\n            const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);\n            bindings.push(createTemplateBinding(unit, op.xref, 1 /* e.BindingType.Attribute */, attr.name, attr.value, null, securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));\n        }\n        else {\n            bindings.push(createTemplateBinding(unit, op.xref, attr.type, attr.name, astOf(attr.value), attr.unit, attr.securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));\n        }\n    }\n    for (const attr of template.attributes) {\n        // Attribute literal bindings, such as `attr.foo=\"bar\"`.\n        const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);\n        bindings.push(createTemplateBinding(unit, op.xref, 1 /* e.BindingType.Attribute */, attr.name, attr.value, null, securityContext, false, templateKind, asMessage(attr.i18n), attr.sourceSpan));\n    }\n    for (const input of template.inputs) {\n        // Dynamic bindings (both attribute and property bindings).\n        bindings.push(createTemplateBinding(unit, op.xref, input.type, input.name, astOf(input.value), input.unit, input.securityContext, false, templateKind, asMessage(input.i18n), input.sourceSpan));\n    }\n    unit.create.push(bindings.filter((b) => b?.kind === OpKind.ExtractedAttribute));\n    unit.update.push(bindings.filter((b) => b?.kind === OpKind.Binding));\n    for (const output of template.outputs) {\n        if (output.type === 1 /* e.ParsedEventType.Animation */ && output.phase === null) {\n            throw Error('Animation listener should have a phase');\n        }\n        if (templateKind === TemplateKind.NgTemplate) {\n            unit.create.push(createListenerOp(op.xref, op.handle, output.name, op.tag, makeListenerHandlerOps(unit, output.handler, output.handlerSpan), output.phase, output.target, false, output.sourceSpan));\n        }\n        if (templateKind === TemplateKind.Structural &&\n            output.type !== 1 /* e.ParsedEventType.Animation */) {\n            // Animation bindings are excluded from the structural template's const array.\n            const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, output.name, false);\n            unit.create.push(createExtractedAttributeOp(op.xref, BindingKind.Property, null, output.name, null, null, null, securityContext));\n        }\n    }\n    // TODO: Perhaps we could do this in a phase? (It likely wouldn't change the slot indices.)\n    if (bindings.some(b => b?.i18nMessage) !== null) {\n        unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op.xref));\n    }\n}\n/**\n * Helper to ingest an individual binding on a template, either an explicit `ng-template`, or an\n * implicit template created via structural directive.\n *\n * Bindings on templates are *extremely* tricky. I have tried to isolate all of the confusing edge\n * cases into this function, and to comment it well to document the behavior.\n *\n * Some of this behavior is intuitively incorrect, and we should consider changing it in the future.\n *\n * @param view The compilation unit for the view containing the template.\n * @param xref The xref of the template op.\n * @param type The binding type, according to the parser. This is fairly reasonable, e.g. both\n *     dynamic and static attributes have e.BindingType.Attribute.\n * @param name The binding's name.\n * @param value The bindings's value, which will either be an input AST expression, or a string\n *     literal. Note that the input AST expression may or may not be const -- it will only be a\n *     string literal if the parser considered it a text binding.\n * @param unit If the binding has a unit (e.g. `px` for style bindings), then this is the unit.\n * @param securityContext The security context of the binding.\n * @param isStructuralTemplateAttribute Whether this binding actually applies to the structural\n *     ng-template. For example, an `ngFor` would actually apply to the structural template. (Most\n *     bindings on structural elements target the inner element, not the template.)\n * @param templateKind Whether this is an explicit `ng-template` or an implicit template created by\n *     a structural directive. This should never be a block template.\n * @param i18nMessage The i18n metadata for the binding, if any.\n * @param sourceSpan The source span of the binding.\n * @returns An IR binding op, or null if the binding should be skipped.\n */\nfunction createTemplateBinding(view, xref, type, name, value, unit, securityContext, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {\n    const isTextBinding = typeof value === 'string';\n    // If this is a structural template, then several kinds of bindings should not result in an\n    // update instruction.\n    if (templateKind === TemplateKind.Structural) {\n        if (!isStructuralTemplateAttribute &&\n            (type === 0 /* e.BindingType.Property */ || type === 2 /* e.BindingType.Class */ ||\n                type === 3 /* e.BindingType.Style */)) {\n            // Because this binding doesn't really target the ng-template, it must be a binding on an\n            // inner node of a structural template. We can't skip it entirely, because we still need it on\n            // the ng-template's consts (e.g. for the purposes of directive matching). However, we should\n            // not generate an update instruction for it.\n            return createExtractedAttributeOp(xref, BindingKind.Property, null, name, null, null, i18nMessage, securityContext);\n        }\n        if (!isTextBinding && (type === 1 /* e.BindingType.Attribute */ || type === 4 /* e.BindingType.Animation */)) {\n            // Again, this binding doesn't really target the ng-template; it actually targets the element\n            // inside the structural template. In the case of non-text attribute or animation bindings,\n            // the binding doesn't even show up on the ng-template const array, so we just skip it\n            // entirely.\n            return null;\n        }\n    }\n    let bindingType = BINDING_KINDS.get(type);\n    if (templateKind === TemplateKind.NgTemplate) {\n        // We know we are dealing with bindings directly on an explicit ng-template.\n        // Static attribute bindings should be collected into the const array as k/v pairs. Property\n        // bindings should result in a `property` instruction, and `AttributeMarker.Bindings` const\n        // entries.\n        //\n        // The difficulty is with dynamic attribute, style, and class bindings. These don't really make\n        // sense on an `ng-template` and should probably be parser errors. However,\n        // TemplateDefinitionBuilder generates `property` instructions for them, and so we do that as\n        // well.\n        //\n        // Note that we do have a slight behavior difference with TemplateDefinitionBuilder: although\n        // TDB emits `property` instructions for dynamic attributes, styles, and classes, only styles\n        // and classes also get const collected into the `AttributeMarker.Bindings` field. Dynamic\n        // attribute bindings are missing from the consts entirely. We choose to emit them into the\n        // consts field anyway, to avoid creating special cases for something so arcane and nonsensical.\n        if (type === 2 /* e.BindingType.Class */ || type === 3 /* e.BindingType.Style */ ||\n            (type === 1 /* e.BindingType.Attribute */ && !isTextBinding)) {\n            // TODO: These cases should be parse errors.\n            bindingType = BindingKind.Property;\n        }\n    }\n    return createBindingOp(xref, bindingType, name, convertAstWithInterpolation(view.job, value, i18nMessage), unit, securityContext, isTextBinding, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan);\n}\nfunction makeListenerHandlerOps(unit, handler, handlerSpan) {\n    handler = astOf(handler);\n    const handlerOps = new Array();\n    let handlerExprs = handler instanceof Chain ? handler.expressions : [handler];\n    if (handlerExprs.length === 0) {\n        throw new Error('Expected listener to have non-empty expression list.');\n    }\n    const expressions = handlerExprs.map(expr => convertAst(expr, unit.job, handlerSpan));\n    const returnExpr = expressions.pop();\n    handlerOps.push(...expressions.map(e => createStatementOp(new ExpressionStatement(e, e.sourceSpan))));\n    handlerOps.push(createStatementOp(new ReturnStatement(returnExpr, returnExpr.sourceSpan)));\n    return handlerOps;\n}\nfunction astOf(ast) {\n    return ast instanceof ASTWithSource ? ast.ast : ast;\n}\n/**\n * Process all of the local references on an element-like structure in the template AST and\n * convert them to their IR representation.\n */\nfunction ingestReferences(op, element) {\n    assertIsArray(op.localRefs);\n    for (const { name, value } of element.references) {\n        op.localRefs.push({\n            name,\n            target: value,\n        });\n    }\n}\n/**\n * Assert that the given value is an array.\n */\nfunction assertIsArray(value) {\n    if (!Array.isArray(value)) {\n        throw new Error(`AssertionError: expected an array`);\n    }\n}\n/**\n * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.\n *\n * `ParseSpan` objects are relative to the start of the expression.\n * This method converts these to full `ParseSourceSpan` objects that\n * show where the span is within the overall source file.\n *\n * @param span the relative span to convert.\n * @param baseSourceSpan a span corresponding to the base of the expression tree.\n * @returns a `ParseSourceSpan` for the given span or null if no `baseSourceSpan` was provided.\n */\nfunction convertSourceSpan(span, baseSourceSpan) {\n    if (baseSourceSpan === null) {\n        return null;\n    }\n    const start = baseSourceSpan.start.moveBy(span.start);\n    const end = baseSourceSpan.start.moveBy(span.end);\n    const fullStart = baseSourceSpan.fullStart.moveBy(span.start);\n    return new ParseSourceSpan(start, end, fullStart);\n}\n/**\n * With the directive-based control flow users were able to conditionally project content using\n * the `*` syntax. E.g. `<div *ngIf=\"expr\" projectMe></div>` will be projected into\n * `<ng-content select=\"[projectMe]\"/>`, because the attributes and tag name from the `div` are\n * copied to the template via the template creation instruction. With `@if` and `@for` that is\n * not the case, because the conditional is placed *around* elements, rather than *on* them.\n * The result is that content projection won't work in the same way if a user converts from\n * `*ngIf` to `@if`.\n *\n * This function aims to cover the most common case by doing the same copying when a control flow\n * node has *one and only one* root element or template node.\n *\n * This approach comes with some caveats:\n * 1. As soon as any other node is added to the root, the copying behavior won't work anymore.\n *    A diagnostic will be added to flag cases like this and to explain how to work around it.\n * 2. If `preserveWhitespaces` is enabled, it's very likely that indentation will break this\n *    workaround, because it'll include an additional text node as the first child. We can work\n *    around it here, but in a discussion it was decided not to, because the user explicitly opted\n *    into preserving the whitespace and we would have to drop it from the generated code.\n *    The diagnostic mentioned point #1 will flag such cases to users.\n *\n * @returns Tag name to be used for the control flow template.\n */\nfunction ingestControlFlowInsertionPoint(unit, xref, node) {\n    let root = null;\n    for (const child of node.children) {\n        // Skip over comment nodes.\n        if (child instanceof Comment$1) {\n            continue;\n        }\n        // We can only infer the tag name/attributes if there's a single root node.\n        if (root !== null) {\n            return null;\n        }\n        // Root nodes can only elements or templates with a tag name (e.g. `<div *foo></div>`).\n        if (child instanceof Element$1 || (child instanceof Template && child.tagName !== null)) {\n            root = child;\n        }\n    }\n    // If we've found a single root node, its tag name and *static* attributes can be copied\n    // to the surrounding template to be used for content projection. Note that it's important\n    // that we don't copy any bound attributes since they don't participate in content projection\n    // and they can be used in directive matching (in the case of `Template.templateAttrs`).\n    if (root !== null) {\n        for (const attr of root.attributes) {\n            const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);\n            unit.update.push(createBindingOp(xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));\n        }\n        const tagName = root instanceof Element$1 ? root.name : root.tagName;\n        // Don't pass along `ng-template` tag name since it enables directive matching.\n        return tagName === NG_TEMPLATE_TAG_NAME$1 ? null : tagName;\n    }\n    return null;\n}\n\nconst USE_TEMPLATE_PIPELINE = false;\n\nconst IMPORTANT_FLAG = '!important';\n/**\n * Minimum amount of binding slots required in the runtime for style/class bindings.\n *\n * Styling in Angular uses up two slots in the runtime LView/TData data structures to\n * record binding data, property information and metadata.\n *\n * When a binding is registered it will place the following information in the `LView`:\n *\n * slot 1) binding value\n * slot 2) cached value (all other values collected before it in string form)\n *\n * When a binding is registered it will place the following information in the `TData`:\n *\n * slot 1) prop name\n * slot 2) binding index that points to the previous style/class binding (and some extra config\n * values)\n *\n * Let's imagine we have a binding that looks like so:\n *\n * ```\n * <div [style.width]=\"x\" [style.height]=\"y\">\n * ```\n *\n * Our `LView` and `TData` data-structures look like so:\n *\n * ```typescript\n * LView = [\n *   // ...\n *   x, // value of x\n *   \"width: x\",\n *\n *   y, // value of y\n *   \"width: x; height: y\",\n *   // ...\n * ];\n *\n * TData = [\n *   // ...\n *   \"width\", // binding slot 20\n *   0,\n *\n *   \"height\",\n *   20,\n *   // ...\n * ];\n * ```\n *\n * */\nconst MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;\n/**\n * Produces creation/update instructions for all styling bindings (class and style)\n *\n * It also produces the creation instruction to register all initial styling values\n * (which are all the static class=\"...\" and style=\"...\" attribute values that exist\n * on an element within a template).\n *\n * The builder class below handles producing instructions for the following cases:\n *\n * - Static style/class attributes (style=\"...\" and class=\"...\")\n * - Dynamic style/class map bindings ([style]=\"map\" and [class]=\"map|string\")\n * - Dynamic style/class property bindings ([style.prop]=\"exp\" and [class.name]=\"exp\")\n *\n * Due to the complex relationship of all of these cases, the instructions generated\n * for these attributes/properties/bindings must be done so in the correct order. The\n * order which these must be generated is as follows:\n *\n * if (createMode) {\n *   styling(...)\n * }\n * if (updateMode) {\n *   styleMap(...)\n *   classMap(...)\n *   styleProp(...)\n *   classProp(...)\n * }\n *\n * The creation/update methods within the builder class produce these instructions.\n */\nclass StylingBuilder {\n    constructor(_directiveExpr) {\n        this._directiveExpr = _directiveExpr;\n        /** Whether or not there are any static styling values present */\n        this._hasInitialValues = false;\n        /**\n         *  Whether or not there are any styling bindings present\n         *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)\n         */\n        this.hasBindings = false;\n        this.hasBindingsWithPipes = false;\n        /** the input for [class] (if it exists) */\n        this._classMapInput = null;\n        /** the input for [style] (if it exists) */\n        this._styleMapInput = null;\n        /** an array of each [style.prop] input */\n        this._singleStyleInputs = null;\n        /** an array of each [class.name] input */\n        this._singleClassInputs = null;\n        this._lastStylingInput = null;\n        this._firstStylingInput = null;\n        // maps are used instead of hash maps because a Map will\n        // retain the ordering of the keys\n        /**\n         * Represents the location of each style binding in the template\n         * (e.g. `<div [style.width]=\"w\" [style.height]=\"h\">` implies\n         * that `width=0` and `height=1`)\n         */\n        this._stylesIndex = new Map();\n        /**\n         * Represents the location of each class binding in the template\n         * (e.g. `<div [class.big]=\"b\" [class.hidden]=\"h\">` implies\n         * that `big=0` and `hidden=1`)\n         */\n        this._classesIndex = new Map();\n        this._initialStyleValues = [];\n        this._initialClassValues = [];\n    }\n    /**\n     * Registers a given input to the styling builder to be later used when producing AOT code.\n     *\n     * The code below will only accept the input if it is somehow tied to styling (whether it be\n     * style/class bindings or static style/class attributes).\n     */\n    registerBoundInput(input) {\n        // [attr.style] or [attr.class] are skipped in the code below,\n        // they should not be treated as styling-based bindings since\n        // they are intended to be written directly to the attr and\n        // will therefore skip all style/class resolution that is present\n        // with style=\"\", [style]=\"\" and [style.prop]=\"\", class=\"\",\n        // [class.prop]=\"\". [class]=\"\" assignments\n        let binding = null;\n        let name = input.name;\n        switch (input.type) {\n            case 0 /* BindingType.Property */:\n                binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);\n                break;\n            case 3 /* BindingType.Style */:\n                binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);\n                break;\n            case 2 /* BindingType.Class */:\n                binding = this.registerClassInput(name, false, input.value, input.sourceSpan);\n                break;\n        }\n        return binding ? true : false;\n    }\n    registerInputBasedOnName(name, expression, sourceSpan) {\n        let binding = null;\n        const prefix = name.substring(0, 6);\n        const isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';\n        const isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');\n        if (isStyle || isClass) {\n            const isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no\n            const property = name.slice(isMapBased ? 5 : 6); // the dot explains why there's a +1\n            if (isStyle) {\n                binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);\n            }\n            else {\n                binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);\n            }\n        }\n        return binding;\n    }\n    registerStyleInput(name, isMapBased, value, sourceSpan, suffix) {\n        if (isEmptyExpression(value)) {\n            return null;\n        }\n        // CSS custom properties are case-sensitive so we shouldn't normalize them.\n        // See: https://www.w3.org/TR/css-variables-1/#defining-variables\n        if (!isCssCustomProperty(name)) {\n            name = hyphenate(name);\n        }\n        const { property, hasOverrideFlag, suffix: bindingSuffix } = parseProperty(name);\n        suffix = typeof suffix === 'string' && suffix.length !== 0 ? suffix : bindingSuffix;\n        const entry = { name: property, suffix: suffix, value, sourceSpan, hasOverrideFlag };\n        if (isMapBased) {\n            this._styleMapInput = entry;\n        }\n        else {\n            (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);\n            registerIntoMap(this._stylesIndex, property);\n        }\n        this._lastStylingInput = entry;\n        this._firstStylingInput = this._firstStylingInput || entry;\n        this._checkForPipes(value);\n        this.hasBindings = true;\n        return entry;\n    }\n    registerClassInput(name, isMapBased, value, sourceSpan) {\n        if (isEmptyExpression(value)) {\n            return null;\n        }\n        const { property, hasOverrideFlag } = parseProperty(name);\n        const entry = { name: property, value, sourceSpan, hasOverrideFlag, suffix: null };\n        if (isMapBased) {\n            this._classMapInput = entry;\n        }\n        else {\n            (this._singleClassInputs = this._singleClassInputs || []).push(entry);\n            registerIntoMap(this._classesIndex, property);\n        }\n        this._lastStylingInput = entry;\n        this._firstStylingInput = this._firstStylingInput || entry;\n        this._checkForPipes(value);\n        this.hasBindings = true;\n        return entry;\n    }\n    _checkForPipes(value) {\n        if ((value instanceof ASTWithSource) && (value.ast instanceof BindingPipe)) {\n            this.hasBindingsWithPipes = true;\n        }\n    }\n    /**\n     * Registers the element's static style string value to the builder.\n     *\n     * @param value the style string (e.g. `width:100px; height:200px;`)\n     */\n    registerStyleAttr(value) {\n        this._initialStyleValues = parse(value);\n        this._hasInitialValues = true;\n    }\n    /**\n     * Registers the element's static class string value to the builder.\n     *\n     * @param value the className string (e.g. `disabled gold zoom`)\n     */\n    registerClassAttr(value) {\n        this._initialClassValues = value.trim().split(/\\s+/g);\n        this._hasInitialValues = true;\n    }\n    /**\n     * Appends all styling-related expressions to the provided attrs array.\n     *\n     * @param attrs an existing array where each of the styling expressions\n     * will be inserted into.\n     */\n    populateInitialStylingAttrs(attrs) {\n        // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]\n        if (this._initialClassValues.length) {\n            attrs.push(literal(1 /* AttributeMarker.Classes */));\n            for (let i = 0; i < this._initialClassValues.length; i++) {\n                attrs.push(literal(this._initialClassValues[i]));\n            }\n        }\n        // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]\n        if (this._initialStyleValues.length) {\n            attrs.push(literal(2 /* AttributeMarker.Styles */));\n            for (let i = 0; i < this._initialStyleValues.length; i += 2) {\n                attrs.push(literal(this._initialStyleValues[i]), literal(this._initialStyleValues[i + 1]));\n            }\n        }\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.\n     *\n     * The instruction generation code below is used for producing the AOT statement code which is\n     * responsible for registering initial styles (within a directive hostBindings' creation block),\n     * as well as any of the provided attribute values, to the directive host element.\n     */\n    assignHostAttrs(attrs, definitionMap) {\n        if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {\n            this.populateInitialStylingAttrs(attrs);\n            definitionMap.set('hostAttrs', literalArr(attrs));\n        }\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `classMap`.\n     *\n     * The instruction data will contain all expressions for `classMap` to function\n     * which includes the `[class]` expression params.\n     */\n    buildClassMapInstruction(valueConverter) {\n        if (this._classMapInput) {\n            return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);\n        }\n        return null;\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `styleMap`.\n     *\n     * The instruction data will contain all expressions for `styleMap` to function\n     * which includes the `[style]` expression params.\n     */\n    buildStyleMapInstruction(valueConverter) {\n        if (this._styleMapInput) {\n            return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);\n        }\n        return null;\n    }\n    _buildMapBasedInstruction(valueConverter, isClassBased, stylingInput) {\n        // each styling binding value is stored in the LView\n        // map-based bindings allocate two slots: one for the\n        // previous binding value and another for the previous\n        // className or style attribute value.\n        let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;\n        // these values must be outside of the update block so that they can\n        // be evaluated (the AST visit call) during creation time so that any\n        // pipes can be picked up in time before the template is built\n        const mapValue = stylingInput.value.visit(valueConverter);\n        let reference;\n        if (mapValue instanceof Interpolation$1) {\n            totalBindingSlotsRequired += mapValue.expressions.length;\n            reference = isClassBased ? getClassMapInterpolationExpression(mapValue) :\n                getStyleMapInterpolationExpression(mapValue);\n        }\n        else {\n            reference = isClassBased ? Identifiers.classMap : Identifiers.styleMap;\n        }\n        return {\n            reference,\n            calls: [{\n                    supportsInterpolation: true,\n                    sourceSpan: stylingInput.sourceSpan,\n                    allocateBindingSlots: totalBindingSlotsRequired,\n                    params: (convertFn) => {\n                        const convertResult = convertFn(mapValue);\n                        const params = Array.isArray(convertResult) ? convertResult : [convertResult];\n                        return params;\n                    }\n                }]\n        };\n    }\n    _buildSingleInputs(reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {\n        const instructions = [];\n        inputs.forEach(input => {\n            const previousInstruction = instructions[instructions.length - 1];\n            const value = input.value.visit(valueConverter);\n            let referenceForCall = reference;\n            // each styling binding value is stored in the LView\n            // but there are two values stored for each binding:\n            //   1) the value itself\n            //   2) an intermediate value (concatenation of style up to this point).\n            //      We need to store the intermediate value so that we don't allocate\n            //      the strings on each CD.\n            let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;\n            if (value instanceof Interpolation$1) {\n                totalBindingSlotsRequired += value.expressions.length;\n                if (getInterpolationExpressionFn) {\n                    referenceForCall = getInterpolationExpressionFn(value);\n                }\n            }\n            const call = {\n                sourceSpan: input.sourceSpan,\n                allocateBindingSlots: totalBindingSlotsRequired,\n                supportsInterpolation: !!getInterpolationExpressionFn,\n                params: (convertFn) => {\n                    // params => stylingProp(propName, value, suffix)\n                    const params = [];\n                    params.push(literal(input.name));\n                    const convertResult = convertFn(value);\n                    if (Array.isArray(convertResult)) {\n                        params.push(...convertResult);\n                    }\n                    else {\n                        params.push(convertResult);\n                    }\n                    // [style.prop] bindings may use suffix values (e.g. px, em, etc...), therefore,\n                    // if that is detected then we need to pass that in as an optional param.\n                    if (!isClassBased && input.suffix !== null) {\n                        params.push(literal(input.suffix));\n                    }\n                    return params;\n                }\n            };\n            // If we ended up generating a call to the same instruction as the previous styling property\n            // we can chain the calls together safely to save some bytes, otherwise we have to generate\n            // a separate instruction call. This is primarily a concern with interpolation instructions\n            // where we may start off with one `reference`, but end up using another based on the\n            // number of interpolations.\n            if (previousInstruction && previousInstruction.reference === referenceForCall) {\n                previousInstruction.calls.push(call);\n            }\n            else {\n                instructions.push({ reference: referenceForCall, calls: [call] });\n            }\n        });\n        return instructions;\n    }\n    _buildClassInputs(valueConverter) {\n        if (this._singleClassInputs) {\n            return this._buildSingleInputs(Identifiers.classProp, this._singleClassInputs, valueConverter, null, true);\n        }\n        return [];\n    }\n    _buildStyleInputs(valueConverter) {\n        if (this._singleStyleInputs) {\n            return this._buildSingleInputs(Identifiers.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);\n        }\n        return [];\n    }\n    /**\n     * Constructs all instructions which contain the expressions that will be placed\n     * into the update block of a template function or a directive hostBindings function.\n     */\n    buildUpdateLevelInstructions(valueConverter) {\n        const instructions = [];\n        if (this.hasBindings) {\n            const styleMapInstruction = this.buildStyleMapInstruction(valueConverter);\n            if (styleMapInstruction) {\n                instructions.push(styleMapInstruction);\n            }\n            const classMapInstruction = this.buildClassMapInstruction(valueConverter);\n            if (classMapInstruction) {\n                instructions.push(classMapInstruction);\n            }\n            instructions.push(...this._buildStyleInputs(valueConverter));\n            instructions.push(...this._buildClassInputs(valueConverter));\n        }\n        return instructions;\n    }\n}\nfunction registerIntoMap(map, key) {\n    if (!map.has(key)) {\n        map.set(key, map.size);\n    }\n}\nfunction parseProperty(name) {\n    let hasOverrideFlag = false;\n    const overrideIndex = name.indexOf(IMPORTANT_FLAG);\n    if (overrideIndex !== -1) {\n        name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';\n        hasOverrideFlag = true;\n    }\n    let suffix = null;\n    let property = name;\n    const unitIndex = name.lastIndexOf('.');\n    if (unitIndex > 0) {\n        suffix = name.slice(unitIndex + 1);\n        property = name.substring(0, unitIndex);\n    }\n    return { property, suffix, hasOverrideFlag };\n}\n/**\n * Gets the instruction to generate for an interpolated class map.\n * @param interpolation An Interpolation AST\n */\nfunction getClassMapInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers.classMap;\n        case 3:\n            return Identifiers.classMapInterpolate1;\n        case 5:\n            return Identifiers.classMapInterpolate2;\n        case 7:\n            return Identifiers.classMapInterpolate3;\n        case 9:\n            return Identifiers.classMapInterpolate4;\n        case 11:\n            return Identifiers.classMapInterpolate5;\n        case 13:\n            return Identifiers.classMapInterpolate6;\n        case 15:\n            return Identifiers.classMapInterpolate7;\n        case 17:\n            return Identifiers.classMapInterpolate8;\n        default:\n            return Identifiers.classMapInterpolateV;\n    }\n}\n/**\n * Gets the instruction to generate for an interpolated style map.\n * @param interpolation An Interpolation AST\n */\nfunction getStyleMapInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers.styleMap;\n        case 3:\n            return Identifiers.styleMapInterpolate1;\n        case 5:\n            return Identifiers.styleMapInterpolate2;\n        case 7:\n            return Identifiers.styleMapInterpolate3;\n        case 9:\n            return Identifiers.styleMapInterpolate4;\n        case 11:\n            return Identifiers.styleMapInterpolate5;\n        case 13:\n            return Identifiers.styleMapInterpolate6;\n        case 15:\n            return Identifiers.styleMapInterpolate7;\n        case 17:\n            return Identifiers.styleMapInterpolate8;\n        default:\n            return Identifiers.styleMapInterpolateV;\n    }\n}\n/**\n * Gets the instruction to generate for an interpolated style prop.\n * @param interpolation An Interpolation AST\n */\nfunction getStylePropInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers.styleProp;\n        case 3:\n            return Identifiers.stylePropInterpolate1;\n        case 5:\n            return Identifiers.stylePropInterpolate2;\n        case 7:\n            return Identifiers.stylePropInterpolate3;\n        case 9:\n            return Identifiers.stylePropInterpolate4;\n        case 11:\n            return Identifiers.stylePropInterpolate5;\n        case 13:\n            return Identifiers.stylePropInterpolate6;\n        case 15:\n            return Identifiers.stylePropInterpolate7;\n        case 17:\n            return Identifiers.stylePropInterpolate8;\n        default:\n            return Identifiers.stylePropInterpolateV;\n    }\n}\n/**\n * Checks whether property name is a custom CSS property.\n * See: https://www.w3.org/TR/css-variables-1\n */\nfunction isCssCustomProperty(name) {\n    return name.startsWith('--');\n}\nfunction isEmptyExpression(ast) {\n    if (ast instanceof ASTWithSource) {\n        ast = ast.ast;\n    }\n    return ast instanceof EmptyExpr$1;\n}\n\nclass HtmlParser extends Parser {\n    constructor() {\n        super(getHtmlTagDefinition);\n    }\n    parse(source, url, options) {\n        return super.parse(source, url, options);\n    }\n}\n\nconst PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\nfunction hasPreserveWhitespacesAttr(attrs) {\n    return attrs.some((attr) => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n/**\n * &ngsp; is a placeholder for non-removable space\n * &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space.\n */\nfunction replaceNgsp(value) {\n    // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n    return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nclass WhitespaceVisitor {\n    visitElement(element, context) {\n        if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n            // don't descent into elements where we need to preserve whitespaces\n            // but still visit all attributes to eliminate one used as a market to preserve WS\n            return new Element(element.name, visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        return new Element(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n    visitAttribute(attribute, context) {\n        return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n    }\n    visitText(text, context) {\n        const isNotBlank = text.value.match(NO_WS_REGEXP);\n        const hasExpansionSibling = context &&\n            (context.prev instanceof Expansion || context.next instanceof Expansion);\n        if (isNotBlank || hasExpansionSibling) {\n            // Process the whitespace in the tokens of this Text node\n            const tokens = text.tokens.map(token => token.type === 5 /* TokenType.TEXT */ ? createWhitespaceProcessedTextToken(token) : token);\n            // Process the whitespace of the value of this Text node\n            const value = processWhitespace(text.value);\n            return new Text(value, text.sourceSpan, tokens, text.i18n);\n        }\n        return null;\n    }\n    visitComment(comment, context) {\n        return comment;\n    }\n    visitExpansion(expansion, context) {\n        return expansion;\n    }\n    visitExpansionCase(expansionCase, context) {\n        return expansionCase;\n    }\n    visitBlock(block, context) {\n        return new Block(block.name, block.parameters, visitAllWithSiblings(this, block.children), block.sourceSpan, block.nameSpan, block.startSourceSpan, block.endSourceSpan);\n    }\n    visitBlockParameter(parameter, context) {\n        return parameter;\n    }\n}\nfunction createWhitespaceProcessedTextToken({ type, parts, sourceSpan }) {\n    return { type, parts: [processWhitespace(parts[0])], sourceSpan };\n}\nfunction processWhitespace(text) {\n    return replaceNgsp(text).replace(WS_REPLACE_REGEXP, ' ');\n}\nfunction removeWhitespaces(htmlAstWithErrors) {\n    return new ParseTreeResult(visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n}\nfunction visitAllWithSiblings(visitor, nodes) {\n    const result = [];\n    nodes.forEach((ast, i) => {\n        const context = { prev: nodes[i - 1], next: nodes[i + 1] };\n        const astResult = ast.visit(visitor, context);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\n\nconst PROPERTY_PARTS_SEPARATOR = '.';\nconst ATTRIBUTE_PREFIX = 'attr';\nconst CLASS_PREFIX = 'class';\nconst STYLE_PREFIX = 'style';\nconst TEMPLATE_ATTR_PREFIX$1 = '*';\nconst ANIMATE_PROP_PREFIX = 'animate-';\n/**\n * Parses bindings in templates and in the directive host area.\n */\nclass BindingParser {\n    constructor(_exprParser, _interpolationConfig, _schemaRegistry, errors) {\n        this._exprParser = _exprParser;\n        this._interpolationConfig = _interpolationConfig;\n        this._schemaRegistry = _schemaRegistry;\n        this.errors = errors;\n    }\n    get interpolationConfig() {\n        return this._interpolationConfig;\n    }\n    createBoundHostProperties(properties, sourceSpan) {\n        const boundProps = [];\n        for (const propName of Object.keys(properties)) {\n            const expression = properties[propName];\n            if (typeof expression === 'string') {\n                this.parsePropertyBinding(propName, expression, true, sourceSpan, sourceSpan.start.offset, undefined, [], \n                // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the\n                // sourceSpan, as it represents the sourceSpan of the host itself rather than the\n                // source of the host binding (which doesn't exist in the template). Regardless,\n                // neither of these values are used in Ivy but are only here to satisfy the function\n                // signature. This should likely be refactored in the future so that `sourceSpan`\n                // isn't being used inaccurately.\n                boundProps, sourceSpan);\n            }\n            else {\n                this._reportError(`Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n            }\n        }\n        return boundProps;\n    }\n    createDirectiveHostEventAsts(hostListeners, sourceSpan) {\n        const targetEvents = [];\n        for (const propName of Object.keys(hostListeners)) {\n            const expression = hostListeners[propName];\n            if (typeof expression === 'string') {\n                // Use the `sourceSpan` for  `keySpan` and `handlerSpan`. This isn't really accurate, but\n                // neither is the `sourceSpan`, as it represents the `sourceSpan` of the host itself\n                // rather than the source of the host binding (which doesn't exist in the template).\n                // Regardless, neither of these values are used in Ivy but are only here to satisfy the\n                // function signature. This should likely be refactored in the future so that `sourceSpan`\n                // isn't being used inaccurately.\n                this.parseEvent(propName, expression, /* isAssignmentEvent */ false, sourceSpan, sourceSpan, [], targetEvents, sourceSpan);\n            }\n            else {\n                this._reportError(`Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n            }\n        }\n        return targetEvents;\n    }\n    parseInterpolation(value, sourceSpan, interpolatedTokens) {\n        const sourceInfo = sourceSpan.start.toString();\n        const absoluteOffset = sourceSpan.fullStart.offset;\n        try {\n            const ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, interpolatedTokens, this._interpolationConfig);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n    }\n    /**\n     * Similar to `parseInterpolation`, but treats the provided string as a single expression\n     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n     * This is used for parsing the switch expression in ICUs.\n     */\n    parseInterpolationExpression(expression, sourceSpan) {\n        const sourceInfo = sourceSpan.start.toString();\n        const absoluteOffset = sourceSpan.start.offset;\n        try {\n            const ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n    }\n    /**\n     * Parses the bindings in a microsyntax expression, and converts them to\n     * `ParsedProperty` or `ParsedVariable`.\n     *\n     * @param tplKey template binding name\n     * @param tplValue template binding value\n     * @param sourceSpan span of template binding relative to entire the template\n     * @param absoluteValueOffset start of the tplValue relative to the entire template\n     * @param targetMatchableAttrs potential attributes to match in the template\n     * @param targetProps target property bindings in the template\n     * @param targetVars target variables in the template\n     */\n    parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {\n        const absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX$1.length;\n        const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);\n        for (const binding of bindings) {\n            // sourceSpan is for the entire HTML attribute. bindingSpan is for a particular\n            // binding within the microsyntax expression so it's more narrow than sourceSpan.\n            const bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);\n            const key = binding.key.source;\n            const keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);\n            if (binding instanceof VariableBinding) {\n                const value = binding.value ? binding.value.source : '$implicit';\n                const valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : undefined;\n                targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));\n            }\n            else if (binding.value) {\n                const srcSpan = isIvyAst ? bindingSpan : sourceSpan;\n                const valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);\n                this._parsePropertyAst(key, binding.value, srcSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n            }\n            else {\n                targetMatchableAttrs.push([key, '' /* value */]);\n                // Since this is a literal attribute with no RHS, source span should be\n                // just the key span.\n                this.parseLiteralAttr(key, null /* value */, keySpan, absoluteValueOffset, undefined /* valueSpan */, targetMatchableAttrs, targetProps, keySpan);\n            }\n        }\n    }\n    /**\n     * Parses the bindings in a microsyntax expression, e.g.\n     * ```\n     *    <tag *tplKey=\"let value1 = prop; let value2 = localVar\">\n     * ```\n     *\n     * @param tplKey template binding name\n     * @param tplValue template binding value\n     * @param sourceSpan span of template binding relative to entire the template\n     * @param absoluteKeyOffset start of the `tplKey`\n     * @param absoluteValueOffset start of the `tplValue`\n     */\n    _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {\n        const sourceInfo = sourceSpan.start.toString();\n        try {\n            const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);\n            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n            bindingsResult.warnings.forEach((warning) => {\n                this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);\n            });\n            return bindingsResult.templateBindings;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return [];\n        }\n    }\n    parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {\n        if (isAnimationLabel(name)) {\n            name = name.substring(1);\n            if (keySpan !== undefined) {\n                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n            }\n            if (value) {\n                this._reportError(`Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` +\n                    ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);\n            }\n            this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, '', absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));\n        }\n    }\n    parsePropertyBinding(name, expression, isHost, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {\n        if (name.length === 0) {\n            this._reportError(`Property name is missing in binding`, sourceSpan);\n        }\n        let isAnimationProp = false;\n        if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n            isAnimationProp = true;\n            name = name.substring(ANIMATE_PROP_PREFIX.length);\n            if (keySpan !== undefined) {\n                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));\n            }\n        }\n        else if (isAnimationLabel(name)) {\n            isAnimationProp = true;\n            name = name.substring(1);\n            if (keySpan !== undefined) {\n                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n            }\n        }\n        if (isAnimationProp) {\n            this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            this._parsePropertyAst(name, this.parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n        }\n    }\n    parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, targetProps, keySpan, interpolatedTokens) {\n        const expr = this.parseInterpolation(value, valueSpan || sourceSpan, interpolatedTokens);\n        if (expr) {\n            this._parsePropertyAst(name, expr, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n            return true;\n        }\n        return false;\n    }\n    _parsePropertyAst(name, ast, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n        targetMatchableAttrs.push([name, ast.source]);\n        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));\n    }\n    _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n        if (name.length === 0) {\n            this._reportError('Animation trigger is missing', sourceSpan);\n        }\n        // This will occur when a @trigger is not paired with an expression.\n        // For animations it is valid to not have an expression since */void\n        // states will be applied by angular when the element is attached/detached\n        const ast = this.parseBinding(expression || 'undefined', false, valueSpan || sourceSpan, absoluteOffset);\n        targetMatchableAttrs.push([name, ast.source]);\n        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));\n    }\n    parseBinding(value, isHostBinding, sourceSpan, absoluteOffset) {\n        const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();\n        try {\n            const ast = isHostBinding ?\n                this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) :\n                this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n    }\n    createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {\n        if (boundProp.isAnimation) {\n            return new BoundElementProperty(boundProp.name, 4 /* BindingType.Animation */, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n        }\n        let unit = null;\n        let bindingType = undefined;\n        let boundPropertyName = null;\n        const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n        let securityContexts = undefined;\n        // Check for special cases (prefix style, attr, class)\n        if (parts.length > 1) {\n            if (parts[0] == ATTRIBUTE_PREFIX) {\n                boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);\n                if (!skipValidation) {\n                    this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n                }\n                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n                const nsSeparatorIdx = boundPropertyName.indexOf(':');\n                if (nsSeparatorIdx > -1) {\n                    const ns = boundPropertyName.substring(0, nsSeparatorIdx);\n                    const name = boundPropertyName.substring(nsSeparatorIdx + 1);\n                    boundPropertyName = mergeNsAndName(ns, name);\n                }\n                bindingType = 1 /* BindingType.Attribute */;\n            }\n            else if (parts[0] == CLASS_PREFIX) {\n                boundPropertyName = parts[1];\n                bindingType = 2 /* BindingType.Class */;\n                securityContexts = [SecurityContext.NONE];\n            }\n            else if (parts[0] == STYLE_PREFIX) {\n                unit = parts.length > 2 ? parts[2] : null;\n                boundPropertyName = parts[1];\n                bindingType = 3 /* BindingType.Style */;\n                securityContexts = [SecurityContext.STYLE];\n            }\n        }\n        // If not a special case, use the full property name\n        if (boundPropertyName === null) {\n            const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);\n            boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;\n            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);\n            bindingType = 0 /* BindingType.Property */;\n            if (!skipValidation) {\n                this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);\n            }\n        }\n        return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n    }\n    // TODO: keySpan should be required but was made optional to avoid changing VE parser.\n    parseEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n        if (name.length === 0) {\n            this._reportError(`Event name is missing in binding`, sourceSpan);\n        }\n        if (isAnimationLabel(name)) {\n            name = name.slice(1);\n            if (keySpan !== undefined) {\n                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n            }\n            this._parseAnimationEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetEvents, keySpan);\n        }\n        else {\n            this._parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);\n        }\n    }\n    calcPossibleSecurityContexts(selector, propName, isAttribute) {\n        const prop = this._schemaRegistry.getMappedPropName(propName);\n        return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);\n    }\n    _parseAnimationEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetEvents, keySpan) {\n        const matches = splitAtPeriod(name, [name, '']);\n        const eventName = matches[0];\n        const phase = matches[1].toLowerCase();\n        const ast = this._parseAction(expression, isAssignmentEvent, handlerSpan);\n        targetEvents.push(new ParsedEvent(eventName, phase, 1 /* ParsedEventType.Animation */, ast, sourceSpan, handlerSpan, keySpan));\n        if (eventName.length === 0) {\n            this._reportError(`Animation event name is missing in binding`, sourceSpan);\n        }\n        if (phase) {\n            if (phase !== 'start' && phase !== 'done') {\n                this._reportError(`The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`, sourceSpan);\n            }\n        }\n        else {\n            this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);\n        }\n    }\n    _parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n        // long format: 'target: eventName'\n        const [target, eventName] = splitAtColon(name, [null, name]);\n        const ast = this._parseAction(expression, isAssignmentEvent, handlerSpan);\n        targetMatchableAttrs.push([name, ast.source]);\n        targetEvents.push(new ParsedEvent(eventName, target, 0 /* ParsedEventType.Regular */, ast, sourceSpan, handlerSpan, keySpan));\n        // Don't detect directives for event names for now,\n        // so don't add the event name to the matchableAttrs\n    }\n    _parseAction(value, isAssignmentEvent, sourceSpan) {\n        const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();\n        const absoluteOffset = (sourceSpan && sourceSpan.start) ? sourceSpan.start.offset : 0;\n        try {\n            const ast = this._exprParser.parseAction(value, isAssignmentEvent, sourceInfo, absoluteOffset, this._interpolationConfig);\n            if (ast) {\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            }\n            if (!ast || ast.ast instanceof EmptyExpr$1) {\n                this._reportError(`Empty expressions are not allowed`, sourceSpan);\n                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n            }\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n    }\n    _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n        this.errors.push(new ParseError(sourceSpan, message, level));\n    }\n    _reportExpressionParserErrors(errors, sourceSpan) {\n        for (const error of errors) {\n            this._reportError(error.message, sourceSpan);\n        }\n    }\n    /**\n     * @param propName the name of the property / attribute\n     * @param sourceSpan\n     * @param isAttr true when binding to an attribute\n     */\n    _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {\n        const report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n            this._schemaRegistry.validateProperty(propName);\n        if (report.error) {\n            this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);\n        }\n    }\n}\nclass PipeCollector extends RecursiveAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.pipes = new Map();\n    }\n    visitPipe(ast, context) {\n        this.pipes.set(ast.name, ast);\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    }\n}\nfunction isAnimationLabel(name) {\n    return name[0] == '@';\n}\nfunction calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n    const ctxs = [];\n    CssSelector.parse(selector).forEach((selector) => {\n        const elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n        const notElementNames = new Set(selector.notSelectors.filter(selector => selector.isElementSelector())\n            .map((selector) => selector.element));\n        const possibleElementNames = elementNames.filter(elementName => !notElementNames.has(elementName));\n        ctxs.push(...possibleElementNames.map(elementName => registry.securityContext(elementName, propName, isAttribute)));\n    });\n    return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n/**\n * Compute a new ParseSourceSpan based off an original `sourceSpan` by using\n * absolute offsets from the specified `absoluteSpan`.\n *\n * @param sourceSpan original source span\n * @param absoluteSpan absolute source span to move to\n */\nfunction moveParseSourceSpan(sourceSpan, absoluteSpan) {\n    // The difference of two absolute offsets provide the relative offset\n    const startDiff = absoluteSpan.start - sourceSpan.start.offset;\n    const endDiff = absoluteSpan.end - sourceSpan.end.offset;\n    return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);\n}\n\n// Some of the code comes from WebComponents.JS\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js\nfunction isStyleUrlResolvable(url) {\n    if (url == null || url.length === 0 || url[0] == '/')\n        return false;\n    const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\nconst URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n\nconst NG_CONTENT_SELECT_ATTR$1 = 'select';\nconst LINK_ELEMENT = 'link';\nconst LINK_STYLE_REL_ATTR = 'rel';\nconst LINK_STYLE_HREF_ATTR = 'href';\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\nconst STYLE_ELEMENT = 'style';\nconst SCRIPT_ELEMENT = 'script';\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nconst NG_PROJECT_AS = 'ngProjectAs';\nfunction preparseElement(ast) {\n    let selectAttr = null;\n    let hrefAttr = null;\n    let relAttr = null;\n    let nonBindable = false;\n    let projectAs = '';\n    ast.attrs.forEach(attr => {\n        const lcAttrName = attr.name.toLowerCase();\n        if (lcAttrName == NG_CONTENT_SELECT_ATTR$1) {\n            selectAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n            hrefAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n            relAttr = attr.value;\n        }\n        else if (attr.name == NG_NON_BINDABLE_ATTR) {\n            nonBindable = true;\n        }\n        else if (attr.name == NG_PROJECT_AS) {\n            if (attr.value.length > 0) {\n                projectAs = attr.value;\n            }\n        }\n    });\n    selectAttr = normalizeNgContentSelect(selectAttr);\n    const nodeName = ast.name.toLowerCase();\n    let type = PreparsedElementType.OTHER;\n    if (isNgContent(nodeName)) {\n        type = PreparsedElementType.NG_CONTENT;\n    }\n    else if (nodeName == STYLE_ELEMENT) {\n        type = PreparsedElementType.STYLE;\n    }\n    else if (nodeName == SCRIPT_ELEMENT) {\n        type = PreparsedElementType.SCRIPT;\n    }\n    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n        type = PreparsedElementType.STYLESHEET;\n    }\n    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\nvar PreparsedElementType;\n(function (PreparsedElementType) {\n    PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n    PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n    PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n    PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n})(PreparsedElementType || (PreparsedElementType = {}));\nclass PreparsedElement {\n    constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n        this.type = type;\n        this.selectAttr = selectAttr;\n        this.hrefAttr = hrefAttr;\n        this.nonBindable = nonBindable;\n        this.projectAs = projectAs;\n    }\n}\nfunction normalizeNgContentSelect(selectAttr) {\n    if (selectAttr === null || selectAttr.length === 0) {\n        return '*';\n    }\n    return selectAttr;\n}\n\n/** Pattern for the expression in a for loop block. */\nconst FOR_LOOP_EXPRESSION_PATTERN = /^\\s*([0-9A-Za-z_$]*)\\s+of\\s+([\\S\\s]*)/;\n/** Pattern for the tracking expression in a for loop block. */\nconst FOR_LOOP_TRACK_PATTERN = /^track\\s+([\\S\\s]*)/;\n/** Pattern for the `as` expression in a conditional block. */\nconst CONDITIONAL_ALIAS_PATTERN = /^as\\s+(.*)/;\n/** Pattern used to identify an `else if` block. */\nconst ELSE_IF_PATTERN = /^else[^\\S\\r\\n]+if/;\n/** Pattern used to identify a `let` parameter. */\nconst FOR_LOOP_LET_PATTERN = /^let\\s+([\\S\\s]*)/;\n/** Names of variables that are allowed to be used in the `let` expression of a `for` loop. */\nconst ALLOWED_FOR_LOOP_LET_VARIABLES = new Set(['$index', '$first', '$last', '$even', '$odd', '$count']);\n/**\n * Predicate function that determines if a block with\n * a specific name cam be connected to a `for` block.\n */\nfunction isConnectedForLoopBlock(name) {\n    return name === 'empty';\n}\n/**\n * Predicate function that determines if a block with\n * a specific name cam be connected to an `if` block.\n */\nfunction isConnectedIfLoopBlock(name) {\n    return name === 'else' || ELSE_IF_PATTERN.test(name);\n}\n/** Creates an `if` loop block from an HTML AST node. */\nfunction createIfBlock(ast, connectedBlocks, visitor, bindingParser) {\n    const errors = validateIfConnectedBlocks(connectedBlocks);\n    const branches = [];\n    const mainBlockParams = parseConditionalBlockParameters(ast, errors, bindingParser);\n    if (mainBlockParams !== null) {\n        branches.push(new IfBlockBranch(mainBlockParams.expression, visitAll(visitor, ast.children, ast.children), mainBlockParams.expressionAlias, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan, ast.i18n));\n    }\n    for (const block of connectedBlocks) {\n        if (ELSE_IF_PATTERN.test(block.name)) {\n            const params = parseConditionalBlockParameters(block, errors, bindingParser);\n            if (params !== null) {\n                const children = visitAll(visitor, block.children, block.children);\n                branches.push(new IfBlockBranch(params.expression, children, params.expressionAlias, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));\n            }\n        }\n        else if (block.name === 'else') {\n            const children = visitAll(visitor, block.children, block.children);\n            branches.push(new IfBlockBranch(null, children, null, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));\n        }\n    }\n    // The outer IfBlock should have a span that encapsulates all branches.\n    const ifBlockStartSourceSpan = branches.length > 0 ? branches[0].startSourceSpan : ast.startSourceSpan;\n    const ifBlockEndSourceSpan = branches.length > 0 ? branches[branches.length - 1].endSourceSpan : ast.endSourceSpan;\n    let wholeSourceSpan = ast.sourceSpan;\n    const lastBranch = branches[branches.length - 1];\n    if (lastBranch !== undefined) {\n        wholeSourceSpan = new ParseSourceSpan(ifBlockStartSourceSpan.start, lastBranch.sourceSpan.end);\n    }\n    return {\n        node: new IfBlock(branches, wholeSourceSpan, ast.startSourceSpan, ifBlockEndSourceSpan, ast.nameSpan),\n        errors,\n    };\n}\n/** Creates a `for` loop block from an HTML AST node. */\nfunction createForLoop(ast, connectedBlocks, visitor, bindingParser) {\n    const errors = [];\n    const params = parseForLoopParameters(ast, errors, bindingParser);\n    let node = null;\n    let empty = null;\n    for (const block of connectedBlocks) {\n        if (block.name === 'empty') {\n            if (empty !== null) {\n                errors.push(new ParseError(block.sourceSpan, '@for loop can only have one @empty block'));\n            }\n            else if (block.parameters.length > 0) {\n                errors.push(new ParseError(block.sourceSpan, '@empty block cannot have parameters'));\n            }\n            else {\n                empty = new ForLoopBlockEmpty(visitAll(visitor, block.children, block.children), block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n);\n            }\n        }\n        else {\n            errors.push(new ParseError(block.sourceSpan, `Unrecognized @for loop block \"${block.name}\"`));\n        }\n    }\n    if (params !== null) {\n        if (params.trackBy === null) {\n            // TODO: We should not fail here, and instead try to produce some AST for the language\n            // service.\n            errors.push(new ParseError(ast.sourceSpan, '@for loop must have a \"track\" expression'));\n        }\n        else {\n            // The `for` block has a main span that includes the `empty` branch. For only the span of the\n            // main `for` body, use `mainSourceSpan`.\n            const endSpan = empty?.endSourceSpan ?? ast.endSourceSpan;\n            const sourceSpan = new ParseSourceSpan(ast.sourceSpan.start, endSpan?.end ?? ast.sourceSpan.end);\n            node = new ForLoopBlock(params.itemName, params.expression, params.trackBy.expression, params.trackBy.keywordSpan, params.context, visitAll(visitor, ast.children, ast.children), empty, sourceSpan, ast.sourceSpan, ast.startSourceSpan, endSpan, ast.nameSpan, ast.i18n);\n        }\n    }\n    return { node, errors };\n}\n/** Creates a switch block from an HTML AST node. */\nfunction createSwitchBlock(ast, visitor, bindingParser) {\n    const errors = validateSwitchBlock(ast);\n    const primaryExpression = ast.parameters.length > 0 ?\n        parseBlockParameterToBinding(ast.parameters[0], bindingParser) :\n        bindingParser.parseBinding('', false, ast.sourceSpan, 0);\n    const cases = [];\n    const unknownBlocks = [];\n    let defaultCase = null;\n    // Here we assume that all the blocks are valid given that we validated them above.\n    for (const node of ast.children) {\n        if (!(node instanceof Block)) {\n            continue;\n        }\n        if ((node.name !== 'case' || node.parameters.length === 0) && node.name !== 'default') {\n            unknownBlocks.push(new UnknownBlock(node.name, node.sourceSpan, node.nameSpan));\n            continue;\n        }\n        const expression = node.name === 'case' ?\n            parseBlockParameterToBinding(node.parameters[0], bindingParser) :\n            null;\n        const ast = new SwitchBlockCase(expression, visitAll(visitor, node.children, node.children), node.sourceSpan, node.startSourceSpan, node.endSourceSpan, node.nameSpan, node.i18n);\n        if (expression === null) {\n            defaultCase = ast;\n        }\n        else {\n            cases.push(ast);\n        }\n    }\n    // Ensure that the default case is last in the array.\n    if (defaultCase !== null) {\n        cases.push(defaultCase);\n    }\n    return {\n        node: new SwitchBlock(primaryExpression, cases, unknownBlocks, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan),\n        errors\n    };\n}\n/** Parses the parameters of a `for` loop block. */\nfunction parseForLoopParameters(block, errors, bindingParser) {\n    if (block.parameters.length === 0) {\n        errors.push(new ParseError(block.sourceSpan, '@for loop does not have an expression'));\n        return null;\n    }\n    const [expressionParam, ...secondaryParams] = block.parameters;\n    const match = stripOptionalParentheses(expressionParam, errors)?.match(FOR_LOOP_EXPRESSION_PATTERN);\n    if (!match || match[2].trim().length === 0) {\n        errors.push(new ParseError(expressionParam.sourceSpan, 'Cannot parse expression. @for loop expression must match the pattern \"<identifier> of <expression>\"'));\n        return null;\n    }\n    const [, itemName, rawExpression] = match;\n    const result = {\n        itemName: new Variable(itemName, '$implicit', expressionParam.sourceSpan, expressionParam.sourceSpan),\n        trackBy: null,\n        expression: parseBlockParameterToBinding(expressionParam, bindingParser, rawExpression),\n        context: {},\n    };\n    for (const param of secondaryParams) {\n        const letMatch = param.expression.match(FOR_LOOP_LET_PATTERN);\n        if (letMatch !== null) {\n            parseLetParameter(param.sourceSpan, letMatch[1], param.sourceSpan, result.context, errors);\n            continue;\n        }\n        const trackMatch = param.expression.match(FOR_LOOP_TRACK_PATTERN);\n        if (trackMatch !== null) {\n            if (result.trackBy !== null) {\n                errors.push(new ParseError(param.sourceSpan, '@for loop can only have one \"track\" expression'));\n            }\n            else {\n                const expression = parseBlockParameterToBinding(param, bindingParser, trackMatch[1]);\n                const keywordSpan = new ParseSourceSpan(param.sourceSpan.start, param.sourceSpan.start.moveBy('track'.length));\n                result.trackBy = { expression, keywordSpan };\n            }\n            continue;\n        }\n        errors.push(new ParseError(param.sourceSpan, `Unrecognized @for loop paramater \"${param.expression}\"`));\n    }\n    // Fill out any variables that haven't been defined explicitly.\n    for (const variableName of ALLOWED_FOR_LOOP_LET_VARIABLES) {\n        if (!result.context.hasOwnProperty(variableName)) {\n            // Give ambiently-available context variables empty spans at the end of the start of the `for`\n            // block, since they are not explicitly defined.\n            const emptySpanAfterForBlockStart = new ParseSourceSpan(block.startSourceSpan.end, block.startSourceSpan.end);\n            result.context[variableName] = new Variable(variableName, variableName, emptySpanAfterForBlockStart, emptySpanAfterForBlockStart);\n        }\n    }\n    return result;\n}\n/** Parses the `let` parameter of a `for` loop block. */\nfunction parseLetParameter(sourceSpan, expression, span, context, errors) {\n    const parts = expression.split(',');\n    for (const part of parts) {\n        const expressionParts = part.split('=');\n        const name = expressionParts.length === 2 ? expressionParts[0].trim() : '';\n        const variableName = (expressionParts.length === 2 ? expressionParts[1].trim() : '');\n        if (name.length === 0 || variableName.length === 0) {\n            errors.push(new ParseError(sourceSpan, `Invalid @for loop \"let\" parameter. Parameter should match the pattern \"<name> = <variable name>\"`));\n        }\n        else if (!ALLOWED_FOR_LOOP_LET_VARIABLES.has(variableName)) {\n            errors.push(new ParseError(sourceSpan, `Unknown \"let\" parameter variable \"${variableName}\". The allowed variables are: ${Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES).join(', ')}`));\n        }\n        else if (context.hasOwnProperty(variableName)) {\n            errors.push(new ParseError(sourceSpan, `Duplicate \"let\" parameter variable \"${variableName}\"`));\n        }\n        else {\n            context[variableName] = new Variable(name, variableName, span, span);\n        }\n    }\n}\n/**\n * Checks that the shape of the blocks connected to an\n * `@if` block is correct. Returns an array of errors.\n */\nfunction validateIfConnectedBlocks(connectedBlocks) {\n    const errors = [];\n    let hasElse = false;\n    for (let i = 0; i < connectedBlocks.length; i++) {\n        const block = connectedBlocks[i];\n        if (block.name === 'else') {\n            if (hasElse) {\n                errors.push(new ParseError(block.sourceSpan, 'Conditional can only have one @else block'));\n            }\n            else if (connectedBlocks.length > 1 && i < connectedBlocks.length - 1) {\n                errors.push(new ParseError(block.sourceSpan, '@else block must be last inside the conditional'));\n            }\n            else if (block.parameters.length > 0) {\n                errors.push(new ParseError(block.sourceSpan, '@else block cannot have parameters'));\n            }\n            hasElse = true;\n        }\n        else if (!ELSE_IF_PATTERN.test(block.name)) {\n            errors.push(new ParseError(block.sourceSpan, `Unrecognized conditional block @${block.name}`));\n        }\n    }\n    return errors;\n}\n/** Checks that the shape of a `switch` block is valid. Returns an array of errors. */\nfunction validateSwitchBlock(ast) {\n    const errors = [];\n    let hasDefault = false;\n    if (ast.parameters.length !== 1) {\n        errors.push(new ParseError(ast.sourceSpan, '@switch block must have exactly one parameter'));\n        return errors;\n    }\n    for (const node of ast.children) {\n        // Skip over comments and empty text nodes inside the switch block.\n        // Empty text nodes can be used for formatting while comments don't affect the runtime.\n        if (node instanceof Comment ||\n            (node instanceof Text && node.value.trim().length === 0)) {\n            continue;\n        }\n        if (!(node instanceof Block) || (node.name !== 'case' && node.name !== 'default')) {\n            errors.push(new ParseError(node.sourceSpan, '@switch block can only contain @case and @default blocks'));\n            continue;\n        }\n        if (node.name === 'default') {\n            if (hasDefault) {\n                errors.push(new ParseError(node.sourceSpan, '@switch block can only have one @default block'));\n            }\n            else if (node.parameters.length > 0) {\n                errors.push(new ParseError(node.sourceSpan, '@default block cannot have parameters'));\n            }\n            hasDefault = true;\n        }\n        else if (node.name === 'case' && node.parameters.length !== 1) {\n            errors.push(new ParseError(node.sourceSpan, '@case block must have exactly one parameter'));\n        }\n    }\n    return errors;\n}\n/**\n * Parses a block parameter into a binding AST.\n * @param ast Block parameter that should be parsed.\n * @param bindingParser Parser that the expression should be parsed with.\n * @param part Specific part of the expression that should be parsed.\n */\nfunction parseBlockParameterToBinding(ast, bindingParser, part) {\n    let start;\n    let end;\n    if (typeof part === 'string') {\n        // Note: `lastIndexOf` here should be enough to know the start index of the expression,\n        // because we know that it'll be at the end of the param. Ideally we could use the `d`\n        // flag when matching via regex and get the index from `match.indices`, but it's unclear\n        // if we can use it yet since it's a relatively new feature. See:\n        // https://github.com/tc39/proposal-regexp-match-indices\n        start = Math.max(0, ast.expression.lastIndexOf(part));\n        end = start + part.length;\n    }\n    else {\n        start = 0;\n        end = ast.expression.length;\n    }\n    return bindingParser.parseBinding(ast.expression.slice(start, end), false, ast.sourceSpan, ast.sourceSpan.start.offset + start);\n}\n/** Parses the parameter of a conditional block (`if` or `else if`). */\nfunction parseConditionalBlockParameters(block, errors, bindingParser) {\n    if (block.parameters.length === 0) {\n        errors.push(new ParseError(block.sourceSpan, 'Conditional block does not have an expression'));\n        return null;\n    }\n    const expression = parseBlockParameterToBinding(block.parameters[0], bindingParser);\n    let expressionAlias = null;\n    // Start from 1 since we processed the first parameter already.\n    for (let i = 1; i < block.parameters.length; i++) {\n        const param = block.parameters[i];\n        const aliasMatch = param.expression.match(CONDITIONAL_ALIAS_PATTERN);\n        // For now conditionals can only have an `as` parameter.\n        // We may want to rework this later if we add more.\n        if (aliasMatch === null) {\n            errors.push(new ParseError(param.sourceSpan, `Unrecognized conditional paramater \"${param.expression}\"`));\n        }\n        else if (block.name !== 'if') {\n            errors.push(new ParseError(param.sourceSpan, '\"as\" expression is only allowed on the primary @if block'));\n        }\n        else if (expressionAlias !== null) {\n            errors.push(new ParseError(param.sourceSpan, 'Conditional can only have one \"as\" expression'));\n        }\n        else {\n            const name = aliasMatch[1].trim();\n            expressionAlias = new Variable(name, name, param.sourceSpan, param.sourceSpan);\n        }\n    }\n    return { expression, expressionAlias };\n}\n/** Strips optional parentheses around from a control from expression parameter. */\nfunction stripOptionalParentheses(param, errors) {\n    const expression = param.expression;\n    const spaceRegex = /^\\s$/;\n    let openParens = 0;\n    let start = 0;\n    let end = expression.length - 1;\n    for (let i = 0; i < expression.length; i++) {\n        const char = expression[i];\n        if (char === '(') {\n            start = i + 1;\n            openParens++;\n        }\n        else if (spaceRegex.test(char)) {\n            continue;\n        }\n        else {\n            break;\n        }\n    }\n    if (openParens === 0) {\n        return expression;\n    }\n    for (let i = expression.length - 1; i > -1; i--) {\n        const char = expression[i];\n        if (char === ')') {\n            end = i;\n            openParens--;\n            if (openParens === 0) {\n                break;\n            }\n        }\n        else if (spaceRegex.test(char)) {\n            continue;\n        }\n        else {\n            break;\n        }\n    }\n    if (openParens !== 0) {\n        errors.push(new ParseError(param.sourceSpan, 'Unclosed parentheses in expression'));\n        return null;\n    }\n    return expression.slice(start, end);\n}\n\n/** Pattern for a timing value in a trigger. */\nconst TIME_PATTERN = /^\\d+\\.?\\d*(ms|s)?$/;\n/** Pattern for a separator between keywords in a trigger expression. */\nconst SEPARATOR_PATTERN = /^\\s$/;\n/** Pairs of characters that form syntax that is comma-delimited. */\nconst COMMA_DELIMITED_SYNTAX = new Map([\n    [$LBRACE, $RBRACE], // Object literals\n    [$LBRACKET, $RBRACKET], // Array literals\n    [$LPAREN, $RPAREN], // Function calls\n]);\n/** Possible types of `on` triggers. */\nvar OnTriggerType;\n(function (OnTriggerType) {\n    OnTriggerType[\"IDLE\"] = \"idle\";\n    OnTriggerType[\"TIMER\"] = \"timer\";\n    OnTriggerType[\"INTERACTION\"] = \"interaction\";\n    OnTriggerType[\"IMMEDIATE\"] = \"immediate\";\n    OnTriggerType[\"HOVER\"] = \"hover\";\n    OnTriggerType[\"VIEWPORT\"] = \"viewport\";\n})(OnTriggerType || (OnTriggerType = {}));\n/** Parses a `when` deferred trigger. */\nfunction parseWhenTrigger({ expression, sourceSpan }, bindingParser, triggers, errors) {\n    const whenIndex = expression.indexOf('when');\n    const whenSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(whenIndex), sourceSpan.start.moveBy(whenIndex + 'when'.length));\n    const prefetchSpan = getPrefetchSpan(expression, sourceSpan);\n    // This is here just to be safe, we shouldn't enter this function\n    // in the first place if a block doesn't have the \"when\" keyword.\n    if (whenIndex === -1) {\n        errors.push(new ParseError(sourceSpan, `Could not find \"when\" keyword in expression`));\n    }\n    else {\n        const start = getTriggerParametersStart(expression, whenIndex + 1);\n        const parsed = bindingParser.parseBinding(expression.slice(start), false, sourceSpan, sourceSpan.start.offset + start);\n        trackTrigger('when', triggers, errors, new BoundDeferredTrigger(parsed, sourceSpan, prefetchSpan, whenSourceSpan));\n    }\n}\n/** Parses an `on` trigger */\nfunction parseOnTrigger({ expression, sourceSpan }, triggers, errors, placeholder) {\n    const onIndex = expression.indexOf('on');\n    const onSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(onIndex), sourceSpan.start.moveBy(onIndex + 'on'.length));\n    const prefetchSpan = getPrefetchSpan(expression, sourceSpan);\n    // This is here just to be safe, we shouldn't enter this function\n    // in the first place if a block doesn't have the \"on\" keyword.\n    if (onIndex === -1) {\n        errors.push(new ParseError(sourceSpan, `Could not find \"on\" keyword in expression`));\n    }\n    else {\n        const start = getTriggerParametersStart(expression, onIndex + 1);\n        const parser = new OnTriggerParser(expression, start, sourceSpan, triggers, errors, placeholder, prefetchSpan, onSourceSpan);\n        parser.parse();\n    }\n}\nfunction getPrefetchSpan(expression, sourceSpan) {\n    if (!expression.startsWith('prefetch')) {\n        return null;\n    }\n    return new ParseSourceSpan(sourceSpan.start, sourceSpan.start.moveBy('prefetch'.length));\n}\nclass OnTriggerParser {\n    constructor(expression, start, span, triggers, errors, placeholder, prefetchSpan, onSourceSpan) {\n        this.expression = expression;\n        this.start = start;\n        this.span = span;\n        this.triggers = triggers;\n        this.errors = errors;\n        this.placeholder = placeholder;\n        this.prefetchSpan = prefetchSpan;\n        this.onSourceSpan = onSourceSpan;\n        this.index = 0;\n        this.tokens = new Lexer().tokenize(expression.slice(start));\n    }\n    parse() {\n        while (this.tokens.length > 0 && this.index < this.tokens.length) {\n            const token = this.token();\n            if (!token.isIdentifier()) {\n                this.unexpectedToken(token);\n                break;\n            }\n            // An identifier immediately followed by a comma or the end of\n            // the expression cannot have parameters so we can exit early.\n            if (this.isFollowedByOrLast($COMMA)) {\n                this.consumeTrigger(token, []);\n                this.advance();\n            }\n            else if (this.isFollowedByOrLast($LPAREN)) {\n                this.advance(); // Advance to the opening paren.\n                const prevErrors = this.errors.length;\n                const parameters = this.consumeParameters();\n                if (this.errors.length !== prevErrors) {\n                    break;\n                }\n                this.consumeTrigger(token, parameters);\n                this.advance(); // Advance past the closing paren.\n            }\n            else if (this.index < this.tokens.length - 1) {\n                this.unexpectedToken(this.tokens[this.index + 1]);\n            }\n            this.advance();\n        }\n    }\n    advance() {\n        this.index++;\n    }\n    isFollowedByOrLast(char) {\n        if (this.index === this.tokens.length - 1) {\n            return true;\n        }\n        return this.tokens[this.index + 1].isCharacter(char);\n    }\n    token() {\n        return this.tokens[Math.min(this.index, this.tokens.length - 1)];\n    }\n    consumeTrigger(identifier, parameters) {\n        const triggerNameStartSpan = this.span.start.moveBy(this.start + identifier.index - this.tokens[0].index);\n        const nameSpan = new ParseSourceSpan(triggerNameStartSpan, triggerNameStartSpan.moveBy(identifier.strValue.length));\n        const endSpan = triggerNameStartSpan.moveBy(this.token().end - identifier.index);\n        // Put the prefetch and on spans with the first trigger\n        // This should maybe be refactored to have something like an outer OnGroup AST\n        // Since triggers can be grouped with commas \"on hover(x), interaction(y)\"\n        const isFirstTrigger = identifier.index === 0;\n        const onSourceSpan = isFirstTrigger ? this.onSourceSpan : null;\n        const prefetchSourceSpan = isFirstTrigger ? this.prefetchSpan : null;\n        const sourceSpan = new ParseSourceSpan(isFirstTrigger ? this.span.start : triggerNameStartSpan, endSpan);\n        try {\n            switch (identifier.toString()) {\n                case OnTriggerType.IDLE:\n                    this.trackTrigger('idle', createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSourceSpan, onSourceSpan));\n                    break;\n                case OnTriggerType.TIMER:\n                    this.trackTrigger('timer', createTimerTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan));\n                    break;\n                case OnTriggerType.INTERACTION:\n                    this.trackTrigger('interaction', createInteractionTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));\n                    break;\n                case OnTriggerType.IMMEDIATE:\n                    this.trackTrigger('immediate', createImmediateTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan));\n                    break;\n                case OnTriggerType.HOVER:\n                    this.trackTrigger('hover', createHoverTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));\n                    break;\n                case OnTriggerType.VIEWPORT:\n                    this.trackTrigger('viewport', createViewportTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));\n                    break;\n                default:\n                    throw new Error(`Unrecognized trigger type \"${identifier}\"`);\n            }\n        }\n        catch (e) {\n            this.error(identifier, e.message);\n        }\n    }\n    consumeParameters() {\n        const parameters = [];\n        if (!this.token().isCharacter($LPAREN)) {\n            this.unexpectedToken(this.token());\n            return parameters;\n        }\n        this.advance();\n        const commaDelimStack = [];\n        let current = '';\n        while (this.index < this.tokens.length) {\n            const token = this.token();\n            // Stop parsing if we've hit the end character and we're outside of a comma-delimited syntax.\n            // Note that we don't need to account for strings here since the lexer already parsed them\n            // into string tokens.\n            if (token.isCharacter($RPAREN) && commaDelimStack.length === 0) {\n                if (current.length) {\n                    parameters.push(current);\n                }\n                break;\n            }\n            // In the `on` microsyntax \"top-level\" commas (e.g. ones outside of an parameters) separate\n            // the different triggers (e.g. `on idle,timer(500)`). This is problematic, because the\n            // function-like syntax also implies that multiple parameters can be passed into the\n            // individual trigger (e.g. `on foo(a, b)`). To avoid tripping up the parser with commas that\n            // are part of other sorts of syntax (object literals, arrays), we treat anything inside\n            // a comma-delimited syntax block as plain text.\n            if (token.type === TokenType.Character && COMMA_DELIMITED_SYNTAX.has(token.numValue)) {\n                commaDelimStack.push(COMMA_DELIMITED_SYNTAX.get(token.numValue));\n            }\n            if (commaDelimStack.length > 0 &&\n                token.isCharacter(commaDelimStack[commaDelimStack.length - 1])) {\n                commaDelimStack.pop();\n            }\n            // If we hit a comma outside of a comma-delimited syntax, it means\n            // that we're at the top level and we're starting a new parameter.\n            if (commaDelimStack.length === 0 && token.isCharacter($COMMA) && current.length > 0) {\n                parameters.push(current);\n                current = '';\n                this.advance();\n                continue;\n            }\n            // Otherwise treat the token as a plain text character in the current parameter.\n            current += this.tokenText();\n            this.advance();\n        }\n        if (!this.token().isCharacter($RPAREN) || commaDelimStack.length > 0) {\n            this.error(this.token(), 'Unexpected end of expression');\n        }\n        if (this.index < this.tokens.length - 1 &&\n            !this.tokens[this.index + 1].isCharacter($COMMA)) {\n            this.unexpectedToken(this.tokens[this.index + 1]);\n        }\n        return parameters;\n    }\n    tokenText() {\n        // Tokens have a toString already which we could use, but for string tokens it omits the quotes.\n        // Eventually we could expose this information on the token directly.\n        return this.expression.slice(this.start + this.token().index, this.start + this.token().end);\n    }\n    trackTrigger(name, trigger) {\n        trackTrigger(name, this.triggers, this.errors, trigger);\n    }\n    error(token, message) {\n        const newStart = this.span.start.moveBy(this.start + token.index);\n        const newEnd = newStart.moveBy(token.end - token.index);\n        this.errors.push(new ParseError(new ParseSourceSpan(newStart, newEnd), message));\n    }\n    unexpectedToken(token) {\n        this.error(token, `Unexpected token \"${token}\"`);\n    }\n}\n/** Adds a trigger to a map of triggers. */\nfunction trackTrigger(name, allTriggers, errors, trigger) {\n    if (allTriggers[name]) {\n        errors.push(new ParseError(trigger.sourceSpan, `Duplicate \"${name}\" trigger is not allowed`));\n    }\n    else {\n        allTriggers[name] = trigger;\n    }\n}\nfunction createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n    if (parameters.length > 0) {\n        throw new Error(`\"${OnTriggerType.IDLE}\" trigger cannot have parameters`);\n    }\n    return new IdleDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createTimerTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n    if (parameters.length !== 1) {\n        throw new Error(`\"${OnTriggerType.TIMER}\" trigger must have exactly one parameter`);\n    }\n    const delay = parseDeferredTime(parameters[0]);\n    if (delay === null) {\n        throw new Error(`Could not parse time value of trigger \"${OnTriggerType.TIMER}\"`);\n    }\n    return new TimerDeferredTrigger(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createImmediateTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {\n    if (parameters.length > 0) {\n        throw new Error(`\"${OnTriggerType.IMMEDIATE}\" trigger cannot have parameters`);\n    }\n    return new ImmediateDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createHoverTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {\n    validateReferenceBasedTrigger(OnTriggerType.HOVER, parameters, placeholder);\n    return new HoverDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createInteractionTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {\n    validateReferenceBasedTrigger(OnTriggerType.INTERACTION, parameters, placeholder);\n    return new InteractionDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction createViewportTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {\n    validateReferenceBasedTrigger(OnTriggerType.VIEWPORT, parameters, placeholder);\n    return new ViewportDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);\n}\nfunction validateReferenceBasedTrigger(type, parameters, placeholder) {\n    if (parameters.length > 1) {\n        throw new Error(`\"${type}\" trigger can only have zero or one parameters`);\n    }\n    if (parameters.length === 0) {\n        if (placeholder === null) {\n            throw new Error(`\"${type}\" trigger with no parameters can only be placed on an @defer that has a @placeholder block`);\n        }\n        if (placeholder.children.length !== 1 || !(placeholder.children[0] instanceof Element$1)) {\n            throw new Error(`\"${type}\" trigger with no parameters can only be placed on an @defer that has a ` +\n                `@placeholder block with exactly one root element node`);\n        }\n    }\n}\n/** Gets the index within an expression at which the trigger parameters start. */\nfunction getTriggerParametersStart(value, startPosition = 0) {\n    let hasFoundSeparator = false;\n    for (let i = startPosition; i < value.length; i++) {\n        if (SEPARATOR_PATTERN.test(value[i])) {\n            hasFoundSeparator = true;\n        }\n        else if (hasFoundSeparator) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Parses a time expression from a deferred trigger to\n * milliseconds. Returns null if it cannot be parsed.\n */\nfunction parseDeferredTime(value) {\n    const match = value.match(TIME_PATTERN);\n    if (!match) {\n        return null;\n    }\n    const [time, units] = match;\n    return parseFloat(time) * (units === 's' ? 1000 : 1);\n}\n\n/** Pattern to identify a `prefetch when` trigger. */\nconst PREFETCH_WHEN_PATTERN = /^prefetch\\s+when\\s/;\n/** Pattern to identify a `prefetch on` trigger. */\nconst PREFETCH_ON_PATTERN = /^prefetch\\s+on\\s/;\n/** Pattern to identify a `minimum` parameter in a block. */\nconst MINIMUM_PARAMETER_PATTERN = /^minimum\\s/;\n/** Pattern to identify a `after` parameter in a block. */\nconst AFTER_PARAMETER_PATTERN = /^after\\s/;\n/** Pattern to identify a `when` parameter in a block. */\nconst WHEN_PARAMETER_PATTERN = /^when\\s/;\n/** Pattern to identify a `on` parameter in a block. */\nconst ON_PARAMETER_PATTERN = /^on\\s/;\n/**\n * Predicate function that determines if a block with\n * a specific name cam be connected to a `defer` block.\n */\nfunction isConnectedDeferLoopBlock(name) {\n    return name === 'placeholder' || name === 'loading' || name === 'error';\n}\n/** Creates a deferred block from an HTML AST node. */\nfunction createDeferredBlock(ast, connectedBlocks, visitor, bindingParser) {\n    const errors = [];\n    const { placeholder, loading, error } = parseConnectedBlocks(connectedBlocks, errors, visitor);\n    const { triggers, prefetchTriggers } = parsePrimaryTriggers(ast.parameters, bindingParser, errors, placeholder);\n    // The `defer` block has a main span encompassing all of the connected branches as well.\n    let lastEndSourceSpan = ast.endSourceSpan;\n    let endOfLastSourceSpan = ast.sourceSpan.end;\n    if (connectedBlocks.length > 0) {\n        const lastConnectedBlock = connectedBlocks[connectedBlocks.length - 1];\n        lastEndSourceSpan = lastConnectedBlock.endSourceSpan;\n        endOfLastSourceSpan = lastConnectedBlock.sourceSpan.end;\n    }\n    const sourceSpanWithConnectedBlocks = new ParseSourceSpan(ast.sourceSpan.start, endOfLastSourceSpan);\n    const node = new DeferredBlock(visitAll(visitor, ast.children, ast.children), triggers, prefetchTriggers, placeholder, loading, error, ast.nameSpan, sourceSpanWithConnectedBlocks, ast.sourceSpan, ast.startSourceSpan, lastEndSourceSpan, ast.i18n);\n    return { node, errors };\n}\nfunction parseConnectedBlocks(connectedBlocks, errors, visitor) {\n    let placeholder = null;\n    let loading = null;\n    let error = null;\n    for (const block of connectedBlocks) {\n        try {\n            if (!isConnectedDeferLoopBlock(block.name)) {\n                errors.push(new ParseError(block.startSourceSpan, `Unrecognized block \"@${block.name}\"`));\n                break;\n            }\n            switch (block.name) {\n                case 'placeholder':\n                    if (placeholder !== null) {\n                        errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @placeholder block`));\n                    }\n                    else {\n                        placeholder = parsePlaceholderBlock(block, visitor);\n                    }\n                    break;\n                case 'loading':\n                    if (loading !== null) {\n                        errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @loading block`));\n                    }\n                    else {\n                        loading = parseLoadingBlock(block, visitor);\n                    }\n                    break;\n                case 'error':\n                    if (error !== null) {\n                        errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @error block`));\n                    }\n                    else {\n                        error = parseErrorBlock(block, visitor);\n                    }\n                    break;\n            }\n        }\n        catch (e) {\n            errors.push(new ParseError(block.startSourceSpan, e.message));\n        }\n    }\n    return { placeholder, loading, error };\n}\nfunction parsePlaceholderBlock(ast, visitor) {\n    let minimumTime = null;\n    for (const param of ast.parameters) {\n        if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {\n            if (minimumTime != null) {\n                throw new Error(`@placeholder block can only have one \"minimum\" parameter`);\n            }\n            const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));\n            if (parsedTime === null) {\n                throw new Error(`Could not parse time value of parameter \"minimum\"`);\n            }\n            minimumTime = parsedTime;\n        }\n        else {\n            throw new Error(`Unrecognized parameter in @placeholder block: \"${param.expression}\"`);\n        }\n    }\n    return new DeferredBlockPlaceholder(visitAll(visitor, ast.children, ast.children), minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);\n}\nfunction parseLoadingBlock(ast, visitor) {\n    let afterTime = null;\n    let minimumTime = null;\n    for (const param of ast.parameters) {\n        if (AFTER_PARAMETER_PATTERN.test(param.expression)) {\n            if (afterTime != null) {\n                throw new Error(`@loading block can only have one \"after\" parameter`);\n            }\n            const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));\n            if (parsedTime === null) {\n                throw new Error(`Could not parse time value of parameter \"after\"`);\n            }\n            afterTime = parsedTime;\n        }\n        else if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {\n            if (minimumTime != null) {\n                throw new Error(`@loading block can only have one \"minimum\" parameter`);\n            }\n            const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));\n            if (parsedTime === null) {\n                throw new Error(`Could not parse time value of parameter \"minimum\"`);\n            }\n            minimumTime = parsedTime;\n        }\n        else {\n            throw new Error(`Unrecognized parameter in @loading block: \"${param.expression}\"`);\n        }\n    }\n    return new DeferredBlockLoading(visitAll(visitor, ast.children, ast.children), afterTime, minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);\n}\nfunction parseErrorBlock(ast, visitor) {\n    if (ast.parameters.length > 0) {\n        throw new Error(`@error block cannot have parameters`);\n    }\n    return new DeferredBlockError(visitAll(visitor, ast.children, ast.children), ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);\n}\nfunction parsePrimaryTriggers(params, bindingParser, errors, placeholder) {\n    const triggers = {};\n    const prefetchTriggers = {};\n    for (const param of params) {\n        // The lexer ignores the leading spaces so we can assume\n        // that the expression starts with a keyword.\n        if (WHEN_PARAMETER_PATTERN.test(param.expression)) {\n            parseWhenTrigger(param, bindingParser, triggers, errors);\n        }\n        else if (ON_PARAMETER_PATTERN.test(param.expression)) {\n            parseOnTrigger(param, triggers, errors, placeholder);\n        }\n        else if (PREFETCH_WHEN_PATTERN.test(param.expression)) {\n            parseWhenTrigger(param, bindingParser, prefetchTriggers, errors);\n        }\n        else if (PREFETCH_ON_PATTERN.test(param.expression)) {\n            parseOnTrigger(param, prefetchTriggers, errors, placeholder);\n        }\n        else {\n            errors.push(new ParseError(param.sourceSpan, 'Unrecognized trigger'));\n        }\n    }\n    return { triggers, prefetchTriggers };\n}\n\nconst BIND_NAME_REGEXP = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/;\n// Group 1 = \"bind-\"\nconst KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nconst KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nconst KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nconst KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nconst KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nconst KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nconst IDENT_KW_IDX = 7;\nconst BINDING_DELIMS = {\n    BANANA_BOX: { start: '[(', end: ')]' },\n    PROPERTY: { start: '[', end: ']' },\n    EVENT: { start: '(', end: ')' },\n};\nconst TEMPLATE_ATTR_PREFIX = '*';\nfunction htmlAstToRender3Ast(htmlNodes, bindingParser, options) {\n    const transformer = new HtmlAstToIvyAst(bindingParser, options);\n    const ivyNodes = visitAll(transformer, htmlNodes, htmlNodes);\n    // Errors might originate in either the binding parser or the html to ivy transformer\n    const allErrors = bindingParser.errors.concat(transformer.errors);\n    const result = {\n        nodes: ivyNodes,\n        errors: allErrors,\n        styleUrls: transformer.styleUrls,\n        styles: transformer.styles,\n        ngContentSelectors: transformer.ngContentSelectors\n    };\n    if (options.collectCommentNodes) {\n        result.commentNodes = transformer.commentNodes;\n    }\n    return result;\n}\nclass HtmlAstToIvyAst {\n    constructor(bindingParser, options) {\n        this.bindingParser = bindingParser;\n        this.options = options;\n        this.errors = [];\n        this.styles = [];\n        this.styleUrls = [];\n        this.ngContentSelectors = [];\n        // This array will be populated if `Render3ParseOptions['collectCommentNodes']` is true\n        this.commentNodes = [];\n        this.inI18nBlock = false;\n        /**\n         * Keeps track of the nodes that have been processed already when previous nodes were visited.\n         * These are typically blocks connected to other blocks or text nodes between connected blocks.\n         */\n        this.processedNodes = new Set();\n    }\n    // HTML visitor\n    visitElement(element) {\n        const isI18nRootElement = isI18nRootNode(element.i18n);\n        if (isI18nRootElement) {\n            if (this.inI18nBlock) {\n                this.reportError('Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.', element.sourceSpan);\n            }\n            this.inI18nBlock = true;\n        }\n        const preparsedElement = preparseElement(element);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT) {\n            return null;\n        }\n        else if (preparsedElement.type === PreparsedElementType.STYLE) {\n            const contents = textContents(element);\n            if (contents !== null) {\n                this.styles.push(contents);\n            }\n            return null;\n        }\n        else if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n            isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n            this.styleUrls.push(preparsedElement.hrefAttr);\n            return null;\n        }\n        // Whether the element is a `<ng-template>`\n        const isTemplateElement = isNgTemplate(element.name);\n        const parsedProperties = [];\n        const boundEvents = [];\n        const variables = [];\n        const references = [];\n        const attributes = [];\n        const i18nAttrsMeta = {};\n        const templateParsedProperties = [];\n        const templateVariables = [];\n        // Whether the element has any *-attribute\n        let elementHasInlineTemplate = false;\n        for (const attribute of element.attrs) {\n            let hasBinding = false;\n            const normalizedName = normalizeAttributeName(attribute.name);\n            // `*attr` defines template bindings\n            let isTemplateBinding = false;\n            if (attribute.i18n) {\n                i18nAttrsMeta[attribute.name] = attribute.i18n;\n            }\n            if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n                // *-attributes\n                if (elementHasInlineTemplate) {\n                    this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute.sourceSpan);\n                }\n                isTemplateBinding = true;\n                elementHasInlineTemplate = true;\n                const templateValue = attribute.value;\n                const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);\n                const parsedVariables = [];\n                const absoluteValueOffset = attribute.valueSpan ?\n                    attribute.valueSpan.start.offset :\n                    // If there is no value span the attribute does not have a value, like `attr` in\n                    //`<div attr></div>`. In this case, point to one character beyond the last character of\n                    // the attribute name.\n                    attribute.sourceSpan.start.offset + attribute.name.length;\n                this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, absoluteValueOffset, [], templateParsedProperties, parsedVariables, true /* isIvyAst */);\n                templateVariables.push(...parsedVariables.map(v => new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan)));\n            }\n            else {\n                // Check for variables, events, property bindings, interpolation\n                hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);\n            }\n            if (!hasBinding && !isTemplateBinding) {\n                // don't include the bindings as attributes as well in the AST\n                attributes.push(this.visitAttribute(attribute));\n            }\n        }\n        let children;\n        if (preparsedElement.nonBindable) {\n            // The `NonBindableVisitor` may need to return an array of nodes for blocks so we need\n            // to flatten the array here. Avoid doing this for the `HtmlAstToIvyAst` since `flat` creates\n            // a new array.\n            children = visitAll(NON_BINDABLE_VISITOR, element.children).flat(Infinity);\n        }\n        else {\n            children = visitAll(this, element.children, element.children);\n        }\n        let parsedElement;\n        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n            // `<ng-content>`\n            if (element.children &&\n                !element.children.every((node) => isEmptyTextNode(node) || isCommentNode(node))) {\n                this.reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n            }\n            const selector = preparsedElement.selectAttr;\n            const attrs = element.attrs.map(attr => this.visitAttribute(attr));\n            parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);\n            this.ngContentSelectors.push(selector);\n        }\n        else if (isTemplateElement) {\n            // `<ng-template>`\n            const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n            parsedElement = new Template(element.name, attributes, attrs.bound, boundEvents, [ /* no template attributes */], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        else {\n            const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n            parsedElement = new Element$1(element.name, attributes, attrs.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        if (elementHasInlineTemplate) {\n            // If this node is an inline-template (e.g. has *ngFor) then we need to create a template\n            // node that contains this node.\n            // Moreover, if the node is an element, then we need to hoist its attributes to the template\n            // node for matching against content projection selectors.\n            const attrs = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);\n            const templateAttrs = [];\n            attrs.literal.forEach(attr => templateAttrs.push(attr));\n            attrs.bound.forEach(attr => templateAttrs.push(attr));\n            const hoistedAttrs = parsedElement instanceof Element$1 ?\n                {\n                    attributes: parsedElement.attributes,\n                    inputs: parsedElement.inputs,\n                    outputs: parsedElement.outputs,\n                } :\n                { attributes: [], inputs: [], outputs: [] };\n            // For <ng-template>s with structural directives on them, avoid passing i18n information to\n            // the wrapping template to prevent unnecessary i18n instructions from being generated. The\n            // necessary i18n meta information will be extracted from child elements.\n            const i18n = isTemplateElement && isI18nRootElement ? undefined : element.i18n;\n            const name = parsedElement instanceof Template ? null : parsedElement.name;\n            parsedElement = new Template(name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [ /* no references */], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, i18n);\n        }\n        if (isI18nRootElement) {\n            this.inI18nBlock = false;\n        }\n        return parsedElement;\n    }\n    visitAttribute(attribute) {\n        return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n    }\n    visitText(text) {\n        return this.processedNodes.has(text) ?\n            null :\n            this._visitTextWithInterpolation(text.value, text.sourceSpan, text.tokens, text.i18n);\n    }\n    visitExpansion(expansion) {\n        if (!expansion.i18n) {\n            // do not generate Icu in case it was created\n            // outside of i18n block in a template\n            return null;\n        }\n        if (!isI18nRootNode(expansion.i18n)) {\n            throw new Error(`Invalid type \"${expansion.i18n.constructor}\" for \"i18n\" property of ${expansion.sourceSpan.toString()}. Expected a \"Message\"`);\n        }\n        const message = expansion.i18n;\n        const vars = {};\n        const placeholders = {};\n        // extract VARs from ICUs - we process them separately while\n        // assembling resulting message via goog.getMsg function, since\n        // we need to pass them to top-level goog.getMsg call\n        Object.keys(message.placeholders).forEach(key => {\n            const value = message.placeholders[key];\n            if (key.startsWith(I18N_ICU_VAR_PREFIX)) {\n                // Currently when the `plural` or `select` keywords in an ICU contain trailing spaces (e.g.\n                // `{count, select , ...}`), these spaces are also included into the key names in ICU vars\n                // (e.g. \"VAR_SELECT \"). These trailing spaces are not desirable, since they will later be\n                // converted into `_` symbols while normalizing placeholder names, which might lead to\n                // mismatches at runtime (i.e. placeholder will not be replaced with the correct value).\n                const formattedKey = key.trim();\n                const ast = this.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);\n                vars[formattedKey] = new BoundText(ast, value.sourceSpan);\n            }\n            else {\n                placeholders[key] = this._visitTextWithInterpolation(value.text, value.sourceSpan, null);\n            }\n        });\n        return new Icu$1(vars, placeholders, expansion.sourceSpan, message);\n    }\n    visitExpansionCase(expansionCase) {\n        return null;\n    }\n    visitComment(comment) {\n        if (this.options.collectCommentNodes) {\n            this.commentNodes.push(new Comment$1(comment.value || '', comment.sourceSpan));\n        }\n        return null;\n    }\n    visitBlockParameter() {\n        return null;\n    }\n    visitBlock(block, context) {\n        const index = Array.isArray(context) ? context.indexOf(block) : -1;\n        if (index === -1) {\n            throw new Error('Visitor invoked incorrectly. Expecting visitBlock to be invoked siblings array as its context');\n        }\n        // Connected blocks may have been processed as a part of the previous block.\n        if (this.processedNodes.has(block)) {\n            return null;\n        }\n        let result = null;\n        switch (block.name) {\n            case 'defer':\n                result = createDeferredBlock(block, this.findConnectedBlocks(index, context, isConnectedDeferLoopBlock), this, this.bindingParser);\n                break;\n            case 'switch':\n                result = createSwitchBlock(block, this, this.bindingParser);\n                break;\n            case 'for':\n                result = createForLoop(block, this.findConnectedBlocks(index, context, isConnectedForLoopBlock), this, this.bindingParser);\n                break;\n            case 'if':\n                result = createIfBlock(block, this.findConnectedBlocks(index, context, isConnectedIfLoopBlock), this, this.bindingParser);\n                break;\n            default:\n                let errorMessage;\n                if (isConnectedDeferLoopBlock(block.name)) {\n                    errorMessage = `@${block.name} block can only be used after an @defer block.`;\n                    this.processedNodes.add(block);\n                }\n                else if (isConnectedForLoopBlock(block.name)) {\n                    errorMessage = `@${block.name} block can only be used after an @for block.`;\n                    this.processedNodes.add(block);\n                }\n                else if (isConnectedIfLoopBlock(block.name)) {\n                    errorMessage = `@${block.name} block can only be used after an @if or @else if block.`;\n                    this.processedNodes.add(block);\n                }\n                else {\n                    errorMessage = `Unrecognized block @${block.name}.`;\n                }\n                result = {\n                    node: new UnknownBlock(block.name, block.sourceSpan, block.nameSpan),\n                    errors: [new ParseError(block.sourceSpan, errorMessage)],\n                };\n                break;\n        }\n        this.errors.push(...result.errors);\n        return result.node;\n    }\n    findConnectedBlocks(primaryBlockIndex, siblings, predicate) {\n        const relatedBlocks = [];\n        for (let i = primaryBlockIndex + 1; i < siblings.length; i++) {\n            const node = siblings[i];\n            // Ignore empty text nodes between blocks.\n            if (node instanceof Text && node.value.trim().length === 0) {\n                // Add the text node to the processed nodes since we don't want\n                // it to be generated between the connected nodes.\n                this.processedNodes.add(node);\n                continue;\n            }\n            // Stop searching as soon as we hit a non-block node or a block that is unrelated.\n            if (!(node instanceof Block) || !predicate(node.name)) {\n                break;\n            }\n            relatedBlocks.push(node);\n            this.processedNodes.add(node);\n        }\n        return relatedBlocks;\n    }\n    // convert view engine `ParsedProperty` to a format suitable for IVY\n    extractAttributes(elementName, properties, i18nPropsMeta) {\n        const bound = [];\n        const literal = [];\n        properties.forEach(prop => {\n            const i18n = i18nPropsMeta[prop.name];\n            if (prop.isLiteral) {\n                literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n));\n            }\n            else {\n                // Note that validation is skipped and property mapping is disabled\n                // due to the fact that we need to make sure a given prop is not an\n                // input of a directive and directive matching happens at runtime.\n                const bep = this.bindingParser.createBoundElementProperty(elementName, prop, /* skipValidation */ true, /* mapPropertyName */ false);\n                bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));\n            }\n        });\n        return { bound, literal };\n    }\n    parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {\n        const name = normalizeAttributeName(attribute.name);\n        const value = attribute.value;\n        const srcSpan = attribute.sourceSpan;\n        const absoluteOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : srcSpan.start.offset;\n        function createKeySpan(srcSpan, prefix, identifier) {\n            // We need to adjust the start location for the keySpan to account for the removed 'data-'\n            // prefix from `normalizeAttributeName`.\n            const normalizationAdjustment = attribute.name.length - name.length;\n            const keySpanStart = srcSpan.start.moveBy(prefix.length + normalizationAdjustment);\n            const keySpanEnd = keySpanStart.moveBy(identifier.length);\n            return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);\n        }\n        const bindParts = name.match(BIND_NAME_REGEXP);\n        if (bindParts) {\n            if (bindParts[KW_BIND_IDX] != null) {\n                const identifier = bindParts[IDENT_KW_IDX];\n                const keySpan = createKeySpan(srcSpan, bindParts[KW_BIND_IDX], identifier);\n                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n            }\n            else if (bindParts[KW_LET_IDX]) {\n                if (isTemplateElement) {\n                    const identifier = bindParts[IDENT_KW_IDX];\n                    const keySpan = createKeySpan(srcSpan, bindParts[KW_LET_IDX], identifier);\n                    this.parseVariable(identifier, value, srcSpan, keySpan, attribute.valueSpan, variables);\n                }\n                else {\n                    this.reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n                }\n            }\n            else if (bindParts[KW_REF_IDX]) {\n                const identifier = bindParts[IDENT_KW_IDX];\n                const keySpan = createKeySpan(srcSpan, bindParts[KW_REF_IDX], identifier);\n                this.parseReference(identifier, value, srcSpan, keySpan, attribute.valueSpan, references);\n            }\n            else if (bindParts[KW_ON_IDX]) {\n                const events = [];\n                const identifier = bindParts[IDENT_KW_IDX];\n                const keySpan = createKeySpan(srcSpan, bindParts[KW_ON_IDX], identifier);\n                this.bindingParser.parseEvent(identifier, value, /* isAssignmentEvent */ false, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);\n                addEvents(events, boundEvents);\n            }\n            else if (bindParts[KW_BINDON_IDX]) {\n                const identifier = bindParts[IDENT_KW_IDX];\n                const keySpan = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX], identifier);\n                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n                this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);\n            }\n            else if (bindParts[KW_AT_IDX]) {\n                const keySpan = createKeySpan(srcSpan, '', name);\n                this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n            }\n            return true;\n        }\n        // We didn't see a kw-prefixed property binding, but we have not yet checked\n        // for the []/()/[()] syntax.\n        let delims = null;\n        if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {\n            delims = BINDING_DELIMS.BANANA_BOX;\n        }\n        else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {\n            delims = BINDING_DELIMS.PROPERTY;\n        }\n        else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {\n            delims = BINDING_DELIMS.EVENT;\n        }\n        if (delims !== null &&\n            // NOTE: older versions of the parser would match a start/end delimited\n            // binding iff the property name was terminated by the ending delimiter\n            // and the identifier in the binding was non-empty.\n            // TODO(ayazhafiz): update this to handle malformed bindings.\n            name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {\n            const identifier = name.substring(delims.start.length, name.length - delims.end.length);\n            const keySpan = createKeySpan(srcSpan, delims.start, identifier);\n            if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {\n                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n                this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);\n            }\n            else if (delims.start === BINDING_DELIMS.PROPERTY.start) {\n                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n            }\n            else {\n                const events = [];\n                this.bindingParser.parseEvent(identifier, value, /* isAssignmentEvent */ false, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);\n                addEvents(events, boundEvents);\n            }\n            return true;\n        }\n        // No explicit binding found.\n        const keySpan = createKeySpan(srcSpan, '' /* prefix */, name);\n        const hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan, attribute.valueTokens ?? null);\n        return hasBinding;\n    }\n    _visitTextWithInterpolation(value, sourceSpan, interpolatedTokens, i18n) {\n        const valueNoNgsp = replaceNgsp(value);\n        const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan, interpolatedTokens);\n        return expr ? new BoundText(expr, sourceSpan, i18n) : new Text$3(valueNoNgsp, sourceSpan);\n    }\n    parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {\n        if (identifier.indexOf('-') > -1) {\n            this.reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n        }\n        else if (identifier.length === 0) {\n            this.reportError(`Variable does not have a name`, sourceSpan);\n        }\n        variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));\n    }\n    parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {\n        if (identifier.indexOf('-') > -1) {\n            this.reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n        }\n        else if (identifier.length === 0) {\n            this.reportError(`Reference does not have a name`, sourceSpan);\n        }\n        else if (references.some(reference => reference.name === identifier)) {\n            this.reportError(`Reference \"#${identifier}\" is defined more than once`, sourceSpan);\n        }\n        references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));\n    }\n    parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {\n        const events = [];\n        this.bindingParser.parseEvent(`${name}Change`, `${expression} =$event`, /* isAssignmentEvent */ true, sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events, keySpan);\n        addEvents(events, boundEvents);\n    }\n    reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n        this.errors.push(new ParseError(sourceSpan, message, level));\n    }\n}\nclass NonBindableVisitor {\n    visitElement(ast) {\n        const preparsedElement = preparseElement(ast);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE ||\n            preparsedElement.type === PreparsedElementType.STYLESHEET) {\n            // Skipping <script> for security reasons\n            // Skipping <style> and stylesheets as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        const children = visitAll(this, ast.children, null);\n        return new Element$1(ast.name, visitAll(this, ast.attrs), \n        /* inputs */ [], /* outputs */ [], children, /* references */ [], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);\n    }\n    visitComment(comment) {\n        return null;\n    }\n    visitAttribute(attribute) {\n        return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n    }\n    visitText(text) {\n        return new Text$3(text.value, text.sourceSpan);\n    }\n    visitExpansion(expansion) {\n        return null;\n    }\n    visitExpansionCase(expansionCase) {\n        return null;\n    }\n    visitBlock(block, context) {\n        const nodes = [\n            // In an ngNonBindable context we treat the opening/closing tags of block as plain text.\n            // This is the as if the `tokenizeBlocks` option was disabled.\n            new Text$3(block.startSourceSpan.toString(), block.startSourceSpan),\n            ...visitAll(this, block.children)\n        ];\n        if (block.endSourceSpan !== null) {\n            nodes.push(new Text$3(block.endSourceSpan.toString(), block.endSourceSpan));\n        }\n        return nodes;\n    }\n    visitBlockParameter(parameter, context) {\n        return null;\n    }\n}\nconst NON_BINDABLE_VISITOR = new NonBindableVisitor();\nfunction normalizeAttributeName(attrName) {\n    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n}\nfunction addEvents(events, boundEvents) {\n    boundEvents.push(...events.map(e => BoundEvent.fromParsedEvent(e)));\n}\nfunction isEmptyTextNode(node) {\n    return node instanceof Text && node.value.trim().length == 0;\n}\nfunction isCommentNode(node) {\n    return node instanceof Comment;\n}\nfunction textContents(node) {\n    if (node.children.length !== 1 || !(node.children[0] instanceof Text)) {\n        return null;\n    }\n    else {\n        return node.children[0].value;\n    }\n}\n\nvar TagType;\n(function (TagType) {\n    TagType[TagType[\"ELEMENT\"] = 0] = \"ELEMENT\";\n    TagType[TagType[\"TEMPLATE\"] = 1] = \"TEMPLATE\";\n})(TagType || (TagType = {}));\n/**\n * Generates an object that is used as a shared state between parent and all child contexts.\n */\nfunction setupRegistry() {\n    return { getUniqueId: getSeqNumberGenerator(), icus: new Map() };\n}\n/**\n * I18nContext is a helper class which keeps track of all i18n-related aspects\n * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.\n *\n * When we enter a nested template, the top-level context is being passed down\n * to the nested component, which uses this context to generate a child instance\n * of I18nContext class (to handle nested template) and at the end, reconciles it back\n * with the parent context.\n *\n * @param index Instruction index of i18nStart, which initiates this context\n * @param ref Reference to a translation const that represents the content if thus context\n * @param level Nesting level defined for child contexts\n * @param templateIndex Instruction index of a template which this context belongs to\n * @param meta Meta information (id, meaning, description, etc) associated with this context\n */\nclass I18nContext {\n    constructor(index, ref, level = 0, templateIndex = null, meta, registry) {\n        this.index = index;\n        this.ref = ref;\n        this.level = level;\n        this.templateIndex = templateIndex;\n        this.meta = meta;\n        this.registry = registry;\n        this.bindings = new Set();\n        this.placeholders = new Map();\n        this.isEmitted = false;\n        this._unresolvedCtxCount = 0;\n        this._registry = registry || setupRegistry();\n        this.id = this._registry.getUniqueId();\n    }\n    appendTag(type, node, index, closed) {\n        if (node.isVoid && closed) {\n            return; // ignore \"close\" for void tags\n        }\n        const ph = node.isVoid || !closed ? node.startName : node.closeName;\n        const content = { type, index, ctx: this.id, isVoid: node.isVoid, closed };\n        updatePlaceholderMap(this.placeholders, ph, content);\n    }\n    appendBlockPart(node, index, closed) {\n        const ph = closed ? node.closeName : node.startName;\n        const content = { type: TagType.TEMPLATE, index, ctx: this.id, closed };\n        updatePlaceholderMap(this.placeholders, ph, content);\n    }\n    get icus() {\n        return this._registry.icus;\n    }\n    get isRoot() {\n        return this.level === 0;\n    }\n    get isResolved() {\n        return this._unresolvedCtxCount === 0;\n    }\n    getSerializedPlaceholders() {\n        const result = new Map();\n        this.placeholders.forEach((values, key) => result.set(key, values.map(serializePlaceholderValue)));\n        return result;\n    }\n    // public API to accumulate i18n-related content\n    appendBinding(binding) {\n        this.bindings.add(binding);\n    }\n    appendIcu(name, ref) {\n        updatePlaceholderMap(this._registry.icus, name, ref);\n    }\n    appendBoundText(node) {\n        const phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);\n        phs.forEach((values, key) => updatePlaceholderMap(this.placeholders, key, ...values));\n    }\n    appendTemplate(node, index) {\n        // add open and close tags at the same time,\n        // since we process nested templates separately\n        this.appendTag(TagType.TEMPLATE, node, index, false);\n        this.appendTag(TagType.TEMPLATE, node, index, true);\n        this._unresolvedCtxCount++;\n    }\n    appendBlock(node, index) {\n        // add open and close tags at the same time,\n        // since we process nested templates separately\n        this.appendBlockPart(node, index, false);\n        this.appendBlockPart(node, index, true);\n        this._unresolvedCtxCount++;\n    }\n    appendElement(node, index, closed) {\n        this.appendTag(TagType.ELEMENT, node, index, closed);\n    }\n    appendProjection(node, index) {\n        // Add open and close tags at the same time, since `<ng-content>` has no content,\n        // so when we come across `<ng-content>` we can register both open and close tags.\n        // Note: runtime i18n logic doesn't distinguish `<ng-content>` tag placeholders and\n        // regular element tag placeholders, so we generate element placeholders for both types.\n        this.appendTag(TagType.ELEMENT, node, index, false);\n        this.appendTag(TagType.ELEMENT, node, index, true);\n    }\n    /**\n     * Generates an instance of a child context based on the root one,\n     * when we enter a nested template within I18n section.\n     *\n     * @param index Instruction index of corresponding i18nStart, which initiates this context\n     * @param templateIndex Instruction index of a template which this context belongs to\n     * @param meta Meta information (id, meaning, description, etc) associated with this context\n     *\n     * @returns I18nContext instance\n     */\n    forkChildContext(index, templateIndex, meta) {\n        return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);\n    }\n    /**\n     * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).\n     *\n     * @param context Child I18nContext instance to be reconciled with parent context.\n     */\n    reconcileChildContext(context) {\n        // set the right context id for open and close\n        // template tags, so we can use it as sub-block ids\n        ['start', 'close'].forEach((op) => {\n            const key = context.meta[`${op}Name`];\n            const phs = this.placeholders.get(key) || [];\n            const tag = phs.find(findTemplateFn(this.id, context.templateIndex));\n            if (tag) {\n                tag.ctx = context.id;\n            }\n        });\n        // reconcile placeholders\n        const childPhs = context.placeholders;\n        childPhs.forEach((values, key) => {\n            const phs = this.placeholders.get(key);\n            if (!phs) {\n                this.placeholders.set(key, values);\n                return;\n            }\n            // try to find matching template...\n            const tmplIdx = phs.findIndex(findTemplateFn(context.id, context.templateIndex));\n            if (tmplIdx >= 0) {\n                // ... if found - replace it with nested template content\n                const isCloseTag = key.startsWith('CLOSE');\n                const isTemplateTag = key.endsWith('NG-TEMPLATE');\n                if (isTemplateTag) {\n                    // current template's content is placed before or after\n                    // parent template tag, depending on the open/close attribute\n                    phs.splice(tmplIdx + (isCloseTag ? 0 : 1), 0, ...values);\n                }\n                else {\n                    const idx = isCloseTag ? values.length - 1 : 0;\n                    values[idx].tmpl = phs[tmplIdx];\n                    phs.splice(tmplIdx, 1, ...values);\n                }\n            }\n            else {\n                // ... otherwise just append content to placeholder value\n                phs.push(...values);\n            }\n            this.placeholders.set(key, phs);\n        });\n        this._unresolvedCtxCount--;\n    }\n}\n//\n// Helper methods\n//\nfunction wrap(symbol, index, contextId, closed) {\n    const state = closed ? '/' : '';\n    return wrapI18nPlaceholder(`${state}${symbol}${index}`, contextId);\n}\nfunction wrapTag(symbol, { index, ctx, isVoid }, closed) {\n    return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) :\n        wrap(symbol, index, ctx, closed);\n}\nfunction findTemplateFn(ctx, templateIndex) {\n    return (token) => typeof token === 'object' && token.type === TagType.TEMPLATE &&\n        token.index === templateIndex && token.ctx === ctx;\n}\nfunction serializePlaceholderValue(value) {\n    const element = (data, closed) => wrapTag('#', data, closed);\n    const template = (data, closed) => wrapTag('*', data, closed);\n    switch (value.type) {\n        case TagType.ELEMENT:\n            // close element tag\n            if (value.closed) {\n                return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');\n            }\n            // open element tag that also initiates a template\n            if (value.tmpl) {\n                return template(value.tmpl) + element(value) +\n                    (value.isVoid ? template(value.tmpl, true) : '');\n            }\n            return element(value);\n        case TagType.TEMPLATE:\n            return template(value, value.closed);\n        default:\n            return value;\n    }\n}\n\n// Selector attribute name of `<ng-content>`\nconst NG_CONTENT_SELECT_ATTR = 'select';\n// Attribute name of `ngProjectAs`.\nconst NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n// Global symbols available only inside event bindings.\nconst EVENT_BINDING_SCOPE_GLOBALS = new Set(['$event']);\n// Tag name of the `ng-template` element.\nconst NG_TEMPLATE_TAG_NAME = 'ng-template';\n// List of supported global targets for event listeners\nconst GLOBAL_TARGET_RESOLVERS = new Map([['window', Identifiers.resolveWindow], ['document', Identifiers.resolveDocument], ['body', Identifiers.resolveBody]]);\nconst LEADING_TRIVIA_CHARS = [' ', '\\n', '\\r', '\\t'];\n//  if (rf & flags) { .. }\nfunction renderFlagCheckIfStmt(flags, statements) {\n    return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);\n}\nfunction prepareEventListenerParameters(eventAst, handlerName = null, scope = null) {\n    const { type, name, target, phase, handler } = eventAst;\n    if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {\n        throw new Error(`Unexpected global target '${target}' defined for '${name}' event.\n        Supported list of global targets: ${Array.from(GLOBAL_TARGET_RESOLVERS.keys())}.`);\n    }\n    const eventArgumentName = '$event';\n    const implicitReceiverAccesses = new Set();\n    const implicitReceiverExpr = (scope === null || scope.bindingLevel === 0) ?\n        variable(CONTEXT_NAME) :\n        scope.getOrCreateSharedContextVar(0);\n    const bindingStatements = convertActionBinding(scope, implicitReceiverExpr, handler, 'b', eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);\n    const statements = [];\n    const variableDeclarations = scope?.variableDeclarations();\n    const restoreViewStatement = scope?.restoreViewStatement();\n    if (variableDeclarations) {\n        // `variableDeclarations` needs to run first, because\n        // `restoreViewStatement` depends on the result.\n        statements.push(...variableDeclarations);\n    }\n    statements.push(...bindingStatements);\n    if (restoreViewStatement) {\n        statements.unshift(restoreViewStatement);\n        // If there's a `restoreView` call, we need to reset the view at the end of the listener\n        // in order to avoid a leak. If there's a `return` statement already, we wrap it in the\n        // call, e.g. `return resetView(ctx.foo())`. Otherwise we add the call as the last statement.\n        const lastStatement = statements[statements.length - 1];\n        if (lastStatement instanceof ReturnStatement) {\n            statements[statements.length - 1] = new ReturnStatement(invokeInstruction(lastStatement.value.sourceSpan, Identifiers.resetView, [lastStatement.value]));\n        }\n        else {\n            statements.push(new ExpressionStatement(invokeInstruction(null, Identifiers.resetView, [])));\n        }\n    }\n    const eventName = type === 1 /* ParsedEventType.Animation */ ? prepareSyntheticListenerName(name, phase) : name;\n    const fnName = handlerName && sanitizeIdentifier(handlerName);\n    const fnArgs = [];\n    if (implicitReceiverAccesses.has(eventArgumentName)) {\n        fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));\n    }\n    const handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);\n    const params = [literal(eventName), handlerFn];\n    if (target) {\n        params.push(literal(false), // `useCapture` flag, defaults to `false`\n        importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));\n    }\n    return params;\n}\nfunction createComponentDefConsts() {\n    return {\n        prepareStatements: [],\n        constExpressions: [],\n        i18nVarRefsCache: new Map(),\n    };\n}\nclass TemplateData {\n    constructor(name, index, scope, visitor) {\n        this.name = name;\n        this.index = index;\n        this.scope = scope;\n        this.visitor = visitor;\n    }\n    getConstCount() {\n        return this.visitor.getConstCount();\n    }\n    getVarCount() {\n        return this.visitor.getVarCount();\n    }\n}\nclass TemplateDefinitionBuilder {\n    constructor(constantPool, parentBindingScope, level = 0, contextName, i18nContext, templateIndex, templateName, _namespace, relativeContextFilePath, i18nUseExternalIds, deferBlocks, elementLocations, allDeferrableDepsFn, _constants = createComponentDefConsts()) {\n        this.constantPool = constantPool;\n        this.level = level;\n        this.contextName = contextName;\n        this.i18nContext = i18nContext;\n        this.templateIndex = templateIndex;\n        this.templateName = templateName;\n        this._namespace = _namespace;\n        this.i18nUseExternalIds = i18nUseExternalIds;\n        this.deferBlocks = deferBlocks;\n        this.elementLocations = elementLocations;\n        this.allDeferrableDepsFn = allDeferrableDepsFn;\n        this._constants = _constants;\n        this._dataIndex = 0;\n        this._bindingContext = 0;\n        this._prefixCode = [];\n        /**\n         * List of callbacks to generate creation mode instructions. We store them here as we process\n         * the template so bindings in listeners are resolved only once all nodes have been visited.\n         * This ensures all local refs and context variables are available for matching.\n         */\n        this._creationCodeFns = [];\n        /**\n         * List of callbacks to generate update mode instructions. We store them here as we process\n         * the template so bindings are resolved only once all nodes have been visited. This ensures\n         * all local refs and context variables are available for matching.\n         */\n        this._updateCodeFns = [];\n        /** Index of the currently-selected node. */\n        this._currentIndex = 0;\n        /** Temporary variable declarations generated from visiting pipes, literals, etc. */\n        this._tempVariables = [];\n        /**\n         * Temporary variable used to store state between control flow instructions.\n         * Should be accessed via the `allocateControlFlowTempVariable` method.\n         */\n        this._controlFlowTempVariable = null;\n        /**\n         * List of callbacks to build nested templates. Nested templates must not be visited until\n         * after the parent template has finished visiting all of its nodes. This ensures that all\n         * local ref bindings in nested templates are able to find local ref values if the refs\n         * are defined after the template declaration.\n         */\n        this._nestedTemplateFns = [];\n        // i18n context local to this template\n        this.i18n = null;\n        // Number of slots to reserve for pureFunctions\n        this._pureFunctionSlots = 0;\n        // Number of binding slots\n        this._bindingSlots = 0;\n        // Projection slots found in the template. Projection slots can distribute projected\n        // nodes based on a selector, or can just use the wildcard selector to match\n        // all nodes which aren't matching any selector.\n        this._ngContentReservedSlots = [];\n        // Number of non-default selectors found in all parent templates of this template. We need to\n        // track it to properly adjust projection slot index in the `projection` instruction.\n        this._ngContentSelectorsOffset = 0;\n        // Expression that should be used as implicit receiver when converting template\n        // expressions to output AST.\n        this._implicitReceiverExpr = null;\n        // These should be handled in the template or element directly.\n        this.visitReference = invalid;\n        this.visitVariable = invalid;\n        this.visitTextAttribute = invalid;\n        this.visitBoundAttribute = invalid;\n        this.visitBoundEvent = invalid;\n        this.visitDeferredTrigger = invalid;\n        this.visitDeferredBlockError = invalid;\n        this.visitDeferredBlockLoading = invalid;\n        this.visitDeferredBlockPlaceholder = invalid;\n        this.visitIfBlockBranch = invalid;\n        this.visitSwitchBlockCase = invalid;\n        this.visitForLoopBlockEmpty = invalid;\n        this.visitUnknownBlock = invalid;\n        this._bindingScope = parentBindingScope.nestedScope(level);\n        // Turn the relative context file path into an identifier by replacing non-alphanumeric\n        // characters with underscores.\n        this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';\n        this._valueConverter = new ValueConverter(constantPool, () => this.allocateDataSlot(), (numSlots) => this.allocatePureFunctionSlots(numSlots), (name, localName, slot, value) => {\n            this._bindingScope.set(this.level, localName, value);\n            this.creationInstruction(null, Identifiers.pipe, [literal(slot), literal(name)]);\n        });\n    }\n    buildTemplateFunction(nodes, variables, ngContentSelectorsOffset = 0, i18n, variableAliases) {\n        this._ngContentSelectorsOffset = ngContentSelectorsOffset;\n        if (this._namespace !== Identifiers.namespaceHTML) {\n            this.creationInstruction(null, this._namespace);\n        }\n        // Create variable bindings\n        variables.forEach(v => {\n            const alias = variableAliases?.[v.name];\n            this.registerContextVariables(v.name, v.value);\n            if (alias) {\n                this.registerContextVariables(alias, v.value);\n            }\n        });\n        // Initiate i18n context in case:\n        // - this template has parent i18n context\n        // - or the template has i18n meta associated with it,\n        //   but it's not initiated by the Element (e.g. <ng-template i18n>)\n        const initI18nContext = this.i18nContext ||\n            (isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) &&\n                !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n));\n        const selfClosingI18nInstruction = hasTextChildrenOnly(nodes);\n        if (initI18nContext) {\n            this.i18nStart(null, i18n, selfClosingI18nInstruction);\n        }\n        // This is the initial pass through the nodes of this template. In this pass, we\n        // queue all creation mode and update mode instructions for generation in the second\n        // pass. It's necessary to separate the passes to ensure local refs are defined before\n        // resolving bindings. We also count bindings in this pass as we walk bound expressions.\n        visitAll$1(this, nodes);\n        // Add total binding count to pure function count so pure function instructions are\n        // generated with the correct slot offset when update instructions are processed.\n        this._pureFunctionSlots += this._bindingSlots;\n        // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and\n        // `pipeBind` update instructions), so we have to update the slot offsets manually\n        // to account for bindings.\n        this._valueConverter.updatePipeSlotOffsets(this._bindingSlots);\n        // Nested templates must be processed before creation instructions so template()\n        // instructions can be generated with the correct internal const count.\n        this._nestedTemplateFns.forEach(buildTemplateFn => buildTemplateFn());\n        // Output the `projectionDef` instruction when some `<ng-content>` tags are present.\n        // The `projectionDef` instruction is only emitted for the component template and\n        // is skipped for nested templates (<ng-template> tags).\n        if (this.level === 0 && this._ngContentReservedSlots.length) {\n            const parameters = [];\n            // By default the `projectionDef` instructions creates one slot for the wildcard\n            // selector if no parameters are passed. Therefore we only want to allocate a new\n            // array for the projection slots if the default projection slot is not sufficient.\n            if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {\n                const r3ReservedSlots = this._ngContentReservedSlots.map(s => s !== '*' ? parseSelectorToR3Selector(s) : s);\n                parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));\n            }\n            // Since we accumulate ngContent selectors while processing template elements,\n            // we *prepend* `projectionDef` to creation instructions block, to put it before\n            // any `projection` instructions\n            this.creationInstruction(null, Identifiers.projectionDef, parameters, /* prepend */ true);\n        }\n        if (initI18nContext) {\n            this.i18nEnd(null, selfClosingI18nInstruction);\n        }\n        // Generate all the creation mode instructions (e.g. resolve bindings in listeners)\n        const creationStatements = getInstructionStatements(this._creationCodeFns);\n        // Generate all the update mode instructions (e.g. resolve property or text bindings)\n        const updateStatements = getInstructionStatements(this._updateCodeFns);\n        //  Variable declaration must occur after binding resolution so we can generate context\n        //  instructions that build on each other.\n        // e.g. const b = nextContext().$implicit(); const b = nextContext();\n        const creationVariables = this._bindingScope.viewSnapshotStatements();\n        const updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);\n        const creationBlock = creationStatements.length > 0 ?\n            [renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, creationVariables.concat(creationStatements))] :\n            [];\n        const updateBlock = updateStatements.length > 0 ?\n            [renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateVariables.concat(updateStatements))] :\n            [];\n        return fn(\n        // i.e. (rf: RenderFlags, ctx: any)\n        [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [\n            // Temporary variable declarations for query refresh (i.e. let _t: any;)\n            ...this._prefixCode,\n            // Creating mode (i.e. if (rf & RenderFlags.Create) { ... })\n            ...creationBlock,\n            // Binding and refresh mode (i.e. if (rf & RenderFlags.Update) {...})\n            ...updateBlock,\n        ], INFERRED_TYPE, null, this.templateName);\n    }\n    // LocalResolver\n    getLocal(name) {\n        return this._bindingScope.get(name);\n    }\n    // LocalResolver\n    notifyImplicitReceiverUse() {\n        this._bindingScope.notifyImplicitReceiverUse();\n    }\n    // LocalResolver\n    maybeRestoreView() {\n        this._bindingScope.maybeRestoreView();\n    }\n    i18nTranslate(message, params = {}, ref, transformFn) {\n        const _ref = ref || this.i18nGenerateMainBlockVar();\n        // Closure Compiler requires const names to start with `MSG_` but disallows any other const to\n        // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call\n        const closureVar = this.i18nGenerateClosureVar(message.id);\n        const statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);\n        this._constants.prepareStatements.push(...statements);\n        return _ref;\n    }\n    registerContextVariables(name, value) {\n        const scopedName = this._bindingScope.freshReferenceName();\n        const retrievalLevel = this.level;\n        const isDirect = value === DIRECT_CONTEXT_REFERENCE;\n        const lhs = variable(name + scopedName);\n        this._bindingScope.set(retrievalLevel, name, scope => {\n            // If we're at the top level and we're referring to the context variable directly, we\n            // can do so through the implicit receiver, instead of renaming it. Note that this does\n            // not apply to listeners, because they need to restore the context.\n            return isDirect && scope.bindingLevel === retrievalLevel && !scope.isListenerScope() ?\n                variable(CONTEXT_NAME) :\n                lhs;\n        }, 1 /* DeclarationPriority.CONTEXT */, (scope, relativeLevel) => {\n            let rhs;\n            if (scope.bindingLevel === retrievalLevel) {\n                if (scope.isListenerScope() && scope.hasRestoreViewVariable()) {\n                    // e.g. restoredCtx.\n                    // We have to get the context from a view reference, if one is available, because\n                    // the context that was passed in during creation may not be correct anymore.\n                    // For more information see: https://github.com/angular/angular/pull/40360.\n                    rhs = variable(RESTORED_VIEW_CONTEXT_NAME);\n                    scope.notifyRestoredViewContextUse();\n                }\n                else if (isDirect) {\n                    // If we have a direct read of the context at the top level we don't need to\n                    // declare any variables and we can refer to it directly.\n                    return [];\n                }\n                else {\n                    // e.g. ctx\n                    rhs = variable(CONTEXT_NAME);\n                }\n            }\n            else {\n                const sharedCtxVar = scope.getSharedContextName(retrievalLevel);\n                // e.g. ctx_r0   OR  x(2);\n                rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);\n            }\n            return [\n                // e.g. const $items$ = x(2) for direct context references and\n                // const $item$ = x(2).$implicit for indirect ones.\n                lhs.set(isDirect ? rhs : rhs.prop(value || IMPLICIT_REFERENCE)).toConstDecl()\n            ];\n        });\n    }\n    i18nAppendBindings(expressions) {\n        if (expressions.length > 0) {\n            expressions.forEach(expression => this.i18n.appendBinding(expression));\n        }\n    }\n    i18nBindProps(props) {\n        const bound = {};\n        Object.keys(props).forEach(key => {\n            const prop = props[key];\n            if (prop instanceof Text$3) {\n                bound[key] = literal(prop.value);\n            }\n            else {\n                const value = prop.value.visit(this._valueConverter);\n                this.allocateBindingSlots(value);\n                if (value instanceof Interpolation$1) {\n                    const { strings, expressions } = value;\n                    const { id, bindings } = this.i18n;\n                    const label = assembleI18nBoundString(strings, bindings.size, id);\n                    this.i18nAppendBindings(expressions);\n                    bound[key] = literal(label);\n                }\n            }\n        });\n        return bound;\n    }\n    // Generates top level vars for i18n blocks (i.e. `i18n_N`).\n    i18nGenerateMainBlockVar() {\n        return variable(this.constantPool.uniqueName(TRANSLATION_VAR_PREFIX$1));\n    }\n    // Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).\n    i18nGenerateClosureVar(messageId) {\n        let name;\n        const suffix = this.fileBasedI18nSuffix.toUpperCase();\n        if (this.i18nUseExternalIds) {\n            const prefix = getTranslationConstPrefix(`EXTERNAL_`);\n            const uniqueSuffix = this.constantPool.uniqueName(suffix);\n            name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;\n        }\n        else {\n            const prefix = getTranslationConstPrefix(suffix);\n            name = this.constantPool.uniqueName(prefix);\n        }\n        return variable(name);\n    }\n    i18nUpdateRef(context) {\n        const { icus, meta, isRoot, isResolved, isEmitted } = context;\n        if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {\n            context.isEmitted = true;\n            const placeholders = context.getSerializedPlaceholders();\n            let icuMapping = {};\n            let params = placeholders.size ? placeholdersToParams(placeholders) : {};\n            if (icus.size) {\n                icus.forEach((refs, key) => {\n                    if (refs.length === 1) {\n                        // if we have one ICU defined for a given\n                        // placeholder - just output its reference\n                        params[key] = refs[0];\n                    }\n                    else {\n                        // ... otherwise we need to activate post-processing\n                        // to replace ICU placeholders with proper values\n                        const placeholder = wrapI18nPlaceholder(`${I18N_ICU_MAPPING_PREFIX$1}${key}`);\n                        params[key] = literal(placeholder);\n                        icuMapping[key] = literalArr(refs);\n                    }\n                });\n            }\n            // translation requires post processing in 2 cases:\n            // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])\n            // - if we have multiple ICUs that refer to the same placeholder name\n            const needsPostprocessing = Array.from(placeholders.values()).some((value) => value.length > 1) ||\n                Object.keys(icuMapping).length;\n            let transformFn;\n            if (needsPostprocessing) {\n                transformFn = (raw) => {\n                    const args = [raw];\n                    if (Object.keys(icuMapping).length) {\n                        args.push(mapLiteral(icuMapping, true));\n                    }\n                    return invokeInstruction(null, Identifiers.i18nPostprocess, args);\n                };\n            }\n            this.i18nTranslate(meta, params, context.ref, transformFn);\n        }\n    }\n    i18nStart(span = null, meta, selfClosing) {\n        const index = this.allocateDataSlot();\n        this.i18n = this.i18nContext ?\n            this.i18nContext.forkChildContext(index, this.templateIndex, meta) :\n            new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta);\n        // generate i18nStart instruction\n        const { id, ref } = this.i18n;\n        const params = [literal(index), this.addToConsts(ref)];\n        if (id > 0) {\n            // do not push 3rd argument (sub-block id)\n            // into i18nStart call for top level i18n context\n            params.push(literal(id));\n        }\n        this.creationInstruction(span, selfClosing ? Identifiers.i18n : Identifiers.i18nStart, params);\n    }\n    i18nEnd(span = null, selfClosing) {\n        if (!this.i18n) {\n            throw new Error('i18nEnd is executed with no i18n context present');\n        }\n        if (this.i18nContext) {\n            this.i18nContext.reconcileChildContext(this.i18n);\n            this.i18nUpdateRef(this.i18nContext);\n        }\n        else {\n            this.i18nUpdateRef(this.i18n);\n        }\n        // setup accumulated bindings\n        const { index, bindings } = this.i18n;\n        if (bindings.size) {\n            for (const binding of bindings) {\n                // for i18n block, advance to the most recent element index (by taking the current number of\n                // elements and subtracting one) before invoking `i18nExp` instructions, to make sure the\n                // necessary lifecycle hooks of components/directives are properly flushed.\n                this.updateInstructionWithAdvance(this.getConstCount() - 1, span, Identifiers.i18nExp, () => this.convertPropertyBinding(binding));\n            }\n            this.updateInstruction(span, Identifiers.i18nApply, [literal(index)]);\n        }\n        if (!selfClosing) {\n            this.creationInstruction(span, Identifiers.i18nEnd);\n        }\n        this.i18n = null; // reset local i18n context\n    }\n    i18nAttributesInstruction(nodeIndex, attrs, sourceSpan) {\n        let hasBindings = false;\n        const i18nAttrArgs = [];\n        attrs.forEach(attr => {\n            const message = attr.i18n;\n            const converted = attr.value.visit(this._valueConverter);\n            this.allocateBindingSlots(converted);\n            if (converted instanceof Interpolation$1) {\n                const placeholders = assembleBoundTextPlaceholders(message);\n                const params = placeholdersToParams(placeholders);\n                i18nAttrArgs.push(literal(attr.name), this.i18nTranslate(message, params));\n                converted.expressions.forEach(expression => {\n                    hasBindings = true;\n                    this.updateInstructionWithAdvance(nodeIndex, sourceSpan, Identifiers.i18nExp, () => this.convertPropertyBinding(expression));\n                });\n            }\n        });\n        if (i18nAttrArgs.length > 0) {\n            const index = literal(this.allocateDataSlot());\n            const constIndex = this.addToConsts(literalArr(i18nAttrArgs));\n            this.creationInstruction(sourceSpan, Identifiers.i18nAttributes, [index, constIndex]);\n            if (hasBindings) {\n                this.updateInstruction(sourceSpan, Identifiers.i18nApply, [index]);\n            }\n        }\n    }\n    getNamespaceInstruction(namespaceKey) {\n        switch (namespaceKey) {\n            case 'math':\n                return Identifiers.namespaceMathML;\n            case 'svg':\n                return Identifiers.namespaceSVG;\n            default:\n                return Identifiers.namespaceHTML;\n        }\n    }\n    addNamespaceInstruction(nsInstruction, element) {\n        this._namespace = nsInstruction;\n        this.creationInstruction(element.startSourceSpan, nsInstruction);\n    }\n    /**\n     * Adds an update instruction for an interpolated property or attribute, such as\n     * `prop=\"{{value}}\"` or `attr.title=\"{{value}}\"`\n     */\n    interpolatedUpdateInstruction(instruction, elementIndex, attrName, input, value, params) {\n        this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, () => [literal(attrName), ...this.getUpdateInstructionArguments(value), ...params]);\n    }\n    visitContent(ngContent) {\n        const slot = this.allocateDataSlot();\n        const projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;\n        const parameters = [literal(slot)];\n        this._ngContentReservedSlots.push(ngContent.selector);\n        const nonContentSelectAttributes = ngContent.attributes.filter(attr => attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR);\n        const attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);\n        if (attributes.length > 0) {\n            parameters.push(literal(projectionSlotIdx), literalArr(attributes));\n        }\n        else if (projectionSlotIdx !== 0) {\n            parameters.push(literal(projectionSlotIdx));\n        }\n        this.creationInstruction(ngContent.sourceSpan, Identifiers.projection, parameters);\n        if (this.i18n) {\n            this.i18n.appendProjection(ngContent.i18n, slot);\n        }\n    }\n    visitElement(element) {\n        const elementIndex = this.allocateDataSlot();\n        const stylingBuilder = new StylingBuilder(null);\n        this.elementLocations.set(element, { index: elementIndex, level: this.level });\n        let isNonBindableMode = false;\n        const isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);\n        const outputAttrs = [];\n        const [namespaceKey, elementName] = splitNsName(element.name);\n        const isNgContainer$1 = isNgContainer(element.name);\n        // Handle styling, i18n, ngNonBindable attributes\n        for (const attr of element.attributes) {\n            const { name, value } = attr;\n            if (name === NON_BINDABLE_ATTR) {\n                isNonBindableMode = true;\n            }\n            else if (name === 'style') {\n                stylingBuilder.registerStyleAttr(value);\n            }\n            else if (name === 'class') {\n                stylingBuilder.registerClassAttr(value);\n            }\n            else {\n                outputAttrs.push(attr);\n            }\n        }\n        // Regular element or ng-container creation mode\n        const parameters = [literal(elementIndex)];\n        if (!isNgContainer$1) {\n            parameters.push(literal(elementName));\n        }\n        // Add the attributes\n        const allOtherInputs = [];\n        const boundI18nAttrs = [];\n        element.inputs.forEach(input => {\n            const stylingInputWasSet = stylingBuilder.registerBoundInput(input);\n            if (!stylingInputWasSet) {\n                if (input.type === 0 /* BindingType.Property */ && input.i18n) {\n                    boundI18nAttrs.push(input);\n                }\n                else {\n                    allOtherInputs.push(input);\n                }\n            }\n        });\n        // add attributes for directive and projection matching purposes\n        const attributes = this.getAttributeExpressions(element.name, outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], boundI18nAttrs);\n        parameters.push(this.addAttrsToConsts(attributes));\n        // local refs (ex.: <div #foo #bar=\"baz\">)\n        const refs = this.prepareRefsArray(element.references);\n        parameters.push(this.addToConsts(refs));\n        const wasInNamespace = this._namespace;\n        const currentNamespace = this.getNamespaceInstruction(namespaceKey);\n        // If the namespace is changing now, include an instruction to change it\n        // during element creation.\n        if (currentNamespace !== wasInNamespace) {\n            this.addNamespaceInstruction(currentNamespace, element);\n        }\n        if (this.i18n) {\n            this.i18n.appendElement(element.i18n, elementIndex);\n        }\n        // Note that we do not append text node instructions and ICUs inside i18n section,\n        // so we exclude them while calculating whether current element has children\n        const hasChildren = (!isI18nRootElement && this.i18n) ? !hasTextChildrenOnly(element.children) :\n            element.children.length > 0;\n        const createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes &&\n            element.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;\n        const createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);\n        if (createSelfClosingInstruction) {\n            this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers.elementContainer : Identifiers.element, trimTrailingNulls(parameters));\n        }\n        else {\n            this.creationInstruction(element.startSourceSpan, isNgContainer$1 ? Identifiers.elementContainerStart : Identifiers.elementStart, trimTrailingNulls(parameters));\n            if (isNonBindableMode) {\n                this.creationInstruction(element.startSourceSpan, Identifiers.disableBindings);\n            }\n            if (boundI18nAttrs.length > 0) {\n                this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, element.startSourceSpan ?? element.sourceSpan);\n            }\n            // Generate Listeners (outputs)\n            if (element.outputs.length > 0) {\n                for (const outputAst of element.outputs) {\n                    this.creationInstruction(outputAst.sourceSpan, Identifiers.listener, this.prepareListenerParameter(element.name, outputAst, elementIndex));\n                }\n            }\n            // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and\n            // listeners, to make sure i18nAttributes instruction targets current element at runtime.\n            if (isI18nRootElement) {\n                this.i18nStart(element.startSourceSpan, element.i18n, createSelfClosingI18nInstruction);\n            }\n        }\n        // the code here will collect all update-level styling instructions and add them to the\n        // update block of the template function AOT code. Instructions like `styleProp`,\n        // `styleMap`, `classMap`, `classProp`\n        // are all generated and assigned in the code below.\n        const stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);\n        const limit = stylingInstructions.length - 1;\n        for (let i = 0; i <= limit; i++) {\n            const instruction = stylingInstructions[i];\n            this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, instruction);\n        }\n        // the reason why `undefined` is used is because the renderer understands this as a\n        // special value to symbolize that there is no RHS to this binding\n        // TODO (matsko): revisit this once FW-959 is approached\n        const emptyValueBindInstruction = literal(undefined);\n        const propertyBindings = [];\n        const attributeBindings = [];\n        // Generate element input bindings\n        allOtherInputs.forEach(input => {\n            const inputType = input.type;\n            if (inputType === 4 /* BindingType.Animation */) {\n                const value = input.value.visit(this._valueConverter);\n                // animation bindings can be presented in the following formats:\n                // 1. [@binding]=\"fooExp\"\n                // 2. [@binding]=\"{value:fooExp, params:{...}}\"\n                // 3. [@binding]\n                // 4. @binding\n                // All formats will be valid for when a synthetic binding is created.\n                // The reasoning for this is because the renderer should get each\n                // synthetic binding value in the order of the array that they are\n                // defined in...\n                const hasValue = value instanceof LiteralPrimitive ? !!value.value : true;\n                this.allocateBindingSlots(value);\n                propertyBindings.push({\n                    span: input.sourceSpan,\n                    paramsOrFn: getBindingFunctionParams(() => hasValue ? this.convertPropertyBinding(value) : emptyValueBindInstruction, prepareSyntheticPropertyName(input.name))\n                });\n            }\n            else {\n                // we must skip attributes with associated i18n context, since these attributes are handled\n                // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated\n                if (input.i18n)\n                    return;\n                const value = input.value.visit(this._valueConverter);\n                if (value !== undefined) {\n                    const params = [];\n                    const [attrNamespace, attrName] = splitNsName(input.name);\n                    const isAttributeBinding = inputType === 1 /* BindingType.Attribute */;\n                    let sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);\n                    if (!sanitizationRef) {\n                        // If there was no sanitization function found based on the security context\n                        // of an attribute/property - check whether this attribute/property is\n                        // one of the security-sensitive <iframe> attributes (and that the current\n                        // element is actually an <iframe>).\n                        if (isIframeElement(element.name) && isIframeSecuritySensitiveAttr(input.name)) {\n                            sanitizationRef = importExpr(Identifiers.validateIframeAttribute);\n                        }\n                    }\n                    if (sanitizationRef) {\n                        params.push(sanitizationRef);\n                    }\n                    if (attrNamespace) {\n                        const namespaceLiteral = literal(attrNamespace);\n                        if (sanitizationRef) {\n                            params.push(namespaceLiteral);\n                        }\n                        else {\n                            // If there wasn't a sanitization ref, we need to add\n                            // an extra param so that we can pass in the namespace.\n                            params.push(literal(null), namespaceLiteral);\n                        }\n                    }\n                    this.allocateBindingSlots(value);\n                    if (inputType === 0 /* BindingType.Property */) {\n                        if (value instanceof Interpolation$1) {\n                            // prop=\"{{value}}\" and friends\n                            this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), elementIndex, attrName, input, value, params);\n                        }\n                        else {\n                            // [prop]=\"value\"\n                            // Collect all the properties so that we can chain into a single function at the end.\n                            propertyBindings.push({\n                                span: input.sourceSpan,\n                                paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(value), attrName, params)\n                            });\n                        }\n                    }\n                    else if (inputType === 1 /* BindingType.Attribute */) {\n                        if (value instanceof Interpolation$1 && getInterpolationArgsLength(value) > 1) {\n                            // attr.name=\"text{{value}}\" and friends\n                            this.interpolatedUpdateInstruction(getAttributeInterpolationExpression(value), elementIndex, attrName, input, value, params);\n                        }\n                        else {\n                            const boundValue = value instanceof Interpolation$1 ? value.expressions[0] : value;\n                            // [attr.name]=\"value\" or attr.name=\"{{value}}\"\n                            // Collect the attribute bindings so that they can be chained at the end.\n                            attributeBindings.push({\n                                span: input.sourceSpan,\n                                paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(boundValue), attrName, params)\n                            });\n                        }\n                    }\n                    else {\n                        // class prop\n                        this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, Identifiers.classProp, () => {\n                            return [\n                                literal(elementIndex), literal(attrName), this.convertPropertyBinding(value),\n                                ...params\n                            ];\n                        });\n                    }\n                }\n            }\n        });\n        for (const propertyBinding of propertyBindings) {\n            this.updateInstructionWithAdvance(elementIndex, propertyBinding.span, Identifiers.property, propertyBinding.paramsOrFn);\n        }\n        for (const attributeBinding of attributeBindings) {\n            this.updateInstructionWithAdvance(elementIndex, attributeBinding.span, Identifiers.attribute, attributeBinding.paramsOrFn);\n        }\n        // Traverse element child nodes\n        visitAll$1(this, element.children);\n        if (!isI18nRootElement && this.i18n) {\n            this.i18n.appendElement(element.i18n, elementIndex, true);\n        }\n        if (!createSelfClosingInstruction) {\n            // Finish element construction mode.\n            const span = element.endSourceSpan ?? element.sourceSpan;\n            if (isI18nRootElement) {\n                this.i18nEnd(span, createSelfClosingI18nInstruction);\n            }\n            if (isNonBindableMode) {\n                this.creationInstruction(span, Identifiers.enableBindings);\n            }\n            this.creationInstruction(span, isNgContainer$1 ? Identifiers.elementContainerEnd : Identifiers.elementEnd);\n        }\n    }\n    prepareEmbeddedTemplateFn(children, contextNameSuffix, variables = [], i18nMeta, variableAliases) {\n        const index = this.allocateDataSlot();\n        if (this.i18n && i18nMeta) {\n            if (i18nMeta instanceof BlockPlaceholder) {\n                this.i18n.appendBlock(i18nMeta, index);\n            }\n            else {\n                this.i18n.appendTemplate(i18nMeta, index);\n            }\n        }\n        const contextName = `${this.contextName}${contextNameSuffix}_${index}`;\n        const name = `${contextName}_Template`;\n        // Create the template function\n        const visitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, index, name, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this.deferBlocks, this.elementLocations, this.allDeferrableDepsFn, this._constants);\n        // Nested templates must not be visited until after their parent templates have completed\n        // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't\n        // be able to support bindings in nested templates to local refs that occur after the\n        // template definition. e.g. <div *ngIf=\"showing\">{{ foo }}</div>  <div #foo></div>\n        this._nestedTemplateFns.push(() => {\n            const templateFunctionExpr = visitor.buildTemplateFunction(children, variables, this._ngContentReservedSlots.length + this._ngContentSelectorsOffset, i18nMeta, variableAliases);\n            this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(name));\n            if (visitor._ngContentReservedSlots.length) {\n                this._ngContentReservedSlots.push(...visitor._ngContentReservedSlots);\n            }\n        });\n        return new TemplateData(name, index, visitor._bindingScope, visitor);\n    }\n    createEmbeddedTemplateFn(tagName, children, contextNameSuffix, sourceSpan, variables = [], attrsExprs, references, i18n) {\n        const data = this.prepareEmbeddedTemplateFn(children, contextNameSuffix, variables, i18n);\n        const parameters = [\n            literal(data.index),\n            variable(data.name),\n            literal(tagName),\n            this.addAttrsToConsts(attrsExprs || null),\n        ];\n        // local refs (ex.: <ng-template #foo>)\n        if (references && references.length > 0) {\n            const refs = this.prepareRefsArray(references);\n            parameters.push(this.addToConsts(refs));\n            parameters.push(importExpr(Identifiers.templateRefExtractor));\n        }\n        // e.g. template(1, MyComp_Template_1)\n        this.creationInstruction(sourceSpan, Identifiers.templateCreate, () => {\n            parameters.splice(2, 0, literal(data.getConstCount()), literal(data.getVarCount()));\n            return trimTrailingNulls(parameters);\n        });\n        return data.index;\n    }\n    visitTemplate(template) {\n        // We don't care about the tag's namespace here, because we infer\n        // it based on the parent nodes inside the template instruction.\n        const tagNameWithoutNamespace = template.tagName ? splitNsName(template.tagName)[1] : template.tagName;\n        const contextNameSuffix = template.tagName ? '_' + sanitizeIdentifier(template.tagName) : '';\n        // prepare attributes parameter (including attributes used for directive matching)\n        const attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template.attributes, template.inputs, template.outputs, undefined /* styles */, template.templateAttrs);\n        const templateIndex = this.createEmbeddedTemplateFn(tagNameWithoutNamespace, template.children, contextNameSuffix, template.sourceSpan, template.variables, attrsExprs, template.references, template.i18n);\n        // handle property bindings e.g. ɵɵproperty('ngForOf', ctx.items), et al;\n        this.templatePropertyBindings(templateIndex, template.templateAttrs);\n        // Only add normal input/output binding instructions on explicit <ng-template> elements.\n        if (tagNameWithoutNamespace === NG_TEMPLATE_TAG_NAME) {\n            const [i18nInputs, inputs] = partitionArray(template.inputs, hasI18nMeta);\n            // Add i18n attributes that may act as inputs to directives. If such attributes are present,\n            // generate `i18nAttributes` instruction. Note: we generate it only for explicit <ng-template>\n            // elements, in case of inline templates, corresponding instructions will be generated in the\n            // nested template function.\n            if (i18nInputs.length > 0) {\n                this.i18nAttributesInstruction(templateIndex, i18nInputs, template.startSourceSpan ?? template.sourceSpan);\n            }\n            // Add the input bindings\n            if (inputs.length > 0) {\n                this.templatePropertyBindings(templateIndex, inputs);\n            }\n            // Generate listeners for directive output\n            for (const outputAst of template.outputs) {\n                this.creationInstruction(outputAst.sourceSpan, Identifiers.listener, this.prepareListenerParameter('ng_template', outputAst, templateIndex));\n            }\n        }\n    }\n    visitBoundText(text) {\n        if (this.i18n) {\n            const value = text.value.visit(this._valueConverter);\n            this.allocateBindingSlots(value);\n            if (value instanceof Interpolation$1) {\n                this.i18n.appendBoundText(text.i18n);\n                this.i18nAppendBindings(value.expressions);\n            }\n            return;\n        }\n        const nodeIndex = this.allocateDataSlot();\n        this.creationInstruction(text.sourceSpan, Identifiers.text, [literal(nodeIndex)]);\n        const value = text.value.visit(this._valueConverter);\n        this.allocateBindingSlots(value);\n        if (value instanceof Interpolation$1) {\n            this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), () => this.getUpdateInstructionArguments(value));\n        }\n        else {\n            error('Text nodes should be interpolated and never bound directly.');\n        }\n    }\n    visitText(text) {\n        // when a text element is located within a translatable\n        // block, we exclude this text element from instructions set,\n        // since it will be captured in i18n content and processed at runtime\n        if (!this.i18n) {\n            this.creationInstruction(text.sourceSpan, Identifiers.text, [literal(this.allocateDataSlot()), literal(text.value)]);\n        }\n    }\n    visitIcu(icu) {\n        let initWasInvoked = false;\n        // if an ICU was created outside of i18n block, we still treat\n        // it as a translatable entity and invoke i18nStart and i18nEnd\n        // to generate i18n context and the necessary instructions\n        if (!this.i18n) {\n            initWasInvoked = true;\n            this.i18nStart(null, icu.i18n, true);\n        }\n        const i18n = this.i18n;\n        const vars = this.i18nBindProps(icu.vars);\n        const placeholders = this.i18nBindProps(icu.placeholders);\n        // output ICU directly and keep ICU reference in context\n        const message = icu.i18n;\n        // we always need post-processing function for ICUs, to make sure that:\n        // - all placeholders in a form of {PLACEHOLDER} are replaced with actual values (note:\n        // `goog.getMsg` does not process ICUs and uses the `{PLACEHOLDER}` format for placeholders\n        // inside ICUs)\n        // - all ICU vars (such as `VAR_SELECT` or `VAR_PLURAL`) are replaced with correct values\n        const transformFn = (raw) => {\n            // Sort the map entries in the compiled output. This makes it easy to acheive identical output\n            // in the template pipeline compiler.\n            const params = Object.fromEntries(Object.entries({ ...vars, ...placeholders }).sort());\n            const formatted = formatI18nPlaceholderNamesInMap(params, /* useCamelCase */ false);\n            return invokeInstruction(null, Identifiers.i18nPostprocess, [raw, mapLiteral(formatted, true)]);\n        };\n        // in case the whole i18n message is a single ICU - we do not need to\n        // create a separate top-level translation, we can use the root ref instead\n        // and make this ICU a top-level translation\n        // note: ICU placeholders are replaced with actual values in `i18nPostprocess` function\n        // separately, so we do not pass placeholders into `i18nTranslate` function.\n        if (isSingleI18nIcu(i18n.meta)) {\n            this.i18nTranslate(message, /* placeholders */ {}, i18n.ref, transformFn);\n        }\n        else {\n            // output ICU directly and keep ICU reference in context\n            const ref = this.i18nTranslate(message, /* placeholders */ {}, /* ref */ undefined, transformFn);\n            i18n.appendIcu(icuFromI18nMessage(message).name, ref);\n        }\n        if (initWasInvoked) {\n            this.i18nEnd(null, true);\n        }\n        return null;\n    }\n    visitIfBlock(block) {\n        // Allocate one slot for the result of the expression.\n        this.allocateBindingSlots(null);\n        // We have to process the block in two steps: once here and again in the update instruction\n        // callback in order to generate the correct expressions when pipes or pure functions are\n        // used inside the branch expressions.\n        const branchData = block.branches.map((branch, branchIndex) => {\n            const { expression, expressionAlias, children, sourceSpan } = branch;\n            // If the branch has an alias, it'll be assigned directly to the container's context.\n            // We define a variable referring directly to the context so that any nested usages can be\n            // rewritten to refer to it.\n            const variables = expressionAlias !== null ?\n                [new Variable(expressionAlias.name, DIRECT_CONTEXT_REFERENCE, expressionAlias.sourceSpan, expressionAlias.keySpan)] :\n                undefined;\n            let tagName = null;\n            let attrsExprs;\n            // Only the first branch can be used for projection, because the conditional\n            // uses the container of the first branch as the insertion point for all branches.\n            if (branchIndex === 0) {\n                const inferredData = this.inferProjectionDataFromInsertionPoint(branch);\n                tagName = inferredData.tagName;\n                attrsExprs = inferredData.attrsExprs;\n            }\n            // Note: the template needs to be created *before* we process the expression,\n            // otherwise pipes injecting some symbols won't work (see #52102).\n            const templateIndex = this.createEmbeddedTemplateFn(tagName, children, '_Conditional', sourceSpan, variables, attrsExprs, undefined, branch.i18n);\n            const processedExpression = expression === null ? null : expression.visit(this._valueConverter);\n            return { index: templateIndex, expression: processedExpression, alias: expressionAlias };\n        });\n        // Use the index of the first block as the index for the entire container.\n        const containerIndex = branchData[0].index;\n        const paramsCallback = () => {\n            let contextVariable = null;\n            const generateBranch = (branchIndex) => {\n                // If we've gone beyond the last branch, return the special -1 value which means that no\n                // view will be rendered. Note that we don't need to reset the context here, because -1\n                // won't render a view so the passed-in context won't be captured.\n                if (branchIndex > branchData.length - 1) {\n                    return literal(-1);\n                }\n                const { index, expression, alias } = branchData[branchIndex];\n                // If the branch has no expression, it means that it's the final `else`.\n                // Return its index and stop the recursion. Assumes that there's only one\n                // `else` condition and that it's the last branch.\n                if (expression === null) {\n                    return literal(index);\n                }\n                let comparisonTarget;\n                if (alias) {\n                    // If the branch is aliased, we need to assign the expression value to the temporary\n                    // variable and then pass it into `conditional`. E.g. for the expression:\n                    // `@if (foo(); as alias) {...}` we have to generate:\n                    // ```\n                    // let temp;\n                    // conditional(0, (temp = ctx.foo()) ? 0 : -1, temp);\n                    // ```\n                    contextVariable = this.allocateControlFlowTempVariable();\n                    comparisonTarget = contextVariable.set(this.convertPropertyBinding(expression));\n                }\n                else {\n                    comparisonTarget = this.convertPropertyBinding(expression);\n                }\n                return comparisonTarget.conditional(literal(index), generateBranch(branchIndex + 1));\n            };\n            const params = [literal(containerIndex), generateBranch(0)];\n            if (contextVariable !== null) {\n                params.push(contextVariable);\n            }\n            return params;\n        };\n        this.updateInstructionWithAdvance(containerIndex, block.branches[0].sourceSpan, Identifiers.conditional, paramsCallback);\n    }\n    visitSwitchBlock(block) {\n        if (block.cases.length === 0) {\n            return;\n        }\n        // We have to process the block in two steps: once here and again in the update instruction\n        // callback in order to generate the correct expressions when pipes or pure functions are used.\n        const caseData = block.cases.map(currentCase => {\n            const index = this.createEmbeddedTemplateFn(null, currentCase.children, '_Case', currentCase.sourceSpan, undefined, undefined, undefined, currentCase.i18n);\n            const expression = currentCase.expression === null ?\n                null :\n                currentCase.expression.visit(this._valueConverter);\n            return { index, expression };\n        });\n        // Use the index of the first block as the index for the entire container.\n        const containerIndex = caseData[0].index;\n        // Note: the expression needs to be processed *after* the template,\n        // otherwise pipes injecting some symbols won't work (see #52102).\n        const blockExpression = block.expression.visit(this._valueConverter);\n        this.allocateBindingSlots(null); // Allocate a slot for the primary block expression.\n        this.updateInstructionWithAdvance(containerIndex, block.sourceSpan, Identifiers.conditional, () => {\n            const generateCases = (caseIndex) => {\n                // If we've gone beyond the last branch, return the special -1\n                // value which means that no view will be rendered.\n                if (caseIndex > caseData.length - 1) {\n                    return literal(-1);\n                }\n                const { index, expression } = caseData[caseIndex];\n                // If the case has no expression, it means that it's the `default` case.\n                // Return its index and stop the recursion. Assumes that there's only one\n                // `default` condition and that it's defined last.\n                if (expression === null) {\n                    return literal(index);\n                }\n                // If this is the very first comparison, we need to assign the value of the primary\n                // expression as a part of the comparison so the remaining cases can reuse it. In practice\n                // this looks as follows:\n                // ```\n                // let temp;\n                // conditional(1, (temp = ctx.foo) === 1 ? 1 : temp === 2 ? 2 : temp === 3 ? 3 : 4);\n                // ```\n                const comparisonTarget = caseIndex === 0 ?\n                    this.allocateControlFlowTempVariable().set(this.convertPropertyBinding(blockExpression)) :\n                    this.allocateControlFlowTempVariable();\n                return comparisonTarget.identical(this.convertPropertyBinding(expression))\n                    .conditional(literal(index), generateCases(caseIndex + 1));\n            };\n            return [literal(containerIndex), generateCases(0)];\n        });\n    }\n    visitDeferredBlock(deferred) {\n        const { loading, placeholder, error, triggers, prefetchTriggers } = deferred;\n        const metadata = this.deferBlocks.get(deferred);\n        if (!metadata) {\n            throw new Error('Could not resolve `defer` block metadata. Block may need to be analyzed.');\n        }\n        const primaryTemplateIndex = this.createEmbeddedTemplateFn(null, deferred.children, '_Defer', deferred.sourceSpan, undefined, undefined, undefined, deferred.i18n);\n        const loadingIndex = loading ? this.createEmbeddedTemplateFn(null, loading.children, '_DeferLoading', loading.sourceSpan, undefined, undefined, undefined, loading.i18n) :\n            null;\n        const loadingConsts = loading ?\n            trimTrailingNulls([literal(loading.minimumTime), literal(loading.afterTime)]) :\n            null;\n        const placeholderIndex = placeholder ?\n            this.createEmbeddedTemplateFn(null, placeholder.children, '_DeferPlaceholder', placeholder.sourceSpan, undefined, undefined, undefined, placeholder.i18n) :\n            null;\n        const placeholderConsts = placeholder && placeholder.minimumTime !== null ?\n            // TODO(crisbeto): potentially pass the time directly instead of storing it in the `consts`\n            // since the placeholder block can only have one parameter?\n            literalArr([literal(placeholder.minimumTime)]) :\n            null;\n        const errorIndex = error ? this.createEmbeddedTemplateFn(null, error.children, '_DeferError', error.sourceSpan, undefined, undefined, undefined, error.i18n) :\n            null;\n        // Note: we generate this last so the index matches the instruction order.\n        const deferredIndex = this.allocateDataSlot();\n        const depsFnName = `${this.contextName}_Defer_${deferredIndex}_DepsFn`;\n        // e.g. `defer(1, 0, MyComp_Defer_1_DepsFn, ...)`\n        this.creationInstruction(deferred.sourceSpan, Identifiers.defer, trimTrailingNulls([\n            literal(deferredIndex),\n            literal(primaryTemplateIndex),\n            this.allDeferrableDepsFn ?? this.createDeferredDepsFunction(depsFnName, metadata),\n            literal(loadingIndex),\n            literal(placeholderIndex),\n            literal(errorIndex),\n            loadingConsts?.length ? this.addToConsts(literalArr(loadingConsts)) : TYPED_NULL_EXPR,\n            placeholderConsts ? this.addToConsts(placeholderConsts) : TYPED_NULL_EXPR,\n            (loadingConsts?.length || placeholderConsts) ?\n                importExpr(Identifiers.deferEnableTimerScheduling) :\n                TYPED_NULL_EXPR,\n        ]));\n        // Allocate an extra data slot right after a defer block slot to store\n        // instance-specific state of that defer block at runtime.\n        this.allocateDataSlot();\n        // Note: the triggers need to be processed *after* the various templates,\n        // otherwise pipes injecting some symbols won't work (see #52102).\n        this.createDeferTriggerInstructions(deferredIndex, triggers, metadata, false);\n        this.createDeferTriggerInstructions(deferredIndex, prefetchTriggers, metadata, true);\n    }\n    createDeferredDepsFunction(name, metadata) {\n        if (metadata.deps.length === 0) {\n            return TYPED_NULL_EXPR;\n        }\n        // This defer block has deps for which we need to generate dynamic imports.\n        const dependencyExp = [];\n        for (const deferredDep of metadata.deps) {\n            if (deferredDep.isDeferrable) {\n                // Callback function, e.g. `m () => m.MyCmp;`.\n                const innerFn = arrowFn([new FnParam('m', DYNAMIC_TYPE)], variable('m').prop(deferredDep.symbolName));\n                // Dynamic import, e.g. `import('./a').then(...)`.\n                const importExpr = (new DynamicImportExpr(deferredDep.importPath)).prop('then').callFn([innerFn]);\n                dependencyExp.push(importExpr);\n            }\n            else {\n                // Non-deferrable symbol, just use a reference to the type.\n                dependencyExp.push(deferredDep.type);\n            }\n        }\n        const depsFnExpr = arrowFn([], literalArr(dependencyExp));\n        this.constantPool.statements.push(depsFnExpr.toDeclStmt(name, StmtModifier.Final));\n        return variable(name);\n    }\n    createDeferTriggerInstructions(deferredIndex, triggers, metadata, prefetch) {\n        const { when, idle, immediate, timer, hover, interaction, viewport } = triggers;\n        // `deferWhen(ctx.someValue)`\n        if (when) {\n            const value = when.value.visit(this._valueConverter);\n            this.allocateBindingSlots(value);\n            this.updateInstructionWithAdvance(deferredIndex, when.sourceSpan, prefetch ? Identifiers.deferPrefetchWhen : Identifiers.deferWhen, () => this.convertPropertyBinding(value));\n        }\n        // Note that we generate an implicit `on idle` if the `deferred` block has no triggers.\n        // `deferOnIdle()`\n        if (idle || (!prefetch && Object.keys(triggers).length === 0)) {\n            this.creationInstruction(idle?.sourceSpan || null, prefetch ? Identifiers.deferPrefetchOnIdle : Identifiers.deferOnIdle);\n        }\n        // `deferOnImmediate()`\n        if (immediate) {\n            this.creationInstruction(immediate.sourceSpan, prefetch ? Identifiers.deferPrefetchOnImmediate : Identifiers.deferOnImmediate);\n        }\n        // `deferOnTimer(1337)`\n        if (timer) {\n            this.creationInstruction(timer.sourceSpan, prefetch ? Identifiers.deferPrefetchOnTimer : Identifiers.deferOnTimer, [literal(timer.delay)]);\n        }\n        // `deferOnHover(index, walkUpTimes)`\n        if (hover) {\n            this.domNodeBasedTrigger('hover', hover, metadata, prefetch ? Identifiers.deferPrefetchOnHover : Identifiers.deferOnHover);\n        }\n        // `deferOnInteraction(index, walkUpTimes)`\n        if (interaction) {\n            this.domNodeBasedTrigger('interaction', interaction, metadata, prefetch ? Identifiers.deferPrefetchOnInteraction : Identifiers.deferOnInteraction);\n        }\n        // `deferOnViewport(index, walkUpTimes)`\n        if (viewport) {\n            this.domNodeBasedTrigger('viewport', viewport, metadata, prefetch ? Identifiers.deferPrefetchOnViewport : Identifiers.deferOnViewport);\n        }\n    }\n    domNodeBasedTrigger(name, trigger, metadata, instructionRef) {\n        const triggerEl = metadata.triggerElements.get(trigger);\n        // Don't generate anything if a trigger cannot be resolved.\n        // We'll have template diagnostics to surface these to users.\n        if (!triggerEl) {\n            return;\n        }\n        this.creationInstruction(trigger.sourceSpan, instructionRef, () => {\n            const location = this.elementLocations.get(triggerEl);\n            if (!location) {\n                throw new Error(`Could not determine location of reference passed into ` +\n                    `'${name}' trigger. Template may not have been fully analyzed.`);\n            }\n            // A negative depth means that the trigger is inside the placeholder.\n            // Cap it at -1 since we only care whether or not it's negative.\n            const depth = Math.max(this.level - location.level, -1);\n            const params = [literal(location.index)];\n            // The most common case should be a trigger within the view so we can omit a depth of\n            // zero. For triggers in parent views and in the placeholder we need to pass it in.\n            if (depth !== 0) {\n                params.push(literal(depth));\n            }\n            return params;\n        });\n    }\n    /**\n     * Infers the data used for content projection (tag name and attributes) from the content of a\n     * node.\n     * @param node Node for which to infer the projection data.\n     */\n    inferProjectionDataFromInsertionPoint(node) {\n        let root = null;\n        let tagName = null;\n        let attrsExprs;\n        for (const child of node.children) {\n            // Skip over comment nodes.\n            if (child instanceof Comment$1) {\n                continue;\n            }\n            // We can only infer the tag name/attributes if there's a single root node.\n            if (root !== null) {\n                root = null;\n                break;\n            }\n            // Root nodes can only elements or templates with a tag name (e.g. `<div *foo></div>`).\n            if (child instanceof Element$1 || (child instanceof Template && child.tagName !== null)) {\n                root = child;\n            }\n        }\n        // If we've found a single root node, its tag name and *static* attributes can be copied\n        // to the surrounding template to be used for content projection. Note that it's important\n        // that we don't copy any bound attributes since they don't participate in content projection\n        // and they can be used in directive matching (in the case of `Template.templateAttrs`).\n        if (root !== null) {\n            const name = root instanceof Element$1 ? root.name : root.tagName;\n            // Don't pass along `ng-template` tag name since it enables directive matching.\n            tagName = name === NG_TEMPLATE_TAG_NAME ? null : name;\n            attrsExprs =\n                this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, root.attributes, root.inputs, []);\n        }\n        return { tagName, attrsExprs };\n    }\n    allocateDataSlot() {\n        return this._dataIndex++;\n    }\n    visitForLoopBlock(block) {\n        // Allocate one slot for the repeater metadata. The slots for the primary and empty block\n        // are implicitly inferred by the runtime to index + 1 and index + 2.\n        const blockIndex = this.allocateDataSlot();\n        const { tagName, attrsExprs } = this.inferProjectionDataFromInsertionPoint(block);\n        const primaryData = this.prepareEmbeddedTemplateFn(block.children, '_For', [block.item, block.contextVariables.$index, block.contextVariables.$count], block.i18n, {\n            // We need to provide level-specific versions of `$index` and `$count`, because\n            // they're used when deriving the remaining variables (`$odd`, `$even` etc.) while at the\n            // same time being available implicitly. Without these aliases, we wouldn't be able to\n            // access the `$index` of a parent loop from inside of a nested loop.\n            [block.contextVariables.$index.name]: this.getLevelSpecificVariableName('$index', this.level + 1),\n            [block.contextVariables.$count.name]: this.getLevelSpecificVariableName('$count', this.level + 1),\n        });\n        const { expression: trackByExpression, usesComponentInstance: trackByUsesComponentInstance } = this.createTrackByFunction(block);\n        let emptyData = null;\n        let emptyTagName = null;\n        let emptyAttrsExprs;\n        if (block.empty !== null) {\n            const emptyInferred = this.inferProjectionDataFromInsertionPoint(block.empty);\n            emptyTagName = emptyInferred.tagName;\n            emptyAttrsExprs = emptyInferred.attrsExprs;\n            emptyData = this.prepareEmbeddedTemplateFn(block.empty.children, '_ForEmpty', undefined, block.empty.i18n);\n            // Allocate an extra slot for the empty block tracking.\n            this.allocateBindingSlots(null);\n        }\n        this.registerComputedLoopVariables(block, primaryData.scope);\n        // `repeaterCreate(0, ...)`\n        this.creationInstruction(block.sourceSpan, Identifiers.repeaterCreate, () => {\n            const params = [\n                literal(blockIndex),\n                variable(primaryData.name),\n                literal(primaryData.getConstCount()),\n                literal(primaryData.getVarCount()),\n                literal(tagName),\n                this.addAttrsToConsts(attrsExprs || null),\n                trackByExpression,\n            ];\n            if (emptyData !== null) {\n                params.push(literal(trackByUsesComponentInstance), variable(emptyData.name), literal(emptyData.getConstCount()), literal(emptyData.getVarCount()), literal(emptyTagName), this.addAttrsToConsts(emptyAttrsExprs || null));\n            }\n            else if (trackByUsesComponentInstance) {\n                // If the tracking function doesn't use the component instance, we can omit the flag.\n                params.push(literal(trackByUsesComponentInstance));\n            }\n            return trimTrailingNulls(params);\n        });\n        // Note: the expression needs to be processed *after* the template,\n        // otherwise pipes injecting some symbols won't work (see #52102).\n        // Note: we don't allocate binding slots for this expression,\n        // because its value isn't stored in the LView.\n        const value = block.expression.visit(this._valueConverter);\n        // `advance(x); repeater(iterable)`\n        this.updateInstructionWithAdvance(blockIndex, block.sourceSpan, Identifiers.repeater, () => [this.convertPropertyBinding(value)]);\n    }\n    registerComputedLoopVariables(block, bindingScope) {\n        const level = bindingScope.bindingLevel;\n        bindingScope.set(level, block.contextVariables.$odd.name, (scope, retrievalLevel) => {\n            return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$index')\n                .modulo(literal(2))\n                .notIdentical(literal(0));\n        });\n        bindingScope.set(level, block.contextVariables.$even.name, (scope, retrievalLevel) => {\n            return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$index')\n                .modulo(literal(2))\n                .identical(literal(0));\n        });\n        bindingScope.set(level, block.contextVariables.$first.name, (scope, retrievalLevel) => {\n            return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$index')\n                .identical(literal(0));\n        });\n        bindingScope.set(level, block.contextVariables.$last.name, (scope, retrievalLevel) => {\n            const index = this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$index');\n            const count = this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, '$count');\n            return index.identical(count.minus(literal(1)));\n        });\n    }\n    getLevelSpecificVariableName(name, level) {\n        // We use the `ɵ` here to ensure that there are no name conflicts with user-defined variables.\n        return `ɵ${name}_${level}`;\n    }\n    /**\n     * Gets the name of a for loop variable at a specific binding level. This allows us to look\n     * up implicitly shadowed variables like `$index` and `$count` at a specific level.\n     */\n    getLevelSpecificForLoopVariable(block, scope, retrievalLevel, name) {\n        const scopeName = scope.bindingLevel === retrievalLevel ?\n            block.contextVariables[name].name :\n            this.getLevelSpecificVariableName(name, retrievalLevel);\n        return scope.get(scopeName);\n    }\n    optimizeTrackByFunction(block) {\n        const indexLocalName = block.contextVariables.$index.name;\n        const itemName = block.item.name;\n        const ast = block.trackBy.ast;\n        // Top-level access of `$index` uses the built in `repeaterTrackByIndex`.\n        if (ast instanceof PropertyRead && ast.receiver instanceof ImplicitReceiver &&\n            ast.name === indexLocalName) {\n            return { expression: importExpr(Identifiers.repeaterTrackByIndex), usesComponentInstance: false };\n        }\n        // Top-level access of the item uses the built in `repeaterTrackByIdentity`.\n        if (ast instanceof PropertyRead && ast.receiver instanceof ImplicitReceiver &&\n            ast.name === itemName) {\n            return { expression: importExpr(Identifiers.repeaterTrackByIdentity), usesComponentInstance: false };\n        }\n        // Top-level calls in the form of `fn($index, item)` can be passed in directly.\n        if (ast instanceof Call && ast.receiver instanceof PropertyRead &&\n            ast.receiver.receiver instanceof ImplicitReceiver && ast.args.length === 2) {\n            const firstIsIndex = ast.args[0] instanceof PropertyRead &&\n                ast.args[0].receiver instanceof ImplicitReceiver && ast.args[0].name === indexLocalName;\n            const secondIsItem = ast.args[1] instanceof PropertyRead &&\n                ast.args[1].receiver instanceof ImplicitReceiver && ast.args[1].name === itemName;\n            if (firstIsIndex && secondIsItem) {\n                // If we're in the top-level component, we can access directly through `ctx`,\n                // otherwise we have to get a hold of the component through `componentInstance()`.\n                const receiver = this.level === 0 ? variable(CONTEXT_NAME) :\n                    new ExternalExpr(Identifiers.componentInstance).callFn([]);\n                return { expression: receiver.prop(ast.receiver.name), usesComponentInstance: false };\n            }\n        }\n        return null;\n    }\n    createTrackByFunction(block) {\n        const optimizedFn = this.optimizeTrackByFunction(block);\n        // If the tracking function can be optimized, we don't need any further processing.\n        if (optimizedFn !== null) {\n            return optimizedFn;\n        }\n        const contextVars = block.contextVariables;\n        const scope = new TrackByBindingScope(this._bindingScope, {\n            // Alias `$index` and the item name to `$index` and `$item` respectively.\n            // This allows us to reuse pure functions that may have different item names,\n            // but are otherwise identical.\n            [contextVars.$index.name]: '$index',\n            [block.item.name]: '$item',\n            // Accessing these variables in a tracking function will result in a template diagnostic.\n            // We define them as globals so that their accesses are preserved verbatim instead of being\n            // rewritten to the actual accesses.\n            [contextVars.$count.name]: contextVars.$count.name,\n            [contextVars.$first.name]: contextVars.$first.name,\n            [contextVars.$last.name]: contextVars.$last.name,\n            [contextVars.$even.name]: contextVars.$even.name,\n            [contextVars.$odd.name]: contextVars.$odd.name,\n        });\n        const params = [new FnParam('$index'), new FnParam('$item')];\n        const stmts = convertPureComponentScopeFunction(block.trackBy.ast, scope, variable(CONTEXT_NAME), 'track');\n        const usesComponentInstance = scope.getComponentAccessCount() > 0;\n        let fn$1;\n        if (!usesComponentInstance && stmts.length === 1 && stmts[0] instanceof ExpressionStatement) {\n            fn$1 = arrowFn(params, stmts[0].expr);\n        }\n        else {\n            // The last statement is returned implicitly.\n            if (stmts.length > 0) {\n                const lastStatement = stmts[stmts.length - 1];\n                if (lastStatement instanceof ExpressionStatement) {\n                    stmts[stmts.length - 1] = new ReturnStatement(lastStatement.expr);\n                }\n            }\n            // This has to be a function expression, because `.bind` doesn't work on arrow functions.\n            fn$1 = fn(params, stmts);\n        }\n        return {\n            expression: this.constantPool.getSharedFunctionReference(fn$1, '_forTrack'),\n            usesComponentInstance,\n        };\n    }\n    getConstCount() {\n        return this._dataIndex;\n    }\n    getVarCount() {\n        return this._pureFunctionSlots;\n    }\n    getConsts() {\n        return this._constants;\n    }\n    getNgContentSelectors() {\n        return this._ngContentReservedSlots.length ?\n            this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) :\n            null;\n    }\n    bindingContext() {\n        return `${this._bindingContext++}`;\n    }\n    templatePropertyBindings(templateIndex, attrs) {\n        const propertyBindings = [];\n        for (const input of attrs) {\n            if (!(input instanceof BoundAttribute)) {\n                continue;\n            }\n            const value = input.value.visit(this._valueConverter);\n            if (value === undefined) {\n                continue;\n            }\n            this.allocateBindingSlots(value);\n            if (value instanceof Interpolation$1) {\n                // Params typically contain attribute namespace and value sanitizer, which is applicable\n                // for regular HTML elements, but not applicable for <ng-template> (since props act as\n                // inputs to directives), so keep params array empty.\n                const params = [];\n                // prop=\"{{value}}\" case\n                this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), templateIndex, input.name, input, value, params);\n            }\n            else {\n                // [prop]=\"value\" case\n                propertyBindings.push({\n                    span: input.sourceSpan,\n                    paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(value), input.name)\n                });\n            }\n        }\n        for (const propertyBinding of propertyBindings) {\n            this.updateInstructionWithAdvance(templateIndex, propertyBinding.span, Identifiers.property, propertyBinding.paramsOrFn);\n        }\n    }\n    // Bindings must only be resolved after all local refs have been visited, so all\n    // instructions are queued in callbacks that execute once the initial pass has completed.\n    // Otherwise, we wouldn't be able to support local refs that are defined after their\n    // bindings. e.g. {{ foo }} <div #foo></div>\n    instructionFn(fns, span, reference, paramsOrFn, prepend = false) {\n        fns[prepend ? 'unshift' : 'push']({ span, reference, paramsOrFn });\n    }\n    processStylingUpdateInstruction(elementIndex, instruction) {\n        let allocateBindingSlots = 0;\n        if (instruction) {\n            for (const call of instruction.calls) {\n                allocateBindingSlots += call.allocateBindingSlots;\n                this.updateInstructionWithAdvance(elementIndex, call.sourceSpan, instruction.reference, () => call.params(value => (call.supportsInterpolation && value instanceof Interpolation$1) ?\n                    this.getUpdateInstructionArguments(value) :\n                    this.convertPropertyBinding(value)));\n            }\n        }\n        return allocateBindingSlots;\n    }\n    creationInstruction(span, reference, paramsOrFn, prepend) {\n        this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);\n    }\n    updateInstructionWithAdvance(nodeIndex, span, reference, paramsOrFn) {\n        this.addAdvanceInstructionIfNecessary(nodeIndex, span);\n        this.updateInstruction(span, reference, paramsOrFn);\n    }\n    updateInstruction(span, reference, paramsOrFn) {\n        this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);\n    }\n    addAdvanceInstructionIfNecessary(nodeIndex, span) {\n        if (nodeIndex !== this._currentIndex) {\n            const delta = nodeIndex - this._currentIndex;\n            if (delta < 1) {\n                throw new Error('advance instruction can only go forwards');\n            }\n            this.instructionFn(this._updateCodeFns, span, Identifiers.advance, delta > 1 ? [literal(delta)] : []);\n            this._currentIndex = nodeIndex;\n        }\n    }\n    allocatePureFunctionSlots(numSlots) {\n        const originalSlots = this._pureFunctionSlots;\n        this._pureFunctionSlots += numSlots;\n        return originalSlots;\n    }\n    allocateBindingSlots(value) {\n        this._bindingSlots += value instanceof Interpolation$1 ? value.expressions.length : 1;\n    }\n    /**\n     * Gets an expression that refers to the implicit receiver. The implicit\n     * receiver is always the root level context.\n     */\n    getImplicitReceiverExpr() {\n        if (this._implicitReceiverExpr) {\n            return this._implicitReceiverExpr;\n        }\n        return this._implicitReceiverExpr = this.level === 0 ?\n            variable(CONTEXT_NAME) :\n            this._bindingScope.getOrCreateSharedContextVar(0);\n    }\n    convertPropertyBinding(value) {\n        const convertedPropertyBinding = convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext());\n        const valExpr = convertedPropertyBinding.currValExpr;\n        this._tempVariables.push(...convertedPropertyBinding.stmts);\n        return valExpr;\n    }\n    /**\n     * Gets a list of argument expressions to pass to an update instruction expression. Also updates\n     * the temp variables state with temp variables that were identified as needing to be created\n     * while visiting the arguments.\n     * @param value The original expression we will be resolving an arguments list from.\n     */\n    getUpdateInstructionArguments(value) {\n        const { args, stmts } = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext());\n        this._tempVariables.push(...stmts);\n        return args;\n    }\n    /**\n     * Creates and returns a variable that can be used to\n     * store the state between control flow instructions.\n     */\n    allocateControlFlowTempVariable() {\n        // Note: the assumption here is that we'll only need one temporary variable for all control\n        // flow instructions. It's expected that any instructions will overwrite it before passing it\n        // into the parameters.\n        if (this._controlFlowTempVariable === null) {\n            const name = `${this.contextName}_contFlowTmp`;\n            this._tempVariables.push(new DeclareVarStmt(name));\n            this._controlFlowTempVariable = variable(name);\n        }\n        return this._controlFlowTempVariable;\n    }\n    /**\n     * Prepares all attribute expression values for the `TAttributes` array.\n     *\n     * The purpose of this function is to properly construct an attributes array that\n     * is passed into the `elementStart` (or just `element`) functions. Because there\n     * are many different types of attributes, the array needs to be constructed in a\n     * special way so that `elementStart` can properly evaluate them.\n     *\n     * The format looks like this:\n     *\n     * ```\n     * attrs = [prop, value, prop2, value2,\n     *   PROJECT_AS, selector,\n     *   CLASSES, class1, class2,\n     *   STYLES, style1, value1, style2, value2,\n     *   BINDINGS, name1, name2, name3,\n     *   TEMPLATE, name4, name5, name6,\n     *   I18N, name7, name8, ...]\n     * ```\n     *\n     * Note that this function will fully ignore all synthetic (@foo) attribute values\n     * because those values are intended to always be generated as property instructions.\n     */\n    getAttributeExpressions(elementName, renderAttributes, inputs, outputs, styles, templateAttrs = [], boundI18nAttrs = []) {\n        const alreadySeen = new Set();\n        const attrExprs = [];\n        let ngProjectAsAttr;\n        for (const attr of renderAttributes) {\n            if (attr.name === NG_PROJECT_AS_ATTR_NAME) {\n                ngProjectAsAttr = attr;\n            }\n            // Note that static i18n attributes aren't in the i18n array,\n            // because they're treated in the same way as regular attributes.\n            if (attr.i18n) {\n                // When i18n attributes are present on elements with structural directives\n                // (e.g. `<div *ngIf title=\"Hello\" i18n-title>`), we want to avoid generating\n                // duplicate i18n translation blocks for `ɵɵtemplate` and `ɵɵelement` instruction\n                // attributes. So we do a cache lookup to see if suitable i18n translation block\n                // already exists.\n                const { i18nVarRefsCache } = this._constants;\n                let i18nVarRef;\n                if (i18nVarRefsCache.has(attr.i18n)) {\n                    i18nVarRef = i18nVarRefsCache.get(attr.i18n);\n                }\n                else {\n                    i18nVarRef = this.i18nTranslate(attr.i18n);\n                    i18nVarRefsCache.set(attr.i18n, i18nVarRef);\n                }\n                attrExprs.push(literal(attr.name), i18nVarRef);\n            }\n            else {\n                attrExprs.push(...getAttributeNameLiterals(attr.name), trustedConstAttribute(elementName, attr));\n            }\n        }\n        // Keep ngProjectAs next to the other name, value pairs so we can verify that we match\n        // ngProjectAs marker in the attribute name slot.\n        if (ngProjectAsAttr) {\n            attrExprs.push(...getNgProjectAsLiteral(ngProjectAsAttr));\n        }\n        function addAttrExpr(key, value) {\n            if (typeof key === 'string') {\n                if (!alreadySeen.has(key)) {\n                    attrExprs.push(...getAttributeNameLiterals(key));\n                    value !== undefined && attrExprs.push(value);\n                    alreadySeen.add(key);\n                }\n            }\n            else {\n                attrExprs.push(literal(key));\n            }\n        }\n        // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`\n        // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as\n        // as single property value cell by cell.\n        if (styles) {\n            styles.populateInitialStylingAttrs(attrExprs);\n        }\n        if (inputs.length || outputs.length) {\n            const attrsLengthBeforeInputs = attrExprs.length;\n            for (let i = 0; i < inputs.length; i++) {\n                const input = inputs[i];\n                // We don't want the animation and attribute bindings in the\n                // attributes array since they aren't used for directive matching.\n                if (input.type !== 4 /* BindingType.Animation */ && input.type !== 1 /* BindingType.Attribute */) {\n                    addAttrExpr(input.name);\n                }\n            }\n            for (let i = 0; i < outputs.length; i++) {\n                const output = outputs[i];\n                if (output.type !== 1 /* ParsedEventType.Animation */) {\n                    addAttrExpr(output.name);\n                }\n            }\n            // this is a cheap way of adding the marker only after all the input/output\n            // values have been filtered (by not including the animation ones) and added\n            // to the expressions. The marker is important because it tells the runtime\n            // code that this is where attributes without values start...\n            if (attrExprs.length !== attrsLengthBeforeInputs) {\n                attrExprs.splice(attrsLengthBeforeInputs, 0, literal(3 /* core.AttributeMarker.Bindings */));\n            }\n        }\n        if (templateAttrs.length) {\n            attrExprs.push(literal(4 /* core.AttributeMarker.Template */));\n            templateAttrs.forEach(attr => addAttrExpr(attr.name));\n        }\n        if (boundI18nAttrs.length) {\n            attrExprs.push(literal(6 /* core.AttributeMarker.I18n */));\n            boundI18nAttrs.forEach(attr => addAttrExpr(attr.name));\n        }\n        return attrExprs;\n    }\n    addToConsts(expression) {\n        if (isNull(expression)) {\n            return TYPED_NULL_EXPR;\n        }\n        const consts = this._constants.constExpressions;\n        // Try to reuse a literal that's already in the array, if possible.\n        for (let i = 0; i < consts.length; i++) {\n            if (consts[i].isEquivalent(expression)) {\n                return literal(i);\n            }\n        }\n        return literal(consts.push(expression) - 1);\n    }\n    addAttrsToConsts(attrs) {\n        return attrs !== null && attrs.length > 0 ? this.addToConsts(literalArr(attrs)) :\n            TYPED_NULL_EXPR;\n    }\n    prepareRefsArray(references) {\n        if (!references || references.length === 0) {\n            return TYPED_NULL_EXPR;\n        }\n        const refsParam = references.flatMap(reference => {\n            const slot = this.allocateDataSlot();\n            // Generate the update temporary.\n            const variableName = this._bindingScope.freshReferenceName();\n            const retrievalLevel = this.level;\n            const lhs = variable(variableName);\n            this._bindingScope.set(retrievalLevel, reference.name, lhs, 0 /* DeclarationPriority.DEFAULT */, (scope, relativeLevel) => {\n                // e.g. nextContext(2);\n                const nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : [];\n                // e.g. const $foo$ = reference(1);\n                const refExpr = lhs.set(importExpr(Identifiers.reference).callFn([literal(slot)]));\n                return nextContextStmt.concat(refExpr.toConstDecl());\n            }, true);\n            return [reference.name, reference.value];\n        });\n        return asLiteral(refsParam);\n    }\n    prepareListenerParameter(tagName, outputAst, index) {\n        return () => {\n            const eventName = outputAst.name;\n            const bindingFnName = outputAst.type === 1 /* ParsedEventType.Animation */ ?\n                // synthetic @listener.foo values are treated the exact same as are standard listeners\n                prepareSyntheticListenerFunctionName(eventName, outputAst.phase) :\n                sanitizeIdentifier(eventName);\n            const handlerName = `${this.templateName}_${tagName}_${bindingFnName}_${index}_listener`;\n            const scope = this._bindingScope.nestedScope(this._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);\n            return prepareEventListenerParameters(outputAst, handlerName, scope);\n        };\n    }\n}\nclass ValueConverter extends AstMemoryEfficientTransformer {\n    constructor(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {\n        super();\n        this.constantPool = constantPool;\n        this.allocateSlot = allocateSlot;\n        this.allocatePureFunctionSlots = allocatePureFunctionSlots;\n        this.definePipe = definePipe;\n        this._pipeBindExprs = [];\n    }\n    // AstMemoryEfficientTransformer\n    visitPipe(pipe, context) {\n        // Allocate a slot to create the pipe\n        const slot = this.allocateSlot();\n        const slotPseudoLocal = `PIPE:${slot}`;\n        // Allocate one slot for the result plus one slot per pipe argument\n        const pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);\n        const target = new PropertyRead(pipe.span, pipe.sourceSpan, pipe.nameSpan, new ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);\n        const { identifier, isVarLength } = pipeBindingCallInfo(pipe.args);\n        this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));\n        const args = [pipe.exp, ...pipe.args];\n        const convertedArgs = isVarLength ?\n            this.visitAll([new LiteralArray(pipe.span, pipe.sourceSpan, args)]) :\n            this.visitAll(args);\n        const pipeBindExpr = new Call(pipe.span, pipe.sourceSpan, target, [\n            new LiteralPrimitive(pipe.span, pipe.sourceSpan, slot),\n            new LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot),\n            ...convertedArgs,\n        ], null);\n        this._pipeBindExprs.push(pipeBindExpr);\n        return pipeBindExpr;\n    }\n    updatePipeSlotOffsets(bindingSlots) {\n        this._pipeBindExprs.forEach((pipe) => {\n            // update the slot offset arg (index 1) to account for binding slots\n            const slotOffset = pipe.args[1];\n            slotOffset.value += bindingSlots;\n        });\n    }\n    visitLiteralArray(array, context) {\n        return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), values => {\n            // If the literal has calculated (non-literal) elements transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values.\n            const literal = literalArr(values);\n            return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n        });\n    }\n    visitLiteralMap(map, context) {\n        return new BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), values => {\n            // If the literal has calculated (non-literal) elements  transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values.\n            const literal = literalMap(values.map((value, index) => ({ key: map.keys[index].key, value, quoted: map.keys[index].quoted })));\n            return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n        });\n    }\n}\n// Pipes always have at least one parameter, the value they operate on\nconst pipeBindingIdentifiers = [Identifiers.pipeBind1, Identifiers.pipeBind2, Identifiers.pipeBind3, Identifiers.pipeBind4];\nfunction pipeBindingCallInfo(args) {\n    const identifier = pipeBindingIdentifiers[args.length];\n    return {\n        identifier: identifier || Identifiers.pipeBindV,\n        isVarLength: !identifier,\n    };\n}\nconst pureFunctionIdentifiers = [\n    Identifiers.pureFunction0, Identifiers.pureFunction1, Identifiers.pureFunction2, Identifiers.pureFunction3, Identifiers.pureFunction4,\n    Identifiers.pureFunction5, Identifiers.pureFunction6, Identifiers.pureFunction7, Identifiers.pureFunction8\n];\nfunction pureFunctionCallInfo(args) {\n    const identifier = pureFunctionIdentifiers[args.length];\n    return {\n        identifier: identifier || Identifiers.pureFunctionV,\n        isVarLength: !identifier,\n    };\n}\n// e.g. x(2);\nfunction generateNextContextExpr(relativeLevelDiff) {\n    return importExpr(Identifiers.nextContext)\n        .callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);\n}\nfunction getLiteralFactory(constantPool, literal$1, allocateSlots) {\n    const { literalFactory, literalFactoryArguments } = constantPool.getLiteralFactory(literal$1);\n    // Allocate 1 slot for the result plus 1 per argument\n    const startSlot = allocateSlots(1 + literalFactoryArguments.length);\n    const { identifier, isVarLength } = pureFunctionCallInfo(literalFactoryArguments);\n    // Literal factories are pure functions that only need to be re-invoked when the parameters\n    // change.\n    const args = [literal(startSlot), literalFactory];\n    if (isVarLength) {\n        args.push(literalArr(literalFactoryArguments));\n    }\n    else {\n        args.push(...literalFactoryArguments);\n    }\n    return importExpr(identifier).callFn(args);\n}\n/**\n * Gets an array of literals that can be added to an expression\n * to represent the name and namespace of an attribute. E.g.\n * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.\n *\n * @param name Name of the attribute, including the namespace.\n */\nfunction getAttributeNameLiterals(name) {\n    const [attributeNamespace, attributeName] = splitNsName(name);\n    const nameLiteral = literal(attributeName);\n    if (attributeNamespace) {\n        return [\n            literal(0 /* core.AttributeMarker.NamespaceURI */), literal(attributeNamespace), nameLiteral\n        ];\n    }\n    return [nameLiteral];\n}\n/** The prefix used to get a shared context in BindingScope's map. */\nconst SHARED_CONTEXT_KEY = '$$shared_ctx$$';\nclass BindingScope {\n    static createRootScope() {\n        return new BindingScope();\n    }\n    constructor(bindingLevel = 0, parent = null, globals) {\n        this.bindingLevel = bindingLevel;\n        this.parent = parent;\n        this.globals = globals;\n        /** Keeps a map from local variables to their BindingData. */\n        this.map = new Map();\n        this.referenceNameIndex = 0;\n        this.restoreViewVariable = null;\n        this.usesRestoredViewContext = false;\n        if (globals !== undefined) {\n            for (const name of globals) {\n                this.set(0, name, variable(name));\n            }\n        }\n    }\n    get(name) {\n        let current = this;\n        while (current) {\n            let value = current.map.get(name);\n            if (value != null) {\n                if (current !== this) {\n                    // make a local copy and reset the `declare` state\n                    value = {\n                        retrievalLevel: value.retrievalLevel,\n                        lhs: value.lhs,\n                        declareLocalCallback: value.declareLocalCallback,\n                        declare: false,\n                        priority: value.priority\n                    };\n                    // Cache the value locally.\n                    this.map.set(name, value);\n                    // Possibly generate a shared context var\n                    this.maybeGenerateSharedContextVar(value);\n                    this.maybeRestoreView();\n                }\n                if (value.declareLocalCallback && !value.declare) {\n                    value.declare = true;\n                }\n                return typeof value.lhs === 'function' ? value.lhs(this, value.retrievalLevel) : value.lhs;\n            }\n            current = current.parent;\n        }\n        // If we get to this point, we are looking for a property on the top level component\n        // - If level === 0, we are on the top and don't need to re-declare `ctx`.\n        // - If level > 0, we are in an embedded view. We need to retrieve the name of the\n        // local var we used to store the component context, e.g. const $comp$ = x();\n        return this.bindingLevel === 0 ? null : this.getComponentProperty(name);\n    }\n    /** Checks whether a variable exists locally on the current scope. */\n    hasLocal(name) {\n        return this.map.has(name);\n    }\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param retrievalLevel The level from which this value can be retrieved\n     * @param name Name of the variable.\n     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param priority The sorting priority of this var\n     * @param declareLocalCallback The callback to invoke when declaring this local var\n     * @param localRef Whether or not this is a local ref\n     */\n    set(retrievalLevel, name, lhs, priority = 0 /* DeclarationPriority.DEFAULT */, declareLocalCallback, localRef) {\n        if (this.map.has(name)) {\n            if (localRef) {\n                // Do not throw an error if it's a local ref and do not update existing value,\n                // so the first defined ref is always returned.\n                return this;\n            }\n            error(`The name ${name} is already defined in scope to be ${this.map.get(name)}`);\n        }\n        this.map.set(name, {\n            retrievalLevel: retrievalLevel,\n            lhs: lhs,\n            declare: false,\n            declareLocalCallback: declareLocalCallback,\n            priority: priority,\n        });\n        return this;\n    }\n    // Implemented as part of LocalResolver.\n    getLocal(name) {\n        return this.get(name);\n    }\n    // Implemented as part of LocalResolver.\n    notifyImplicitReceiverUse() {\n        if (this.bindingLevel !== 0) {\n            // Since the implicit receiver is accessed in an embedded view, we need to\n            // ensure that we declare a shared context variable for the current template\n            // in the update variables.\n            this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;\n        }\n    }\n    nestedScope(level, globals) {\n        const newScope = new BindingScope(level, this, globals);\n        if (level > 0)\n            newScope.generateSharedContextVar(0);\n        return newScope;\n    }\n    /**\n     * Gets or creates a shared context variable and returns its expression. Note that\n     * this does not mean that the shared variable will be declared. Variables in the\n     * binding scope will be only declared if they are used.\n     */\n    getOrCreateSharedContextVar(retrievalLevel) {\n        const bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;\n        if (!this.map.has(bindingKey)) {\n            this.generateSharedContextVar(retrievalLevel);\n        }\n        // Shared context variables are always generated as \"ReadVarExpr\".\n        return this.map.get(bindingKey).lhs;\n    }\n    getSharedContextName(retrievalLevel) {\n        const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel);\n        // Shared context variables are always generated as \"ReadVarExpr\".\n        return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;\n    }\n    maybeGenerateSharedContextVar(value) {\n        if (value.priority === 1 /* DeclarationPriority.CONTEXT */ &&\n            value.retrievalLevel < this.bindingLevel) {\n            const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);\n            if (sharedCtxObj) {\n                sharedCtxObj.declare = true;\n            }\n            else {\n                this.generateSharedContextVar(value.retrievalLevel);\n            }\n        }\n    }\n    generateSharedContextVar(retrievalLevel) {\n        const lhs = variable(CONTEXT_NAME + this.freshReferenceName());\n        this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {\n            retrievalLevel: retrievalLevel,\n            lhs: lhs,\n            declareLocalCallback: (scope, relativeLevel) => {\n                // const ctx_r0 = nextContext(2);\n                return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];\n            },\n            declare: false,\n            priority: 2 /* DeclarationPriority.SHARED_CONTEXT */,\n        });\n    }\n    getComponentProperty(name) {\n        const componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);\n        componentValue.declare = true;\n        this.maybeRestoreView();\n        const lhs = typeof componentValue.lhs === 'function' ?\n            componentValue.lhs(this, componentValue.retrievalLevel) :\n            componentValue.lhs;\n        return name === DIRECT_CONTEXT_REFERENCE ? lhs : lhs.prop(name);\n    }\n    maybeRestoreView() {\n        // View restoration is required for listener instructions inside embedded views, because\n        // they only run in creation mode and they can have references to the context object.\n        // If the context object changes in update mode, the reference will be incorrect, because\n        // it was established during creation.\n        if (this.isListenerScope()) {\n            if (!this.parent.restoreViewVariable) {\n                // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction\n                this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());\n            }\n            this.restoreViewVariable = this.parent.restoreViewVariable;\n        }\n    }\n    restoreViewStatement() {\n        if (this.restoreViewVariable) {\n            const restoreCall = invokeInstruction(null, Identifiers.restoreView, [this.restoreViewVariable]);\n            // Either `const restoredCtx = restoreView($state$);` or `restoreView($state$);`\n            // depending on whether it is being used.\n            return this.usesRestoredViewContext ?\n                variable(RESTORED_VIEW_CONTEXT_NAME).set(restoreCall).toConstDecl() :\n                restoreCall.toStmt();\n        }\n        return null;\n    }\n    viewSnapshotStatements() {\n        // const $state$ = getCurrentView();\n        return this.restoreViewVariable ?\n            [\n                this.restoreViewVariable.set(invokeInstruction(null, Identifiers.getCurrentView, [])).toConstDecl()\n            ] :\n            [];\n    }\n    isListenerScope() {\n        return this.parent && this.parent.bindingLevel === this.bindingLevel;\n    }\n    variableDeclarations() {\n        let currentContextLevel = 0;\n        return Array.from(this.map.values())\n            .filter(value => value.declare)\n            .sort((a, b) => b.retrievalLevel - a.retrievalLevel || b.priority - a.priority)\n            .reduce((stmts, value) => {\n            const levelDiff = this.bindingLevel - value.retrievalLevel;\n            const currStmts = value.declareLocalCallback(this, levelDiff - currentContextLevel);\n            currentContextLevel = levelDiff;\n            return stmts.concat(currStmts);\n        }, []);\n    }\n    freshReferenceName() {\n        let current = this;\n        // Find the top scope as it maintains the global reference count\n        while (current.parent)\n            current = current.parent;\n        const ref = `${REFERENCE_PREFIX}${current.referenceNameIndex++}`;\n        return ref;\n    }\n    hasRestoreViewVariable() {\n        return !!this.restoreViewVariable;\n    }\n    notifyRestoredViewContextUse() {\n        this.usesRestoredViewContext = true;\n    }\n}\n/** Binding scope of a `track` function inside a `for` loop block. */\nclass TrackByBindingScope extends BindingScope {\n    constructor(parentScope, globalOverrides) {\n        super(parentScope.bindingLevel + 1, parentScope);\n        this.globalOverrides = globalOverrides;\n        this.componentAccessCount = 0;\n    }\n    get(name) {\n        // Intercept any overridden globals.\n        if (this.globalOverrides.hasOwnProperty(name)) {\n            return variable(this.globalOverrides[name]);\n        }\n        let current = this.parent;\n        // Prevent accesses of template variables outside the `for` loop.\n        while (current) {\n            if (current.hasLocal(name)) {\n                return null;\n            }\n            current = current.parent;\n        }\n        // When the component scope is accessed, we redirect it through `this`.\n        this.componentAccessCount++;\n        return variable('this').prop(name);\n    }\n    /** Gets the number of times the host component has been accessed through the scope. */\n    getComponentAccessCount() {\n        return this.componentAccessCount;\n    }\n}\n/**\n * Creates an array of expressions out of an `ngProjectAs` attributes\n * which can be added to the instruction parameters.\n */\nfunction getNgProjectAsLiteral(attribute) {\n    // Parse the attribute value into a CssSelectorList. Note that we only take the\n    // first selector, because we don't support multiple selectors in ngProjectAs.\n    const parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];\n    return [literal(5 /* core.AttributeMarker.ProjectAs */), asLiteral(parsedR3Selector)];\n}\n/**\n * Gets the instruction to generate for an interpolated property\n * @param interpolation An Interpolation AST\n */\nfunction getPropertyInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers.propertyInterpolate;\n        case 3:\n            return Identifiers.propertyInterpolate1;\n        case 5:\n            return Identifiers.propertyInterpolate2;\n        case 7:\n            return Identifiers.propertyInterpolate3;\n        case 9:\n            return Identifiers.propertyInterpolate4;\n        case 11:\n            return Identifiers.propertyInterpolate5;\n        case 13:\n            return Identifiers.propertyInterpolate6;\n        case 15:\n            return Identifiers.propertyInterpolate7;\n        case 17:\n            return Identifiers.propertyInterpolate8;\n        default:\n            return Identifiers.propertyInterpolateV;\n    }\n}\n/**\n * Gets the instruction to generate for an interpolated attribute\n * @param interpolation An Interpolation AST\n */\nfunction getAttributeInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 3:\n            return Identifiers.attributeInterpolate1;\n        case 5:\n            return Identifiers.attributeInterpolate2;\n        case 7:\n            return Identifiers.attributeInterpolate3;\n        case 9:\n            return Identifiers.attributeInterpolate4;\n        case 11:\n            return Identifiers.attributeInterpolate5;\n        case 13:\n            return Identifiers.attributeInterpolate6;\n        case 15:\n            return Identifiers.attributeInterpolate7;\n        case 17:\n            return Identifiers.attributeInterpolate8;\n        default:\n            return Identifiers.attributeInterpolateV;\n    }\n}\n/**\n * Gets the instruction to generate for interpolated text.\n * @param interpolation An Interpolation AST\n */\nfunction getTextInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers.textInterpolate;\n        case 3:\n            return Identifiers.textInterpolate1;\n        case 5:\n            return Identifiers.textInterpolate2;\n        case 7:\n            return Identifiers.textInterpolate3;\n        case 9:\n            return Identifiers.textInterpolate4;\n        case 11:\n            return Identifiers.textInterpolate5;\n        case 13:\n            return Identifiers.textInterpolate6;\n        case 15:\n            return Identifiers.textInterpolate7;\n        case 17:\n            return Identifiers.textInterpolate8;\n        default:\n            return Identifiers.textInterpolateV;\n    }\n}\n/**\n * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.\n *\n * @param template text of the template to parse\n * @param templateUrl URL to use for source mapping of the parsed template\n * @param options options to modify how the template is parsed\n */\nfunction parseTemplate(template, templateUrl, options = {}) {\n    const { interpolationConfig, preserveWhitespaces, enableI18nLegacyMessageIdFormat } = options;\n    const bindingParser = makeBindingParser(interpolationConfig);\n    const htmlParser = new HtmlParser();\n    const parseResult = htmlParser.parse(template, templateUrl, {\n        leadingTriviaChars: LEADING_TRIVIA_CHARS,\n        ...options,\n        tokenizeExpansionForms: true,\n        tokenizeBlocks: options.enableBlockSyntax ?? true,\n    });\n    if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors &&\n        parseResult.errors.length > 0) {\n        const parsedTemplate = {\n            interpolationConfig,\n            preserveWhitespaces,\n            errors: parseResult.errors,\n            nodes: [],\n            styleUrls: [],\n            styles: [],\n            ngContentSelectors: []\n        };\n        if (options.collectCommentNodes) {\n            parsedTemplate.commentNodes = [];\n        }\n        return parsedTemplate;\n    }\n    let rootNodes = parseResult.rootNodes;\n    // process i18n meta information (scan attributes, generate ids)\n    // before we run whitespace removal process, because existing i18n\n    // extraction process (ng extract-i18n) relies on a raw content to generate\n    // message ids\n    const i18nMetaVisitor = new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */ !preserveWhitespaces, enableI18nLegacyMessageIdFormat);\n    const i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);\n    if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors &&\n        i18nMetaResult.errors.length > 0) {\n        const parsedTemplate = {\n            interpolationConfig,\n            preserveWhitespaces,\n            errors: i18nMetaResult.errors,\n            nodes: [],\n            styleUrls: [],\n            styles: [],\n            ngContentSelectors: []\n        };\n        if (options.collectCommentNodes) {\n            parsedTemplate.commentNodes = [];\n        }\n        return parsedTemplate;\n    }\n    rootNodes = i18nMetaResult.rootNodes;\n    if (!preserveWhitespaces) {\n        rootNodes = visitAll(new WhitespaceVisitor(), rootNodes);\n        // run i18n meta visitor again in case whitespaces are removed (because that might affect\n        // generated i18n message content) and first pass indicated that i18n content is present in a\n        // template. During this pass i18n IDs generated at the first pass will be preserved, so we can\n        // mimic existing extraction process (ng extract-i18n)\n        if (i18nMetaVisitor.hasI18nMeta) {\n            rootNodes = visitAll(new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */ false), rootNodes);\n        }\n    }\n    const { nodes, errors, styleUrls, styles, ngContentSelectors, commentNodes } = htmlAstToRender3Ast(rootNodes, bindingParser, { collectCommentNodes: !!options.collectCommentNodes });\n    errors.push(...parseResult.errors, ...i18nMetaResult.errors);\n    const parsedTemplate = {\n        interpolationConfig,\n        preserveWhitespaces,\n        errors: errors.length > 0 ? errors : null,\n        nodes,\n        styleUrls,\n        styles,\n        ngContentSelectors\n    };\n    if (options.collectCommentNodes) {\n        parsedTemplate.commentNodes = commentNodes;\n    }\n    return parsedTemplate;\n}\nconst elementRegistry = new DomElementSchemaRegistry();\n/**\n * Construct a `BindingParser` with a default configuration.\n */\nfunction makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    return new BindingParser(new Parser$1(new Lexer()), interpolationConfig, elementRegistry, []);\n}\nfunction resolveSanitizationFn(context, isAttribute) {\n    switch (context) {\n        case SecurityContext.HTML:\n            return importExpr(Identifiers.sanitizeHtml);\n        case SecurityContext.SCRIPT:\n            return importExpr(Identifiers.sanitizeScript);\n        case SecurityContext.STYLE:\n            // the compiler does not fill in an instruction for [style.prop?] binding\n            // values because the style algorithm knows internally what props are subject\n            // to sanitization (only [attr.style] values are explicitly sanitized)\n            return isAttribute ? importExpr(Identifiers.sanitizeStyle) : null;\n        case SecurityContext.URL:\n            return importExpr(Identifiers.sanitizeUrl);\n        case SecurityContext.RESOURCE_URL:\n            return importExpr(Identifiers.sanitizeResourceUrl);\n        default:\n            return null;\n    }\n}\nfunction trustedConstAttribute(tagName, attr) {\n    const value = asLiteral(attr.value);\n    if (isTrustedTypesSink(tagName, attr.name)) {\n        switch (elementRegistry.securityContext(tagName, attr.name, /* isAttribute */ true)) {\n            case SecurityContext.HTML:\n                return taggedTemplate(importExpr(Identifiers.trustConstantHtml), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n            // NB: no SecurityContext.SCRIPT here, as the corresponding tags are stripped by the compiler.\n            case SecurityContext.RESOURCE_URL:\n                return taggedTemplate(importExpr(Identifiers.trustConstantResourceUrl), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n            default:\n                return value;\n        }\n    }\n    else {\n        return value;\n    }\n}\nfunction isSingleElementTemplate(children) {\n    return children.length === 1 && children[0] instanceof Element$1;\n}\nfunction isTextNode(node) {\n    return node instanceof Text$3 || node instanceof BoundText || node instanceof Icu$1;\n}\nfunction isIframeElement(tagName) {\n    return tagName.toLowerCase() === 'iframe';\n}\nfunction hasTextChildrenOnly(children) {\n    return children.every(isTextNode);\n}\nfunction getBindingFunctionParams(deferredParams, name, eagerParams) {\n    return () => {\n        const value = deferredParams();\n        const fnParams = Array.isArray(value) ? value : [value];\n        if (eagerParams) {\n            fnParams.push(...eagerParams);\n        }\n        if (name) {\n            // We want the property name to always be the first function parameter.\n            fnParams.unshift(literal(name));\n        }\n        return fnParams;\n    };\n}\n/** Name of the global variable that is used to determine if we use Closure translations or not */\nconst NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';\n/**\n * Generate statements that define a given translation message.\n *\n * ```\n * var I18N_1;\n * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {\n *     var MSG_EXTERNAL_XXX = goog.getMsg(\n *          \"Some message with {$interpolation}!\",\n *          { \"interpolation\": \"\\uFFFD0\\uFFFD\" }\n *     );\n *     I18N_1 = MSG_EXTERNAL_XXX;\n * }\n * else {\n *     I18N_1 = $localize`Some message with ${'\\uFFFD0\\uFFFD'}!`;\n * }\n * ```\n *\n * @param message The original i18n AST message node\n * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.\n * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.\n * @param params Object mapping placeholder names to their values (e.g.\n * `{ \"interpolation\": \"\\uFFFD0\\uFFFD\" }`).\n * @param transformFn Optional transformation function that will be applied to the translation (e.g.\n * post-processing).\n * @returns An array of statements that defined a given translation.\n */\nfunction getTranslationDeclStmts(message, variable, closureVar, params = {}, transformFn) {\n    // Sort the map entries in the compiled output. This makes it easy to acheive identical output in\n    // the template pipeline compiler.\n    params = Object.fromEntries(Object.entries(params).sort());\n    const statements = [\n        declareI18nVariable(variable),\n        ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable, message, closureVar, params), createLocalizeStatements(variable, message, formatI18nPlaceholderNamesInMap(params, /* useCamelCase */ false))),\n    ];\n    if (transformFn) {\n        statements.push(new ExpressionStatement(variable.set(transformFn(variable))));\n    }\n    return statements;\n}\n/**\n * Create the expression that will be used to guard the closure mode block\n * It is equivalent to:\n *\n * ```\n * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode\n * ```\n */\nfunction createClosureModeGuard() {\n    return typeofExpr(variable(NG_I18N_CLOSURE_MODE))\n        .notIdentical(literal('undefined', STRING_TYPE))\n        .and(variable(NG_I18N_CLOSURE_MODE));\n}\n\n// This regex matches any binding names that contain the \"attr.\" prefix, e.g. \"attr.required\"\n// If there is a match, the first matching group will contain the attribute name to bind.\nconst ATTR_REGEX = /attr\\.([^\\]]+)/;\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\nfunction baseDirectiveFields(meta, constantPool, bindingParser) {\n    const definitionMap = new DefinitionMap();\n    const selectors = parseSelectorToR3Selector(meta.selector);\n    // e.g. `type: MyDirective`\n    definitionMap.set('type', meta.type.value);\n    // e.g. `selectors: [['', 'someDir', '']]`\n    if (selectors.length > 0) {\n        definitionMap.set('selectors', asLiteral(selectors));\n    }\n    if (meta.queries.length > 0) {\n        // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }\n        definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));\n    }\n    if (meta.viewQueries.length) {\n        definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));\n    }\n    // e.g. `hostBindings: (rf, ctx) => { ... }\n    definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap));\n    // e.g 'inputs: {a: 'a'}`\n    definitionMap.set('inputs', conditionallyCreateDirectiveBindingLiteral(meta.inputs, true));\n    // e.g 'outputs: {a: 'a'}`\n    definitionMap.set('outputs', conditionallyCreateDirectiveBindingLiteral(meta.outputs));\n    if (meta.exportAs !== null) {\n        definitionMap.set('exportAs', literalArr(meta.exportAs.map(e => literal(e))));\n    }\n    if (meta.isStandalone) {\n        definitionMap.set('standalone', literal(true));\n    }\n    if (meta.isSignal) {\n        definitionMap.set('signals', literal(true));\n    }\n    return definitionMap;\n}\n/**\n * Add features to the definition map.\n */\nfunction addFeatures(definitionMap, meta) {\n    // e.g. `features: [NgOnChangesFeature]`\n    const features = [];\n    const providers = meta.providers;\n    const viewProviders = meta.viewProviders;\n    const inputKeys = Object.keys(meta.inputs);\n    if (providers || viewProviders) {\n        const args = [providers || new LiteralArrayExpr([])];\n        if (viewProviders) {\n            args.push(viewProviders);\n        }\n        features.push(importExpr(Identifiers.ProvidersFeature).callFn(args));\n    }\n    for (const key of inputKeys) {\n        if (meta.inputs[key].transformFunction !== null) {\n            features.push(importExpr(Identifiers.InputTransformsFeatureFeature));\n            break;\n        }\n    }\n    // Note: host directives feature needs to be inserted before the\n    // inheritance feature to ensure the correct execution order.\n    if (meta.hostDirectives?.length) {\n        features.push(importExpr(Identifiers.HostDirectivesFeature).callFn([createHostDirectivesFeatureArg(meta.hostDirectives)]));\n    }\n    if (meta.usesInheritance) {\n        features.push(importExpr(Identifiers.InheritDefinitionFeature));\n    }\n    if (meta.fullInheritance) {\n        features.push(importExpr(Identifiers.CopyDefinitionFeature));\n    }\n    if (meta.lifecycle.usesOnChanges) {\n        features.push(importExpr(Identifiers.NgOnChangesFeature));\n    }\n    // TODO: better way of differentiating component vs directive metadata.\n    if (meta.hasOwnProperty('template') && meta.isStandalone) {\n        features.push(importExpr(Identifiers.StandaloneFeature));\n    }\n    if (features.length) {\n        definitionMap.set('features', literalArr(features));\n    }\n}\n/**\n * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\n */\nfunction compileDirectiveFromMetadata(meta, constantPool, bindingParser) {\n    const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n    addFeatures(definitionMap, meta);\n    const expression = importExpr(Identifiers.defineDirective).callFn([definitionMap.toLiteralMap()], undefined, true);\n    const type = createDirectiveType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Creates an AST for a function that contains dynamic imports representing\n * deferrable dependencies.\n */\nfunction createDeferredDepsFunction(constantPool, name, deps) {\n    // This defer block has deps for which we need to generate dynamic imports.\n    const dependencyExp = [];\n    for (const [symbolName, importPath] of deps) {\n        // Callback function, e.g. `m () => m.MyCmp;`.\n        const innerFn = arrowFn([new FnParam('m', DYNAMIC_TYPE)], variable('m').prop(symbolName));\n        // Dynamic import, e.g. `import('./a').then(...)`.\n        const importExpr = (new DynamicImportExpr(importPath)).prop('then').callFn([innerFn]);\n        dependencyExp.push(importExpr);\n    }\n    const depsFnExpr = arrowFn([], literalArr(dependencyExp));\n    constantPool.statements.push(depsFnExpr.toDeclStmt(name, StmtModifier.Final));\n    return variable(name);\n}\n/**\n * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\n */\nfunction compileComponentFromMetadata(meta, constantPool, bindingParser) {\n    const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n    addFeatures(definitionMap, meta);\n    const selector = meta.selector && CssSelector.parse(meta.selector);\n    const firstSelector = selector && selector[0];\n    // e.g. `attr: [\"class\", \".my.app\"]`\n    // This is optional an only included if the first selector of a component specifies attributes.\n    if (firstSelector) {\n        const selectorAttributes = firstSelector.getAttrs();\n        if (selectorAttributes.length) {\n            definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(value => value != null ? literal(value) : literal(undefined))), \n            /* forceShared */ true));\n        }\n    }\n    // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n    const templateTypeName = meta.name;\n    const templateName = templateTypeName ? `${templateTypeName}_Template` : null;\n    // Template compilation is currently conditional as we're in the process of rewriting it.\n    if (!USE_TEMPLATE_PIPELINE) {\n        // This is the main path currently used in compilation, which compiles the template with the\n        // legacy `TemplateDefinitionBuilder`.\n        let allDeferrableDepsFn = null;\n        if (meta.deferBlocks.size > 0 && meta.deferrableTypes.size > 0 &&\n            meta.deferBlockDepsEmitMode === 1 /* DeferBlockDepsEmitMode.PerComponent */) {\n            const fnName = `${templateTypeName}_DeferFn`;\n            allDeferrableDepsFn = createDeferredDepsFunction(constantPool, fnName, meta.deferrableTypes);\n        }\n        const template = meta.template;\n        const templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, Identifiers.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.deferBlocks, new Map(), allDeferrableDepsFn);\n        const templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []);\n        // We need to provide this so that dynamically generated components know what\n        // projected content blocks to pass through to the component when it is\n        //     instantiated.\n        const ngContentSelectors = templateBuilder.getNgContentSelectors();\n        if (ngContentSelectors) {\n            definitionMap.set('ngContentSelectors', ngContentSelectors);\n        }\n        // e.g. `decls: 2`\n        // definitionMap.set('decls', o.literal(tpl.root.decls!));\n        definitionMap.set('decls', literal(templateBuilder.getConstCount()));\n        // e.g. `vars: 2`\n        // definitionMap.set('vars', o.literal(tpl.root.vars!));\n        definitionMap.set('vars', literal(templateBuilder.getVarCount()));\n        // Generate `consts` section of ComponentDef:\n        // - either as an array:\n        //   `consts: [['one', 'two'], ['three', 'four']]`\n        // - or as a factory function in case additional statements are present (to support i18n):\n        //   `consts: () => { var i18n_0; if (ngI18nClosureMode) {...} else {...} return [i18n_0];\n        //   }`\n        const { constExpressions, prepareStatements } = templateBuilder.getConsts();\n        if (constExpressions.length > 0) {\n            let constsExpr = literalArr(constExpressions);\n            // Prepare statements are present - turn `consts` into a function.\n            if (prepareStatements.length > 0) {\n                constsExpr = arrowFn([], [...prepareStatements, new ReturnStatement(constsExpr)]);\n            }\n            definitionMap.set('consts', constsExpr);\n        }\n        definitionMap.set('template', templateFunctionExpression);\n    }\n    else {\n        // This path compiles the template using the prototype template pipeline. First the template is\n        // ingested into IR:\n        const tpl = ingestComponent(meta.name, meta.template.nodes, constantPool, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.deferBlocks);\n        // Then the IR is transformed to prepare it for cod egeneration.\n        transform(tpl, CompilationJobKind.Tmpl);\n        // Finally we emit the template function:\n        const templateFn = emitTemplateFn(tpl, constantPool);\n        if (tpl.contentSelectors !== null) {\n            definitionMap.set('ngContentSelectors', tpl.contentSelectors);\n        }\n        definitionMap.set('decls', literal(tpl.root.decls));\n        definitionMap.set('vars', literal(tpl.root.vars));\n        if (tpl.consts.length > 0) {\n            if (tpl.constsInitializers.length > 0) {\n                definitionMap.set('consts', arrowFn([], [\n                    ...tpl.constsInitializers, new ReturnStatement(literalArr(tpl.consts))\n                ]));\n            }\n            else {\n                definitionMap.set('consts', literalArr(tpl.consts));\n            }\n        }\n        definitionMap.set('template', templateFn);\n    }\n    if (meta.declarationListEmitMode !== 3 /* DeclarationListEmitMode.RuntimeResolved */ &&\n        meta.declarations.length > 0) {\n        definitionMap.set('dependencies', compileDeclarationList(literalArr(meta.declarations.map(decl => decl.type)), meta.declarationListEmitMode));\n    }\n    else if (meta.declarationListEmitMode === 3 /* DeclarationListEmitMode.RuntimeResolved */) {\n        const args = [meta.type.value];\n        if (meta.rawImports) {\n            args.push(meta.rawImports);\n        }\n        definitionMap.set('dependencies', importExpr(Identifiers.getComponentDepsFactory).callFn(args));\n    }\n    if (meta.encapsulation === null) {\n        meta.encapsulation = ViewEncapsulation.Emulated;\n    }\n    // e.g. `styles: [str1, str2]`\n    if (meta.styles && meta.styles.length) {\n        const styleValues = meta.encapsulation == ViewEncapsulation.Emulated ?\n            compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) :\n            meta.styles;\n        const styleNodes = styleValues.reduce((result, style) => {\n            if (style.trim().length > 0) {\n                result.push(constantPool.getConstLiteral(literal(style)));\n            }\n            return result;\n        }, []);\n        if (styleNodes.length > 0) {\n            definitionMap.set('styles', literalArr(styleNodes));\n        }\n    }\n    else if (meta.encapsulation === ViewEncapsulation.Emulated) {\n        // If there is no style, don't generate css selectors on elements\n        meta.encapsulation = ViewEncapsulation.None;\n    }\n    // Only set view encapsulation if it's not the default value\n    if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n        definitionMap.set('encapsulation', literal(meta.encapsulation));\n    }\n    // e.g. `animation: [trigger('123', [])]`\n    if (meta.animations !== null) {\n        definitionMap.set('data', literalMap([{ key: 'animation', value: meta.animations, quoted: false }]));\n    }\n    // Setting change detection flag\n    if (meta.changeDetection !== null) {\n        if (typeof meta.changeDetection === 'number' &&\n            meta.changeDetection !== ChangeDetectionStrategy.Default) {\n            // changeDetection is resolved during analysis. Only set it if not the default.\n            definitionMap.set('changeDetection', literal(meta.changeDetection));\n        }\n        else if (typeof meta.changeDetection === 'object') {\n            // changeDetection is not resolved during analysis (e.g., we are in local compilation mode).\n            // So place it as is.\n            definitionMap.set('changeDetection', meta.changeDetection);\n        }\n    }\n    const expression = importExpr(Identifiers.defineComponent).callFn([definitionMap.toLiteralMap()], undefined, true);\n    const type = createComponentType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Creates the type specification from the component meta. This type is inserted into .d.ts files\n * to be consumed by upstream compilations.\n */\nfunction createComponentType(meta) {\n    const typeParams = createBaseDirectiveTypeParams(meta);\n    typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));\n    typeParams.push(expressionType(literal(meta.isStandalone)));\n    typeParams.push(createHostDirectivesType(meta));\n    // TODO(signals): Always include this metadata starting with v17. Right\n    // now Angular v16.0.x does not support this field and library distributions\n    // would then be incompatible with v16.0.x framework users.\n    if (meta.isSignal) {\n        typeParams.push(expressionType(literal(meta.isSignal)));\n    }\n    return expressionType(importExpr(Identifiers.ComponentDeclaration, typeParams));\n}\n/**\n * Compiles the array literal of declarations into an expression according to the provided emit\n * mode.\n */\nfunction compileDeclarationList(list, mode) {\n    switch (mode) {\n        case 0 /* DeclarationListEmitMode.Direct */:\n            // directives: [MyDir],\n            return list;\n        case 1 /* DeclarationListEmitMode.Closure */:\n            // directives: function () { return [MyDir]; }\n            return arrowFn([], list);\n        case 2 /* DeclarationListEmitMode.ClosureResolved */:\n            // directives: function () { return [MyDir].map(ng.resolveForwardRef); }\n            const resolvedList = list.prop('map').callFn([importExpr(Identifiers.resolveForwardRef)]);\n            return arrowFn([], resolvedList);\n        case 3 /* DeclarationListEmitMode.RuntimeResolved */:\n            throw new Error(`Unsupported with an array of pre-resolved dependencies`);\n    }\n}\nfunction prepareQueryParams(query, constantPool) {\n    const parameters = [getQueryPredicate(query, constantPool), literal(toQueryFlags(query))];\n    if (query.read) {\n        parameters.push(query.read);\n    }\n    return parameters;\n}\n/**\n * Translates query flags into `TQueryFlags` type in packages/core/src/render3/interfaces/query.ts\n * @param query\n */\nfunction toQueryFlags(query) {\n    return (query.descendants ? 1 /* QueryFlags.descendants */ : 0 /* QueryFlags.none */) |\n        (query.static ? 2 /* QueryFlags.isStatic */ : 0 /* QueryFlags.none */) |\n        (query.emitDistinctChangesOnly ? 4 /* QueryFlags.emitDistinctChangesOnly */ : 0 /* QueryFlags.none */);\n}\nfunction convertAttributesToExpressions(attributes) {\n    const values = [];\n    for (let key of Object.getOwnPropertyNames(attributes)) {\n        const value = attributes[key];\n        values.push(literal(key), value);\n    }\n    return values;\n}\n// Define and update any content queries\nfunction createContentQueriesFunction(queries, constantPool, name) {\n    const createStatements = [];\n    const updateStatements = [];\n    const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n    for (const query of queries) {\n        // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);\n        createStatements.push(importExpr(Identifiers.contentQuery)\n            .callFn([variable('dirIndex'), ...prepareQueryParams(query, constantPool)])\n            .toStmt());\n        // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n        const temporary = tempAllocator();\n        const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);\n        const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);\n        const updateDirective = variable(CONTEXT_NAME)\n            .prop(query.propertyName)\n            .set(query.first ? temporary.prop('first') : temporary);\n        updateStatements.push(refresh.and(updateDirective).toStmt());\n    }\n    const contentQueriesFnName = name ? `${name}_ContentQueries` : null;\n    return fn([\n        new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null),\n        new FnParam('dirIndex', null)\n    ], [\n        renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, createStatements),\n        renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateStatements)\n    ], INFERRED_TYPE, null, contentQueriesFnName);\n}\nfunction stringAsType(str) {\n    return expressionType(literal(str));\n}\nfunction stringMapAsLiteralExpression(map) {\n    const mapValues = Object.keys(map).map(key => {\n        const value = Array.isArray(map[key]) ? map[key][0] : map[key];\n        return {\n            key,\n            value: literal(value),\n            quoted: true,\n        };\n    });\n    return literalMap(mapValues);\n}\nfunction stringArrayAsType(arr) {\n    return arr.length > 0 ? expressionType(literalArr(arr.map(value => literal(value)))) :\n        NONE_TYPE;\n}\nfunction createBaseDirectiveTypeParams(meta) {\n    // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n    // string literal, which must be on one line.\n    const selectorForType = meta.selector !== null ? meta.selector.replace(/\\n/g, '') : null;\n    return [\n        typeWithParameters(meta.type.type, meta.typeArgumentCount),\n        selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE,\n        meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE,\n        expressionType(getInputsTypeExpression(meta)),\n        expressionType(stringMapAsLiteralExpression(meta.outputs)),\n        stringArrayAsType(meta.queries.map(q => q.propertyName)),\n    ];\n}\nfunction getInputsTypeExpression(meta) {\n    return literalMap(Object.keys(meta.inputs).map(key => {\n        const value = meta.inputs[key];\n        const values = [\n            { key: 'alias', value: literal(value.bindingPropertyName), quoted: true },\n            { key: 'required', value: literal(value.required), quoted: true },\n        ];\n        // TODO(legacy-partial-output-inputs): Consider always emitting this information,\n        // or leaving it as is.\n        if (value.isSignal) {\n            values.push({ key: 'isSignal', value: literal(value.isSignal), quoted: true });\n        }\n        return { key, value: literalMap(values), quoted: true };\n    }));\n}\n/**\n * Creates the type specification from the directive meta. This type is inserted into .d.ts files\n * to be consumed by upstream compilations.\n */\nfunction createDirectiveType(meta) {\n    const typeParams = createBaseDirectiveTypeParams(meta);\n    // Directives have no NgContentSelectors slot, but instead express a `never` type\n    // so that future fields align.\n    typeParams.push(NONE_TYPE);\n    typeParams.push(expressionType(literal(meta.isStandalone)));\n    typeParams.push(createHostDirectivesType(meta));\n    // TODO(signals): Always include this metadata starting with v17. Right\n    // now Angular v16.0.x does not support this field and library distributions\n    // would then be incompatible with v16.0.x framework users.\n    if (meta.isSignal) {\n        typeParams.push(expressionType(literal(meta.isSignal)));\n    }\n    return expressionType(importExpr(Identifiers.DirectiveDeclaration, typeParams));\n}\n// Define and update any view queries\nfunction createViewQueriesFunction(viewQueries, constantPool, name) {\n    const createStatements = [];\n    const updateStatements = [];\n    const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n    viewQueries.forEach((query) => {\n        // creation, e.g. r3.viewQuery(somePredicate, true);\n        const queryDefinition = importExpr(Identifiers.viewQuery).callFn(prepareQueryParams(query, constantPool));\n        createStatements.push(queryDefinition.toStmt());\n        // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n        const temporary = tempAllocator();\n        const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);\n        const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);\n        const updateDirective = variable(CONTEXT_NAME)\n            .prop(query.propertyName)\n            .set(query.first ? temporary.prop('first') : temporary);\n        updateStatements.push(refresh.and(updateDirective).toStmt());\n    });\n    const viewQueryFnName = name ? `${name}_Query` : null;\n    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [\n        renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, createStatements),\n        renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateStatements)\n    ], INFERRED_TYPE, null, viewQueryFnName);\n}\n// Return a host binding function or null if one is not necessary.\nfunction createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {\n    const bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, typeSourceSpan);\n    // Calculate host event bindings\n    const eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, typeSourceSpan);\n    if (USE_TEMPLATE_PIPELINE) {\n        // The parser for host bindings treats class and style attributes specially -- they are\n        // extracted into these separate fields. This is not the case for templates, so the compiler can\n        // actually already handle these special attributes internally. Therefore, we just drop them\n        // into the attributes map.\n        if (hostBindingsMetadata.specialAttributes.styleAttr) {\n            hostBindingsMetadata.attributes['style'] =\n                literal(hostBindingsMetadata.specialAttributes.styleAttr);\n        }\n        if (hostBindingsMetadata.specialAttributes.classAttr) {\n            hostBindingsMetadata.attributes['class'] =\n                literal(hostBindingsMetadata.specialAttributes.classAttr);\n        }\n        const hostJob = ingestHostBinding({\n            componentName: name,\n            componentSelector: selector,\n            properties: bindings,\n            events: eventBindings,\n            attributes: hostBindingsMetadata.attributes,\n        }, bindingParser, constantPool);\n        transform(hostJob, CompilationJobKind.Host);\n        definitionMap.set('hostAttrs', hostJob.root.attributes);\n        const varCount = hostJob.root.vars;\n        if (varCount !== null && varCount > 0) {\n            definitionMap.set('hostVars', literal(varCount));\n        }\n        return emitHostBindingFunction(hostJob);\n    }\n    let bindingId = 0;\n    const getNextBindingId = () => `${bindingId++}`;\n    const bindingContext = variable(CONTEXT_NAME);\n    const styleBuilder = new StylingBuilder(bindingContext);\n    const { styleAttr, classAttr } = hostBindingsMetadata.specialAttributes;\n    if (styleAttr !== undefined) {\n        styleBuilder.registerStyleAttr(styleAttr);\n    }\n    if (classAttr !== undefined) {\n        styleBuilder.registerClassAttr(classAttr);\n    }\n    const createInstructions = [];\n    const updateInstructions = [];\n    const updateVariables = [];\n    const hostBindingSourceSpan = typeSourceSpan;\n    if (eventBindings && eventBindings.length) {\n        createInstructions.push(...createHostListeners(eventBindings, name));\n    }\n    // Calculate the host property bindings\n    const allOtherBindings = [];\n    // We need to calculate the total amount of binding slots required by\n    // all the instructions together before any value conversions happen.\n    // Value conversions may require additional slots for interpolation and\n    // bindings with pipes. These calculates happen after this block.\n    let totalHostVarsCount = 0;\n    bindings && bindings.forEach((binding) => {\n        const stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);\n        if (stylingInputWasSet) {\n            totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;\n        }\n        else {\n            allOtherBindings.push(binding);\n            totalHostVarsCount++;\n        }\n    });\n    let valueConverter;\n    const getValueConverter = () => {\n        if (!valueConverter) {\n            const hostVarsCountFn = (numSlots) => {\n                const originalVarsCount = totalHostVarsCount;\n                totalHostVarsCount += numSlots;\n                return originalVarsCount;\n            };\n            valueConverter = new ValueConverter(constantPool, () => error('Unexpected node'), // new nodes are illegal here\n            hostVarsCountFn, () => error('Unexpected pipe')); // pipes are illegal here\n        }\n        return valueConverter;\n    };\n    const propertyBindings = [];\n    const attributeBindings = [];\n    const syntheticHostBindings = [];\n    for (const binding of allOtherBindings) {\n        // resolve literal arrays and literal objects\n        const value = binding.expression.visit(getValueConverter());\n        const bindingExpr = bindingFn(bindingContext, value, getNextBindingId);\n        const { bindingName, instruction, isAttribute } = getBindingNameAndInstruction(binding);\n        const securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute)\n            .filter(context => context !== SecurityContext.NONE);\n        let sanitizerFn = null;\n        if (securityContexts.length) {\n            if (securityContexts.length === 2 &&\n                securityContexts.indexOf(SecurityContext.URL) > -1 &&\n                securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {\n                // Special case for some URL attributes (such as \"src\" and \"href\") that may be a part\n                // of different security contexts. In this case we use special sanitization function and\n                // select the actual sanitizer at runtime based on a tag name that is provided while\n                // invoking sanitization function.\n                sanitizerFn = importExpr(Identifiers.sanitizeUrlOrResourceUrl);\n            }\n            else {\n                sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);\n            }\n        }\n        const instructionParams = [literal(bindingName), bindingExpr.currValExpr];\n        if (sanitizerFn) {\n            instructionParams.push(sanitizerFn);\n        }\n        else {\n            // If there was no sanitization function found based on the security context\n            // of an attribute/property binding - check whether this attribute/property is\n            // one of the security-sensitive <iframe> attributes.\n            // Note: for host bindings defined on a directive, we do not try to find all\n            // possible places where it can be matched, so we can not determine whether\n            // the host element is an <iframe>. In this case, if an attribute/binding\n            // name is in the `IFRAME_SECURITY_SENSITIVE_ATTRS` set - append a validation\n            // function, which would be invoked at runtime and would have access to the\n            // underlying DOM element, check if it's an <iframe> and if so - runs extra checks.\n            if (isIframeSecuritySensitiveAttr(bindingName)) {\n                instructionParams.push(importExpr(Identifiers.validateIframeAttribute));\n            }\n        }\n        updateVariables.push(...bindingExpr.stmts);\n        if (instruction === Identifiers.hostProperty) {\n            propertyBindings.push(instructionParams);\n        }\n        else if (instruction === Identifiers.attribute) {\n            attributeBindings.push(instructionParams);\n        }\n        else if (instruction === Identifiers.syntheticHostProperty) {\n            syntheticHostBindings.push(instructionParams);\n        }\n        else {\n            updateInstructions.push({ reference: instruction, paramsOrFn: instructionParams, span: null });\n        }\n    }\n    for (const bindingParams of propertyBindings) {\n        updateInstructions.push({ reference: Identifiers.hostProperty, paramsOrFn: bindingParams, span: null });\n    }\n    for (const bindingParams of attributeBindings) {\n        updateInstructions.push({ reference: Identifiers.attribute, paramsOrFn: bindingParams, span: null });\n    }\n    for (const bindingParams of syntheticHostBindings) {\n        updateInstructions.push({ reference: Identifiers.syntheticHostProperty, paramsOrFn: bindingParams, span: null });\n    }\n    // since we're dealing with directives/components and both have hostBinding\n    // functions, we need to generate a special hostAttrs instruction that deals\n    // with both the assignment of styling as well as static attributes to the host\n    // element. The instruction below will instruct all initial styling (styling\n    // that is inside of a host binding within a directive/component) to be attached\n    // to the host element alongside any of the provided host attributes that were\n    // collected earlier.\n    const hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);\n    styleBuilder.assignHostAttrs(hostAttrs, definitionMap);\n    if (styleBuilder.hasBindings) {\n        // finally each binding that was registered in the statement above will need to be added to\n        // the update block of a component/directive templateFn/hostBindingsFn so that the bindings\n        // are evaluated and updated for the element.\n        styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(instruction => {\n            for (const call of instruction.calls) {\n                // we subtract a value of `1` here because the binding slot was already allocated\n                // at the top of this method when all the input bindings were counted.\n                totalHostVarsCount +=\n                    Math.max(call.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);\n                const { params, stmts } = convertStylingCall(call, bindingContext, bindingFn, getNextBindingId);\n                updateVariables.push(...stmts);\n                updateInstructions.push({\n                    reference: instruction.reference,\n                    paramsOrFn: params,\n                    span: null,\n                });\n            }\n        });\n    }\n    if (totalHostVarsCount) {\n        definitionMap.set('hostVars', literal(totalHostVarsCount));\n    }\n    if (createInstructions.length > 0 || updateInstructions.length > 0) {\n        const hostBindingsFnName = name ? `${name}_HostBindings` : null;\n        const statements = [];\n        if (createInstructions.length > 0) {\n            statements.push(renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, getInstructionStatements(createInstructions)));\n        }\n        if (updateInstructions.length > 0) {\n            statements.push(renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateVariables.concat(getInstructionStatements(updateInstructions))));\n        }\n        return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);\n    }\n    return null;\n}\nfunction bindingFn(implicit, value, getNextBindingIdFn) {\n    return convertPropertyBinding(null, implicit, value, getNextBindingIdFn());\n}\nfunction convertStylingCall(call, bindingContext, bindingFn, getNextBindingIdFn) {\n    const stmts = [];\n    const params = call.params(value => {\n        const result = bindingFn(bindingContext, value, getNextBindingIdFn);\n        if (Array.isArray(result.stmts) && result.stmts.length > 0) {\n            stmts.push(...result.stmts);\n        }\n        return result.currValExpr;\n    });\n    return { params, stmts };\n}\nfunction getBindingNameAndInstruction(binding) {\n    let bindingName = binding.name;\n    let instruction;\n    // Check to see if this is an attr binding or a property binding\n    const attrMatches = bindingName.match(ATTR_REGEX);\n    if (attrMatches) {\n        bindingName = attrMatches[1];\n        instruction = Identifiers.attribute;\n    }\n    else {\n        if (binding.isAnimation) {\n            bindingName = prepareSyntheticPropertyName(bindingName);\n            // host bindings that have a synthetic property (e.g. @foo) should always be rendered\n            // in the context of the component and not the parent. Therefore there is a special\n            // compatibility instruction available for this purpose.\n            instruction = Identifiers.syntheticHostProperty;\n        }\n        else {\n            instruction = Identifiers.hostProperty;\n        }\n    }\n    return { bindingName, instruction, isAttribute: !!attrMatches };\n}\nfunction createHostListeners(eventBindings, name) {\n    const listenerParams = [];\n    const syntheticListenerParams = [];\n    const instructions = [];\n    for (const binding of eventBindings) {\n        let bindingName = binding.name && sanitizeIdentifier(binding.name);\n        const bindingFnName = binding.type === 1 /* ParsedEventType.Animation */ ?\n            prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) :\n            bindingName;\n        const handlerName = name && bindingName ? `${name}_${bindingFnName}_HostBindingHandler` : null;\n        const params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);\n        if (binding.type == 1 /* ParsedEventType.Animation */) {\n            syntheticListenerParams.push(params);\n        }\n        else {\n            listenerParams.push(params);\n        }\n    }\n    for (const params of syntheticListenerParams) {\n        instructions.push({ reference: Identifiers.syntheticHostListener, paramsOrFn: params, span: null });\n    }\n    for (const params of listenerParams) {\n        instructions.push({ reference: Identifiers.listener, paramsOrFn: params, span: null });\n    }\n    return instructions;\n}\nconst HOST_REG_EXP = /^(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\))$/;\nfunction parseHostBindings(host) {\n    const attributes = {};\n    const listeners = {};\n    const properties = {};\n    const specialAttributes = {};\n    for (const key of Object.keys(host)) {\n        const value = host[key];\n        const matches = key.match(HOST_REG_EXP);\n        if (matches === null) {\n            switch (key) {\n                case 'class':\n                    if (typeof value !== 'string') {\n                        // TODO(alxhub): make this a diagnostic.\n                        throw new Error(`Class binding must be string`);\n                    }\n                    specialAttributes.classAttr = value;\n                    break;\n                case 'style':\n                    if (typeof value !== 'string') {\n                        // TODO(alxhub): make this a diagnostic.\n                        throw new Error(`Style binding must be string`);\n                    }\n                    specialAttributes.styleAttr = value;\n                    break;\n                default:\n                    if (typeof value === 'string') {\n                        attributes[key] = literal(value);\n                    }\n                    else {\n                        attributes[key] = value;\n                    }\n            }\n        }\n        else if (matches[1 /* HostBindingGroup.Binding */] != null) {\n            if (typeof value !== 'string') {\n                // TODO(alxhub): make this a diagnostic.\n                throw new Error(`Property binding must be string`);\n            }\n            // synthetic properties (the ones that have a `@` as a prefix)\n            // are still treated the same as regular properties. Therefore\n            // there is no point in storing them in a separate map.\n            properties[matches[1 /* HostBindingGroup.Binding */]] = value;\n        }\n        else if (matches[2 /* HostBindingGroup.Event */] != null) {\n            if (typeof value !== 'string') {\n                // TODO(alxhub): make this a diagnostic.\n                throw new Error(`Event binding must be string`);\n            }\n            listeners[matches[2 /* HostBindingGroup.Event */]] = value;\n        }\n    }\n    return { attributes, listeners, properties, specialAttributes };\n}\n/**\n * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a\n * given set of host bindings has no errors.\n *\n * @param bindings set of host bindings to verify.\n * @param sourceSpan source span where host bindings were defined.\n * @returns array of errors associated with a given set of host bindings.\n */\nfunction verifyHostBindings(bindings, sourceSpan) {\n    // TODO: abstract out host bindings verification logic and use it instead of\n    // creating events and properties ASTs to detect errors (FW-996)\n    const bindingParser = makeBindingParser();\n    bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);\n    bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);\n    return bindingParser.errors;\n}\nfunction compileStyles(styles, selector, hostSelector) {\n    const shadowCss = new ShadowCss();\n    return styles.map(style => {\n        return shadowCss.shimCssText(style, selector, hostSelector);\n    });\n}\n/**\n * Encapsulates a CSS stylesheet with emulated view encapsulation.\n * This allows a stylesheet to be used with an Angular component that\n * is using the `ViewEncapsulation.Emulated` mode.\n *\n * @param style The content of a CSS stylesheet.\n * @returns The encapsulated content for the style.\n */\nfunction encapsulateStyle(style) {\n    const shadowCss = new ShadowCss();\n    return shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR);\n}\nfunction createHostDirectivesType(meta) {\n    if (!meta.hostDirectives?.length) {\n        return NONE_TYPE;\n    }\n    return expressionType(literalArr(meta.hostDirectives.map(hostMeta => literalMap([\n        { key: 'directive', value: typeofExpr(hostMeta.directive.type), quoted: false },\n        { key: 'inputs', value: stringMapAsLiteralExpression(hostMeta.inputs || {}), quoted: false },\n        { key: 'outputs', value: stringMapAsLiteralExpression(hostMeta.outputs || {}), quoted: false },\n    ]))));\n}\nfunction createHostDirectivesFeatureArg(hostDirectives) {\n    const expressions = [];\n    let hasForwardRef = false;\n    for (const current of hostDirectives) {\n        // Use a shorthand if there are no inputs or outputs.\n        if (!current.inputs && !current.outputs) {\n            expressions.push(current.directive.type);\n        }\n        else {\n            const keys = [{ key: 'directive', value: current.directive.type, quoted: false }];\n            if (current.inputs) {\n                const inputsLiteral = createHostDirectivesMappingArray(current.inputs);\n                if (inputsLiteral) {\n                    keys.push({ key: 'inputs', value: inputsLiteral, quoted: false });\n                }\n            }\n            if (current.outputs) {\n                const outputsLiteral = createHostDirectivesMappingArray(current.outputs);\n                if (outputsLiteral) {\n                    keys.push({ key: 'outputs', value: outputsLiteral, quoted: false });\n                }\n            }\n            expressions.push(literalMap(keys));\n        }\n        if (current.isForwardReference) {\n            hasForwardRef = true;\n        }\n    }\n    // If there's a forward reference, we generate a `function() { return [HostDir] }`,\n    // otherwise we can save some bytes by using a plain array, e.g. `[HostDir]`.\n    return hasForwardRef ?\n        new FunctionExpr([], [new ReturnStatement(literalArr(expressions))]) :\n        literalArr(expressions);\n}\n/**\n * Converts an input/output mapping object literal into an array where the even keys are the\n * public name of the binding and the odd ones are the name it was aliased to. E.g.\n * `{inputOne: 'aliasOne', inputTwo: 'aliasTwo'}` will become\n * `['inputOne', 'aliasOne', 'inputTwo', 'aliasTwo']`.\n *\n * This conversion is necessary, because hosts bind to the public name of the host directive and\n * keeping the mapping in an object literal will break for apps using property renaming.\n */\nfunction createHostDirectivesMappingArray(mapping) {\n    const elements = [];\n    for (const publicName in mapping) {\n        if (mapping.hasOwnProperty(publicName)) {\n            elements.push(literal(publicName), literal(mapping[publicName]));\n        }\n    }\n    return elements.length > 0 ? literalArr(elements) : null;\n}\n\n/**\n * Processes `Target`s with a given set of directives and performs a binding operation, which\n * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the\n * target.\n */\nclass R3TargetBinder {\n    constructor(directiveMatcher) {\n        this.directiveMatcher = directiveMatcher;\n    }\n    /**\n     * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains\n     * metadata about the types referenced in the template.\n     */\n    bind(target) {\n        if (!target.template) {\n            // TODO(alxhub): handle targets which contain things like HostBindings, etc.\n            throw new Error('Binding without a template not yet supported');\n        }\n        // First, parse the template into a `Scope` structure. This operation captures the syntactic\n        // scopes in the template and makes them available for later use.\n        const scope = Scope.apply(target.template);\n        // Use the `Scope` to extract the entities present at every level of the template.\n        const scopedNodeEntities = extractScopedNodeEntities(scope);\n        // Next, perform directive matching on the template using the `DirectiveBinder`. This returns:\n        //   - directives: Map of nodes (elements & ng-templates) to the directives on them.\n        //   - bindings: Map of inputs, outputs, and attributes to the directive/element that claims\n        //     them. TODO(alxhub): handle multiple directives claiming an input/output/etc.\n        //   - references: Map of #references to their targets.\n        const { directives, eagerDirectives, bindings, references } = DirectiveBinder.apply(target.template, this.directiveMatcher);\n        // Finally, run the TemplateBinder to bind references, variables, and other entities within the\n        // template. This extracts all the metadata that doesn't depend on directive matching.\n        const { expressions, symbols, nestingLevel, usedPipes, eagerPipes, deferBlocks } = TemplateBinder.applyWithScope(target.template, scope);\n        return new R3BoundTarget(target, directives, eagerDirectives, bindings, references, expressions, symbols, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, deferBlocks, scope);\n    }\n}\n/**\n * Represents a binding scope within a template.\n *\n * Any variables, references, or other named entities declared within the template will\n * be captured and available by name in `namedEntities`. Additionally, child templates will\n * be analyzed and have their child `Scope`s available in `childScopes`.\n */\nclass Scope {\n    constructor(parentScope, rootNode) {\n        this.parentScope = parentScope;\n        this.rootNode = rootNode;\n        /**\n         * Named members of the `Scope`, such as `Reference`s or `Variable`s.\n         */\n        this.namedEntities = new Map();\n        /**\n         * Set of elements that belong to this scope.\n         */\n        this.elementsInScope = new Set();\n        /**\n         * Child `Scope`s for immediately nested `ScopedNode`s.\n         */\n        this.childScopes = new Map();\n        this.isDeferred =\n            parentScope !== null && parentScope.isDeferred ? true : rootNode instanceof DeferredBlock;\n    }\n    static newRootScope() {\n        return new Scope(null, null);\n    }\n    /**\n     * Process a template (either as a `Template` sub-template with variables, or a plain array of\n     * template `Node`s) and construct its `Scope`.\n     */\n    static apply(template) {\n        const scope = Scope.newRootScope();\n        scope.ingest(template);\n        return scope;\n    }\n    /**\n     * Internal method to process the scoped node and populate the `Scope`.\n     */\n    ingest(nodeOrNodes) {\n        if (nodeOrNodes instanceof Template) {\n            // Variables on an <ng-template> are defined in the inner scope.\n            nodeOrNodes.variables.forEach(node => this.visitVariable(node));\n            // Process the nodes of the template.\n            nodeOrNodes.children.forEach(node => node.visit(this));\n        }\n        else if (nodeOrNodes instanceof IfBlockBranch) {\n            if (nodeOrNodes.expressionAlias !== null) {\n                this.visitVariable(nodeOrNodes.expressionAlias);\n            }\n            nodeOrNodes.children.forEach(node => node.visit(this));\n        }\n        else if (nodeOrNodes instanceof ForLoopBlock) {\n            this.visitVariable(nodeOrNodes.item);\n            Object.values(nodeOrNodes.contextVariables).forEach(v => this.visitVariable(v));\n            nodeOrNodes.children.forEach(node => node.visit(this));\n        }\n        else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty ||\n            nodeOrNodes instanceof DeferredBlock || nodeOrNodes instanceof DeferredBlockError ||\n            nodeOrNodes instanceof DeferredBlockPlaceholder ||\n            nodeOrNodes instanceof DeferredBlockLoading) {\n            nodeOrNodes.children.forEach(node => node.visit(this));\n        }\n        else {\n            // No overarching `Template` instance, so process the nodes directly.\n            nodeOrNodes.forEach(node => node.visit(this));\n        }\n    }\n    visitElement(element) {\n        // `Element`s in the template may have `Reference`s which are captured in the scope.\n        element.references.forEach(node => this.visitReference(node));\n        // Recurse into the `Element`'s children.\n        element.children.forEach(node => node.visit(this));\n        this.elementsInScope.add(element);\n    }\n    visitTemplate(template) {\n        // References on a <ng-template> are defined in the outer scope, so capture them before\n        // processing the template's child scope.\n        template.references.forEach(node => this.visitReference(node));\n        // Next, create an inner scope and process the template within it.\n        this.ingestScopedNode(template);\n    }\n    visitVariable(variable) {\n        // Declare the variable if it's not already.\n        this.maybeDeclare(variable);\n    }\n    visitReference(reference) {\n        // Declare the variable if it's not already.\n        this.maybeDeclare(reference);\n    }\n    visitDeferredBlock(deferred) {\n        this.ingestScopedNode(deferred);\n        deferred.placeholder?.visit(this);\n        deferred.loading?.visit(this);\n        deferred.error?.visit(this);\n    }\n    visitDeferredBlockPlaceholder(block) {\n        this.ingestScopedNode(block);\n    }\n    visitDeferredBlockError(block) {\n        this.ingestScopedNode(block);\n    }\n    visitDeferredBlockLoading(block) {\n        this.ingestScopedNode(block);\n    }\n    visitSwitchBlock(block) {\n        block.cases.forEach(node => node.visit(this));\n    }\n    visitSwitchBlockCase(block) {\n        this.ingestScopedNode(block);\n    }\n    visitForLoopBlock(block) {\n        this.ingestScopedNode(block);\n        block.empty?.visit(this);\n    }\n    visitForLoopBlockEmpty(block) {\n        this.ingestScopedNode(block);\n    }\n    visitIfBlock(block) {\n        block.branches.forEach(node => node.visit(this));\n    }\n    visitIfBlockBranch(block) {\n        this.ingestScopedNode(block);\n    }\n    // Unused visitors.\n    visitContent(content) { }\n    visitBoundAttribute(attr) { }\n    visitBoundEvent(event) { }\n    visitBoundText(text) { }\n    visitText(text) { }\n    visitTextAttribute(attr) { }\n    visitIcu(icu) { }\n    visitDeferredTrigger(trigger) { }\n    visitUnknownBlock(block) { }\n    maybeDeclare(thing) {\n        // Declare something with a name, as long as that name isn't taken.\n        if (!this.namedEntities.has(thing.name)) {\n            this.namedEntities.set(thing.name, thing);\n        }\n    }\n    /**\n     * Look up a variable within this `Scope`.\n     *\n     * This can recurse into a parent `Scope` if it's available.\n     */\n    lookup(name) {\n        if (this.namedEntities.has(name)) {\n            // Found in the local scope.\n            return this.namedEntities.get(name);\n        }\n        else if (this.parentScope !== null) {\n            // Not in the local scope, but there's a parent scope so check there.\n            return this.parentScope.lookup(name);\n        }\n        else {\n            // At the top level and it wasn't found.\n            return null;\n        }\n    }\n    /**\n     * Get the child scope for a `ScopedNode`.\n     *\n     * This should always be defined.\n     */\n    getChildScope(node) {\n        const res = this.childScopes.get(node);\n        if (res === undefined) {\n            throw new Error(`Assertion error: child scope for ${node} not found`);\n        }\n        return res;\n    }\n    ingestScopedNode(node) {\n        const scope = new Scope(this, node);\n        scope.ingest(node);\n        this.childScopes.set(node, scope);\n    }\n}\n/**\n * Processes a template and matches directives on nodes (elements and templates).\n *\n * Usually used via the static `apply()` method.\n */\nclass DirectiveBinder {\n    constructor(matcher, directives, eagerDirectives, bindings, references) {\n        this.matcher = matcher;\n        this.directives = directives;\n        this.eagerDirectives = eagerDirectives;\n        this.bindings = bindings;\n        this.references = references;\n        // Indicates whether we are visiting elements within a `defer` block\n        this.isInDeferBlock = false;\n    }\n    /**\n     * Process a template (list of `Node`s) and perform directive matching against each node.\n     *\n     * @param template the list of template `Node`s to match (recursively).\n     * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for\n     * this template.\n     * @returns three maps which contain information about directives in the template: the\n     * `directives` map which lists directives matched on each node, the `bindings` map which\n     * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`\n     * map which resolves #references (`Reference`s) within the template to the named directive or\n     * template node.\n     */\n    static apply(template, selectorMatcher) {\n        const directives = new Map();\n        const bindings = new Map();\n        const references = new Map();\n        const eagerDirectives = [];\n        const matcher = new DirectiveBinder(selectorMatcher, directives, eagerDirectives, bindings, references);\n        matcher.ingest(template);\n        return { directives, eagerDirectives, bindings, references };\n    }\n    ingest(template) {\n        template.forEach(node => node.visit(this));\n    }\n    visitElement(element) {\n        this.visitElementOrTemplate(element);\n    }\n    visitTemplate(template) {\n        this.visitElementOrTemplate(template);\n    }\n    visitElementOrTemplate(node) {\n        // First, determine the HTML shape of the node for the purpose of directive matching.\n        // Do this by building up a `CssSelector` for the node.\n        const cssSelector = createCssSelectorFromNode(node);\n        // Next, use the `SelectorMatcher` to get the list of directives on the node.\n        const directives = [];\n        this.matcher.match(cssSelector, (_selector, results) => directives.push(...results));\n        if (directives.length > 0) {\n            this.directives.set(node, directives);\n            if (!this.isInDeferBlock) {\n                this.eagerDirectives.push(...directives);\n            }\n        }\n        // Resolve any references that are created on this node.\n        node.references.forEach(ref => {\n            let dirTarget = null;\n            // If the reference expression is empty, then it matches the \"primary\" directive on the node\n            // (if there is one). Otherwise it matches the host node itself (either an element or\n            // <ng-template> node).\n            if (ref.value.trim() === '') {\n                // This could be a reference to a component if there is one.\n                dirTarget = directives.find(dir => dir.isComponent) || null;\n            }\n            else {\n                // This should be a reference to a directive exported via exportAs.\n                dirTarget =\n                    directives.find(dir => dir.exportAs !== null && dir.exportAs.some(value => value === ref.value)) ||\n                        null;\n                // Check if a matching directive was found.\n                if (dirTarget === null) {\n                    // No matching directive was found - this reference points to an unknown target. Leave it\n                    // unmapped.\n                    return;\n                }\n            }\n            if (dirTarget !== null) {\n                // This reference points to a directive.\n                this.references.set(ref, { directive: dirTarget, node });\n            }\n            else {\n                // This reference points to the node itself.\n                this.references.set(ref, node);\n            }\n        });\n        const setAttributeBinding = (attribute, ioType) => {\n            const dir = directives.find(dir => dir[ioType].hasBindingPropertyName(attribute.name));\n            const binding = dir !== undefined ? dir : node;\n            this.bindings.set(attribute, binding);\n        };\n        // Node inputs (bound attributes) and text attributes can be bound to an\n        // input on a directive.\n        node.inputs.forEach(input => setAttributeBinding(input, 'inputs'));\n        node.attributes.forEach(attr => setAttributeBinding(attr, 'inputs'));\n        if (node instanceof Template) {\n            node.templateAttrs.forEach(attr => setAttributeBinding(attr, 'inputs'));\n        }\n        // Node outputs (bound events) can be bound to an output on a directive.\n        node.outputs.forEach(output => setAttributeBinding(output, 'outputs'));\n        // Recurse into the node's children.\n        node.children.forEach(child => child.visit(this));\n    }\n    visitDeferredBlock(deferred) {\n        const wasInDeferBlock = this.isInDeferBlock;\n        this.isInDeferBlock = true;\n        deferred.children.forEach(child => child.visit(this));\n        this.isInDeferBlock = wasInDeferBlock;\n        deferred.placeholder?.visit(this);\n        deferred.loading?.visit(this);\n        deferred.error?.visit(this);\n    }\n    visitDeferredBlockPlaceholder(block) {\n        block.children.forEach(child => child.visit(this));\n    }\n    visitDeferredBlockError(block) {\n        block.children.forEach(child => child.visit(this));\n    }\n    visitDeferredBlockLoading(block) {\n        block.children.forEach(child => child.visit(this));\n    }\n    visitSwitchBlock(block) {\n        block.cases.forEach(node => node.visit(this));\n    }\n    visitSwitchBlockCase(block) {\n        block.children.forEach(node => node.visit(this));\n    }\n    visitForLoopBlock(block) {\n        block.item.visit(this);\n        Object.values(block.contextVariables).forEach(v => v.visit(this));\n        block.children.forEach(node => node.visit(this));\n        block.empty?.visit(this);\n    }\n    visitForLoopBlockEmpty(block) {\n        block.children.forEach(node => node.visit(this));\n    }\n    visitIfBlock(block) {\n        block.branches.forEach(node => node.visit(this));\n    }\n    visitIfBlockBranch(block) {\n        block.expressionAlias?.visit(this);\n        block.children.forEach(node => node.visit(this));\n    }\n    // Unused visitors.\n    visitContent(content) { }\n    visitVariable(variable) { }\n    visitReference(reference) { }\n    visitTextAttribute(attribute) { }\n    visitBoundAttribute(attribute) { }\n    visitBoundEvent(attribute) { }\n    visitBoundAttributeOrEvent(node) { }\n    visitText(text) { }\n    visitBoundText(text) { }\n    visitIcu(icu) { }\n    visitDeferredTrigger(trigger) { }\n    visitUnknownBlock(block) { }\n}\n/**\n * Processes a template and extract metadata about expressions and symbols within.\n *\n * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched\n * within the template in order to operate.\n *\n * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided\n * by overridden methods from that visitor.\n */\nclass TemplateBinder extends RecursiveAstVisitor {\n    constructor(bindings, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, rootNode, level) {\n        super();\n        this.bindings = bindings;\n        this.symbols = symbols;\n        this.usedPipes = usedPipes;\n        this.eagerPipes = eagerPipes;\n        this.deferBlocks = deferBlocks;\n        this.nestingLevel = nestingLevel;\n        this.scope = scope;\n        this.rootNode = rootNode;\n        this.level = level;\n        // Save a bit of processing time by constructing this closure in advance.\n        this.visitNode = (node) => node.visit(this);\n    }\n    // This method is defined to reconcile the type of TemplateBinder since both\n    // RecursiveAstVisitor and Visitor define the visit() method in their\n    // interfaces.\n    visit(node, context) {\n        if (node instanceof AST) {\n            node.visit(this, context);\n        }\n        else {\n            node.visit(this);\n        }\n    }\n    /**\n     * Process a template and extract metadata about expressions and symbols within.\n     *\n     * @param nodes the nodes of the template to process\n     * @param scope the `Scope` of the template being processed.\n     * @returns three maps which contain metadata about the template: `expressions` which interprets\n     * special `AST` nodes in expressions as pointing to references or variables declared within the\n     * template, `symbols` which maps those variables and references to the nested `Template` which\n     * declares them, if any, and `nestingLevel` which associates each `Template` with a integer\n     * nesting level (how many levels deep within the template structure the `Template` is), starting\n     * at 1.\n     */\n    static applyWithScope(nodes, scope) {\n        const expressions = new Map();\n        const symbols = new Map();\n        const nestingLevel = new Map();\n        const usedPipes = new Set();\n        const eagerPipes = new Set();\n        const template = nodes instanceof Template ? nodes : null;\n        const deferBlocks = new Set();\n        // The top-level template has nesting level 0.\n        const binder = new TemplateBinder(expressions, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, template, 0);\n        binder.ingest(nodes);\n        return { expressions, symbols, nestingLevel, usedPipes, eagerPipes, deferBlocks };\n    }\n    ingest(nodeOrNodes) {\n        if (nodeOrNodes instanceof Template) {\n            // For <ng-template>s, process only variables and child nodes. Inputs, outputs, templateAttrs,\n            // and references were all processed in the scope of the containing template.\n            nodeOrNodes.variables.forEach(this.visitNode);\n            nodeOrNodes.children.forEach(this.visitNode);\n            // Set the nesting level.\n            this.nestingLevel.set(nodeOrNodes, this.level);\n        }\n        else if (nodeOrNodes instanceof IfBlockBranch) {\n            if (nodeOrNodes.expressionAlias !== null) {\n                this.visitNode(nodeOrNodes.expressionAlias);\n            }\n            nodeOrNodes.children.forEach(this.visitNode);\n            this.nestingLevel.set(nodeOrNodes, this.level);\n        }\n        else if (nodeOrNodes instanceof ForLoopBlock) {\n            this.visitNode(nodeOrNodes.item);\n            Object.values(nodeOrNodes.contextVariables).forEach(v => this.visitNode(v));\n            nodeOrNodes.trackBy.visit(this);\n            nodeOrNodes.children.forEach(this.visitNode);\n            this.nestingLevel.set(nodeOrNodes, this.level);\n        }\n        else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty ||\n            nodeOrNodes instanceof DeferredBlock || nodeOrNodes instanceof DeferredBlockError ||\n            nodeOrNodes instanceof DeferredBlockPlaceholder ||\n            nodeOrNodes instanceof DeferredBlockLoading) {\n            nodeOrNodes.children.forEach(node => node.visit(this));\n            this.nestingLevel.set(nodeOrNodes, this.level);\n        }\n        else {\n            // Visit each node from the top-level template.\n            nodeOrNodes.forEach(this.visitNode);\n        }\n    }\n    visitElement(element) {\n        // Visit the inputs, outputs, and children of the element.\n        element.inputs.forEach(this.visitNode);\n        element.outputs.forEach(this.visitNode);\n        element.children.forEach(this.visitNode);\n        element.references.forEach(this.visitNode);\n    }\n    visitTemplate(template) {\n        // First, visit inputs, outputs and template attributes of the template node.\n        template.inputs.forEach(this.visitNode);\n        template.outputs.forEach(this.visitNode);\n        template.templateAttrs.forEach(this.visitNode);\n        template.references.forEach(this.visitNode);\n        // Next, recurse into the template.\n        this.ingestScopedNode(template);\n    }\n    visitVariable(variable) {\n        // Register the `Variable` as a symbol in the current `Template`.\n        if (this.rootNode !== null) {\n            this.symbols.set(variable, this.rootNode);\n        }\n    }\n    visitReference(reference) {\n        // Register the `Reference` as a symbol in the current `Template`.\n        if (this.rootNode !== null) {\n            this.symbols.set(reference, this.rootNode);\n        }\n    }\n    // Unused template visitors\n    visitText(text) { }\n    visitContent(content) { }\n    visitTextAttribute(attribute) { }\n    visitUnknownBlock(block) { }\n    visitDeferredTrigger() { }\n    visitIcu(icu) {\n        Object.keys(icu.vars).forEach(key => icu.vars[key].visit(this));\n        Object.keys(icu.placeholders).forEach(key => icu.placeholders[key].visit(this));\n    }\n    // The remaining visitors are concerned with processing AST expressions within template bindings\n    visitBoundAttribute(attribute) {\n        attribute.value.visit(this);\n    }\n    visitBoundEvent(event) {\n        event.handler.visit(this);\n    }\n    visitDeferredBlock(deferred) {\n        this.deferBlocks.add(deferred);\n        this.ingestScopedNode(deferred);\n        deferred.triggers.when?.value.visit(this);\n        deferred.prefetchTriggers.when?.value.visit(this);\n        deferred.placeholder && this.visitNode(deferred.placeholder);\n        deferred.loading && this.visitNode(deferred.loading);\n        deferred.error && this.visitNode(deferred.error);\n    }\n    visitDeferredBlockPlaceholder(block) {\n        this.ingestScopedNode(block);\n    }\n    visitDeferredBlockError(block) {\n        this.ingestScopedNode(block);\n    }\n    visitDeferredBlockLoading(block) {\n        this.ingestScopedNode(block);\n    }\n    visitSwitchBlock(block) {\n        block.expression.visit(this);\n        block.cases.forEach(this.visitNode);\n    }\n    visitSwitchBlockCase(block) {\n        block.expression?.visit(this);\n        this.ingestScopedNode(block);\n    }\n    visitForLoopBlock(block) {\n        block.expression.visit(this);\n        this.ingestScopedNode(block);\n        block.empty?.visit(this);\n    }\n    visitForLoopBlockEmpty(block) {\n        this.ingestScopedNode(block);\n    }\n    visitIfBlock(block) {\n        block.branches.forEach(node => node.visit(this));\n    }\n    visitIfBlockBranch(block) {\n        block.expression?.visit(this);\n        this.ingestScopedNode(block);\n    }\n    visitBoundText(text) {\n        text.value.visit(this);\n    }\n    visitPipe(ast, context) {\n        this.usedPipes.add(ast.name);\n        if (!this.scope.isDeferred) {\n            this.eagerPipes.add(ast.name);\n        }\n        return super.visitPipe(ast, context);\n    }\n    // These five types of AST expressions can refer to expression roots, which could be variables\n    // or references in the current scope.\n    visitPropertyRead(ast, context) {\n        this.maybeMap(ast, ast.name);\n        return super.visitPropertyRead(ast, context);\n    }\n    visitSafePropertyRead(ast, context) {\n        this.maybeMap(ast, ast.name);\n        return super.visitSafePropertyRead(ast, context);\n    }\n    visitPropertyWrite(ast, context) {\n        this.maybeMap(ast, ast.name);\n        return super.visitPropertyWrite(ast, context);\n    }\n    ingestScopedNode(node) {\n        const childScope = this.scope.getChildScope(node);\n        const binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.eagerPipes, this.deferBlocks, this.nestingLevel, childScope, node, this.level + 1);\n        binder.ingest(node);\n    }\n    maybeMap(ast, name) {\n        // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an\n        // `AST` expression that maps to a `Variable` or `Reference`.\n        if (!(ast.receiver instanceof ImplicitReceiver)) {\n            return;\n        }\n        // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is\n        // probably a property on the top-level component context.\n        let target = this.scope.lookup(name);\n        if (target !== null) {\n            this.bindings.set(ast, target);\n        }\n    }\n}\n/**\n * Metadata container for a `Target` that allows queries for specific bits of metadata.\n *\n * See `BoundTarget` for documentation on the individual methods.\n */\nclass R3BoundTarget {\n    constructor(target, directives, eagerDirectives, bindings, references, exprTargets, symbols, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, deferredBlocks, rootScope) {\n        this.target = target;\n        this.directives = directives;\n        this.eagerDirectives = eagerDirectives;\n        this.bindings = bindings;\n        this.references = references;\n        this.exprTargets = exprTargets;\n        this.symbols = symbols;\n        this.nestingLevel = nestingLevel;\n        this.scopedNodeEntities = scopedNodeEntities;\n        this.usedPipes = usedPipes;\n        this.eagerPipes = eagerPipes;\n        this.deferredBlocks = deferredBlocks;\n        this.rootScope = rootScope;\n    }\n    getEntitiesInScope(node) {\n        return this.scopedNodeEntities.get(node) ?? new Set();\n    }\n    getDirectivesOfNode(node) {\n        return this.directives.get(node) || null;\n    }\n    getReferenceTarget(ref) {\n        return this.references.get(ref) || null;\n    }\n    getConsumerOfBinding(binding) {\n        return this.bindings.get(binding) || null;\n    }\n    getExpressionTarget(expr) {\n        return this.exprTargets.get(expr) || null;\n    }\n    getDefinitionNodeOfSymbol(symbol) {\n        return this.symbols.get(symbol) || null;\n    }\n    getNestingLevel(node) {\n        return this.nestingLevel.get(node) || 0;\n    }\n    getUsedDirectives() {\n        const set = new Set();\n        this.directives.forEach(dirs => dirs.forEach(dir => set.add(dir)));\n        return Array.from(set.values());\n    }\n    getEagerlyUsedDirectives() {\n        const set = new Set(this.eagerDirectives);\n        return Array.from(set.values());\n    }\n    getUsedPipes() {\n        return Array.from(this.usedPipes);\n    }\n    getEagerlyUsedPipes() {\n        return Array.from(this.eagerPipes);\n    }\n    getDeferBlocks() {\n        return Array.from(this.deferredBlocks);\n    }\n    getDeferredTriggerTarget(block, trigger) {\n        // Only triggers that refer to DOM nodes can be resolved.\n        if (!(trigger instanceof InteractionDeferredTrigger) &&\n            !(trigger instanceof ViewportDeferredTrigger) &&\n            !(trigger instanceof HoverDeferredTrigger)) {\n            return null;\n        }\n        const name = trigger.reference;\n        if (name === null) {\n            let trigger = null;\n            if (block.placeholder !== null) {\n                for (const child of block.placeholder.children) {\n                    // Skip over comment nodes. Currently by default the template parser doesn't capture\n                    // comments, but we have a safeguard here just in case since it can be enabled.\n                    if (child instanceof Comment$1) {\n                        continue;\n                    }\n                    // We can only infer the trigger if there's one root element node. Any other\n                    // nodes at the root make it so that we can't infer the trigger anymore.\n                    if (trigger !== null) {\n                        return null;\n                    }\n                    if (child instanceof Element$1) {\n                        trigger = child;\n                    }\n                }\n            }\n            return trigger;\n        }\n        const outsideRef = this.findEntityInScope(block, name);\n        // First try to resolve the target in the scope of the main deferred block. Note that we\n        // skip triggers defined inside the main block itself, because they might not exist yet.\n        if (outsideRef instanceof Reference && this.getDefinitionNodeOfSymbol(outsideRef) !== block) {\n            const target = this.getReferenceTarget(outsideRef);\n            if (target !== null) {\n                return this.referenceTargetToElement(target);\n            }\n        }\n        // If the trigger couldn't be found in the main block, check the\n        // placeholder block which is shown before the main block has loaded.\n        if (block.placeholder !== null) {\n            const refInPlaceholder = this.findEntityInScope(block.placeholder, name);\n            const targetInPlaceholder = refInPlaceholder instanceof Reference ? this.getReferenceTarget(refInPlaceholder) : null;\n            if (targetInPlaceholder !== null) {\n                return this.referenceTargetToElement(targetInPlaceholder);\n            }\n        }\n        return null;\n    }\n    isDeferred(element) {\n        for (const deferBlock of this.deferredBlocks) {\n            const scope = this.rootScope.childScopes.get(deferBlock);\n            if (scope && scope.elementsInScope.has(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Finds an entity with a specific name in a scope.\n     * @param rootNode Root node of the scope.\n     * @param name Name of the entity.\n     */\n    findEntityInScope(rootNode, name) {\n        const entities = this.getEntitiesInScope(rootNode);\n        for (const entitity of entities) {\n            if (entitity.name === name) {\n                return entitity;\n            }\n        }\n        return null;\n    }\n    /** Coerces a `ReferenceTarget` to an `Element`, if possible. */\n    referenceTargetToElement(target) {\n        if (target instanceof Element$1) {\n            return target;\n        }\n        if (target instanceof Template) {\n            return null;\n        }\n        return this.referenceTargetToElement(target.node);\n    }\n}\nfunction extractScopedNodeEntities(rootScope) {\n    const entityMap = new Map();\n    function extractScopeEntities(scope) {\n        if (entityMap.has(scope.rootNode)) {\n            return entityMap.get(scope.rootNode);\n        }\n        const currentEntities = scope.namedEntities;\n        let entities;\n        if (scope.parentScope !== null) {\n            entities = new Map([...extractScopeEntities(scope.parentScope), ...currentEntities]);\n        }\n        else {\n            entities = new Map(currentEntities);\n        }\n        entityMap.set(scope.rootNode, entities);\n        return entities;\n    }\n    const scopesToProcess = [rootScope];\n    while (scopesToProcess.length > 0) {\n        const scope = scopesToProcess.pop();\n        for (const childScope of scope.childScopes.values()) {\n            scopesToProcess.push(childScope);\n        }\n        extractScopeEntities(scope);\n    }\n    const templateEntities = new Map();\n    for (const [template, entities] of entityMap) {\n        templateEntities.set(template, new Set(entities.values()));\n    }\n    return templateEntities;\n}\n\n/**\n * An interface for retrieving documents by URL that the compiler uses to\n * load templates.\n *\n * This is an abstract class, rather than an interface, so that it can be used\n * as injection token.\n */\nclass ResourceLoader {\n}\n\nclass CompilerFacadeImpl {\n    constructor(jitEvaluator = new JitEvaluator()) {\n        this.jitEvaluator = jitEvaluator;\n        this.FactoryTarget = FactoryTarget$1;\n        this.ResourceLoader = ResourceLoader;\n        this.elementSchemaRegistry = new DomElementSchemaRegistry();\n    }\n    compilePipe(angularCoreEnv, sourceMapUrl, facade) {\n        const metadata = {\n            name: facade.name,\n            type: wrapReference(facade.type),\n            typeArgumentCount: 0,\n            deps: null,\n            pipeName: facade.pipeName,\n            pure: facade.pure,\n            isStandalone: facade.isStandalone,\n        };\n        const res = compilePipeFromMetadata(metadata);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compilePipeDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const meta = convertDeclarePipeFacadeToMetadata(declaration);\n        const res = compilePipeFromMetadata(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileInjectable(angularCoreEnv, sourceMapUrl, facade) {\n        const { expression, statements } = compileInjectable({\n            name: facade.name,\n            type: wrapReference(facade.type),\n            typeArgumentCount: facade.typeArgumentCount,\n            providedIn: computeProvidedIn(facade.providedIn),\n            useClass: convertToProviderExpression(facade, 'useClass'),\n            useFactory: wrapExpression(facade, 'useFactory'),\n            useValue: convertToProviderExpression(facade, 'useValue'),\n            useExisting: convertToProviderExpression(facade, 'useExisting'),\n            deps: facade.deps?.map(convertR3DependencyMetadata),\n        }, \n        /* resolveForwardRefs */ true);\n        return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n    }\n    compileInjectableDeclaration(angularCoreEnv, sourceMapUrl, facade) {\n        const { expression, statements } = compileInjectable({\n            name: facade.type.name,\n            type: wrapReference(facade.type),\n            typeArgumentCount: 0,\n            providedIn: computeProvidedIn(facade.providedIn),\n            useClass: convertToProviderExpression(facade, 'useClass'),\n            useFactory: wrapExpression(facade, 'useFactory'),\n            useValue: convertToProviderExpression(facade, 'useValue'),\n            useExisting: convertToProviderExpression(facade, 'useExisting'),\n            deps: facade.deps?.map(convertR3DeclareDependencyMetadata),\n        }, \n        /* resolveForwardRefs */ true);\n        return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n    }\n    compileInjector(angularCoreEnv, sourceMapUrl, facade) {\n        const meta = {\n            name: facade.name,\n            type: wrapReference(facade.type),\n            providers: facade.providers && facade.providers.length > 0 ?\n                new WrappedNodeExpr(facade.providers) :\n                null,\n            imports: facade.imports.map(i => new WrappedNodeExpr(i)),\n        };\n        const res = compileInjector(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileInjectorDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const meta = convertDeclareInjectorFacadeToMetadata(declaration);\n        const res = compileInjector(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileNgModule(angularCoreEnv, sourceMapUrl, facade) {\n        const meta = {\n            kind: R3NgModuleMetadataKind.Global,\n            type: wrapReference(facade.type),\n            bootstrap: facade.bootstrap.map(wrapReference),\n            declarations: facade.declarations.map(wrapReference),\n            publicDeclarationTypes: null, // only needed for types in AOT\n            imports: facade.imports.map(wrapReference),\n            includeImportTypes: true,\n            exports: facade.exports.map(wrapReference),\n            selectorScopeMode: R3SelectorScopeMode.Inline,\n            containsForwardDecls: false,\n            schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,\n            id: facade.id ? new WrappedNodeExpr(facade.id) : null,\n        };\n        const res = compileNgModule(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileNgModuleDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const expression = compileNgModuleDeclarationExpression(declaration);\n        return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileDirective(angularCoreEnv, sourceMapUrl, facade) {\n        const meta = convertDirectiveFacadeToMetadata(facade);\n        return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n    compileDirectiveDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const typeSourceSpan = this.createParseSourceSpan('Directive', declaration.type.name, sourceMapUrl);\n        const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);\n        return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n    compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n        const constantPool = new ConstantPool();\n        const bindingParser = makeBindingParser();\n        const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n    }\n    compileComponent(angularCoreEnv, sourceMapUrl, facade) {\n        // Parse the template and check for errors.\n        const { template, interpolation, deferBlocks } = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation);\n        // Compile the component metadata, including template, into an expression.\n        const meta = {\n            ...facade,\n            ...convertDirectiveFacadeToMetadata(facade),\n            selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),\n            template,\n            declarations: facade.declarations.map(convertDeclarationFacadeToMetadata),\n            declarationListEmitMode: 0 /* DeclarationListEmitMode.Direct */,\n            deferBlocks,\n            deferrableTypes: new Map(),\n            deferrableDeclToImportDecl: new Map(),\n            deferBlockDepsEmitMode: 0 /* DeferBlockDepsEmitMode.PerBlock */,\n            styles: [...facade.styles, ...template.styles],\n            encapsulation: facade.encapsulation,\n            interpolation,\n            changeDetection: facade.changeDetection ?? null,\n            animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,\n            viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) :\n                null,\n            relativeContextFilePath: '',\n            i18nUseExternalIds: true,\n        };\n        const jitExpressionSourceMap = `ng:///${facade.name}.js`;\n        return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);\n    }\n    compileComponentDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const typeSourceSpan = this.createParseSourceSpan('Component', declaration.type.name, sourceMapUrl);\n        const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);\n        return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n    compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n        const constantPool = new ConstantPool();\n        const bindingParser = makeBindingParser(meta.interpolation);\n        const res = compileComponentFromMetadata(meta, constantPool, bindingParser);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n    }\n    compileFactory(angularCoreEnv, sourceMapUrl, meta) {\n        const factoryRes = compileFactoryFunction({\n            name: meta.name,\n            type: wrapReference(meta.type),\n            typeArgumentCount: meta.typeArgumentCount,\n            deps: convertR3DependencyMetadataArray(meta.deps),\n            target: meta.target,\n        });\n        return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n    }\n    compileFactoryDeclaration(angularCoreEnv, sourceMapUrl, meta) {\n        const factoryRes = compileFactoryFunction({\n            name: meta.type.name,\n            type: wrapReference(meta.type),\n            typeArgumentCount: 0,\n            deps: Array.isArray(meta.deps) ? meta.deps.map(convertR3DeclareDependencyMetadata) :\n                meta.deps,\n            target: meta.target,\n        });\n        return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n    }\n    createParseSourceSpan(kind, typeName, sourceUrl) {\n        return r3JitTypeSourceSpan(kind, typeName, sourceUrl);\n    }\n    /**\n     * JIT compiles an expression and returns the result of executing that expression.\n     *\n     * @param def the definition which will be compiled and executed to get the value to patch\n     * @param context an object map of @angular/core symbol names to symbols which will be available\n     * in the context of the compiled expression\n     * @param sourceUrl a URL to use for the source map of the compiled expression\n     * @param preStatements a collection of statements that should be evaluated before the expression.\n     */\n    jitExpression(def, context, sourceUrl, preStatements) {\n        // The ConstantPool may contain Statements which declare variables used in the final expression.\n        // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n        // declaration of $def which is set to the expression being compiled.\n        const statements = [\n            ...preStatements,\n            new DeclareVarStmt('$def', def, undefined, StmtModifier.Exported),\n        ];\n        const res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context), /* enableSourceMaps */ true);\n        return res['$def'];\n    }\n}\nfunction convertToR3QueryMetadata(facade) {\n    return {\n        ...facade,\n        predicate: convertQueryPredicate(facade.predicate),\n        read: facade.read ? new WrappedNodeExpr(facade.read) : null,\n        static: facade.static,\n        emitDistinctChangesOnly: facade.emitDistinctChangesOnly,\n    };\n}\nfunction convertQueryDeclarationToMetadata(declaration) {\n    return {\n        propertyName: declaration.propertyName,\n        first: declaration.first ?? false,\n        predicate: convertQueryPredicate(declaration.predicate),\n        descendants: declaration.descendants ?? false,\n        read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,\n        static: declaration.static ?? false,\n        emitDistinctChangesOnly: declaration.emitDistinctChangesOnly ?? true,\n    };\n}\nfunction convertQueryPredicate(predicate) {\n    return Array.isArray(predicate) ?\n        // The predicate is an array of strings so pass it through.\n        predicate :\n        // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.\n        createMayBeForwardRefExpression(new WrappedNodeExpr(predicate), 1 /* ForwardRefHandling.Wrapped */);\n}\nfunction convertDirectiveFacadeToMetadata(facade) {\n    const inputsFromMetadata = parseInputsArray(facade.inputs || []);\n    const outputsFromMetadata = parseMappingStringArray(facade.outputs || []);\n    const propMetadata = facade.propMetadata;\n    const inputsFromType = {};\n    const outputsFromType = {};\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(ann => {\n                if (isInput(ann)) {\n                    inputsFromType[field] = {\n                        bindingPropertyName: ann.alias || field,\n                        classPropertyName: field,\n                        required: ann.required || false,\n                        // For JIT, decorators are used to declare signal inputs. That is because of\n                        // a technical limitation where it's not possible to statically reflect class\n                        // members of a directive/component at runtime before instantiating the class.\n                        isSignal: !!ann.isSignal,\n                        transformFunction: ann.transform != null ? new WrappedNodeExpr(ann.transform) : null,\n                    };\n                }\n                else if (isOutput(ann)) {\n                    outputsFromType[field] = ann.alias || field;\n                }\n            });\n        }\n    }\n    return {\n        ...facade,\n        typeArgumentCount: 0,\n        typeSourceSpan: facade.typeSourceSpan,\n        type: wrapReference(facade.type),\n        deps: null,\n        host: extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host),\n        inputs: { ...inputsFromMetadata, ...inputsFromType },\n        outputs: { ...outputsFromMetadata, ...outputsFromType },\n        queries: facade.queries.map(convertToR3QueryMetadata),\n        providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,\n        viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),\n        fullInheritance: false,\n        hostDirectives: convertHostDirectivesToMetadata(facade),\n    };\n}\nfunction convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {\n    return {\n        name: declaration.type.name,\n        type: wrapReference(declaration.type),\n        typeSourceSpan,\n        selector: declaration.selector ?? null,\n        inputs: declaration.inputs ? inputsPartialMetadataToInputMetadata(declaration.inputs) : {},\n        outputs: declaration.outputs ?? {},\n        host: convertHostDeclarationToMetadata(declaration.host),\n        queries: (declaration.queries ?? []).map(convertQueryDeclarationToMetadata),\n        viewQueries: (declaration.viewQueries ?? []).map(convertQueryDeclarationToMetadata),\n        providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) :\n            null,\n        exportAs: declaration.exportAs ?? null,\n        usesInheritance: declaration.usesInheritance ?? false,\n        lifecycle: { usesOnChanges: declaration.usesOnChanges ?? false },\n        deps: null,\n        typeArgumentCount: 0,\n        fullInheritance: false,\n        isStandalone: declaration.isStandalone ?? false,\n        isSignal: declaration.isSignal ?? false,\n        hostDirectives: convertHostDirectivesToMetadata(declaration),\n    };\n}\nfunction convertHostDeclarationToMetadata(host = {}) {\n    return {\n        attributes: convertOpaqueValuesToExpressions(host.attributes ?? {}),\n        listeners: host.listeners ?? {},\n        properties: host.properties ?? {},\n        specialAttributes: {\n            classAttr: host.classAttribute,\n            styleAttr: host.styleAttribute,\n        },\n    };\n}\nfunction convertHostDirectivesToMetadata(metadata) {\n    if (metadata.hostDirectives?.length) {\n        return metadata.hostDirectives.map(hostDirective => {\n            return typeof hostDirective === 'function' ?\n                {\n                    directive: wrapReference(hostDirective),\n                    inputs: null,\n                    outputs: null,\n                    isForwardReference: false\n                } :\n                {\n                    directive: wrapReference(hostDirective.directive),\n                    isForwardReference: false,\n                    inputs: hostDirective.inputs ? parseMappingStringArray(hostDirective.inputs) : null,\n                    outputs: hostDirective.outputs ? parseMappingStringArray(hostDirective.outputs) : null,\n                };\n        });\n    }\n    return null;\n}\nfunction convertOpaqueValuesToExpressions(obj) {\n    const result = {};\n    for (const key of Object.keys(obj)) {\n        result[key] = new WrappedNodeExpr(obj[key]);\n    }\n    return result;\n}\nfunction convertDeclareComponentFacadeToMetadata(decl, typeSourceSpan, sourceMapUrl) {\n    const { template, interpolation, deferBlocks } = parseJitTemplate(decl.template, decl.type.name, sourceMapUrl, decl.preserveWhitespaces ?? false, decl.interpolation);\n    const declarations = [];\n    if (decl.dependencies) {\n        for (const innerDep of decl.dependencies) {\n            switch (innerDep.kind) {\n                case 'directive':\n                case 'component':\n                    declarations.push(convertDirectiveDeclarationToMetadata(innerDep));\n                    break;\n                case 'pipe':\n                    declarations.push(convertPipeDeclarationToMetadata(innerDep));\n                    break;\n            }\n        }\n    }\n    else if (decl.components || decl.directives || decl.pipes) {\n        // Existing declarations on NPM may not be using the new `dependencies` merged field, and may\n        // have separate fields for dependencies instead. Unify them for JIT compilation.\n        decl.components &&\n            declarations.push(...decl.components.map(dir => convertDirectiveDeclarationToMetadata(dir, /* isComponent */ true)));\n        decl.directives &&\n            declarations.push(...decl.directives.map(dir => convertDirectiveDeclarationToMetadata(dir)));\n        decl.pipes && declarations.push(...convertPipeMapToMetadata(decl.pipes));\n    }\n    return {\n        ...convertDeclareDirectiveFacadeToMetadata(decl, typeSourceSpan),\n        template,\n        styles: decl.styles ?? [],\n        declarations,\n        viewProviders: decl.viewProviders !== undefined ? new WrappedNodeExpr(decl.viewProviders) :\n            null,\n        animations: decl.animations !== undefined ? new WrappedNodeExpr(decl.animations) : null,\n        deferBlocks,\n        deferrableTypes: new Map(),\n        deferrableDeclToImportDecl: new Map(),\n        deferBlockDepsEmitMode: 0 /* DeferBlockDepsEmitMode.PerBlock */,\n        changeDetection: decl.changeDetection ?? ChangeDetectionStrategy.Default,\n        encapsulation: decl.encapsulation ?? ViewEncapsulation.Emulated,\n        interpolation,\n        declarationListEmitMode: 2 /* DeclarationListEmitMode.ClosureResolved */,\n        relativeContextFilePath: '',\n        i18nUseExternalIds: true,\n    };\n}\nfunction convertDeclarationFacadeToMetadata(declaration) {\n    return {\n        ...declaration,\n        type: new WrappedNodeExpr(declaration.type),\n    };\n}\nfunction convertDirectiveDeclarationToMetadata(declaration, isComponent = null) {\n    return {\n        kind: R3TemplateDependencyKind.Directive,\n        isComponent: isComponent || declaration.kind === 'component',\n        selector: declaration.selector,\n        type: new WrappedNodeExpr(declaration.type),\n        inputs: declaration.inputs ?? [],\n        outputs: declaration.outputs ?? [],\n        exportAs: declaration.exportAs ?? null,\n    };\n}\nfunction convertPipeMapToMetadata(pipes) {\n    if (!pipes) {\n        return [];\n    }\n    return Object.keys(pipes).map(name => {\n        return {\n            kind: R3TemplateDependencyKind.Pipe,\n            name,\n            type: new WrappedNodeExpr(pipes[name]),\n        };\n    });\n}\nfunction convertPipeDeclarationToMetadata(pipe) {\n    return {\n        kind: R3TemplateDependencyKind.Pipe,\n        name: pipe.name,\n        type: new WrappedNodeExpr(pipe.type),\n    };\n}\nfunction parseJitTemplate(template, typeName, sourceMapUrl, preserveWhitespaces, interpolation) {\n    const interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG;\n    // Parse the template and check for errors.\n    const parsed = parseTemplate(template, sourceMapUrl, { preserveWhitespaces, interpolationConfig });\n    if (parsed.errors !== null) {\n        const errors = parsed.errors.map(err => err.toString()).join(', ');\n        throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);\n    }\n    const binder = new R3TargetBinder(new SelectorMatcher());\n    const boundTarget = binder.bind({ template: parsed.nodes });\n    return {\n        template: parsed,\n        interpolation: interpolationConfig,\n        deferBlocks: createR3DeferredMetadata(boundTarget)\n    };\n}\n/**\n * Convert the expression, if present to an `R3ProviderExpression`.\n *\n * In JIT mode we do not want the compiler to wrap the expression in a `forwardRef()` call because,\n * if it is referencing a type that has not yet been defined, it will have already been wrapped in\n * a `forwardRef()` - either by the application developer or during partial-compilation. Thus we can\n * use `ForwardRefHandling.None`.\n */\nfunction convertToProviderExpression(obj, property) {\n    if (obj.hasOwnProperty(property)) {\n        return createMayBeForwardRefExpression(new WrappedNodeExpr(obj[property]), 0 /* ForwardRefHandling.None */);\n    }\n    else {\n        return undefined;\n    }\n}\nfunction wrapExpression(obj, property) {\n    if (obj.hasOwnProperty(property)) {\n        return new WrappedNodeExpr(obj[property]);\n    }\n    else {\n        return undefined;\n    }\n}\nfunction computeProvidedIn(providedIn) {\n    const expression = typeof providedIn === 'function' ? new WrappedNodeExpr(providedIn) :\n        new LiteralExpr(providedIn ?? null);\n    // See `convertToProviderExpression()` for why this uses `ForwardRefHandling.None`.\n    return createMayBeForwardRefExpression(expression, 0 /* ForwardRefHandling.None */);\n}\nfunction convertR3DependencyMetadataArray(facades) {\n    return facades == null ? null : facades.map(convertR3DependencyMetadata);\n}\nfunction convertR3DependencyMetadata(facade) {\n    const isAttributeDep = facade.attribute != null; // both `null` and `undefined`\n    const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n    // In JIT mode, if the dep is an `@Attribute()` then we use the attribute name given in\n    // `attribute` rather than the `token`.\n    const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;\n    return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);\n}\nfunction convertR3DeclareDependencyMetadata(facade) {\n    const isAttributeDep = facade.attribute ?? false;\n    const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n    return createR3DependencyMetadata(token, isAttributeDep, facade.host ?? false, facade.optional ?? false, facade.self ?? false, facade.skipSelf ?? false);\n}\nfunction createR3DependencyMetadata(token, isAttributeDep, host, optional, self, skipSelf) {\n    // If the dep is an `@Attribute()` the `attributeNameType` ought to be the `unknown` type.\n    // But types are not available at runtime so we just use a literal `\"<unknown>\"` string as a dummy\n    // marker.\n    const attributeNameType = isAttributeDep ? literal('unknown') : null;\n    return { token, attributeNameType, host, optional, self, skipSelf };\n}\nfunction createR3DeferredMetadata(boundTarget) {\n    const deferredBlocks = boundTarget.getDeferBlocks();\n    const meta = new Map();\n    for (const block of deferredBlocks) {\n        const triggerElements = new Map();\n        resolveDeferTriggers(block, block.triggers, boundTarget, triggerElements);\n        resolveDeferTriggers(block, block.prefetchTriggers, boundTarget, triggerElements);\n        // TODO: leaving `deps` empty in JIT mode for now, to be implemented as one of the next steps.\n        meta.set(block, { deps: [], triggerElements });\n    }\n    return meta;\n}\nfunction resolveDeferTriggers(block, triggers, boundTarget, triggerElements) {\n    Object.keys(triggers).forEach(key => {\n        const trigger = triggers[key];\n        triggerElements.set(trigger, boundTarget.getDeferredTriggerTarget(block, trigger));\n    });\n}\nfunction extractHostBindings(propMetadata, sourceSpan, host) {\n    // First parse the declarations from the metadata.\n    const bindings = parseHostBindings(host || {});\n    // After that check host bindings for errors\n    const errors = verifyHostBindings(bindings, sourceSpan);\n    if (errors.length) {\n        throw new Error(errors.map((error) => error.msg).join('\\n'));\n    }\n    // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(ann => {\n                if (isHostBinding(ann)) {\n                    // Since this is a decorator, we know that the value is a class member. Always access it\n                    // through `this` so that further down the line it can't be confused for a literal value\n                    // (e.g. if there's a property called `true`).\n                    bindings.properties[ann.hostPropertyName || field] =\n                        getSafePropertyAccessString('this', field);\n                }\n                else if (isHostListener(ann)) {\n                    bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(',')})`;\n                }\n            });\n        }\n    }\n    return bindings;\n}\nfunction isHostBinding(value) {\n    return value.ngMetadataName === 'HostBinding';\n}\nfunction isHostListener(value) {\n    return value.ngMetadataName === 'HostListener';\n}\nfunction isInput(value) {\n    return value.ngMetadataName === 'Input';\n}\nfunction isOutput(value) {\n    return value.ngMetadataName === 'Output';\n}\nfunction inputsPartialMetadataToInputMetadata(inputs) {\n    return Object.keys(inputs).reduce((result, minifiedClassName) => {\n        const value = inputs[minifiedClassName];\n        // Handle legacy partial input output.\n        if (typeof value === 'string' || Array.isArray(value)) {\n            result[minifiedClassName] = parseLegacyInputPartialOutput(value);\n        }\n        else {\n            result[minifiedClassName] = {\n                bindingPropertyName: value.publicName,\n                classPropertyName: minifiedClassName,\n                transformFunction: value.transformFunction !== null ?\n                    new WrappedNodeExpr(value.transformFunction) :\n                    null,\n                required: value.isRequired,\n                isSignal: value.isSignal,\n            };\n        }\n        return result;\n    }, {});\n}\n/**\n * Parses the legacy input partial output. For more details see `partial/directive.ts`.\n * TODO(legacy-partial-output-inputs): Remove in v18.\n */\nfunction parseLegacyInputPartialOutput(value) {\n    if (typeof value === 'string') {\n        return {\n            bindingPropertyName: value,\n            classPropertyName: value,\n            transformFunction: null,\n            required: false,\n            // legacy partial output does not capture signal inputs.\n            isSignal: false,\n        };\n    }\n    return {\n        bindingPropertyName: value[0],\n        classPropertyName: value[1],\n        transformFunction: value[2] ? new WrappedNodeExpr(value[2]) : null,\n        required: false,\n        // legacy partial output does not capture signal inputs.\n        isSignal: false,\n    };\n}\nfunction parseInputsArray(values) {\n    return values.reduce((results, value) => {\n        if (typeof value === 'string') {\n            const [bindingPropertyName, classPropertyName] = parseMappingString(value);\n            results[classPropertyName] = {\n                bindingPropertyName,\n                classPropertyName,\n                required: false,\n                // Signal inputs not supported for the inputs array.\n                isSignal: false,\n                transformFunction: null,\n            };\n        }\n        else {\n            results[value.name] = {\n                bindingPropertyName: value.alias || value.name,\n                classPropertyName: value.name,\n                required: value.required || false,\n                // Signal inputs not supported for the inputs array.\n                isSignal: false,\n                transformFunction: value.transform != null ? new WrappedNodeExpr(value.transform) : null,\n            };\n        }\n        return results;\n    }, {});\n}\nfunction parseMappingStringArray(values) {\n    return values.reduce((results, value) => {\n        const [alias, fieldName] = parseMappingString(value);\n        results[fieldName] = alias;\n        return results;\n    }, {});\n}\nfunction parseMappingString(value) {\n    // Either the value is 'field' or 'field: property'. In the first case, `property` will\n    // be undefined, in which case the field name should also be used as the property name.\n    const [fieldName, bindingPropertyName] = value.split(':', 2).map(str => str.trim());\n    return [bindingPropertyName ?? fieldName, fieldName];\n}\nfunction convertDeclarePipeFacadeToMetadata(declaration) {\n    return {\n        name: declaration.type.name,\n        type: wrapReference(declaration.type),\n        typeArgumentCount: 0,\n        pipeName: declaration.name,\n        deps: null,\n        pure: declaration.pure ?? true,\n        isStandalone: declaration.isStandalone ?? false,\n    };\n}\nfunction convertDeclareInjectorFacadeToMetadata(declaration) {\n    return {\n        name: declaration.type.name,\n        type: wrapReference(declaration.type),\n        providers: declaration.providers !== undefined && declaration.providers.length > 0 ?\n            new WrappedNodeExpr(declaration.providers) :\n            null,\n        imports: declaration.imports !== undefined ?\n            declaration.imports.map(i => new WrappedNodeExpr(i)) :\n            [],\n    };\n}\nfunction publishFacade(global) {\n    const ng = global.ng || (global.ng = {});\n    ng.ɵcompilerFacade = new CompilerFacadeImpl();\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the compiler package.\n */\nconst VERSION = new Version('17.1.0');\n\nclass CompilerConfig {\n    constructor({ defaultEncapsulation = ViewEncapsulation.Emulated, preserveWhitespaces, strictInjectionParameters } = {}) {\n        this.defaultEncapsulation = defaultEncapsulation;\n        this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\n        this.strictInjectionParameters = strictInjectionParameters === true;\n    }\n}\nfunction preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting = false) {\n    return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\n}\n\nconst _I18N_ATTR = 'i18n';\nconst _I18N_ATTR_PREFIX = 'i18n-';\nconst _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nconst MEANING_SEPARATOR = '|';\nconst ID_SEPARATOR = '@@';\nlet i18nCommentsWarned = false;\n/**\n * Extract translatable messages from an html AST\n */\nfunction extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n    const visitor = new _Visitor(implicitTags, implicitAttrs);\n    return visitor.extract(nodes, interpolationConfig);\n}\nfunction mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n    const visitor = new _Visitor(implicitTags, implicitAttrs);\n    return visitor.merge(nodes, translations, interpolationConfig);\n}\nclass ExtractionResult {\n    constructor(messages, errors) {\n        this.messages = messages;\n        this.errors = errors;\n    }\n}\nvar _VisitorMode;\n(function (_VisitorMode) {\n    _VisitorMode[_VisitorMode[\"Extract\"] = 0] = \"Extract\";\n    _VisitorMode[_VisitorMode[\"Merge\"] = 1] = \"Merge\";\n})(_VisitorMode || (_VisitorMode = {}));\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * @internal\n */\nclass _Visitor {\n    constructor(_implicitTags, _implicitAttrs) {\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n    }\n    /**\n     * Extracts the messages from the tree\n     */\n    extract(nodes, interpolationConfig) {\n        this._init(_VisitorMode.Extract, interpolationConfig);\n        nodes.forEach(node => node.visit(this, null));\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ExtractionResult(this._messages, this._errors);\n    }\n    /**\n     * Returns a tree where all translatable nodes are translated\n     */\n    merge(nodes, translations, interpolationConfig) {\n        this._init(_VisitorMode.Merge, interpolationConfig);\n        this._translations = translations;\n        // Construct a single fake root element\n        const wrapper = new Element('wrapper', [], nodes, undefined, undefined, undefined);\n        const translatedNode = wrapper.visit(this, null);\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ParseTreeResult(translatedNode.children, this._errors);\n    }\n    visitExpansionCase(icuCase, context) {\n        // Parse cases for translatable html attributes\n        const expression = visitAll(this, icuCase.expression, context);\n        if (this._mode === _VisitorMode.Merge) {\n            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n        }\n    }\n    visitExpansion(icu, context) {\n        this._mayBeAddBlockChildren(icu);\n        const wasInIcu = this._inIcu;\n        if (!this._inIcu) {\n            // nested ICU messages should not be extracted but top-level translated as a whole\n            if (this._isInTranslatableSection) {\n                this._addMessage([icu]);\n            }\n            this._inIcu = true;\n        }\n        const cases = visitAll(this, icu.cases, context);\n        if (this._mode === _VisitorMode.Merge) {\n            icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n        }\n        this._inIcu = wasInIcu;\n        return icu;\n    }\n    visitComment(comment, context) {\n        const isOpening = _isOpeningComment(comment);\n        if (isOpening && this._isInTranslatableSection) {\n            this._reportError(comment, 'Could not start a block inside a translatable section');\n            return;\n        }\n        const isClosing = _isClosingComment(comment);\n        if (isClosing && !this._inI18nBlock) {\n            this._reportError(comment, 'Trying to close an unopened block');\n            return;\n        }\n        if (!this._inI18nNode && !this._inIcu) {\n            if (!this._inI18nBlock) {\n                if (isOpening) {\n                    // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n                    if (!i18nCommentsWarned && console && console.warn) {\n                        i18nCommentsWarned = true;\n                        const details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : '';\n                        // TODO(ocombe): use a log service once there is a public one available\n                        console.warn(`I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`);\n                    }\n                    this._inI18nBlock = true;\n                    this._blockStartDepth = this._depth;\n                    this._blockChildren = [];\n                    this._blockMeaningAndDesc =\n                        comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n                    this._openTranslatableSection(comment);\n                }\n            }\n            else {\n                if (isClosing) {\n                    if (this._depth == this._blockStartDepth) {\n                        this._closeTranslatableSection(comment, this._blockChildren);\n                        this._inI18nBlock = false;\n                        const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);\n                        // merge attributes in sections\n                        const nodes = this._translateMessage(comment, message);\n                        return visitAll(this, nodes);\n                    }\n                    else {\n                        this._reportError(comment, 'I18N blocks should not cross element boundaries');\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    visitText(text, context) {\n        if (this._isInTranslatableSection) {\n            this._mayBeAddBlockChildren(text);\n        }\n        return text;\n    }\n    visitElement(el, context) {\n        this._mayBeAddBlockChildren(el);\n        this._depth++;\n        const wasInI18nNode = this._inI18nNode;\n        const wasInImplicitNode = this._inImplicitNode;\n        let childNodes = [];\n        let translatedChildNodes = undefined;\n        // Extract:\n        // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n        // - ICU messages\n        const i18nAttr = _getI18nAttr(el);\n        const i18nMeta = i18nAttr ? i18nAttr.value : '';\n        const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu &&\n            !this._isInTranslatableSection;\n        const isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n        this._inImplicitNode = wasInImplicitNode || isImplicit;\n        if (!this._isInTranslatableSection && !this._inIcu) {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._inI18nNode = true;\n                const message = this._addMessage(el.children, i18nMeta);\n                translatedChildNodes = this._translateMessage(el, message);\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                const isTranslatable = i18nAttr || isTopLevelImplicit;\n                if (isTranslatable)\n                    this._openTranslatableSection(el);\n                visitAll(this, el.children);\n                if (isTranslatable)\n                    this._closeTranslatableSection(el, el.children);\n            }\n        }\n        else {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                // Descend into child nodes for extraction\n                visitAll(this, el.children);\n            }\n        }\n        if (this._mode === _VisitorMode.Merge) {\n            const visitNodes = translatedChildNodes || el.children;\n            visitNodes.forEach(child => {\n                const visited = child.visit(this, context);\n                if (visited && !this._isInTranslatableSection) {\n                    // Do not add the children from translatable sections (= i18n blocks here)\n                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n                    childNodes = childNodes.concat(visited);\n                }\n            });\n        }\n        this._visitAttributesOf(el);\n        this._depth--;\n        this._inI18nNode = wasInI18nNode;\n        this._inImplicitNode = wasInImplicitNode;\n        if (this._mode === _VisitorMode.Merge) {\n            const translatedAttrs = this._translateAttributes(el);\n            return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n        }\n        return null;\n    }\n    visitAttribute(attribute, context) {\n        throw new Error('unreachable code');\n    }\n    visitBlock(block, context) {\n        visitAll(this, block.children, context);\n    }\n    visitBlockParameter(parameter, context) { }\n    _init(mode, interpolationConfig) {\n        this._mode = mode;\n        this._inI18nBlock = false;\n        this._inI18nNode = false;\n        this._depth = 0;\n        this._inIcu = false;\n        this._msgCountAtSectionStart = undefined;\n        this._errors = [];\n        this._messages = [];\n        this._inImplicitNode = false;\n        this._createI18nMessage =\n            createI18nMessageFactory(interpolationConfig, DEFAULT_CONTAINER_BLOCKS);\n    }\n    // looks for translatable attributes\n    _visitAttributesOf(el) {\n        const explicitAttrNameToValue = {};\n        const implicitAttrNames = this._implicitAttrs[el.name] || [];\n        el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX))\n            .forEach(attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n            attr.value);\n        el.attrs.forEach(attr => {\n            if (attr.name in explicitAttrNameToValue) {\n                this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n            }\n            else if (implicitAttrNames.some(name => attr.name === name)) {\n                this._addMessage([attr]);\n            }\n        });\n    }\n    // add a translatable message\n    _addMessage(ast, msgMeta) {\n        if (ast.length == 0 ||\n            ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {\n            // Do not create empty messages\n            return null;\n        }\n        const { meaning, description, id } = _parseMessageMeta(msgMeta);\n        const message = this._createI18nMessage(ast, meaning, description, id);\n        this._messages.push(message);\n        return message;\n    }\n    // Translates the given message given the `TranslationBundle`\n    // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n    // no-op when called in extraction mode (returns [])\n    _translateMessage(el, message) {\n        if (message && this._mode === _VisitorMode.Merge) {\n            const nodes = this._translations.get(message);\n            if (nodes) {\n                return nodes;\n            }\n            this._reportError(el, `Translation unavailable for message id=\"${this._translations.digest(message)}\"`);\n        }\n        return [];\n    }\n    // translate the attributes of an element and remove i18n specific attributes\n    _translateAttributes(el) {\n        const attributes = el.attrs;\n        const i18nParsedMessageMeta = {};\n        attributes.forEach(attr => {\n            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                    _parseMessageMeta(attr.value);\n            }\n        });\n        const translatedAttributes = [];\n        attributes.forEach((attr) => {\n            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                // strip i18n specific attributes\n                return;\n            }\n            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n                const { meaning, description, id } = i18nParsedMessageMeta[attr.name];\n                const message = this._createI18nMessage([attr], meaning, description, id);\n                const nodes = this._translations.get(message);\n                if (nodes) {\n                    if (nodes.length == 0) {\n                        translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan, undefined /* keySpan */, undefined /* valueSpan */, undefined /* valueTokens */, undefined /* i18n */));\n                    }\n                    else if (nodes[0] instanceof Text) {\n                        const value = nodes[0].value;\n                        translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan, undefined /* keySpan */, undefined /* valueSpan */, undefined /* valueTokens */, undefined /* i18n */));\n                    }\n                    else {\n                        this._reportError(el, `Unexpected translation for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n                    }\n                }\n                else {\n                    this._reportError(el, `Translation unavailable for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n                }\n            }\n            else {\n                translatedAttributes.push(attr);\n            }\n        });\n        return translatedAttributes;\n    }\n    /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     */\n    _mayBeAddBlockChildren(node) {\n        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n            this._blockChildren.push(node);\n        }\n    }\n    /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     */\n    _openTranslatableSection(node) {\n        if (this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section start');\n        }\n        else {\n            this._msgCountAtSectionStart = this._messages.length;\n        }\n    }\n    /**\n     * A translatable section could be:\n     * - the content of translatable element,\n     * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n     */\n    get _isInTranslatableSection() {\n        return this._msgCountAtSectionStart !== void 0;\n    }\n    /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     */\n    _closeTranslatableSection(node, directChildren) {\n        if (!this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section end');\n            return;\n        }\n        const startIndex = this._msgCountAtSectionStart;\n        const significantChildren = directChildren.reduce((count, node) => count + (node instanceof Comment ? 0 : 1), 0);\n        if (significantChildren == 1) {\n            for (let i = this._messages.length - 1; i >= startIndex; i--) {\n                const ast = this._messages[i].nodes;\n                if (!(ast.length == 1 && ast[0] instanceof Text$2)) {\n                    this._messages.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        this._msgCountAtSectionStart = undefined;\n    }\n    _reportError(node, msg) {\n        this._errors.push(new I18nError(node.sourceSpan, msg));\n    }\n}\nfunction _isOpeningComment(n) {\n    return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));\n}\nfunction _isClosingComment(n) {\n    return !!(n instanceof Comment && n.value && n.value === '/i18n');\n}\nfunction _getI18nAttr(p) {\n    return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\n}\nfunction _parseMessageMeta(i18n) {\n    if (!i18n)\n        return { meaning: '', description: '', id: '' };\n    const idIndex = i18n.indexOf(ID_SEPARATOR);\n    const descIndex = i18n.indexOf(MEANING_SEPARATOR);\n    const [meaningAndDesc, id] = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\n    const [meaning, description] = (descIndex > -1) ?\n        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n        ['', meaningAndDesc];\n    return { meaning, description, id: id.trim() };\n}\n\nclass XmlTagDefinition {\n    constructor() {\n        this.closedByParent = false;\n        this.implicitNamespacePrefix = null;\n        this.isVoid = false;\n        this.ignoreFirstLf = false;\n        this.canSelfClose = true;\n        this.preventNamespaceInheritance = false;\n    }\n    requireExtraParent(currentParent) {\n        return false;\n    }\n    isClosedByChild(name) {\n        return false;\n    }\n    getContentType() {\n        return TagContentType.PARSABLE_DATA;\n    }\n}\nconst _TAG_DEFINITION = new XmlTagDefinition();\nfunction getXmlTagDefinition(tagName) {\n    return _TAG_DEFINITION;\n}\n\nclass XmlParser extends Parser {\n    constructor() {\n        super(getXmlTagDefinition);\n    }\n    parse(source, url, options = {}) {\n        // Blocks aren't supported in an XML context.\n        return super.parse(source, url, { ...options, tokenizeBlocks: false });\n    }\n}\n\nconst _VERSION$1 = '1.2';\nconst _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:1.2';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG$1 = 'en';\nconst _PLACEHOLDER_TAG$2 = 'x';\nconst _MARKER_TAG$1 = 'mrk';\nconst _FILE_TAG = 'file';\nconst _SOURCE_TAG$1 = 'source';\nconst _SEGMENT_SOURCE_TAG = 'seg-source';\nconst _ALT_TRANS_TAG = 'alt-trans';\nconst _TARGET_TAG$1 = 'target';\nconst _UNIT_TAG$1 = 'trans-unit';\nconst _CONTEXT_GROUP_TAG = 'context-group';\nconst _CONTEXT_TAG = 'context';\n// https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n// https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\nclass Xliff extends Serializer {\n    write(messages, locale) {\n        const visitor = new _WriteVisitor$1();\n        const transUnits = [];\n        messages.forEach(message => {\n            let contextTags = [];\n            message.sources.forEach((source) => {\n                let contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, { purpose: 'location' });\n                contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'sourcefile' }, [new Text$1(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'linenumber' }, [new Text$1(`${source.startLine}`)]), new CR(8));\n                contextTags.push(new CR(8), contextGroupTag);\n            });\n            const transUnit = new Tag(_UNIT_TAG$1, { id: message.id, datatype: 'html' });\n            transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), ...contextTags);\n            if (message.description) {\n                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$1(message.description)]));\n            }\n            if (message.meaning) {\n                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$1(message.meaning)]));\n            }\n            transUnit.children.push(new CR(6));\n            transUnits.push(new CR(6), transUnit);\n        });\n        const body = new Tag('body', {}, [...transUnits, new CR(4)]);\n        const file = new Tag('file', {\n            'source-language': locale || _DEFAULT_SOURCE_LANG$1,\n            datatype: 'plaintext',\n            original: 'ng2.template',\n        }, [new CR(4), body, new CR(2)]);\n        const xliff = new Tag('xliff', { version: _VERSION$1, xmlns: _XMLNS$1 }, [new CR(2), file, new CR()]);\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\n        ]);\n    }\n    load(content, url) {\n        // xliff to xml nodes\n        const xliffParser = new XliffParser();\n        const { locale, msgIdToHtml, errors } = xliffParser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n$2();\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const { i18nNodes, errors: e } = converter.convert(msgIdToHtml[msgId], url);\n            errors.push(...e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(`xliff parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) {\n        return digest$1(message);\n    }\n}\nclass _WriteVisitor$1 {\n    visitText(text, context) {\n        return [new Text$1(text.value)];\n    }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n        });\n        nodes.push(new Text$1(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const ctype = getCtypeForTag(ph.tag);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [new Tag(_PLACEHOLDER_TAG$2, { id: ph.startName, ctype, 'equiv-text': `<${ph.tag}/>` })];\n        }\n        const startTagPh = new Tag(_PLACEHOLDER_TAG$2, { id: ph.startName, ctype, 'equiv-text': `<${ph.tag}>` });\n        const closeTagPh = new Tag(_PLACEHOLDER_TAG$2, { id: ph.closeName, ctype, 'equiv-text': `</${ph.tag}>` });\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n    }\n    visitPlaceholder(ph, context) {\n        return [new Tag(_PLACEHOLDER_TAG$2, { id: ph.name, 'equiv-text': `{{${ph.value}}}` })];\n    }\n    visitBlockPlaceholder(ph, context) {\n        const ctype = `x-${ph.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;\n        const startTagPh = new Tag(_PLACEHOLDER_TAG$2, { id: ph.startName, ctype, 'equiv-text': `@${ph.name}` });\n        const closeTagPh = new Tag(_PLACEHOLDER_TAG$2, { id: ph.closeName, ctype, 'equiv-text': `}` });\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const equivText = `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ')}}`;\n        return [new Tag(_PLACEHOLDER_TAG$2, { id: ph.name, 'equiv-text': equivText })];\n    }\n    serialize(nodes) {\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\n// TODO(vicb): add error management (structure)\n// Extract messages as xml nodes from the xliff file\nclass XliffParser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        const xml = new XmlParser().parse(xliff, url);\n        this._errors = xml.errors;\n        visitAll(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _UNIT_TAG$1:\n                this._unitMlString = null;\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_UNIT_TAG$1}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        visitAll(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, `Message ${id} misses a translation`);\n                        }\n                    }\n                }\n                break;\n            // ignore those tags\n            case _SOURCE_TAG$1:\n            case _SEGMENT_SOURCE_TAG:\n            case _ALT_TRANS_TAG:\n                break;\n            case _TARGET_TAG$1:\n                const innerTextStart = element.startSourceSpan.end.offset;\n                const innerTextEnd = element.endSourceSpan.start.offset;\n                const content = element.startSourceSpan.start.file.content;\n                const innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _FILE_TAG:\n                const localeAttr = element.attrs.find((attr) => attr.name === 'target-language');\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                visitAll(this, element.children, null);\n                break;\n            default:\n                // TODO(vicb): assert file structure, xliff version\n                // For now only recurse on unhandled nodes\n                visitAll(this, element.children, null);\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    visitBlock(block, context) { }\n    visitBlockParameter(parameter, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n$2 {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            [].concat(...visitAll(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) {\n        return new Text$2(text.value, text.sourceSpan);\n    }\n    visitElement(el, context) {\n        if (el.name === _PLACEHOLDER_TAG$2) {\n            const nameAttr = el.attrs.find((attr) => attr.name === 'id');\n            if (nameAttr) {\n                return new Placeholder('', nameAttr.value, el.sourceSpan);\n            }\n            this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"id\" attribute`);\n            return null;\n        }\n        if (el.name === _MARKER_TAG$1) {\n            return [].concat(...visitAll(this, el.children));\n        }\n        this._addError(el, `Unexpected tag`);\n        return null;\n    }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll(this, icu.cases).forEach((c) => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: visitAll(this, icuCase.expression),\n        };\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    visitBlock(block, context) { }\n    visitBlockParameter(parameter, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\nfunction getCtypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n            return 'lb';\n        case 'img':\n            return 'image';\n        default:\n            return `x-${tag}`;\n    }\n}\n\nconst _VERSION = '2.0';\nconst _XMLNS = 'urn:oasis:names:tc:xliff:document:2.0';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG = 'en';\nconst _PLACEHOLDER_TAG$1 = 'ph';\nconst _PLACEHOLDER_SPANNING_TAG = 'pc';\nconst _MARKER_TAG = 'mrk';\nconst _XLIFF_TAG = 'xliff';\nconst _SOURCE_TAG = 'source';\nconst _TARGET_TAG = 'target';\nconst _UNIT_TAG = 'unit';\n// https://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html\nclass Xliff2 extends Serializer {\n    write(messages, locale) {\n        const visitor = new _WriteVisitor();\n        const units = [];\n        messages.forEach(message => {\n            const unit = new Tag(_UNIT_TAG, { id: message.id });\n            const notes = new Tag('notes');\n            if (message.description || message.meaning) {\n                if (message.description) {\n                    notes.children.push(new CR(8), new Tag('note', { category: 'description' }, [new Text$1(message.description)]));\n                }\n                if (message.meaning) {\n                    notes.children.push(new CR(8), new Tag('note', { category: 'meaning' }, [new Text$1(message.meaning)]));\n                }\n            }\n            message.sources.forEach((source) => {\n                notes.children.push(new CR(8), new Tag('note', { category: 'location' }, [\n                    new Text$1(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)\n                ]));\n            });\n            notes.children.push(new CR(6));\n            unit.children.push(new CR(6), notes);\n            const segment = new Tag('segment');\n            segment.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(6));\n            unit.children.push(new CR(6), segment, new CR(4));\n            units.push(new CR(4), unit);\n        });\n        const file = new Tag('file', { 'original': 'ng.template', id: 'ngi18n' }, [...units, new CR(2)]);\n        const xliff = new Tag(_XLIFF_TAG, { version: _VERSION, xmlns: _XMLNS, srcLang: locale || _DEFAULT_SOURCE_LANG }, [new CR(2), file, new CR()]);\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\n        ]);\n    }\n    load(content, url) {\n        // xliff to xml nodes\n        const xliff2Parser = new Xliff2Parser();\n        const { locale, msgIdToHtml, errors } = xliff2Parser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n$1();\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const { i18nNodes, errors: e } = converter.convert(msgIdToHtml[msgId], url);\n            errors.push(...e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(`xliff2 parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) {\n        return decimalDigest(message);\n    }\n}\nclass _WriteVisitor {\n    constructor() {\n        this._nextPlaceholderId = 0;\n    }\n    visitText(text, context) {\n        return [new Text$1(text.value)];\n    }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n        });\n        nodes.push(new Text$1(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const type = getTypeForTag(ph.tag);\n        if (ph.isVoid) {\n            const tagPh = new Tag(_PLACEHOLDER_TAG$1, {\n                id: (this._nextPlaceholderId++).toString(),\n                equiv: ph.startName,\n                type: type,\n                disp: `<${ph.tag}/>`,\n            });\n            return [tagPh];\n        }\n        const tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\n            id: (this._nextPlaceholderId++).toString(),\n            equivStart: ph.startName,\n            equivEnd: ph.closeName,\n            type: type,\n            dispStart: `<${ph.tag}>`,\n            dispEnd: `</${ph.tag}>`,\n        });\n        const nodes = [].concat(...ph.children.map(node => node.visit(this)));\n        if (nodes.length) {\n            nodes.forEach((node) => tagPc.children.push(node));\n        }\n        else {\n            tagPc.children.push(new Text$1(''));\n        }\n        return [tagPc];\n    }\n    visitPlaceholder(ph, context) {\n        const idStr = (this._nextPlaceholderId++).toString();\n        return [new Tag(_PLACEHOLDER_TAG$1, {\n                id: idStr,\n                equiv: ph.name,\n                disp: `{{${ph.value}}}`,\n            })];\n    }\n    visitBlockPlaceholder(ph, context) {\n        const tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\n            id: (this._nextPlaceholderId++).toString(),\n            equivStart: ph.startName,\n            equivEnd: ph.closeName,\n            type: 'other',\n            dispStart: `@${ph.name}`,\n            dispEnd: `}`,\n        });\n        const nodes = [].concat(...ph.children.map(node => node.visit(this)));\n        if (nodes.length) {\n            nodes.forEach((node) => tagPc.children.push(node));\n        }\n        else {\n            tagPc.children.push(new Text$1(''));\n        }\n        return [tagPc];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const cases = Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ');\n        const idStr = (this._nextPlaceholderId++).toString();\n        return [new Tag(_PLACEHOLDER_TAG$1, { id: idStr, equiv: ph.name, disp: `{${ph.value.expression}, ${ph.value.type}, ${cases}}` })];\n    }\n    serialize(nodes) {\n        this._nextPlaceholderId = 0;\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\n// Extract messages as xml nodes from the xliff file\nclass Xliff2Parser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        const xml = new XmlParser().parse(xliff, url);\n        this._errors = xml.errors;\n        visitAll(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _UNIT_TAG:\n                this._unitMlString = null;\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_UNIT_TAG}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        visitAll(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, `Message ${id} misses a translation`);\n                        }\n                    }\n                }\n                break;\n            case _SOURCE_TAG:\n                // ignore source message\n                break;\n            case _TARGET_TAG:\n                const innerTextStart = element.startSourceSpan.end.offset;\n                const innerTextEnd = element.endSourceSpan.start.offset;\n                const content = element.startSourceSpan.start.file.content;\n                const innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _XLIFF_TAG:\n                const localeAttr = element.attrs.find((attr) => attr.name === 'trgLang');\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                const versionAttr = element.attrs.find((attr) => attr.name === 'version');\n                if (versionAttr) {\n                    const version = versionAttr.value;\n                    if (version !== '2.0') {\n                        this._addError(element, `The XLIFF file version ${version} is not compatible with XLIFF 2.0 serializer`);\n                    }\n                    else {\n                        visitAll(this, element.children, null);\n                    }\n                }\n                break;\n            default:\n                visitAll(this, element.children, null);\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    visitBlock(block, context) { }\n    visitBlockParameter(parameter, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n$1 {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            [].concat(...visitAll(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) {\n        return new Text$2(text.value, text.sourceSpan);\n    }\n    visitElement(el, context) {\n        switch (el.name) {\n            case _PLACEHOLDER_TAG$1:\n                const nameAttr = el.attrs.find((attr) => attr.name === 'equiv');\n                if (nameAttr) {\n                    return [new Placeholder('', nameAttr.value, el.sourceSpan)];\n                }\n                this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equiv\" attribute`);\n                break;\n            case _PLACEHOLDER_SPANNING_TAG:\n                const startAttr = el.attrs.find((attr) => attr.name === 'equivStart');\n                const endAttr = el.attrs.find((attr) => attr.name === 'equivEnd');\n                if (!startAttr) {\n                    this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equivStart\" attribute`);\n                }\n                else if (!endAttr) {\n                    this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equivEnd\" attribute`);\n                }\n                else {\n                    const startId = startAttr.value;\n                    const endId = endAttr.value;\n                    const nodes = [];\n                    return nodes.concat(new Placeholder('', startId, el.sourceSpan), ...el.children.map(node => node.visit(this, null)), new Placeholder('', endId, el.sourceSpan));\n                }\n                break;\n            case _MARKER_TAG:\n                return [].concat(...visitAll(this, el.children));\n            default:\n                this._addError(el, `Unexpected tag`);\n        }\n        return null;\n    }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll(this, icu.cases).forEach((c) => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: [].concat(...visitAll(this, icuCase.expression)),\n        };\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    visitBlock(block, context) { }\n    visitBlockParameter(parameter, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\nfunction getTypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n        case 'b':\n        case 'i':\n        case 'u':\n            return 'fmt';\n        case 'img':\n            return 'image';\n        case 'a':\n            return 'link';\n        default:\n            return 'other';\n    }\n}\n\nconst _TRANSLATIONS_TAG = 'translationbundle';\nconst _TRANSLATION_TAG = 'translation';\nconst _PLACEHOLDER_TAG = 'ph';\nclass Xtb extends Serializer {\n    write(messages, locale) {\n        throw new Error('Unsupported');\n    }\n    load(content, url) {\n        // xtb to xml nodes\n        const xtbParser = new XtbParser();\n        const { locale, msgIdToHtml, errors } = xtbParser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n();\n        // Because we should be able to load xtb files that rely on features not supported by angular,\n        // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n        // converted\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const valueFn = function () {\n                const { i18nNodes, errors } = converter.convert(msgIdToHtml[msgId], url);\n                if (errors.length) {\n                    throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n                }\n                return i18nNodes;\n            };\n            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n        });\n        if (errors.length) {\n            throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) {\n        return digest(message);\n    }\n    createNameMapper(message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    }\n}\nfunction createLazyProperty(messages, id, valueFn) {\n    Object.defineProperty(messages, id, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            const value = valueFn();\n            Object.defineProperty(messages, id, { enumerable: true, value });\n            return value;\n        },\n        set: _ => {\n            throw new Error('Could not overwrite an XTB translation');\n        },\n    });\n}\n// Extract messages as xml nodes from the xtb file\nclass XtbParser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xtb, url) {\n        this._bundleDepth = 0;\n        this._msgIdToHtml = {};\n        // We can not parse the ICU messages at this point as some messages might not originate\n        // from Angular that could not be lex'd.\n        const xml = new XmlParser().parse(xtb, url);\n        this._errors = xml.errors;\n        visitAll(this, xml.rootNodes);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _TRANSLATIONS_TAG:\n                this._bundleDepth++;\n                if (this._bundleDepth > 1) {\n                    this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);\n                }\n                const langAttr = element.attrs.find((attr) => attr.name === 'lang');\n                if (langAttr) {\n                    this._locale = langAttr.value;\n                }\n                visitAll(this, element.children, null);\n                this._bundleDepth--;\n                break;\n            case _TRANSLATION_TAG:\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_TRANSLATION_TAG}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        const innerTextStart = element.startSourceSpan.end.offset;\n                        const innerTextEnd = element.endSourceSpan.start.offset;\n                        const content = element.startSourceSpan.start.file.content;\n                        const innerText = content.slice(innerTextStart, innerTextEnd);\n                        this._msgIdToHtml[id] = innerText;\n                    }\n                }\n                break;\n            default:\n                this._addError(element, 'Unexpected tag');\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    visitBlock(block, context) { }\n    visitBlockParameter(block, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xtb syntax) to i18n nodes\nclass XmlToI18n {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            visitAll(this, xmlIcu.rootNodes);\n        return {\n            i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) {\n        return new Text$2(text.value, text.sourceSpan);\n    }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll(this, icu.cases).forEach(c => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: visitAll(this, icuCase.expression),\n        };\n    }\n    visitElement(el, context) {\n        if (el.name === _PLACEHOLDER_TAG) {\n            const nameAttr = el.attrs.find((attr) => attr.name === 'name');\n            if (nameAttr) {\n                return new Placeholder('', nameAttr.value, el.sourceSpan);\n            }\n            this._addError(el, `<${_PLACEHOLDER_TAG}> misses the \"name\" attribute`);\n        }\n        else {\n            this._addError(el, `Unexpected tag`);\n        }\n        return null;\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    visitBlock(block, context) { }\n    visitBlockParameter(block, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n\n/**\n * A container for translated messages\n */\nclass TranslationBundle {\n    constructor(_i18nNodesByMsgId = {}, locale, digest, mapperFactory, missingTranslationStrategy = MissingTranslationStrategy.Warning, console) {\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this.digest = digest;\n        this.mapperFactory = mapperFactory;\n        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);\n    }\n    // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n    static load(content, url, serializer, missingTranslationStrategy, console) {\n        const { locale, i18nNodesByMsgId } = serializer.load(content, url);\n        const digestFn = (m) => serializer.digest(m);\n        const mapperFactory = (m) => serializer.createNameMapper(m);\n        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n    }\n    // Returns the translation as HTML nodes from the given source message.\n    get(srcMsg) {\n        const html = this._i18nToHtml.convert(srcMsg);\n        if (html.errors.length) {\n            throw new Error(html.errors.join('\\n'));\n        }\n        return html.nodes;\n    }\n    has(srcMsg) {\n        return this.digest(srcMsg) in this._i18nNodesByMsgId;\n    }\n}\nclass I18nToHtmlVisitor {\n    constructor(_i18nNodesByMsgId = {}, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this._locale = _locale;\n        this._digest = _digest;\n        this._mapperFactory = _mapperFactory;\n        this._missingTranslationStrategy = _missingTranslationStrategy;\n        this._console = _console;\n        this._errors = [];\n        this._contextStack = [];\n    }\n    convert(srcMsg) {\n        this._contextStack.length = 0;\n        this._errors.length = 0;\n        // i18n to text\n        const text = this._convertToText(srcMsg);\n        // text to html\n        const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n        const html = new HtmlParser().parse(text, url, { tokenizeExpansionForms: true });\n        return {\n            nodes: html.rootNodes,\n            errors: [...this._errors, ...html.errors],\n        };\n    }\n    visitText(text, context) {\n        // `convert()` uses an `HtmlParser` to return `html.Node`s\n        // we should then make sure that any special characters are escaped\n        return escapeXml(text.value);\n    }\n    visitContainer(container, context) {\n        return container.children.map(n => n.visit(this)).join('');\n    }\n    visitIcu(icu, context) {\n        const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n        // TODO(vicb): Once all format switch to using expression placeholders\n        // we should throw when the placeholder is not in the source message\n        const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n            this._srcMsg.placeholders[icu.expression].text :\n            icu.expression;\n        return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n    }\n    visitPlaceholder(ph, context) {\n        const phName = this._mapper(ph.name);\n        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n            return this._srcMsg.placeholders[phName].text;\n        }\n        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n        }\n        this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n        return '';\n    }\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    visitTagPlaceholder(ph, context) {\n        const tag = `${ph.tag}`;\n        const attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\n        if (ph.isVoid) {\n            return `<${tag} ${attrs}/>`;\n        }\n        const children = ph.children.map((c) => c.visit(this)).join('');\n        return `<${tag} ${attrs}>${children}</${tag}>`;\n    }\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    visitIcuPlaceholder(ph, context) {\n        // An ICU placeholder references the source message to be serialized\n        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n    }\n    visitBlockPlaceholder(ph, context) {\n        const params = ph.parameters.length === 0 ? '' : ` (${ph.parameters.join('; ')})`;\n        const children = ph.children.map((c) => c.visit(this)).join('');\n        return `@${ph.name}${params} {${children}}`;\n    }\n    /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     */\n    _convertToText(srcMsg) {\n        const id = this._digest(srcMsg);\n        const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n        let nodes;\n        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });\n        this._srcMsg = srcMsg;\n        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n            // When there is a translation use its nodes as the source\n            // And create a mapper to convert serialized placeholder names to internal names\n            nodes = this._i18nNodesByMsgId[id];\n            this._mapper = (name) => mapper ? mapper.toInternalName(name) : name;\n        }\n        else {\n            // When no translation has been found\n            // - report an error / a warning / nothing,\n            // - use the nodes from the original message\n            // - placeholders are already internal and need no mapper\n            if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n                const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n                this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\n            }\n            else if (this._console &&\n                this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n                const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n                this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\n            }\n            nodes = srcMsg.nodes;\n            this._mapper = (name) => name;\n        }\n        const text = nodes.map(node => node.visit(this)).join('');\n        const context = this._contextStack.pop();\n        this._srcMsg = context.msg;\n        this._mapper = context.mapper;\n        return text;\n    }\n    _addError(el, msg) {\n        this._errors.push(new I18nError(el.sourceSpan, msg));\n    }\n}\n\nclass I18NHtmlParser {\n    constructor(_htmlParser, translations, translationsFormat, missingTranslation = MissingTranslationStrategy.Warning, console) {\n        this._htmlParser = _htmlParser;\n        if (translations) {\n            const serializer = createSerializer(translationsFormat);\n            this._translationBundle =\n                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n        }\n        else {\n            this._translationBundle =\n                new TranslationBundle({}, null, digest$1, undefined, missingTranslation, console);\n        }\n    }\n    parse(source, url, options = {}) {\n        const interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n        const parseResult = this._htmlParser.parse(source, url, { interpolationConfig, ...options });\n        if (parseResult.errors.length) {\n            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n        }\n        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n    }\n}\nfunction createSerializer(format) {\n    format = (format || 'xlf').toLowerCase();\n    switch (format) {\n        case 'xmb':\n            return new Xmb();\n        case 'xtb':\n            return new Xtb();\n        case 'xliff2':\n        case 'xlf2':\n            return new Xliff2();\n        case 'xliff':\n        case 'xlf':\n        default:\n            return new Xliff();\n    }\n}\n\n/**\n * A container for message extracted from the templates.\n */\nclass MessageBundle {\n    constructor(_htmlParser, _implicitTags, _implicitAttrs, _locale = null) {\n        this._htmlParser = _htmlParser;\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n        this._locale = _locale;\n        this._messages = [];\n    }\n    updateFromTemplate(html, url, interpolationConfig) {\n        const htmlParserResult = this._htmlParser.parse(html, url, { tokenizeExpansionForms: true, interpolationConfig });\n        if (htmlParserResult.errors.length) {\n            return htmlParserResult.errors;\n        }\n        const i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n        if (i18nParserResult.errors.length) {\n            return i18nParserResult.errors;\n        }\n        this._messages.push(...i18nParserResult.messages);\n        return [];\n    }\n    // Return the message in the internal format\n    // The public (serialized) format might be different, see the `write` method.\n    getMessages() {\n        return this._messages;\n    }\n    write(serializer, filterSources) {\n        const messages = {};\n        const mapperVisitor = new MapPlaceholderNames();\n        // Deduplicate messages based on their ID\n        this._messages.forEach(message => {\n            const id = serializer.digest(message);\n            if (!messages.hasOwnProperty(id)) {\n                messages[id] = message;\n            }\n            else {\n                messages[id].sources.push(...message.sources);\n            }\n        });\n        // Transform placeholder names using the serializer mapping\n        const msgList = Object.keys(messages).map(id => {\n            const mapper = serializer.createNameMapper(messages[id]);\n            const src = messages[id];\n            const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n            let transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);\n            transformedMessage.sources = src.sources;\n            if (filterSources) {\n                transformedMessage.sources.forEach((source) => source.filePath = filterSources(source.filePath));\n            }\n            return transformedMessage;\n        });\n        return serializer.write(msgList, this._locale);\n    }\n}\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends CloneVisitor {\n    convert(nodes, mapper) {\n        return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n    }\n    visitTagPlaceholder(ph, mapper) {\n        const startName = mapper.toPublicName(ph.startName);\n        const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n        const children = ph.children.map(n => n.visit(this, mapper));\n        return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    }\n    visitBlockPlaceholder(ph, mapper) {\n        const startName = mapper.toPublicName(ph.startName);\n        const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n        const children = ph.children.map(n => n.visit(this, mapper));\n        return new BlockPlaceholder(ph.name, ph.parameters, startName, closeName, children, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    }\n    visitPlaceholder(ph, mapper) {\n        return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    }\n    visitIcuPlaceholder(ph, mapper) {\n        return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    }\n}\n\nvar FactoryTarget;\n(function (FactoryTarget) {\n    FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n    FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n    FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n    FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n    FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\n\nfunction compileClassMetadata(metadata) {\n    // Generate an ngDevMode guarded call to setClassMetadata with the class identifier and its\n    // metadata.\n    const fnCall = importExpr(Identifiers.setClassMetadata).callFn([\n        metadata.type,\n        metadata.decorators,\n        metadata.ctorParameters ?? literal(null),\n        metadata.propDecorators ?? literal(null),\n    ]);\n    const iife = arrowFn([], [devOnlyGuardedExpression(fnCall).toStmt()]);\n    return iife.callFn([]);\n}\n/**\n * Wraps the `setClassMetadata` function with extra logic that dynamically\n * loads dependencies from `@defer` blocks.\n *\n * Generates a call like this:\n * ```\n * setClassMetadataAsync(type, () => [\n *   import('./cmp-a').then(m => m.CmpA);\n *   import('./cmp-b').then(m => m.CmpB);\n * ], (CmpA, CmpB) => {\n *   setClassMetadata(type, decorators, ctorParameters, propParameters);\n * });\n * ```\n *\n * Similar to the `setClassMetadata` call, it's wrapped into the `ngDevMode`\n * check to tree-shake away this code in production mode.\n */\nfunction compileComponentClassMetadata(metadata, deferrableTypes) {\n    if (deferrableTypes === null || deferrableTypes.size === 0) {\n        // If there are no deferrable symbols - just generate a regular `setClassMetadata` call.\n        return compileClassMetadata(metadata);\n    }\n    const dynamicImports = [];\n    const importedSymbols = [];\n    for (const [symbolName, importPath] of deferrableTypes) {\n        // e.g. `(m) => m.CmpA`\n        const innerFn = arrowFn([new FnParam('m', DYNAMIC_TYPE)], variable('m').prop(symbolName));\n        // e.g. `import('./cmp-a').then(...)`\n        const importExpr = (new DynamicImportExpr(importPath)).prop('then').callFn([innerFn]);\n        dynamicImports.push(importExpr);\n        importedSymbols.push(new FnParam(symbolName, DYNAMIC_TYPE));\n    }\n    // e.g. `() => [ ... ];`\n    const dependencyLoadingFn = arrowFn([], literalArr(dynamicImports));\n    // e.g. `setClassMetadata(...)`\n    const setClassMetadataCall = importExpr(Identifiers.setClassMetadata).callFn([\n        metadata.type,\n        metadata.decorators,\n        metadata.ctorParameters ?? literal(null),\n        metadata.propDecorators ?? literal(null),\n    ]);\n    // e.g. `(CmpA) => setClassMetadata(...)`\n    const setClassMetaWrapper = arrowFn(importedSymbols, [setClassMetadataCall.toStmt()]);\n    // Final `setClassMetadataAsync()` call with all arguments\n    const setClassMetaAsync = importExpr(Identifiers.setClassMetadataAsync).callFn([\n        metadata.type, dependencyLoadingFn, setClassMetaWrapper\n    ]);\n    // Generate an ngDevMode guarded call to `setClassMetadataAsync` with\n    // the class identifier and its metadata, so that this call can be tree-shaken.\n    const iife = arrowFn([], [devOnlyGuardedExpression(setClassMetaAsync).toStmt()]);\n    return iife.callFn([]);\n}\n\n/**\n * Generate an ngDevMode guarded call to setClassDebugInfo with the debug info about the class\n * (e.g., the file name in which the class is defined)\n */\nfunction compileClassDebugInfo(debugInfo) {\n    const debugInfoObject = {\n        className: debugInfo.className,\n    };\n    // Include file path and line number only if the file relative path is calculated successfully.\n    if (debugInfo.filePath) {\n        debugInfoObject.filePath = debugInfo.filePath;\n        debugInfoObject.lineNumber = debugInfo.lineNumber;\n    }\n    // Include forbidOrphanRendering only if it's set to true (to reduce generated code)\n    if (debugInfo.forbidOrphanRendering) {\n        debugInfoObject.forbidOrphanRendering = literal(true);\n    }\n    const fnCall = importExpr(Identifiers.setClassDebugInfo).callFn([\n        debugInfo.type,\n        mapLiteral(debugInfoObject),\n    ]);\n    const iife = arrowFn([], [devOnlyGuardedExpression(fnCall).toStmt()]);\n    return iife.callFn([]);\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$5 = '12.0.0';\nfunction compileDeclareClassMetadata(metadata) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$5));\n    definitionMap.set('version', literal('17.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers.core));\n    definitionMap.set('type', metadata.type);\n    definitionMap.set('decorators', metadata.decorators);\n    definitionMap.set('ctorParameters', metadata.ctorParameters);\n    definitionMap.set('propDecorators', metadata.propDecorators);\n    return importExpr(Identifiers.declareClassMetadata).callFn([definitionMap.toLiteralMap()]);\n}\n\n/**\n * Creates an array literal expression from the given array, mapping all values to an expression\n * using the provided mapping function. If the array is empty or null, then null is returned.\n *\n * @param values The array to transfer into literal array expression.\n * @param mapper The logic to use for creating an expression for the array's values.\n * @returns An array literal expression representing `values`, or null if `values` is empty or\n * is itself null.\n */\nfunction toOptionalLiteralArray(values, mapper) {\n    if (values === null || values.length === 0) {\n        return null;\n    }\n    return literalArr(values.map(value => mapper(value)));\n}\n/**\n * Creates an object literal expression from the given object, mapping all values to an expression\n * using the provided mapping function. If the object has no keys, then null is returned.\n *\n * @param object The object to transfer into an object literal expression.\n * @param mapper The logic to use for creating an expression for the object's values.\n * @returns An object literal expression representing `object`, or null if `object` does not have\n * any keys.\n */\nfunction toOptionalLiteralMap(object, mapper) {\n    const entries = Object.keys(object).map(key => {\n        const value = object[key];\n        return { key, value: mapper(value), quoted: true };\n    });\n    if (entries.length > 0) {\n        return literalMap(entries);\n    }\n    else {\n        return null;\n    }\n}\nfunction compileDependencies(deps) {\n    if (deps === 'invalid') {\n        // The `deps` can be set to the string \"invalid\"  by the `unwrapConstructorDependencies()`\n        // function, which tries to convert `ConstructorDeps` into `R3DependencyMetadata[]`.\n        return literal('invalid');\n    }\n    else if (deps === null) {\n        return literal(null);\n    }\n    else {\n        return literalArr(deps.map(compileDependency));\n    }\n}\nfunction compileDependency(dep) {\n    const depMeta = new DefinitionMap();\n    depMeta.set('token', dep.token);\n    if (dep.attributeNameType !== null) {\n        depMeta.set('attribute', literal(true));\n    }\n    if (dep.host) {\n        depMeta.set('host', literal(true));\n    }\n    if (dep.optional) {\n        depMeta.set('optional', literal(true));\n    }\n    if (dep.self) {\n        depMeta.set('self', literal(true));\n    }\n    if (dep.skipSelf) {\n        depMeta.set('skipSelf', literal(true));\n    }\n    return depMeta.toLiteralMap();\n}\n\n/**\n * Compile a directive declaration defined by the `R3DirectiveMetadata`.\n */\nfunction compileDeclareDirectiveFromMetadata(meta) {\n    const definitionMap = createDirectiveDefinitionMap(meta);\n    const expression = importExpr(Identifiers.declareDirective).callFn([definitionMap.toLiteralMap()]);\n    const type = createDirectiveType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing\n * this logic for components, as they extend the directive metadata.\n */\nfunction createDirectiveDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    const minVersion = getMinimumVersionForPartialOutput(meta);\n    definitionMap.set('minVersion', literal(minVersion));\n    definitionMap.set('version', literal('17.1.0'));\n    // e.g. `type: MyDirective`\n    definitionMap.set('type', meta.type.value);\n    if (meta.isStandalone) {\n        definitionMap.set('isStandalone', literal(meta.isStandalone));\n    }\n    if (meta.isSignal) {\n        definitionMap.set('isSignal', literal(meta.isSignal));\n    }\n    // e.g. `selector: 'some-dir'`\n    if (meta.selector !== null) {\n        definitionMap.set('selector', literal(meta.selector));\n    }\n    definitionMap.set('inputs', needsNewInputPartialOutput(meta) ? createInputsPartialMetadata(meta.inputs) :\n        legacyInputsPartialMetadata(meta.inputs));\n    definitionMap.set('outputs', conditionallyCreateDirectiveBindingLiteral(meta.outputs));\n    definitionMap.set('host', compileHostMetadata(meta.host));\n    definitionMap.set('providers', meta.providers);\n    if (meta.queries.length > 0) {\n        definitionMap.set('queries', literalArr(meta.queries.map(compileQuery)));\n    }\n    if (meta.viewQueries.length > 0) {\n        definitionMap.set('viewQueries', literalArr(meta.viewQueries.map(compileQuery)));\n    }\n    if (meta.exportAs !== null) {\n        definitionMap.set('exportAs', asLiteral(meta.exportAs));\n    }\n    if (meta.usesInheritance) {\n        definitionMap.set('usesInheritance', literal(true));\n    }\n    if (meta.lifecycle.usesOnChanges) {\n        definitionMap.set('usesOnChanges', literal(true));\n    }\n    if (meta.hostDirectives?.length) {\n        definitionMap.set('hostDirectives', createHostDirectives(meta.hostDirectives));\n    }\n    definitionMap.set('ngImport', importExpr(Identifiers.core));\n    return definitionMap;\n}\n/**\n * Determines the minimum linker version for the partial output\n * generated for this directive.\n *\n * Every time we make a breaking change to the declaration interface or partial-linker\n * behavior, we must update the minimum versions to prevent old partial-linkers from\n * incorrectly processing the declaration.\n *\n * NOTE: Do not include any prerelease in these versions as they are ignored.\n */\nfunction getMinimumVersionForPartialOutput(meta) {\n    // We are starting with the oldest minimum version that can work for common\n    // directive partial compilation output. As we discover usages of new features\n    // that require a newer partial output emit, we bump the `minVersion`. Our goal\n    // is to keep libraries as much compatible with older linker versions as possible.\n    let minVersion = '14.0.0';\n    // Note: in order to allow consuming Angular libraries that have been compiled with 16.1+ in\n    // Angular 16.0, we only force a minimum version of 16.1 if input transform feature as introduced\n    // in 16.1 is actually used.\n    const hasDecoratorTransformFunctions = Object.values(meta.inputs).some(input => input.transformFunction !== null);\n    if (hasDecoratorTransformFunctions) {\n        minVersion = '16.1.0';\n    }\n    // If there are input flags and we need the new emit, use the actual minimum version,\n    // where this was introduced. i.e. in 17.1.0\n    // TODO(legacy-partial-output-inputs): Remove in v18.\n    if (needsNewInputPartialOutput(meta)) {\n        minVersion = '17.1.0';\n    }\n    return minVersion;\n}\n/**\n * Gets whether the given directive needs the new input partial output structure\n * that can hold additional metadata like `isRequired`, `isSignal` etc.\n */\nfunction needsNewInputPartialOutput(meta) {\n    return Object.values(meta.inputs).some(input => input.isSignal);\n}\n/**\n * Compiles the metadata of a single query into its partial declaration form as declared\n * by `R3DeclareQueryMetadata`.\n */\nfunction compileQuery(query) {\n    const meta = new DefinitionMap();\n    meta.set('propertyName', literal(query.propertyName));\n    if (query.first) {\n        meta.set('first', literal(true));\n    }\n    meta.set('predicate', Array.isArray(query.predicate) ? asLiteral(query.predicate) :\n        convertFromMaybeForwardRefExpression(query.predicate));\n    if (!query.emitDistinctChangesOnly) {\n        // `emitDistinctChangesOnly` is special because we expect it to be `true`.\n        // Therefore we explicitly emit the field, and explicitly place it only when it's `false`.\n        meta.set('emitDistinctChangesOnly', literal(false));\n    }\n    else {\n        // The linker will assume that an absent `emitDistinctChangesOnly` flag is by default `true`.\n    }\n    if (query.descendants) {\n        meta.set('descendants', literal(true));\n    }\n    meta.set('read', query.read);\n    if (query.static) {\n        meta.set('static', literal(true));\n    }\n    return meta.toLiteralMap();\n}\n/**\n * Compiles the host metadata into its partial declaration form as declared\n * in `R3DeclareDirectiveMetadata['host']`\n */\nfunction compileHostMetadata(meta) {\n    const hostMetadata = new DefinitionMap();\n    hostMetadata.set('attributes', toOptionalLiteralMap(meta.attributes, expression => expression));\n    hostMetadata.set('listeners', toOptionalLiteralMap(meta.listeners, literal));\n    hostMetadata.set('properties', toOptionalLiteralMap(meta.properties, literal));\n    if (meta.specialAttributes.styleAttr) {\n        hostMetadata.set('styleAttribute', literal(meta.specialAttributes.styleAttr));\n    }\n    if (meta.specialAttributes.classAttr) {\n        hostMetadata.set('classAttribute', literal(meta.specialAttributes.classAttr));\n    }\n    if (hostMetadata.values.length > 0) {\n        return hostMetadata.toLiteralMap();\n    }\n    else {\n        return null;\n    }\n}\nfunction createHostDirectives(hostDirectives) {\n    const expressions = hostDirectives.map(current => {\n        const keys = [{\n                key: 'directive',\n                value: current.isForwardReference ? generateForwardRef(current.directive.type) :\n                    current.directive.type,\n                quoted: false\n            }];\n        const inputsLiteral = current.inputs ? createHostDirectivesMappingArray(current.inputs) : null;\n        const outputsLiteral = current.outputs ? createHostDirectivesMappingArray(current.outputs) : null;\n        if (inputsLiteral) {\n            keys.push({ key: 'inputs', value: inputsLiteral, quoted: false });\n        }\n        if (outputsLiteral) {\n            keys.push({ key: 'outputs', value: outputsLiteral, quoted: false });\n        }\n        return literalMap(keys);\n    });\n    // If there's a forward reference, we generate a `function() { return [{directive: HostDir}] }`,\n    // otherwise we can save some bytes by using a plain array, e.g. `[{directive: HostDir}]`.\n    return literalArr(expressions);\n}\n/**\n * Generates partial output metadata for inputs of a directive.\n *\n * The generated structure is expected to match `R3DeclareDirectiveFacade['inputs']`.\n */\nfunction createInputsPartialMetadata(inputs) {\n    const keys = Object.getOwnPropertyNames(inputs);\n    if (keys.length === 0) {\n        return null;\n    }\n    return literalMap(keys.map(declaredName => {\n        const value = inputs[declaredName];\n        return {\n            key: declaredName,\n            // put quotes around keys that contain potentially unsafe characters\n            quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(declaredName),\n            value: literalMap([\n                { key: 'classPropertyName', quoted: false, value: asLiteral(value.classPropertyName) },\n                { key: 'publicName', quoted: false, value: asLiteral(value.bindingPropertyName) },\n                { key: 'isSignal', quoted: false, value: asLiteral(value.isSignal) },\n                { key: 'isRequired', quoted: false, value: asLiteral(value.required) },\n                { key: 'transformFunction', quoted: false, value: value.transformFunction ?? NULL_EXPR },\n            ])\n        };\n    }));\n}\n/**\n * Pre v18 legacy partial output for inputs.\n *\n * Previously, inputs did not capture metadata like `isSignal` in the partial compilation output.\n * To enable capturing such metadata, we restructured how input metadata is communicated in the\n * partial output. This would make libraries incompatible with older Angular FW versions where the\n * linker would not know how to handle this new \"format\". For this reason, if we know this metadata\n * does not need to be captured- we fall back to the old format. This is what this function\n * generates.\n *\n * See:\n * https://github.com/angular/angular/blob/d4b423690210872b5c32a322a6090beda30b05a3/packages/core/src/compiler/compiler_facade_interface.ts#L197-L199\n */\nfunction legacyInputsPartialMetadata(inputs) {\n    // TODO(legacy-partial-output-inputs): Remove function in v18.\n    const keys = Object.getOwnPropertyNames(inputs);\n    if (keys.length === 0) {\n        return null;\n    }\n    return literalMap(keys.map(declaredName => {\n        const value = inputs[declaredName];\n        const publicName = value.bindingPropertyName;\n        const differentDeclaringName = publicName !== declaredName;\n        let result;\n        if (differentDeclaringName || value.transformFunction !== null) {\n            const values = [asLiteral(publicName), asLiteral(declaredName)];\n            if (value.transformFunction !== null) {\n                values.push(value.transformFunction);\n            }\n            result = literalArr(values);\n        }\n        else {\n            result = asLiteral(publicName);\n        }\n        return {\n            key: declaredName,\n            // put quotes around keys that contain potentially unsafe characters\n            quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(declaredName),\n            value: result,\n        };\n    }));\n}\n\n/**\n * Compile a component declaration defined by the `R3ComponentMetadata`.\n */\nfunction compileDeclareComponentFromMetadata(meta, template, additionalTemplateInfo) {\n    const definitionMap = createComponentDefinitionMap(meta, template, additionalTemplateInfo);\n    const expression = importExpr(Identifiers.declareComponent).callFn([definitionMap.toLiteralMap()]);\n    const type = createComponentType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for a component into a `DefinitionMap`.\n */\nfunction createComponentDefinitionMap(meta, template, templateInfo) {\n    const definitionMap = createDirectiveDefinitionMap(meta);\n    const blockVisitor = new BlockPresenceVisitor();\n    visitAll$1(blockVisitor, template.nodes);\n    definitionMap.set('template', getTemplateExpression(template, templateInfo));\n    if (templateInfo.isInline) {\n        definitionMap.set('isInline', literal(true));\n    }\n    // Set the minVersion to 17.0.0 if the component is using at least one block in its template.\n    // We don't do this for templates without blocks, in order to preserve backwards compatibility.\n    if (blockVisitor.hasBlocks) {\n        definitionMap.set('minVersion', literal('17.0.0'));\n    }\n    definitionMap.set('styles', toOptionalLiteralArray(meta.styles, literal));\n    definitionMap.set('dependencies', compileUsedDependenciesMetadata(meta));\n    definitionMap.set('viewProviders', meta.viewProviders);\n    definitionMap.set('animations', meta.animations);\n    if (meta.changeDetection !== null) {\n        if (typeof meta.changeDetection === 'object') {\n            throw new Error('Impossible state! Change detection flag is not resolved!');\n        }\n        definitionMap.set('changeDetection', importExpr(Identifiers.ChangeDetectionStrategy)\n            .prop(ChangeDetectionStrategy[meta.changeDetection]));\n    }\n    if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n        definitionMap.set('encapsulation', importExpr(Identifiers.ViewEncapsulation).prop(ViewEncapsulation[meta.encapsulation]));\n    }\n    if (meta.interpolation !== DEFAULT_INTERPOLATION_CONFIG) {\n        definitionMap.set('interpolation', literalArr([literal(meta.interpolation.start), literal(meta.interpolation.end)]));\n    }\n    if (template.preserveWhitespaces === true) {\n        definitionMap.set('preserveWhitespaces', literal(true));\n    }\n    return definitionMap;\n}\nfunction getTemplateExpression(template, templateInfo) {\n    // If the template has been defined using a direct literal, we use that expression directly\n    // without any modifications. This is ensures proper source mapping from the partially\n    // compiled code to the source file declaring the template. Note that this does not capture\n    // template literals referenced indirectly through an identifier.\n    if (templateInfo.inlineTemplateLiteralExpression !== null) {\n        return templateInfo.inlineTemplateLiteralExpression;\n    }\n    // If the template is defined inline but not through a literal, the template has been resolved\n    // through static interpretation. We create a literal but cannot provide any source span. Note\n    // that we cannot use the expression defining the template because the linker expects the template\n    // to be defined as a literal in the declaration.\n    if (templateInfo.isInline) {\n        return literal(templateInfo.content, null, null);\n    }\n    // The template is external so we must synthesize an expression node with\n    // the appropriate source-span.\n    const contents = templateInfo.content;\n    const file = new ParseSourceFile(contents, templateInfo.sourceUrl);\n    const start = new ParseLocation(file, 0, 0, 0);\n    const end = computeEndLocation(file, contents);\n    const span = new ParseSourceSpan(start, end);\n    return literal(contents, null, span);\n}\nfunction computeEndLocation(file, contents) {\n    const length = contents.length;\n    let lineStart = 0;\n    let lastLineStart = 0;\n    let line = 0;\n    do {\n        lineStart = contents.indexOf('\\n', lastLineStart);\n        if (lineStart !== -1) {\n            lastLineStart = lineStart + 1;\n            line++;\n        }\n    } while (lineStart !== -1);\n    return new ParseLocation(file, length, line, length - lastLineStart);\n}\nfunction compileUsedDependenciesMetadata(meta) {\n    const wrapType = meta.declarationListEmitMode !== 0 /* DeclarationListEmitMode.Direct */ ?\n        generateForwardRef :\n        (expr) => expr;\n    if (meta.declarationListEmitMode === 3 /* DeclarationListEmitMode.RuntimeResolved */) {\n        throw new Error(`Unsupported emit mode`);\n    }\n    return toOptionalLiteralArray(meta.declarations, decl => {\n        switch (decl.kind) {\n            case R3TemplateDependencyKind.Directive:\n                const dirMeta = new DefinitionMap();\n                dirMeta.set('kind', literal(decl.isComponent ? 'component' : 'directive'));\n                dirMeta.set('type', wrapType(decl.type));\n                dirMeta.set('selector', literal(decl.selector));\n                dirMeta.set('inputs', toOptionalLiteralArray(decl.inputs, literal));\n                dirMeta.set('outputs', toOptionalLiteralArray(decl.outputs, literal));\n                dirMeta.set('exportAs', toOptionalLiteralArray(decl.exportAs, literal));\n                return dirMeta.toLiteralMap();\n            case R3TemplateDependencyKind.Pipe:\n                const pipeMeta = new DefinitionMap();\n                pipeMeta.set('kind', literal('pipe'));\n                pipeMeta.set('type', wrapType(decl.type));\n                pipeMeta.set('name', literal(decl.name));\n                return pipeMeta.toLiteralMap();\n            case R3TemplateDependencyKind.NgModule:\n                const ngModuleMeta = new DefinitionMap();\n                ngModuleMeta.set('kind', literal('ngmodule'));\n                ngModuleMeta.set('type', wrapType(decl.type));\n                return ngModuleMeta.toLiteralMap();\n        }\n    });\n}\nclass BlockPresenceVisitor extends RecursiveVisitor$1 {\n    constructor() {\n        super(...arguments);\n        this.hasBlocks = false;\n    }\n    visitDeferredBlock() {\n        this.hasBlocks = true;\n    }\n    visitDeferredBlockPlaceholder() {\n        this.hasBlocks = true;\n    }\n    visitDeferredBlockLoading() {\n        this.hasBlocks = true;\n    }\n    visitDeferredBlockError() {\n        this.hasBlocks = true;\n    }\n    visitIfBlock() {\n        this.hasBlocks = true;\n    }\n    visitIfBlockBranch() {\n        this.hasBlocks = true;\n    }\n    visitForLoopBlock() {\n        this.hasBlocks = true;\n    }\n    visitForLoopBlockEmpty() {\n        this.hasBlocks = true;\n    }\n    visitSwitchBlock() {\n        this.hasBlocks = true;\n    }\n    visitSwitchBlockCase() {\n        this.hasBlocks = true;\n    }\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$4 = '12.0.0';\nfunction compileDeclareFactoryFunction(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$4));\n    definitionMap.set('version', literal('17.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers.core));\n    definitionMap.set('type', meta.type.value);\n    definitionMap.set('deps', compileDependencies(meta.deps));\n    definitionMap.set('target', importExpr(Identifiers.FactoryTarget).prop(FactoryTarget$1[meta.target]));\n    return {\n        expression: importExpr(Identifiers.declareFactory).callFn([definitionMap.toLiteralMap()]),\n        statements: [],\n        type: createFactoryType(meta),\n    };\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$3 = '12.0.0';\n/**\n * Compile a Injectable declaration defined by the `R3InjectableMetadata`.\n */\nfunction compileDeclareInjectableFromMetadata(meta) {\n    const definitionMap = createInjectableDefinitionMap(meta);\n    const expression = importExpr(Identifiers.declareInjectable).callFn([definitionMap.toLiteralMap()]);\n    const type = createInjectableType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for a Injectable into a `DefinitionMap`.\n */\nfunction createInjectableDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$3));\n    definitionMap.set('version', literal('17.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers.core));\n    definitionMap.set('type', meta.type.value);\n    // Only generate providedIn property if it has a non-null value\n    if (meta.providedIn !== undefined) {\n        const providedIn = convertFromMaybeForwardRefExpression(meta.providedIn);\n        if (providedIn.value !== null) {\n            definitionMap.set('providedIn', providedIn);\n        }\n    }\n    if (meta.useClass !== undefined) {\n        definitionMap.set('useClass', convertFromMaybeForwardRefExpression(meta.useClass));\n    }\n    if (meta.useExisting !== undefined) {\n        definitionMap.set('useExisting', convertFromMaybeForwardRefExpression(meta.useExisting));\n    }\n    if (meta.useValue !== undefined) {\n        definitionMap.set('useValue', convertFromMaybeForwardRefExpression(meta.useValue));\n    }\n    // Factories do not contain `ForwardRef`s since any types are already wrapped in a function call\n    // so the types will not be eagerly evaluated. Therefore we do not need to process this expression\n    // with `convertFromProviderExpression()`.\n    if (meta.useFactory !== undefined) {\n        definitionMap.set('useFactory', meta.useFactory);\n    }\n    if (meta.deps !== undefined) {\n        definitionMap.set('deps', literalArr(meta.deps.map(compileDependency)));\n    }\n    return definitionMap;\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$2 = '12.0.0';\nfunction compileDeclareInjectorFromMetadata(meta) {\n    const definitionMap = createInjectorDefinitionMap(meta);\n    const expression = importExpr(Identifiers.declareInjector).callFn([definitionMap.toLiteralMap()]);\n    const type = createInjectorType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for an Injector into a `DefinitionMap`.\n */\nfunction createInjectorDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$2));\n    definitionMap.set('version', literal('17.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers.core));\n    definitionMap.set('type', meta.type.value);\n    definitionMap.set('providers', meta.providers);\n    if (meta.imports.length > 0) {\n        definitionMap.set('imports', literalArr(meta.imports));\n    }\n    return definitionMap;\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$1 = '14.0.0';\nfunction compileDeclareNgModuleFromMetadata(meta) {\n    const definitionMap = createNgModuleDefinitionMap(meta);\n    const expression = importExpr(Identifiers.declareNgModule).callFn([definitionMap.toLiteralMap()]);\n    const type = createNgModuleType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for an NgModule into a `DefinitionMap`.\n */\nfunction createNgModuleDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    if (meta.kind === R3NgModuleMetadataKind.Local) {\n        throw new Error('Invalid path! Local compilation mode should not get into the partial compilation path');\n    }\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$1));\n    definitionMap.set('version', literal('17.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers.core));\n    definitionMap.set('type', meta.type.value);\n    // We only generate the keys in the metadata if the arrays contain values.\n    // We must wrap the arrays inside a function if any of the values are a forward reference to a\n    // not-yet-declared class. This is to support JIT execution of the `ɵɵngDeclareNgModule()` call.\n    // In the linker these wrappers are stripped and then reapplied for the `ɵɵdefineNgModule()` call.\n    if (meta.bootstrap.length > 0) {\n        definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));\n    }\n    if (meta.declarations.length > 0) {\n        definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n    }\n    if (meta.imports.length > 0) {\n        definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n    }\n    if (meta.exports.length > 0) {\n        definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n    }\n    if (meta.schemas !== null && meta.schemas.length > 0) {\n        definitionMap.set('schemas', literalArr(meta.schemas.map(ref => ref.value)));\n    }\n    if (meta.id !== null) {\n        definitionMap.set('id', meta.id);\n    }\n    return definitionMap;\n}\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION = '14.0.0';\n/**\n * Compile a Pipe declaration defined by the `R3PipeMetadata`.\n */\nfunction compileDeclarePipeFromMetadata(meta) {\n    const definitionMap = createPipeDefinitionMap(meta);\n    const expression = importExpr(Identifiers.declarePipe).callFn([definitionMap.toLiteralMap()]);\n    const type = createPipeType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for a Pipe into a `DefinitionMap`.\n */\nfunction createPipeDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION));\n    definitionMap.set('version', literal('17.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers.core));\n    // e.g. `type: MyPipe`\n    definitionMap.set('type', meta.type.value);\n    if (meta.isStandalone) {\n        definitionMap.set('isStandalone', literal(meta.isStandalone));\n    }\n    // e.g. `name: \"myPipe\"`\n    definitionMap.set('name', literal(meta.pipeName));\n    if (meta.pure === false) {\n        // e.g. `pure: false`\n        definitionMap.set('pure', literal(meta.pure));\n    }\n    return definitionMap;\n}\n\n//////////////////////////////////////\n// This file only reexports content of the `src` folder. Keep it that way.\n// This function call has a global side effects and publishes the compiler into global namespace for\n// the late binding of the Compiler to the @angular/core for jit compilation.\npublishFacade(_global);\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n// This file is not used to build this module. It is only used during editing\n\nexport { AST, ASTWithName, ASTWithSource, AbsoluteSourceSpan, ArrayType, ArrowFunctionExpr, AstMemoryEfficientTransformer, AstTransformer, Attribute, Binary, BinaryOperator, BinaryOperatorExpr, BindingPipe, Block, BlockParameter, BoundElementProperty, BuiltinType, BuiltinTypeName, CUSTOM_ELEMENTS_SCHEMA, Call, Chain, ChangeDetectionStrategy, CommaExpr, Comment, CompilerConfig, Conditional, ConditionalExpr, ConstantPool, CssSelector, DEFAULT_INTERPOLATION_CONFIG, DYNAMIC_TYPE, DeclareFunctionStmt, DeclareVarStmt, DomElementSchemaRegistry, DynamicImportExpr, EOF, Element, ElementSchemaRegistry, EmitterVisitorContext, EmptyExpr$1 as EmptyExpr, Expansion, ExpansionCase, Expression, ExpressionBinding, ExpressionStatement, ExpressionType, ExternalExpr, ExternalReference, FactoryTarget$1 as FactoryTarget, FunctionExpr, HtmlParser, HtmlTagDefinition, I18NHtmlParser, IfStmt, ImplicitReceiver, InstantiateExpr, Interpolation$1 as Interpolation, InterpolationConfig, InvokeFunctionExpr, JSDocComment, JitEvaluator, KeyedRead, KeyedWrite, LeadingComment, Lexer, LiteralArray, LiteralArrayExpr, LiteralExpr, LiteralMap, LiteralMapExpr, LiteralPrimitive, LocalizedString, MapType, MessageBundle, NONE_TYPE, NO_ERRORS_SCHEMA, NodeWithI18n, NonNullAssert, NotExpr, ParseError, ParseErrorLevel, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseSpan, ParseTreeResult, ParsedEvent, ParsedProperty, ParsedPropertyType, ParsedVariable, Parser$1 as Parser, ParserError, PrefixNot, PropertyRead, PropertyWrite, R3BoundTarget, Identifiers as R3Identifiers, R3NgModuleMetadataKind, R3SelectorScopeMode, R3TargetBinder, R3TemplateDependencyKind, ReadKeyExpr, ReadPropExpr, ReadVarExpr, RecursiveAstVisitor, RecursiveVisitor, ResourceLoader, ReturnStatement, STRING_TYPE, SafeCall, SafeKeyedRead, SafePropertyRead, SelectorContext, SelectorListContext, SelectorMatcher, Serializer, SplitInterpolation, Statement, StmtModifier, TagContentType, TaggedTemplateExpr, TemplateBindingParseResult, TemplateLiteral, TemplateLiteralElement, Text, ThisReceiver, BoundAttribute as TmplAstBoundAttribute, BoundDeferredTrigger as TmplAstBoundDeferredTrigger, BoundEvent as TmplAstBoundEvent, BoundText as TmplAstBoundText, Content as TmplAstContent, DeferredBlock as TmplAstDeferredBlock, DeferredBlockError as TmplAstDeferredBlockError, DeferredBlockLoading as TmplAstDeferredBlockLoading, DeferredBlockPlaceholder as TmplAstDeferredBlockPlaceholder, DeferredTrigger as TmplAstDeferredTrigger, Element$1 as TmplAstElement, ForLoopBlock as TmplAstForLoopBlock, ForLoopBlockEmpty as TmplAstForLoopBlockEmpty, HoverDeferredTrigger as TmplAstHoverDeferredTrigger, Icu$1 as TmplAstIcu, IdleDeferredTrigger as TmplAstIdleDeferredTrigger, IfBlock as TmplAstIfBlock, IfBlockBranch as TmplAstIfBlockBranch, ImmediateDeferredTrigger as TmplAstImmediateDeferredTrigger, InteractionDeferredTrigger as TmplAstInteractionDeferredTrigger, RecursiveVisitor$1 as TmplAstRecursiveVisitor, Reference as TmplAstReference, SwitchBlock as TmplAstSwitchBlock, SwitchBlockCase as TmplAstSwitchBlockCase, Template as TmplAstTemplate, Text$3 as TmplAstText, TextAttribute as TmplAstTextAttribute, TimerDeferredTrigger as TmplAstTimerDeferredTrigger, UnknownBlock as TmplAstUnknownBlock, Variable as TmplAstVariable, ViewportDeferredTrigger as TmplAstViewportDeferredTrigger, Token, TokenType, TransplantedType, TreeError, Type, TypeModifier, TypeofExpr, Unary, UnaryOperator, UnaryOperatorExpr, VERSION, VariableBinding, Version, ViewEncapsulation, WrappedNodeExpr, WriteKeyExpr, WritePropExpr, WriteVarExpr, Xliff, Xliff2, Xmb, XmlParser, Xtb, _ParseAST, compileClassDebugInfo, compileClassMetadata, compileComponentClassMetadata, compileComponentFromMetadata, compileDeclareClassMetadata, compileDeclareComponentFromMetadata, compileDeclareDirectiveFromMetadata, compileDeclareFactoryFunction, compileDeclareInjectableFromMetadata, compileDeclareInjectorFromMetadata, compileDeclareNgModuleFromMetadata, compileDeclarePipeFromMetadata, compileDirectiveFromMetadata, compileFactoryFunction, compileInjectable, compileInjector, compileNgModule, compilePipeFromMetadata, computeMsgId, core, createCssSelectorFromNode, createInjectableType, createMayBeForwardRefExpression, devOnlyGuardedExpression, emitDistinctChangesOnlyDefaultValue, encapsulateStyle, getHtmlTagDefinition, getNsPrefix, getSafePropertyAccessString, identifierName, isIdentifier, isNgContainer, isNgContent, isNgTemplate, jsDocComment, leadingComment, literal, literalMap, makeBindingParser, mergeNsAndName, output_ast as outputAst, parseHostBindings, parseTemplate, preserveWhitespacesDefault, publishFacade, r3JitTypeSourceSpan, sanitizeIdentifier, splitNsName, verifyHostBindings, visitAll };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}